// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Elasticsearch represents an Elasticsearch resource in a Kubernetes cluster.
type ElasticsearchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta   `pulumi:"metadata"`
	Spec     *ElasticsearchSpec   `pulumi:"spec"`
	Status   *ElasticsearchStatus `pulumi:"status"`
}

// ElasticsearchTypeInput is an input type that accepts ElasticsearchTypeArgs and ElasticsearchTypeOutput values.
// You can construct a concrete instance of `ElasticsearchTypeInput` via:
//
//	ElasticsearchTypeArgs{...}
type ElasticsearchTypeInput interface {
	pulumi.Input

	ToElasticsearchTypeOutput() ElasticsearchTypeOutput
	ToElasticsearchTypeOutputWithContext(context.Context) ElasticsearchTypeOutput
}

// Elasticsearch represents an Elasticsearch resource in a Kubernetes cluster.
type ElasticsearchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput   `pulumi:"metadata"`
	Spec     ElasticsearchSpecPtrInput   `pulumi:"spec"`
	Status   ElasticsearchStatusPtrInput `pulumi:"status"`
}

func (ElasticsearchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchType)(nil)).Elem()
}

func (i ElasticsearchTypeArgs) ToElasticsearchTypeOutput() ElasticsearchTypeOutput {
	return i.ToElasticsearchTypeOutputWithContext(context.Background())
}

func (i ElasticsearchTypeArgs) ToElasticsearchTypeOutputWithContext(ctx context.Context) ElasticsearchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchTypeOutput)
}

// ElasticsearchTypeArrayInput is an input type that accepts ElasticsearchTypeArray and ElasticsearchTypeArrayOutput values.
// You can construct a concrete instance of `ElasticsearchTypeArrayInput` via:
//
//	ElasticsearchTypeArray{ ElasticsearchTypeArgs{...} }
type ElasticsearchTypeArrayInput interface {
	pulumi.Input

	ToElasticsearchTypeArrayOutput() ElasticsearchTypeArrayOutput
	ToElasticsearchTypeArrayOutputWithContext(context.Context) ElasticsearchTypeArrayOutput
}

type ElasticsearchTypeArray []ElasticsearchTypeInput

func (ElasticsearchTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchType)(nil)).Elem()
}

func (i ElasticsearchTypeArray) ToElasticsearchTypeArrayOutput() ElasticsearchTypeArrayOutput {
	return i.ToElasticsearchTypeArrayOutputWithContext(context.Background())
}

func (i ElasticsearchTypeArray) ToElasticsearchTypeArrayOutputWithContext(ctx context.Context) ElasticsearchTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchTypeArrayOutput)
}

// Elasticsearch represents an Elasticsearch resource in a Kubernetes cluster.
type ElasticsearchTypeOutput struct{ *pulumi.OutputState }

func (ElasticsearchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchType)(nil)).Elem()
}

func (o ElasticsearchTypeOutput) ToElasticsearchTypeOutput() ElasticsearchTypeOutput {
	return o
}

func (o ElasticsearchTypeOutput) ToElasticsearchTypeOutputWithContext(ctx context.Context) ElasticsearchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ElasticsearchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ElasticsearchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ElasticsearchTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ElasticsearchType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o ElasticsearchTypeOutput) Spec() ElasticsearchSpecPtrOutput {
	return o.ApplyT(func(v ElasticsearchType) *ElasticsearchSpec { return v.Spec }).(ElasticsearchSpecPtrOutput)
}

func (o ElasticsearchTypeOutput) Status() ElasticsearchStatusPtrOutput {
	return o.ApplyT(func(v ElasticsearchType) *ElasticsearchStatus { return v.Status }).(ElasticsearchStatusPtrOutput)
}

type ElasticsearchTypeArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchType)(nil)).Elem()
}

func (o ElasticsearchTypeArrayOutput) ToElasticsearchTypeArrayOutput() ElasticsearchTypeArrayOutput {
	return o
}

func (o ElasticsearchTypeArrayOutput) ToElasticsearchTypeArrayOutputWithContext(ctx context.Context) ElasticsearchTypeArrayOutput {
	return o
}

func (o ElasticsearchTypeArrayOutput) Index(i pulumi.IntInput) ElasticsearchTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchType {
		return vs[0].([]ElasticsearchType)[vs[1].(int)]
	}).(ElasticsearchTypeOutput)
}

// ElasticsearchList is a list of Elasticsearch
type ElasticsearchListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of elasticsearches. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ElasticsearchType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ElasticsearchListTypeInput is an input type that accepts ElasticsearchListTypeArgs and ElasticsearchListTypeOutput values.
// You can construct a concrete instance of `ElasticsearchListTypeInput` via:
//
//	ElasticsearchListTypeArgs{...}
type ElasticsearchListTypeInput interface {
	pulumi.Input

	ToElasticsearchListTypeOutput() ElasticsearchListTypeOutput
	ToElasticsearchListTypeOutputWithContext(context.Context) ElasticsearchListTypeOutput
}

// ElasticsearchList is a list of Elasticsearch
type ElasticsearchListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of elasticsearches. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ElasticsearchTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ElasticsearchListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchListType)(nil)).Elem()
}

func (i ElasticsearchListTypeArgs) ToElasticsearchListTypeOutput() ElasticsearchListTypeOutput {
	return i.ToElasticsearchListTypeOutputWithContext(context.Background())
}

func (i ElasticsearchListTypeArgs) ToElasticsearchListTypeOutputWithContext(ctx context.Context) ElasticsearchListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchListTypeOutput)
}

// ElasticsearchList is a list of Elasticsearch
type ElasticsearchListTypeOutput struct{ *pulumi.OutputState }

func (ElasticsearchListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchListType)(nil)).Elem()
}

func (o ElasticsearchListTypeOutput) ToElasticsearchListTypeOutput() ElasticsearchListTypeOutput {
	return o
}

func (o ElasticsearchListTypeOutput) ToElasticsearchListTypeOutputWithContext(ctx context.Context) ElasticsearchListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ElasticsearchListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of elasticsearches. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ElasticsearchListTypeOutput) Items() ElasticsearchTypeArrayOutput {
	return o.ApplyT(func(v ElasticsearchListType) []ElasticsearchType { return v.Items }).(ElasticsearchTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ElasticsearchListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ElasticsearchListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ElasticsearchListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Elasticsearch represents an Elasticsearch resource in a Kubernetes cluster.
type ElasticsearchPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch   `pulumi:"metadata"`
	Spec     *ElasticsearchSpecPatch   `pulumi:"spec"`
	Status   *ElasticsearchStatusPatch `pulumi:"status"`
}

// ElasticsearchPatchTypeInput is an input type that accepts ElasticsearchPatchTypeArgs and ElasticsearchPatchTypeOutput values.
// You can construct a concrete instance of `ElasticsearchPatchTypeInput` via:
//
//	ElasticsearchPatchTypeArgs{...}
type ElasticsearchPatchTypeInput interface {
	pulumi.Input

	ToElasticsearchPatchTypeOutput() ElasticsearchPatchTypeOutput
	ToElasticsearchPatchTypeOutputWithContext(context.Context) ElasticsearchPatchTypeOutput
}

// Elasticsearch represents an Elasticsearch resource in a Kubernetes cluster.
type ElasticsearchPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput   `pulumi:"metadata"`
	Spec     ElasticsearchSpecPatchPtrInput   `pulumi:"spec"`
	Status   ElasticsearchStatusPatchPtrInput `pulumi:"status"`
}

func (ElasticsearchPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchPatchType)(nil)).Elem()
}

func (i ElasticsearchPatchTypeArgs) ToElasticsearchPatchTypeOutput() ElasticsearchPatchTypeOutput {
	return i.ToElasticsearchPatchTypeOutputWithContext(context.Background())
}

func (i ElasticsearchPatchTypeArgs) ToElasticsearchPatchTypeOutputWithContext(ctx context.Context) ElasticsearchPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchPatchTypeOutput)
}

// Elasticsearch represents an Elasticsearch resource in a Kubernetes cluster.
type ElasticsearchPatchTypeOutput struct{ *pulumi.OutputState }

func (ElasticsearchPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchPatchType)(nil)).Elem()
}

func (o ElasticsearchPatchTypeOutput) ToElasticsearchPatchTypeOutput() ElasticsearchPatchTypeOutput {
	return o
}

func (o ElasticsearchPatchTypeOutput) ToElasticsearchPatchTypeOutputWithContext(ctx context.Context) ElasticsearchPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ElasticsearchPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ElasticsearchPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ElasticsearchPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ElasticsearchPatchTypeOutput) Spec() ElasticsearchSpecPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchPatchType) *ElasticsearchSpecPatch { return v.Spec }).(ElasticsearchSpecPatchPtrOutput)
}

func (o ElasticsearchPatchTypeOutput) Status() ElasticsearchStatusPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchPatchType) *ElasticsearchStatusPatch { return v.Status }).(ElasticsearchStatusPatchPtrOutput)
}

// ElasticsearchSpec holds the specification of an Elasticsearch cluster.
type ElasticsearchSpec struct {
	Auth *ElasticsearchSpecAuth `pulumi:"auth"`
	Http *ElasticsearchSpecHttp `pulumi:"http"`
	// Image is the Elasticsearch Docker image to deploy.
	Image      *string                      `pulumi:"image"`
	Monitoring *ElasticsearchSpecMonitoring `pulumi:"monitoring"`
	// NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
	NodeSets            []ElasticsearchSpecNodeSets           `pulumi:"nodeSets"`
	PodDisruptionBudget *ElasticsearchSpecPodDisruptionBudget `pulumi:"podDisruptionBudget"`
	// RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
	RemoteClusters []ElasticsearchSpecRemoteClusters `pulumi:"remoteClusters"`
	// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying StatefulSets.
	RevisionHistoryLimit *int `pulumi:"revisionHistoryLimit"`
	// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
	SecureSettings []ElasticsearchSpecSecureSettings `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. a remote Elasticsearch cluster) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName *string                          `pulumi:"serviceAccountName"`
	Transport          *ElasticsearchSpecTransport      `pulumi:"transport"`
	UpdateStrategy     *ElasticsearchSpecUpdateStrategy `pulumi:"updateStrategy"`
	// Version of Elasticsearch.
	Version *string `pulumi:"version"`
	// VolumeClaimDeletePolicy sets the policy for handling deletion of PersistentVolumeClaims for all NodeSets.
	// Possible values are DeleteOnScaledownOnly and DeleteOnScaledownAndClusterDeletion. Defaults to DeleteOnScaledownAndClusterDeletion.
	VolumeClaimDeletePolicy *string `pulumi:"volumeClaimDeletePolicy"`
}

// ElasticsearchSpecInput is an input type that accepts ElasticsearchSpecArgs and ElasticsearchSpecOutput values.
// You can construct a concrete instance of `ElasticsearchSpecInput` via:
//
//	ElasticsearchSpecArgs{...}
type ElasticsearchSpecInput interface {
	pulumi.Input

	ToElasticsearchSpecOutput() ElasticsearchSpecOutput
	ToElasticsearchSpecOutputWithContext(context.Context) ElasticsearchSpecOutput
}

// ElasticsearchSpec holds the specification of an Elasticsearch cluster.
type ElasticsearchSpecArgs struct {
	Auth ElasticsearchSpecAuthPtrInput `pulumi:"auth"`
	Http ElasticsearchSpecHttpPtrInput `pulumi:"http"`
	// Image is the Elasticsearch Docker image to deploy.
	Image      pulumi.StringPtrInput               `pulumi:"image"`
	Monitoring ElasticsearchSpecMonitoringPtrInput `pulumi:"monitoring"`
	// NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
	NodeSets            ElasticsearchSpecNodeSetsArrayInput          `pulumi:"nodeSets"`
	PodDisruptionBudget ElasticsearchSpecPodDisruptionBudgetPtrInput `pulumi:"podDisruptionBudget"`
	// RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
	RemoteClusters ElasticsearchSpecRemoteClustersArrayInput `pulumi:"remoteClusters"`
	// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying StatefulSets.
	RevisionHistoryLimit pulumi.IntPtrInput `pulumi:"revisionHistoryLimit"`
	// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
	SecureSettings ElasticsearchSpecSecureSettingsArrayInput `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. a remote Elasticsearch cluster) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName pulumi.StringPtrInput                   `pulumi:"serviceAccountName"`
	Transport          ElasticsearchSpecTransportPtrInput      `pulumi:"transport"`
	UpdateStrategy     ElasticsearchSpecUpdateStrategyPtrInput `pulumi:"updateStrategy"`
	// Version of Elasticsearch.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// VolumeClaimDeletePolicy sets the policy for handling deletion of PersistentVolumeClaims for all NodeSets.
	// Possible values are DeleteOnScaledownOnly and DeleteOnScaledownAndClusterDeletion. Defaults to DeleteOnScaledownAndClusterDeletion.
	VolumeClaimDeletePolicy pulumi.StringPtrInput `pulumi:"volumeClaimDeletePolicy"`
}

func (ElasticsearchSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpec)(nil)).Elem()
}

func (i ElasticsearchSpecArgs) ToElasticsearchSpecOutput() ElasticsearchSpecOutput {
	return i.ToElasticsearchSpecOutputWithContext(context.Background())
}

func (i ElasticsearchSpecArgs) ToElasticsearchSpecOutputWithContext(ctx context.Context) ElasticsearchSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecOutput)
}

func (i ElasticsearchSpecArgs) ToElasticsearchSpecPtrOutput() ElasticsearchSpecPtrOutput {
	return i.ToElasticsearchSpecPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecArgs) ToElasticsearchSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecOutput).ToElasticsearchSpecPtrOutputWithContext(ctx)
}

// ElasticsearchSpecPtrInput is an input type that accepts ElasticsearchSpecArgs, ElasticsearchSpecPtr and ElasticsearchSpecPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPtrInput` via:
//
//	        ElasticsearchSpecArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecPtrOutput() ElasticsearchSpecPtrOutput
	ToElasticsearchSpecPtrOutputWithContext(context.Context) ElasticsearchSpecPtrOutput
}

type elasticsearchSpecPtrType ElasticsearchSpecArgs

func ElasticsearchSpecPtr(v *ElasticsearchSpecArgs) ElasticsearchSpecPtrInput {
	return (*elasticsearchSpecPtrType)(v)
}

func (*elasticsearchSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpec)(nil)).Elem()
}

func (i *elasticsearchSpecPtrType) ToElasticsearchSpecPtrOutput() ElasticsearchSpecPtrOutput {
	return i.ToElasticsearchSpecPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecPtrType) ToElasticsearchSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPtrOutput)
}

// ElasticsearchSpec holds the specification of an Elasticsearch cluster.
type ElasticsearchSpecOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpec)(nil)).Elem()
}

func (o ElasticsearchSpecOutput) ToElasticsearchSpecOutput() ElasticsearchSpecOutput {
	return o
}

func (o ElasticsearchSpecOutput) ToElasticsearchSpecOutputWithContext(ctx context.Context) ElasticsearchSpecOutput {
	return o
}

func (o ElasticsearchSpecOutput) ToElasticsearchSpecPtrOutput() ElasticsearchSpecPtrOutput {
	return o.ToElasticsearchSpecPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecOutput) ToElasticsearchSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpec) *ElasticsearchSpec {
		return &v
	}).(ElasticsearchSpecPtrOutput)
}

func (o ElasticsearchSpecOutput) Auth() ElasticsearchSpecAuthPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *ElasticsearchSpecAuth { return v.Auth }).(ElasticsearchSpecAuthPtrOutput)
}

func (o ElasticsearchSpecOutput) Http() ElasticsearchSpecHttpPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *ElasticsearchSpecHttp { return v.Http }).(ElasticsearchSpecHttpPtrOutput)
}

// Image is the Elasticsearch Docker image to deploy.
func (o ElasticsearchSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecOutput) Monitoring() ElasticsearchSpecMonitoringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *ElasticsearchSpecMonitoring { return v.Monitoring }).(ElasticsearchSpecMonitoringPtrOutput)
}

// NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
func (o ElasticsearchSpecOutput) NodeSets() ElasticsearchSpecNodeSetsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpec) []ElasticsearchSpecNodeSets { return v.NodeSets }).(ElasticsearchSpecNodeSetsArrayOutput)
}

func (o ElasticsearchSpecOutput) PodDisruptionBudget() ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *ElasticsearchSpecPodDisruptionBudget { return v.PodDisruptionBudget }).(ElasticsearchSpecPodDisruptionBudgetPtrOutput)
}

// RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
func (o ElasticsearchSpecOutput) RemoteClusters() ElasticsearchSpecRemoteClustersArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpec) []ElasticsearchSpecRemoteClusters { return v.RemoteClusters }).(ElasticsearchSpecRemoteClustersArrayOutput)
}

// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying StatefulSets.
func (o ElasticsearchSpecOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
func (o ElasticsearchSpecOutput) SecureSettings() ElasticsearchSpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpec) []ElasticsearchSpecSecureSettings { return v.SecureSettings }).(ElasticsearchSpecSecureSettingsArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. a remote Elasticsearch cluster) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o ElasticsearchSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecOutput) Transport() ElasticsearchSpecTransportPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *ElasticsearchSpecTransport { return v.Transport }).(ElasticsearchSpecTransportPtrOutput)
}

func (o ElasticsearchSpecOutput) UpdateStrategy() ElasticsearchSpecUpdateStrategyPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *ElasticsearchSpecUpdateStrategy { return v.UpdateStrategy }).(ElasticsearchSpecUpdateStrategyPtrOutput)
}

// Version of Elasticsearch.
func (o ElasticsearchSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// VolumeClaimDeletePolicy sets the policy for handling deletion of PersistentVolumeClaims for all NodeSets.
// Possible values are DeleteOnScaledownOnly and DeleteOnScaledownAndClusterDeletion. Defaults to DeleteOnScaledownAndClusterDeletion.
func (o ElasticsearchSpecOutput) VolumeClaimDeletePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *string { return v.VolumeClaimDeletePolicy }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpec)(nil)).Elem()
}

func (o ElasticsearchSpecPtrOutput) ToElasticsearchSpecPtrOutput() ElasticsearchSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecPtrOutput) ToElasticsearchSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecPtrOutput) Elem() ElasticsearchSpecOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) ElasticsearchSpec {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpec
		return ret
	}).(ElasticsearchSpecOutput)
}

func (o ElasticsearchSpecPtrOutput) Auth() ElasticsearchSpecAuthPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *ElasticsearchSpecAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ElasticsearchSpecAuthPtrOutput)
}

func (o ElasticsearchSpecPtrOutput) Http() ElasticsearchSpecHttpPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *ElasticsearchSpecHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(ElasticsearchSpecHttpPtrOutput)
}

// Image is the Elasticsearch Docker image to deploy.
func (o ElasticsearchSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecPtrOutput) Monitoring() ElasticsearchSpecMonitoringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *ElasticsearchSpecMonitoring {
		if v == nil {
			return nil
		}
		return v.Monitoring
	}).(ElasticsearchSpecMonitoringPtrOutput)
}

// NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
func (o ElasticsearchSpecPtrOutput) NodeSets() ElasticsearchSpecNodeSetsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) []ElasticsearchSpecNodeSets {
		if v == nil {
			return nil
		}
		return v.NodeSets
	}).(ElasticsearchSpecNodeSetsArrayOutput)
}

func (o ElasticsearchSpecPtrOutput) PodDisruptionBudget() ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *ElasticsearchSpecPodDisruptionBudget {
		if v == nil {
			return nil
		}
		return v.PodDisruptionBudget
	}).(ElasticsearchSpecPodDisruptionBudgetPtrOutput)
}

// RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
func (o ElasticsearchSpecPtrOutput) RemoteClusters() ElasticsearchSpecRemoteClustersArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) []ElasticsearchSpecRemoteClusters {
		if v == nil {
			return nil
		}
		return v.RemoteClusters
	}).(ElasticsearchSpecRemoteClustersArrayOutput)
}

// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying StatefulSets.
func (o ElasticsearchSpecPtrOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *int {
		if v == nil {
			return nil
		}
		return v.RevisionHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
func (o ElasticsearchSpecPtrOutput) SecureSettings() ElasticsearchSpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) []ElasticsearchSpecSecureSettings {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(ElasticsearchSpecSecureSettingsArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. a remote Elasticsearch cluster) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o ElasticsearchSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecPtrOutput) Transport() ElasticsearchSpecTransportPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *ElasticsearchSpecTransport {
		if v == nil {
			return nil
		}
		return v.Transport
	}).(ElasticsearchSpecTransportPtrOutput)
}

func (o ElasticsearchSpecPtrOutput) UpdateStrategy() ElasticsearchSpecUpdateStrategyPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *ElasticsearchSpecUpdateStrategy {
		if v == nil {
			return nil
		}
		return v.UpdateStrategy
	}).(ElasticsearchSpecUpdateStrategyPtrOutput)
}

// Version of Elasticsearch.
func (o ElasticsearchSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// VolumeClaimDeletePolicy sets the policy for handling deletion of PersistentVolumeClaims for all NodeSets.
// Possible values are DeleteOnScaledownOnly and DeleteOnScaledownAndClusterDeletion. Defaults to DeleteOnScaledownAndClusterDeletion.
func (o ElasticsearchSpecPtrOutput) VolumeClaimDeletePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimDeletePolicy
	}).(pulumi.StringPtrOutput)
}

// Auth contains user authentication and authorization security settings for Elasticsearch.
type ElasticsearchSpecAuth struct {
	// DisableElasticUser disables the default elastic user that is created by ECK.
	DisableElasticUser *bool `pulumi:"disableElasticUser"`
	// FileRealm to propagate to the Elasticsearch cluster.
	FileRealm []ElasticsearchSpecAuthFileRealm `pulumi:"fileRealm"`
	// Roles to propagate to the Elasticsearch cluster.
	Roles []ElasticsearchSpecAuthRoles `pulumi:"roles"`
}

// ElasticsearchSpecAuthInput is an input type that accepts ElasticsearchSpecAuthArgs and ElasticsearchSpecAuthOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthInput` via:
//
//	ElasticsearchSpecAuthArgs{...}
type ElasticsearchSpecAuthInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthOutput() ElasticsearchSpecAuthOutput
	ToElasticsearchSpecAuthOutputWithContext(context.Context) ElasticsearchSpecAuthOutput
}

// Auth contains user authentication and authorization security settings for Elasticsearch.
type ElasticsearchSpecAuthArgs struct {
	// DisableElasticUser disables the default elastic user that is created by ECK.
	DisableElasticUser pulumi.BoolPtrInput `pulumi:"disableElasticUser"`
	// FileRealm to propagate to the Elasticsearch cluster.
	FileRealm ElasticsearchSpecAuthFileRealmArrayInput `pulumi:"fileRealm"`
	// Roles to propagate to the Elasticsearch cluster.
	Roles ElasticsearchSpecAuthRolesArrayInput `pulumi:"roles"`
}

func (ElasticsearchSpecAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuth)(nil)).Elem()
}

func (i ElasticsearchSpecAuthArgs) ToElasticsearchSpecAuthOutput() ElasticsearchSpecAuthOutput {
	return i.ToElasticsearchSpecAuthOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthArgs) ToElasticsearchSpecAuthOutputWithContext(ctx context.Context) ElasticsearchSpecAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthOutput)
}

func (i ElasticsearchSpecAuthArgs) ToElasticsearchSpecAuthPtrOutput() ElasticsearchSpecAuthPtrOutput {
	return i.ToElasticsearchSpecAuthPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthArgs) ToElasticsearchSpecAuthPtrOutputWithContext(ctx context.Context) ElasticsearchSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthOutput).ToElasticsearchSpecAuthPtrOutputWithContext(ctx)
}

// ElasticsearchSpecAuthPtrInput is an input type that accepts ElasticsearchSpecAuthArgs, ElasticsearchSpecAuthPtr and ElasticsearchSpecAuthPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthPtrInput` via:
//
//	        ElasticsearchSpecAuthArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecAuthPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthPtrOutput() ElasticsearchSpecAuthPtrOutput
	ToElasticsearchSpecAuthPtrOutputWithContext(context.Context) ElasticsearchSpecAuthPtrOutput
}

type elasticsearchSpecAuthPtrType ElasticsearchSpecAuthArgs

func ElasticsearchSpecAuthPtr(v *ElasticsearchSpecAuthArgs) ElasticsearchSpecAuthPtrInput {
	return (*elasticsearchSpecAuthPtrType)(v)
}

func (*elasticsearchSpecAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecAuth)(nil)).Elem()
}

func (i *elasticsearchSpecAuthPtrType) ToElasticsearchSpecAuthPtrOutput() ElasticsearchSpecAuthPtrOutput {
	return i.ToElasticsearchSpecAuthPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecAuthPtrType) ToElasticsearchSpecAuthPtrOutputWithContext(ctx context.Context) ElasticsearchSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthPtrOutput)
}

// Auth contains user authentication and authorization security settings for Elasticsearch.
type ElasticsearchSpecAuthOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuth)(nil)).Elem()
}

func (o ElasticsearchSpecAuthOutput) ToElasticsearchSpecAuthOutput() ElasticsearchSpecAuthOutput {
	return o
}

func (o ElasticsearchSpecAuthOutput) ToElasticsearchSpecAuthOutputWithContext(ctx context.Context) ElasticsearchSpecAuthOutput {
	return o
}

func (o ElasticsearchSpecAuthOutput) ToElasticsearchSpecAuthPtrOutput() ElasticsearchSpecAuthPtrOutput {
	return o.ToElasticsearchSpecAuthPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecAuthOutput) ToElasticsearchSpecAuthPtrOutputWithContext(ctx context.Context) ElasticsearchSpecAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecAuth) *ElasticsearchSpecAuth {
		return &v
	}).(ElasticsearchSpecAuthPtrOutput)
}

// DisableElasticUser disables the default elastic user that is created by ECK.
func (o ElasticsearchSpecAuthOutput) DisableElasticUser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecAuth) *bool { return v.DisableElasticUser }).(pulumi.BoolPtrOutput)
}

// FileRealm to propagate to the Elasticsearch cluster.
func (o ElasticsearchSpecAuthOutput) FileRealm() ElasticsearchSpecAuthFileRealmArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecAuth) []ElasticsearchSpecAuthFileRealm { return v.FileRealm }).(ElasticsearchSpecAuthFileRealmArrayOutput)
}

// Roles to propagate to the Elasticsearch cluster.
func (o ElasticsearchSpecAuthOutput) Roles() ElasticsearchSpecAuthRolesArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecAuth) []ElasticsearchSpecAuthRoles { return v.Roles }).(ElasticsearchSpecAuthRolesArrayOutput)
}

type ElasticsearchSpecAuthPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecAuth)(nil)).Elem()
}

func (o ElasticsearchSpecAuthPtrOutput) ToElasticsearchSpecAuthPtrOutput() ElasticsearchSpecAuthPtrOutput {
	return o
}

func (o ElasticsearchSpecAuthPtrOutput) ToElasticsearchSpecAuthPtrOutputWithContext(ctx context.Context) ElasticsearchSpecAuthPtrOutput {
	return o
}

func (o ElasticsearchSpecAuthPtrOutput) Elem() ElasticsearchSpecAuthOutput {
	return o.ApplyT(func(v *ElasticsearchSpecAuth) ElasticsearchSpecAuth {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecAuth
		return ret
	}).(ElasticsearchSpecAuthOutput)
}

// DisableElasticUser disables the default elastic user that is created by ECK.
func (o ElasticsearchSpecAuthPtrOutput) DisableElasticUser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecAuth) *bool {
		if v == nil {
			return nil
		}
		return v.DisableElasticUser
	}).(pulumi.BoolPtrOutput)
}

// FileRealm to propagate to the Elasticsearch cluster.
func (o ElasticsearchSpecAuthPtrOutput) FileRealm() ElasticsearchSpecAuthFileRealmArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecAuth) []ElasticsearchSpecAuthFileRealm {
		if v == nil {
			return nil
		}
		return v.FileRealm
	}).(ElasticsearchSpecAuthFileRealmArrayOutput)
}

// Roles to propagate to the Elasticsearch cluster.
func (o ElasticsearchSpecAuthPtrOutput) Roles() ElasticsearchSpecAuthRolesArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecAuth) []ElasticsearchSpecAuthRoles {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(ElasticsearchSpecAuthRolesArrayOutput)
}

// FileRealmSource references users to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthFileRealm struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticsearchSpecAuthFileRealmInput is an input type that accepts ElasticsearchSpecAuthFileRealmArgs and ElasticsearchSpecAuthFileRealmOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthFileRealmInput` via:
//
//	ElasticsearchSpecAuthFileRealmArgs{...}
type ElasticsearchSpecAuthFileRealmInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthFileRealmOutput() ElasticsearchSpecAuthFileRealmOutput
	ToElasticsearchSpecAuthFileRealmOutputWithContext(context.Context) ElasticsearchSpecAuthFileRealmOutput
}

// FileRealmSource references users to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthFileRealmArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticsearchSpecAuthFileRealmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuthFileRealm)(nil)).Elem()
}

func (i ElasticsearchSpecAuthFileRealmArgs) ToElasticsearchSpecAuthFileRealmOutput() ElasticsearchSpecAuthFileRealmOutput {
	return i.ToElasticsearchSpecAuthFileRealmOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthFileRealmArgs) ToElasticsearchSpecAuthFileRealmOutputWithContext(ctx context.Context) ElasticsearchSpecAuthFileRealmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthFileRealmOutput)
}

// ElasticsearchSpecAuthFileRealmArrayInput is an input type that accepts ElasticsearchSpecAuthFileRealmArray and ElasticsearchSpecAuthFileRealmArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthFileRealmArrayInput` via:
//
//	ElasticsearchSpecAuthFileRealmArray{ ElasticsearchSpecAuthFileRealmArgs{...} }
type ElasticsearchSpecAuthFileRealmArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthFileRealmArrayOutput() ElasticsearchSpecAuthFileRealmArrayOutput
	ToElasticsearchSpecAuthFileRealmArrayOutputWithContext(context.Context) ElasticsearchSpecAuthFileRealmArrayOutput
}

type ElasticsearchSpecAuthFileRealmArray []ElasticsearchSpecAuthFileRealmInput

func (ElasticsearchSpecAuthFileRealmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecAuthFileRealm)(nil)).Elem()
}

func (i ElasticsearchSpecAuthFileRealmArray) ToElasticsearchSpecAuthFileRealmArrayOutput() ElasticsearchSpecAuthFileRealmArrayOutput {
	return i.ToElasticsearchSpecAuthFileRealmArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthFileRealmArray) ToElasticsearchSpecAuthFileRealmArrayOutputWithContext(ctx context.Context) ElasticsearchSpecAuthFileRealmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthFileRealmArrayOutput)
}

// FileRealmSource references users to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthFileRealmOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthFileRealmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuthFileRealm)(nil)).Elem()
}

func (o ElasticsearchSpecAuthFileRealmOutput) ToElasticsearchSpecAuthFileRealmOutput() ElasticsearchSpecAuthFileRealmOutput {
	return o
}

func (o ElasticsearchSpecAuthFileRealmOutput) ToElasticsearchSpecAuthFileRealmOutputWithContext(ctx context.Context) ElasticsearchSpecAuthFileRealmOutput {
	return o
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecAuthFileRealmOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecAuthFileRealm) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecAuthFileRealmArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthFileRealmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecAuthFileRealm)(nil)).Elem()
}

func (o ElasticsearchSpecAuthFileRealmArrayOutput) ToElasticsearchSpecAuthFileRealmArrayOutput() ElasticsearchSpecAuthFileRealmArrayOutput {
	return o
}

func (o ElasticsearchSpecAuthFileRealmArrayOutput) ToElasticsearchSpecAuthFileRealmArrayOutputWithContext(ctx context.Context) ElasticsearchSpecAuthFileRealmArrayOutput {
	return o
}

func (o ElasticsearchSpecAuthFileRealmArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecAuthFileRealmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecAuthFileRealm {
		return vs[0].([]ElasticsearchSpecAuthFileRealm)[vs[1].(int)]
	}).(ElasticsearchSpecAuthFileRealmOutput)
}

// FileRealmSource references users to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthFileRealmPatch struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticsearchSpecAuthFileRealmPatchInput is an input type that accepts ElasticsearchSpecAuthFileRealmPatchArgs and ElasticsearchSpecAuthFileRealmPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthFileRealmPatchInput` via:
//
//	ElasticsearchSpecAuthFileRealmPatchArgs{...}
type ElasticsearchSpecAuthFileRealmPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthFileRealmPatchOutput() ElasticsearchSpecAuthFileRealmPatchOutput
	ToElasticsearchSpecAuthFileRealmPatchOutputWithContext(context.Context) ElasticsearchSpecAuthFileRealmPatchOutput
}

// FileRealmSource references users to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthFileRealmPatchArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticsearchSpecAuthFileRealmPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuthFileRealmPatch)(nil)).Elem()
}

func (i ElasticsearchSpecAuthFileRealmPatchArgs) ToElasticsearchSpecAuthFileRealmPatchOutput() ElasticsearchSpecAuthFileRealmPatchOutput {
	return i.ToElasticsearchSpecAuthFileRealmPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthFileRealmPatchArgs) ToElasticsearchSpecAuthFileRealmPatchOutputWithContext(ctx context.Context) ElasticsearchSpecAuthFileRealmPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthFileRealmPatchOutput)
}

// ElasticsearchSpecAuthFileRealmPatchArrayInput is an input type that accepts ElasticsearchSpecAuthFileRealmPatchArray and ElasticsearchSpecAuthFileRealmPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthFileRealmPatchArrayInput` via:
//
//	ElasticsearchSpecAuthFileRealmPatchArray{ ElasticsearchSpecAuthFileRealmPatchArgs{...} }
type ElasticsearchSpecAuthFileRealmPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthFileRealmPatchArrayOutput() ElasticsearchSpecAuthFileRealmPatchArrayOutput
	ToElasticsearchSpecAuthFileRealmPatchArrayOutputWithContext(context.Context) ElasticsearchSpecAuthFileRealmPatchArrayOutput
}

type ElasticsearchSpecAuthFileRealmPatchArray []ElasticsearchSpecAuthFileRealmPatchInput

func (ElasticsearchSpecAuthFileRealmPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecAuthFileRealmPatch)(nil)).Elem()
}

func (i ElasticsearchSpecAuthFileRealmPatchArray) ToElasticsearchSpecAuthFileRealmPatchArrayOutput() ElasticsearchSpecAuthFileRealmPatchArrayOutput {
	return i.ToElasticsearchSpecAuthFileRealmPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthFileRealmPatchArray) ToElasticsearchSpecAuthFileRealmPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecAuthFileRealmPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthFileRealmPatchArrayOutput)
}

// FileRealmSource references users to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthFileRealmPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthFileRealmPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuthFileRealmPatch)(nil)).Elem()
}

func (o ElasticsearchSpecAuthFileRealmPatchOutput) ToElasticsearchSpecAuthFileRealmPatchOutput() ElasticsearchSpecAuthFileRealmPatchOutput {
	return o
}

func (o ElasticsearchSpecAuthFileRealmPatchOutput) ToElasticsearchSpecAuthFileRealmPatchOutputWithContext(ctx context.Context) ElasticsearchSpecAuthFileRealmPatchOutput {
	return o
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecAuthFileRealmPatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecAuthFileRealmPatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecAuthFileRealmPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthFileRealmPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecAuthFileRealmPatch)(nil)).Elem()
}

func (o ElasticsearchSpecAuthFileRealmPatchArrayOutput) ToElasticsearchSpecAuthFileRealmPatchArrayOutput() ElasticsearchSpecAuthFileRealmPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecAuthFileRealmPatchArrayOutput) ToElasticsearchSpecAuthFileRealmPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecAuthFileRealmPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecAuthFileRealmPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecAuthFileRealmPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecAuthFileRealmPatch {
		return vs[0].([]ElasticsearchSpecAuthFileRealmPatch)[vs[1].(int)]
	}).(ElasticsearchSpecAuthFileRealmPatchOutput)
}

// Auth contains user authentication and authorization security settings for Elasticsearch.
type ElasticsearchSpecAuthPatch struct {
	// DisableElasticUser disables the default elastic user that is created by ECK.
	DisableElasticUser *bool `pulumi:"disableElasticUser"`
	// FileRealm to propagate to the Elasticsearch cluster.
	FileRealm []ElasticsearchSpecAuthFileRealmPatch `pulumi:"fileRealm"`
	// Roles to propagate to the Elasticsearch cluster.
	Roles []ElasticsearchSpecAuthRolesPatch `pulumi:"roles"`
}

// ElasticsearchSpecAuthPatchInput is an input type that accepts ElasticsearchSpecAuthPatchArgs and ElasticsearchSpecAuthPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthPatchInput` via:
//
//	ElasticsearchSpecAuthPatchArgs{...}
type ElasticsearchSpecAuthPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthPatchOutput() ElasticsearchSpecAuthPatchOutput
	ToElasticsearchSpecAuthPatchOutputWithContext(context.Context) ElasticsearchSpecAuthPatchOutput
}

// Auth contains user authentication and authorization security settings for Elasticsearch.
type ElasticsearchSpecAuthPatchArgs struct {
	// DisableElasticUser disables the default elastic user that is created by ECK.
	DisableElasticUser pulumi.BoolPtrInput `pulumi:"disableElasticUser"`
	// FileRealm to propagate to the Elasticsearch cluster.
	FileRealm ElasticsearchSpecAuthFileRealmPatchArrayInput `pulumi:"fileRealm"`
	// Roles to propagate to the Elasticsearch cluster.
	Roles ElasticsearchSpecAuthRolesPatchArrayInput `pulumi:"roles"`
}

func (ElasticsearchSpecAuthPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuthPatch)(nil)).Elem()
}

func (i ElasticsearchSpecAuthPatchArgs) ToElasticsearchSpecAuthPatchOutput() ElasticsearchSpecAuthPatchOutput {
	return i.ToElasticsearchSpecAuthPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthPatchArgs) ToElasticsearchSpecAuthPatchOutputWithContext(ctx context.Context) ElasticsearchSpecAuthPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthPatchOutput)
}

func (i ElasticsearchSpecAuthPatchArgs) ToElasticsearchSpecAuthPatchPtrOutput() ElasticsearchSpecAuthPatchPtrOutput {
	return i.ToElasticsearchSpecAuthPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthPatchArgs) ToElasticsearchSpecAuthPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecAuthPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthPatchOutput).ToElasticsearchSpecAuthPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecAuthPatchPtrInput is an input type that accepts ElasticsearchSpecAuthPatchArgs, ElasticsearchSpecAuthPatchPtr and ElasticsearchSpecAuthPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthPatchPtrInput` via:
//
//	        ElasticsearchSpecAuthPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecAuthPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthPatchPtrOutput() ElasticsearchSpecAuthPatchPtrOutput
	ToElasticsearchSpecAuthPatchPtrOutputWithContext(context.Context) ElasticsearchSpecAuthPatchPtrOutput
}

type elasticsearchSpecAuthPatchPtrType ElasticsearchSpecAuthPatchArgs

func ElasticsearchSpecAuthPatchPtr(v *ElasticsearchSpecAuthPatchArgs) ElasticsearchSpecAuthPatchPtrInput {
	return (*elasticsearchSpecAuthPatchPtrType)(v)
}

func (*elasticsearchSpecAuthPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecAuthPatch)(nil)).Elem()
}

func (i *elasticsearchSpecAuthPatchPtrType) ToElasticsearchSpecAuthPatchPtrOutput() ElasticsearchSpecAuthPatchPtrOutput {
	return i.ToElasticsearchSpecAuthPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecAuthPatchPtrType) ToElasticsearchSpecAuthPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecAuthPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthPatchPtrOutput)
}

// Auth contains user authentication and authorization security settings for Elasticsearch.
type ElasticsearchSpecAuthPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuthPatch)(nil)).Elem()
}

func (o ElasticsearchSpecAuthPatchOutput) ToElasticsearchSpecAuthPatchOutput() ElasticsearchSpecAuthPatchOutput {
	return o
}

func (o ElasticsearchSpecAuthPatchOutput) ToElasticsearchSpecAuthPatchOutputWithContext(ctx context.Context) ElasticsearchSpecAuthPatchOutput {
	return o
}

func (o ElasticsearchSpecAuthPatchOutput) ToElasticsearchSpecAuthPatchPtrOutput() ElasticsearchSpecAuthPatchPtrOutput {
	return o.ToElasticsearchSpecAuthPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecAuthPatchOutput) ToElasticsearchSpecAuthPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecAuthPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecAuthPatch) *ElasticsearchSpecAuthPatch {
		return &v
	}).(ElasticsearchSpecAuthPatchPtrOutput)
}

// DisableElasticUser disables the default elastic user that is created by ECK.
func (o ElasticsearchSpecAuthPatchOutput) DisableElasticUser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecAuthPatch) *bool { return v.DisableElasticUser }).(pulumi.BoolPtrOutput)
}

// FileRealm to propagate to the Elasticsearch cluster.
func (o ElasticsearchSpecAuthPatchOutput) FileRealm() ElasticsearchSpecAuthFileRealmPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecAuthPatch) []ElasticsearchSpecAuthFileRealmPatch { return v.FileRealm }).(ElasticsearchSpecAuthFileRealmPatchArrayOutput)
}

// Roles to propagate to the Elasticsearch cluster.
func (o ElasticsearchSpecAuthPatchOutput) Roles() ElasticsearchSpecAuthRolesPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecAuthPatch) []ElasticsearchSpecAuthRolesPatch { return v.Roles }).(ElasticsearchSpecAuthRolesPatchArrayOutput)
}

type ElasticsearchSpecAuthPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecAuthPatch)(nil)).Elem()
}

func (o ElasticsearchSpecAuthPatchPtrOutput) ToElasticsearchSpecAuthPatchPtrOutput() ElasticsearchSpecAuthPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecAuthPatchPtrOutput) ToElasticsearchSpecAuthPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecAuthPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecAuthPatchPtrOutput) Elem() ElasticsearchSpecAuthPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecAuthPatch) ElasticsearchSpecAuthPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecAuthPatch
		return ret
	}).(ElasticsearchSpecAuthPatchOutput)
}

// DisableElasticUser disables the default elastic user that is created by ECK.
func (o ElasticsearchSpecAuthPatchPtrOutput) DisableElasticUser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecAuthPatch) *bool {
		if v == nil {
			return nil
		}
		return v.DisableElasticUser
	}).(pulumi.BoolPtrOutput)
}

// FileRealm to propagate to the Elasticsearch cluster.
func (o ElasticsearchSpecAuthPatchPtrOutput) FileRealm() ElasticsearchSpecAuthFileRealmPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecAuthPatch) []ElasticsearchSpecAuthFileRealmPatch {
		if v == nil {
			return nil
		}
		return v.FileRealm
	}).(ElasticsearchSpecAuthFileRealmPatchArrayOutput)
}

// Roles to propagate to the Elasticsearch cluster.
func (o ElasticsearchSpecAuthPatchPtrOutput) Roles() ElasticsearchSpecAuthRolesPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecAuthPatch) []ElasticsearchSpecAuthRolesPatch {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(ElasticsearchSpecAuthRolesPatchArrayOutput)
}

// RoleSource references roles to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthRoles struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticsearchSpecAuthRolesInput is an input type that accepts ElasticsearchSpecAuthRolesArgs and ElasticsearchSpecAuthRolesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthRolesInput` via:
//
//	ElasticsearchSpecAuthRolesArgs{...}
type ElasticsearchSpecAuthRolesInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthRolesOutput() ElasticsearchSpecAuthRolesOutput
	ToElasticsearchSpecAuthRolesOutputWithContext(context.Context) ElasticsearchSpecAuthRolesOutput
}

// RoleSource references roles to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthRolesArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticsearchSpecAuthRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuthRoles)(nil)).Elem()
}

func (i ElasticsearchSpecAuthRolesArgs) ToElasticsearchSpecAuthRolesOutput() ElasticsearchSpecAuthRolesOutput {
	return i.ToElasticsearchSpecAuthRolesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthRolesArgs) ToElasticsearchSpecAuthRolesOutputWithContext(ctx context.Context) ElasticsearchSpecAuthRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthRolesOutput)
}

// ElasticsearchSpecAuthRolesArrayInput is an input type that accepts ElasticsearchSpecAuthRolesArray and ElasticsearchSpecAuthRolesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthRolesArrayInput` via:
//
//	ElasticsearchSpecAuthRolesArray{ ElasticsearchSpecAuthRolesArgs{...} }
type ElasticsearchSpecAuthRolesArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthRolesArrayOutput() ElasticsearchSpecAuthRolesArrayOutput
	ToElasticsearchSpecAuthRolesArrayOutputWithContext(context.Context) ElasticsearchSpecAuthRolesArrayOutput
}

type ElasticsearchSpecAuthRolesArray []ElasticsearchSpecAuthRolesInput

func (ElasticsearchSpecAuthRolesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecAuthRoles)(nil)).Elem()
}

func (i ElasticsearchSpecAuthRolesArray) ToElasticsearchSpecAuthRolesArrayOutput() ElasticsearchSpecAuthRolesArrayOutput {
	return i.ToElasticsearchSpecAuthRolesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthRolesArray) ToElasticsearchSpecAuthRolesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecAuthRolesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthRolesArrayOutput)
}

// RoleSource references roles to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthRolesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuthRoles)(nil)).Elem()
}

func (o ElasticsearchSpecAuthRolesOutput) ToElasticsearchSpecAuthRolesOutput() ElasticsearchSpecAuthRolesOutput {
	return o
}

func (o ElasticsearchSpecAuthRolesOutput) ToElasticsearchSpecAuthRolesOutputWithContext(ctx context.Context) ElasticsearchSpecAuthRolesOutput {
	return o
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecAuthRolesOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecAuthRoles) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecAuthRolesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthRolesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecAuthRoles)(nil)).Elem()
}

func (o ElasticsearchSpecAuthRolesArrayOutput) ToElasticsearchSpecAuthRolesArrayOutput() ElasticsearchSpecAuthRolesArrayOutput {
	return o
}

func (o ElasticsearchSpecAuthRolesArrayOutput) ToElasticsearchSpecAuthRolesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecAuthRolesArrayOutput {
	return o
}

func (o ElasticsearchSpecAuthRolesArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecAuthRolesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecAuthRoles {
		return vs[0].([]ElasticsearchSpecAuthRoles)[vs[1].(int)]
	}).(ElasticsearchSpecAuthRolesOutput)
}

// RoleSource references roles to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthRolesPatch struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticsearchSpecAuthRolesPatchInput is an input type that accepts ElasticsearchSpecAuthRolesPatchArgs and ElasticsearchSpecAuthRolesPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthRolesPatchInput` via:
//
//	ElasticsearchSpecAuthRolesPatchArgs{...}
type ElasticsearchSpecAuthRolesPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthRolesPatchOutput() ElasticsearchSpecAuthRolesPatchOutput
	ToElasticsearchSpecAuthRolesPatchOutputWithContext(context.Context) ElasticsearchSpecAuthRolesPatchOutput
}

// RoleSource references roles to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthRolesPatchArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticsearchSpecAuthRolesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuthRolesPatch)(nil)).Elem()
}

func (i ElasticsearchSpecAuthRolesPatchArgs) ToElasticsearchSpecAuthRolesPatchOutput() ElasticsearchSpecAuthRolesPatchOutput {
	return i.ToElasticsearchSpecAuthRolesPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthRolesPatchArgs) ToElasticsearchSpecAuthRolesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecAuthRolesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthRolesPatchOutput)
}

// ElasticsearchSpecAuthRolesPatchArrayInput is an input type that accepts ElasticsearchSpecAuthRolesPatchArray and ElasticsearchSpecAuthRolesPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthRolesPatchArrayInput` via:
//
//	ElasticsearchSpecAuthRolesPatchArray{ ElasticsearchSpecAuthRolesPatchArgs{...} }
type ElasticsearchSpecAuthRolesPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthRolesPatchArrayOutput() ElasticsearchSpecAuthRolesPatchArrayOutput
	ToElasticsearchSpecAuthRolesPatchArrayOutputWithContext(context.Context) ElasticsearchSpecAuthRolesPatchArrayOutput
}

type ElasticsearchSpecAuthRolesPatchArray []ElasticsearchSpecAuthRolesPatchInput

func (ElasticsearchSpecAuthRolesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecAuthRolesPatch)(nil)).Elem()
}

func (i ElasticsearchSpecAuthRolesPatchArray) ToElasticsearchSpecAuthRolesPatchArrayOutput() ElasticsearchSpecAuthRolesPatchArrayOutput {
	return i.ToElasticsearchSpecAuthRolesPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthRolesPatchArray) ToElasticsearchSpecAuthRolesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecAuthRolesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthRolesPatchArrayOutput)
}

// RoleSource references roles to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthRolesPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthRolesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuthRolesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecAuthRolesPatchOutput) ToElasticsearchSpecAuthRolesPatchOutput() ElasticsearchSpecAuthRolesPatchOutput {
	return o
}

func (o ElasticsearchSpecAuthRolesPatchOutput) ToElasticsearchSpecAuthRolesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecAuthRolesPatchOutput {
	return o
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecAuthRolesPatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecAuthRolesPatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecAuthRolesPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthRolesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecAuthRolesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecAuthRolesPatchArrayOutput) ToElasticsearchSpecAuthRolesPatchArrayOutput() ElasticsearchSpecAuthRolesPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecAuthRolesPatchArrayOutput) ToElasticsearchSpecAuthRolesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecAuthRolesPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecAuthRolesPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecAuthRolesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecAuthRolesPatch {
		return vs[0].([]ElasticsearchSpecAuthRolesPatch)[vs[1].(int)]
	}).(ElasticsearchSpecAuthRolesPatchOutput)
}

// HTTP holds HTTP layer settings for Elasticsearch.
type ElasticsearchSpecHttp struct {
	Service *ElasticsearchSpecHttpService `pulumi:"service"`
	Tls     *ElasticsearchSpecHttpTls     `pulumi:"tls"`
}

// ElasticsearchSpecHttpInput is an input type that accepts ElasticsearchSpecHttpArgs and ElasticsearchSpecHttpOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpInput` via:
//
//	ElasticsearchSpecHttpArgs{...}
type ElasticsearchSpecHttpInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpOutput() ElasticsearchSpecHttpOutput
	ToElasticsearchSpecHttpOutputWithContext(context.Context) ElasticsearchSpecHttpOutput
}

// HTTP holds HTTP layer settings for Elasticsearch.
type ElasticsearchSpecHttpArgs struct {
	Service ElasticsearchSpecHttpServicePtrInput `pulumi:"service"`
	Tls     ElasticsearchSpecHttpTlsPtrInput     `pulumi:"tls"`
}

func (ElasticsearchSpecHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttp)(nil)).Elem()
}

func (i ElasticsearchSpecHttpArgs) ToElasticsearchSpecHttpOutput() ElasticsearchSpecHttpOutput {
	return i.ToElasticsearchSpecHttpOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpArgs) ToElasticsearchSpecHttpOutputWithContext(ctx context.Context) ElasticsearchSpecHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpOutput)
}

func (i ElasticsearchSpecHttpArgs) ToElasticsearchSpecHttpPtrOutput() ElasticsearchSpecHttpPtrOutput {
	return i.ToElasticsearchSpecHttpPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpArgs) ToElasticsearchSpecHttpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpOutput).ToElasticsearchSpecHttpPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpPtrInput is an input type that accepts ElasticsearchSpecHttpArgs, ElasticsearchSpecHttpPtr and ElasticsearchSpecHttpPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpPtrInput` via:
//
//	        ElasticsearchSpecHttpArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpPtrOutput() ElasticsearchSpecHttpPtrOutput
	ToElasticsearchSpecHttpPtrOutputWithContext(context.Context) ElasticsearchSpecHttpPtrOutput
}

type elasticsearchSpecHttpPtrType ElasticsearchSpecHttpArgs

func ElasticsearchSpecHttpPtr(v *ElasticsearchSpecHttpArgs) ElasticsearchSpecHttpPtrInput {
	return (*elasticsearchSpecHttpPtrType)(v)
}

func (*elasticsearchSpecHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttp)(nil)).Elem()
}

func (i *elasticsearchSpecHttpPtrType) ToElasticsearchSpecHttpPtrOutput() ElasticsearchSpecHttpPtrOutput {
	return i.ToElasticsearchSpecHttpPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpPtrType) ToElasticsearchSpecHttpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpPtrOutput)
}

// HTTP holds HTTP layer settings for Elasticsearch.
type ElasticsearchSpecHttpOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttp)(nil)).Elem()
}

func (o ElasticsearchSpecHttpOutput) ToElasticsearchSpecHttpOutput() ElasticsearchSpecHttpOutput {
	return o
}

func (o ElasticsearchSpecHttpOutput) ToElasticsearchSpecHttpOutputWithContext(ctx context.Context) ElasticsearchSpecHttpOutput {
	return o
}

func (o ElasticsearchSpecHttpOutput) ToElasticsearchSpecHttpPtrOutput() ElasticsearchSpecHttpPtrOutput {
	return o.ToElasticsearchSpecHttpPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpOutput) ToElasticsearchSpecHttpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttp) *ElasticsearchSpecHttp {
		return &v
	}).(ElasticsearchSpecHttpPtrOutput)
}

func (o ElasticsearchSpecHttpOutput) Service() ElasticsearchSpecHttpServicePtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttp) *ElasticsearchSpecHttpService { return v.Service }).(ElasticsearchSpecHttpServicePtrOutput)
}

func (o ElasticsearchSpecHttpOutput) Tls() ElasticsearchSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttp) *ElasticsearchSpecHttpTls { return v.Tls }).(ElasticsearchSpecHttpTlsPtrOutput)
}

type ElasticsearchSpecHttpPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttp)(nil)).Elem()
}

func (o ElasticsearchSpecHttpPtrOutput) ToElasticsearchSpecHttpPtrOutput() ElasticsearchSpecHttpPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpPtrOutput) ToElasticsearchSpecHttpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpPtrOutput) Elem() ElasticsearchSpecHttpOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttp) ElasticsearchSpecHttp {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttp
		return ret
	}).(ElasticsearchSpecHttpOutput)
}

func (o ElasticsearchSpecHttpPtrOutput) Service() ElasticsearchSpecHttpServicePtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttp) *ElasticsearchSpecHttpService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ElasticsearchSpecHttpServicePtrOutput)
}

func (o ElasticsearchSpecHttpPtrOutput) Tls() ElasticsearchSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttp) *ElasticsearchSpecHttpTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ElasticsearchSpecHttpTlsPtrOutput)
}

// HTTP holds HTTP layer settings for Elasticsearch.
type ElasticsearchSpecHttpPatch struct {
	Service *ElasticsearchSpecHttpServicePatch `pulumi:"service"`
	Tls     *ElasticsearchSpecHttpTlsPatch     `pulumi:"tls"`
}

// ElasticsearchSpecHttpPatchInput is an input type that accepts ElasticsearchSpecHttpPatchArgs and ElasticsearchSpecHttpPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpPatchInput` via:
//
//	ElasticsearchSpecHttpPatchArgs{...}
type ElasticsearchSpecHttpPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpPatchOutput() ElasticsearchSpecHttpPatchOutput
	ToElasticsearchSpecHttpPatchOutputWithContext(context.Context) ElasticsearchSpecHttpPatchOutput
}

// HTTP holds HTTP layer settings for Elasticsearch.
type ElasticsearchSpecHttpPatchArgs struct {
	Service ElasticsearchSpecHttpServicePatchPtrInput `pulumi:"service"`
	Tls     ElasticsearchSpecHttpTlsPatchPtrInput     `pulumi:"tls"`
}

func (ElasticsearchSpecHttpPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpPatch)(nil)).Elem()
}

func (i ElasticsearchSpecHttpPatchArgs) ToElasticsearchSpecHttpPatchOutput() ElasticsearchSpecHttpPatchOutput {
	return i.ToElasticsearchSpecHttpPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpPatchArgs) ToElasticsearchSpecHttpPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpPatchOutput)
}

func (i ElasticsearchSpecHttpPatchArgs) ToElasticsearchSpecHttpPatchPtrOutput() ElasticsearchSpecHttpPatchPtrOutput {
	return i.ToElasticsearchSpecHttpPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpPatchArgs) ToElasticsearchSpecHttpPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpPatchOutput).ToElasticsearchSpecHttpPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpPatchPtrInput is an input type that accepts ElasticsearchSpecHttpPatchArgs, ElasticsearchSpecHttpPatchPtr and ElasticsearchSpecHttpPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpPatchPtrInput` via:
//
//	        ElasticsearchSpecHttpPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpPatchPtrOutput() ElasticsearchSpecHttpPatchPtrOutput
	ToElasticsearchSpecHttpPatchPtrOutputWithContext(context.Context) ElasticsearchSpecHttpPatchPtrOutput
}

type elasticsearchSpecHttpPatchPtrType ElasticsearchSpecHttpPatchArgs

func ElasticsearchSpecHttpPatchPtr(v *ElasticsearchSpecHttpPatchArgs) ElasticsearchSpecHttpPatchPtrInput {
	return (*elasticsearchSpecHttpPatchPtrType)(v)
}

func (*elasticsearchSpecHttpPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpPatch)(nil)).Elem()
}

func (i *elasticsearchSpecHttpPatchPtrType) ToElasticsearchSpecHttpPatchPtrOutput() ElasticsearchSpecHttpPatchPtrOutput {
	return i.ToElasticsearchSpecHttpPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpPatchPtrType) ToElasticsearchSpecHttpPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpPatchPtrOutput)
}

// HTTP holds HTTP layer settings for Elasticsearch.
type ElasticsearchSpecHttpPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpPatchOutput) ToElasticsearchSpecHttpPatchOutput() ElasticsearchSpecHttpPatchOutput {
	return o
}

func (o ElasticsearchSpecHttpPatchOutput) ToElasticsearchSpecHttpPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpPatchOutput {
	return o
}

func (o ElasticsearchSpecHttpPatchOutput) ToElasticsearchSpecHttpPatchPtrOutput() ElasticsearchSpecHttpPatchPtrOutput {
	return o.ToElasticsearchSpecHttpPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpPatchOutput) ToElasticsearchSpecHttpPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpPatch) *ElasticsearchSpecHttpPatch {
		return &v
	}).(ElasticsearchSpecHttpPatchPtrOutput)
}

func (o ElasticsearchSpecHttpPatchOutput) Service() ElasticsearchSpecHttpServicePatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpPatch) *ElasticsearchSpecHttpServicePatch { return v.Service }).(ElasticsearchSpecHttpServicePatchPtrOutput)
}

func (o ElasticsearchSpecHttpPatchOutput) Tls() ElasticsearchSpecHttpTlsPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpPatch) *ElasticsearchSpecHttpTlsPatch { return v.Tls }).(ElasticsearchSpecHttpTlsPatchPtrOutput)
}

type ElasticsearchSpecHttpPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpPatchPtrOutput) ToElasticsearchSpecHttpPatchPtrOutput() ElasticsearchSpecHttpPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpPatchPtrOutput) ToElasticsearchSpecHttpPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpPatchPtrOutput) Elem() ElasticsearchSpecHttpPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpPatch) ElasticsearchSpecHttpPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpPatch
		return ret
	}).(ElasticsearchSpecHttpPatchOutput)
}

func (o ElasticsearchSpecHttpPatchPtrOutput) Service() ElasticsearchSpecHttpServicePatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpPatch) *ElasticsearchSpecHttpServicePatch {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ElasticsearchSpecHttpServicePatchPtrOutput)
}

func (o ElasticsearchSpecHttpPatchPtrOutput) Tls() ElasticsearchSpecHttpTlsPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpPatch) *ElasticsearchSpecHttpTlsPatch {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ElasticsearchSpecHttpTlsPatchPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecHttpService struct {
	Metadata *ElasticsearchSpecHttpServiceMetadata `pulumi:"metadata"`
	Spec     *ElasticsearchSpecHttpServiceSpec     `pulumi:"spec"`
}

// ElasticsearchSpecHttpServiceInput is an input type that accepts ElasticsearchSpecHttpServiceArgs and ElasticsearchSpecHttpServiceOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceInput` via:
//
//	ElasticsearchSpecHttpServiceArgs{...}
type ElasticsearchSpecHttpServiceInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceOutput() ElasticsearchSpecHttpServiceOutput
	ToElasticsearchSpecHttpServiceOutputWithContext(context.Context) ElasticsearchSpecHttpServiceOutput
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecHttpServiceArgs struct {
	Metadata ElasticsearchSpecHttpServiceMetadataPtrInput `pulumi:"metadata"`
	Spec     ElasticsearchSpecHttpServiceSpecPtrInput     `pulumi:"spec"`
}

func (ElasticsearchSpecHttpServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpService)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceArgs) ToElasticsearchSpecHttpServiceOutput() ElasticsearchSpecHttpServiceOutput {
	return i.ToElasticsearchSpecHttpServiceOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceArgs) ToElasticsearchSpecHttpServiceOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceOutput)
}

func (i ElasticsearchSpecHttpServiceArgs) ToElasticsearchSpecHttpServicePtrOutput() ElasticsearchSpecHttpServicePtrOutput {
	return i.ToElasticsearchSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceArgs) ToElasticsearchSpecHttpServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceOutput).ToElasticsearchSpecHttpServicePtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpServicePtrInput is an input type that accepts ElasticsearchSpecHttpServiceArgs, ElasticsearchSpecHttpServicePtr and ElasticsearchSpecHttpServicePtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServicePtrInput` via:
//
//	        ElasticsearchSpecHttpServiceArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpServicePtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServicePtrOutput() ElasticsearchSpecHttpServicePtrOutput
	ToElasticsearchSpecHttpServicePtrOutputWithContext(context.Context) ElasticsearchSpecHttpServicePtrOutput
}

type elasticsearchSpecHttpServicePtrType ElasticsearchSpecHttpServiceArgs

func ElasticsearchSpecHttpServicePtr(v *ElasticsearchSpecHttpServiceArgs) ElasticsearchSpecHttpServicePtrInput {
	return (*elasticsearchSpecHttpServicePtrType)(v)
}

func (*elasticsearchSpecHttpServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpService)(nil)).Elem()
}

func (i *elasticsearchSpecHttpServicePtrType) ToElasticsearchSpecHttpServicePtrOutput() ElasticsearchSpecHttpServicePtrOutput {
	return i.ToElasticsearchSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpServicePtrType) ToElasticsearchSpecHttpServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServicePtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecHttpServiceOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpService)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceOutput) ToElasticsearchSpecHttpServiceOutput() ElasticsearchSpecHttpServiceOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceOutput) ToElasticsearchSpecHttpServiceOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceOutput) ToElasticsearchSpecHttpServicePtrOutput() ElasticsearchSpecHttpServicePtrOutput {
	return o.ToElasticsearchSpecHttpServicePtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpServiceOutput) ToElasticsearchSpecHttpServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpService) *ElasticsearchSpecHttpService {
		return &v
	}).(ElasticsearchSpecHttpServicePtrOutput)
}

func (o ElasticsearchSpecHttpServiceOutput) Metadata() ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpService) *ElasticsearchSpecHttpServiceMetadata { return v.Metadata }).(ElasticsearchSpecHttpServiceMetadataPtrOutput)
}

func (o ElasticsearchSpecHttpServiceOutput) Spec() ElasticsearchSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpService) *ElasticsearchSpecHttpServiceSpec { return v.Spec }).(ElasticsearchSpecHttpServiceSpecPtrOutput)
}

type ElasticsearchSpecHttpServicePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpService)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServicePtrOutput) ToElasticsearchSpecHttpServicePtrOutput() ElasticsearchSpecHttpServicePtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServicePtrOutput) ToElasticsearchSpecHttpServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServicePtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServicePtrOutput) Elem() ElasticsearchSpecHttpServiceOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpService) ElasticsearchSpecHttpService {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpService
		return ret
	}).(ElasticsearchSpecHttpServiceOutput)
}

func (o ElasticsearchSpecHttpServicePtrOutput) Metadata() ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpService) *ElasticsearchSpecHttpServiceMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(ElasticsearchSpecHttpServiceMetadataPtrOutput)
}

func (o ElasticsearchSpecHttpServicePtrOutput) Spec() ElasticsearchSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpService) *ElasticsearchSpecHttpServiceSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ElasticsearchSpecHttpServiceSpecPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecHttpServiceMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// ElasticsearchSpecHttpServiceMetadataInput is an input type that accepts ElasticsearchSpecHttpServiceMetadataArgs and ElasticsearchSpecHttpServiceMetadataOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceMetadataInput` via:
//
//	ElasticsearchSpecHttpServiceMetadataArgs{...}
type ElasticsearchSpecHttpServiceMetadataInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceMetadataOutput() ElasticsearchSpecHttpServiceMetadataOutput
	ToElasticsearchSpecHttpServiceMetadataOutputWithContext(context.Context) ElasticsearchSpecHttpServiceMetadataOutput
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecHttpServiceMetadataArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (ElasticsearchSpecHttpServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceMetadataArgs) ToElasticsearchSpecHttpServiceMetadataOutput() ElasticsearchSpecHttpServiceMetadataOutput {
	return i.ToElasticsearchSpecHttpServiceMetadataOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceMetadataArgs) ToElasticsearchSpecHttpServiceMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceMetadataOutput)
}

func (i ElasticsearchSpecHttpServiceMetadataArgs) ToElasticsearchSpecHttpServiceMetadataPtrOutput() ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return i.ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceMetadataArgs) ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceMetadataOutput).ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpServiceMetadataPtrInput is an input type that accepts ElasticsearchSpecHttpServiceMetadataArgs, ElasticsearchSpecHttpServiceMetadataPtr and ElasticsearchSpecHttpServiceMetadataPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceMetadataPtrInput` via:
//
//	        ElasticsearchSpecHttpServiceMetadataArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpServiceMetadataPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceMetadataPtrOutput() ElasticsearchSpecHttpServiceMetadataPtrOutput
	ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(context.Context) ElasticsearchSpecHttpServiceMetadataPtrOutput
}

type elasticsearchSpecHttpServiceMetadataPtrType ElasticsearchSpecHttpServiceMetadataArgs

func ElasticsearchSpecHttpServiceMetadataPtr(v *ElasticsearchSpecHttpServiceMetadataArgs) ElasticsearchSpecHttpServiceMetadataPtrInput {
	return (*elasticsearchSpecHttpServiceMetadataPtrType)(v)
}

func (*elasticsearchSpecHttpServiceMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (i *elasticsearchSpecHttpServiceMetadataPtrType) ToElasticsearchSpecHttpServiceMetadataPtrOutput() ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return i.ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpServiceMetadataPtrType) ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceMetadataPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecHttpServiceMetadataOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) ToElasticsearchSpecHttpServiceMetadataOutput() ElasticsearchSpecHttpServiceMetadataOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) ToElasticsearchSpecHttpServiceMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) ToElasticsearchSpecHttpServiceMetadataPtrOutput() ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return o.ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpServiceMetadata) *ElasticsearchSpecHttpServiceMetadata {
		return &v
	}).(ElasticsearchSpecHttpServiceMetadataPtrOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceMetadata) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecHttpServiceMetadataPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) ToElasticsearchSpecHttpServiceMetadataPtrOutput() ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) Elem() ElasticsearchSpecHttpServiceMetadataOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadata) ElasticsearchSpecHttpServiceMetadata {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpServiceMetadata
		return ret
	}).(ElasticsearchSpecHttpServiceMetadataOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadata) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecHttpServiceMetadataPatch struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// ElasticsearchSpecHttpServiceMetadataPatchInput is an input type that accepts ElasticsearchSpecHttpServiceMetadataPatchArgs and ElasticsearchSpecHttpServiceMetadataPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceMetadataPatchInput` via:
//
//	ElasticsearchSpecHttpServiceMetadataPatchArgs{...}
type ElasticsearchSpecHttpServiceMetadataPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceMetadataPatchOutput() ElasticsearchSpecHttpServiceMetadataPatchOutput
	ToElasticsearchSpecHttpServiceMetadataPatchOutputWithContext(context.Context) ElasticsearchSpecHttpServiceMetadataPatchOutput
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecHttpServiceMetadataPatchArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (ElasticsearchSpecHttpServiceMetadataPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceMetadataPatch)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceMetadataPatchArgs) ToElasticsearchSpecHttpServiceMetadataPatchOutput() ElasticsearchSpecHttpServiceMetadataPatchOutput {
	return i.ToElasticsearchSpecHttpServiceMetadataPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceMetadataPatchArgs) ToElasticsearchSpecHttpServiceMetadataPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceMetadataPatchOutput)
}

func (i ElasticsearchSpecHttpServiceMetadataPatchArgs) ToElasticsearchSpecHttpServiceMetadataPatchPtrOutput() ElasticsearchSpecHttpServiceMetadataPatchPtrOutput {
	return i.ToElasticsearchSpecHttpServiceMetadataPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceMetadataPatchArgs) ToElasticsearchSpecHttpServiceMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceMetadataPatchOutput).ToElasticsearchSpecHttpServiceMetadataPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpServiceMetadataPatchPtrInput is an input type that accepts ElasticsearchSpecHttpServiceMetadataPatchArgs, ElasticsearchSpecHttpServiceMetadataPatchPtr and ElasticsearchSpecHttpServiceMetadataPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceMetadataPatchPtrInput` via:
//
//	        ElasticsearchSpecHttpServiceMetadataPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpServiceMetadataPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceMetadataPatchPtrOutput() ElasticsearchSpecHttpServiceMetadataPatchPtrOutput
	ToElasticsearchSpecHttpServiceMetadataPatchPtrOutputWithContext(context.Context) ElasticsearchSpecHttpServiceMetadataPatchPtrOutput
}

type elasticsearchSpecHttpServiceMetadataPatchPtrType ElasticsearchSpecHttpServiceMetadataPatchArgs

func ElasticsearchSpecHttpServiceMetadataPatchPtr(v *ElasticsearchSpecHttpServiceMetadataPatchArgs) ElasticsearchSpecHttpServiceMetadataPatchPtrInput {
	return (*elasticsearchSpecHttpServiceMetadataPatchPtrType)(v)
}

func (*elasticsearchSpecHttpServiceMetadataPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceMetadataPatch)(nil)).Elem()
}

func (i *elasticsearchSpecHttpServiceMetadataPatchPtrType) ToElasticsearchSpecHttpServiceMetadataPatchPtrOutput() ElasticsearchSpecHttpServiceMetadataPatchPtrOutput {
	return i.ToElasticsearchSpecHttpServiceMetadataPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpServiceMetadataPatchPtrType) ToElasticsearchSpecHttpServiceMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceMetadataPatchPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecHttpServiceMetadataPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceMetadataPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceMetadataPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceMetadataPatchOutput) ToElasticsearchSpecHttpServiceMetadataPatchOutput() ElasticsearchSpecHttpServiceMetadataPatchOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceMetadataPatchOutput) ToElasticsearchSpecHttpServiceMetadataPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataPatchOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceMetadataPatchOutput) ToElasticsearchSpecHttpServiceMetadataPatchPtrOutput() ElasticsearchSpecHttpServiceMetadataPatchPtrOutput {
	return o.ToElasticsearchSpecHttpServiceMetadataPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpServiceMetadataPatchOutput) ToElasticsearchSpecHttpServiceMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpServiceMetadataPatch) *ElasticsearchSpecHttpServiceMetadataPatch {
		return &v
	}).(ElasticsearchSpecHttpServiceMetadataPatchPtrOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPatchOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceMetadataPatch) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPatchOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceMetadataPatch) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceMetadataPatch) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceMetadataPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceMetadataPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecHttpServiceMetadataPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceMetadataPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceMetadataPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceMetadataPatchPtrOutput) ToElasticsearchSpecHttpServiceMetadataPatchPtrOutput() ElasticsearchSpecHttpServiceMetadataPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceMetadataPatchPtrOutput) ToElasticsearchSpecHttpServiceMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceMetadataPatchPtrOutput) Elem() ElasticsearchSpecHttpServiceMetadataPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadataPatch) ElasticsearchSpecHttpServiceMetadataPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpServiceMetadataPatch
		return ret
	}).(ElasticsearchSpecHttpServiceMetadataPatchOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPatchPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPatchPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadataPatch) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPatchPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadataPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadataPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecHttpServicePatch struct {
	Metadata *ElasticsearchSpecHttpServiceMetadataPatch `pulumi:"metadata"`
	Spec     *ElasticsearchSpecHttpServiceSpecPatch     `pulumi:"spec"`
}

// ElasticsearchSpecHttpServicePatchInput is an input type that accepts ElasticsearchSpecHttpServicePatchArgs and ElasticsearchSpecHttpServicePatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServicePatchInput` via:
//
//	ElasticsearchSpecHttpServicePatchArgs{...}
type ElasticsearchSpecHttpServicePatchInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServicePatchOutput() ElasticsearchSpecHttpServicePatchOutput
	ToElasticsearchSpecHttpServicePatchOutputWithContext(context.Context) ElasticsearchSpecHttpServicePatchOutput
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecHttpServicePatchArgs struct {
	Metadata ElasticsearchSpecHttpServiceMetadataPatchPtrInput `pulumi:"metadata"`
	Spec     ElasticsearchSpecHttpServiceSpecPatchPtrInput     `pulumi:"spec"`
}

func (ElasticsearchSpecHttpServicePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServicePatch)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServicePatchArgs) ToElasticsearchSpecHttpServicePatchOutput() ElasticsearchSpecHttpServicePatchOutput {
	return i.ToElasticsearchSpecHttpServicePatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServicePatchArgs) ToElasticsearchSpecHttpServicePatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServicePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServicePatchOutput)
}

func (i ElasticsearchSpecHttpServicePatchArgs) ToElasticsearchSpecHttpServicePatchPtrOutput() ElasticsearchSpecHttpServicePatchPtrOutput {
	return i.ToElasticsearchSpecHttpServicePatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServicePatchArgs) ToElasticsearchSpecHttpServicePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServicePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServicePatchOutput).ToElasticsearchSpecHttpServicePatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpServicePatchPtrInput is an input type that accepts ElasticsearchSpecHttpServicePatchArgs, ElasticsearchSpecHttpServicePatchPtr and ElasticsearchSpecHttpServicePatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServicePatchPtrInput` via:
//
//	        ElasticsearchSpecHttpServicePatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpServicePatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServicePatchPtrOutput() ElasticsearchSpecHttpServicePatchPtrOutput
	ToElasticsearchSpecHttpServicePatchPtrOutputWithContext(context.Context) ElasticsearchSpecHttpServicePatchPtrOutput
}

type elasticsearchSpecHttpServicePatchPtrType ElasticsearchSpecHttpServicePatchArgs

func ElasticsearchSpecHttpServicePatchPtr(v *ElasticsearchSpecHttpServicePatchArgs) ElasticsearchSpecHttpServicePatchPtrInput {
	return (*elasticsearchSpecHttpServicePatchPtrType)(v)
}

func (*elasticsearchSpecHttpServicePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServicePatch)(nil)).Elem()
}

func (i *elasticsearchSpecHttpServicePatchPtrType) ToElasticsearchSpecHttpServicePatchPtrOutput() ElasticsearchSpecHttpServicePatchPtrOutput {
	return i.ToElasticsearchSpecHttpServicePatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpServicePatchPtrType) ToElasticsearchSpecHttpServicePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServicePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServicePatchPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecHttpServicePatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServicePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServicePatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServicePatchOutput) ToElasticsearchSpecHttpServicePatchOutput() ElasticsearchSpecHttpServicePatchOutput {
	return o
}

func (o ElasticsearchSpecHttpServicePatchOutput) ToElasticsearchSpecHttpServicePatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServicePatchOutput {
	return o
}

func (o ElasticsearchSpecHttpServicePatchOutput) ToElasticsearchSpecHttpServicePatchPtrOutput() ElasticsearchSpecHttpServicePatchPtrOutput {
	return o.ToElasticsearchSpecHttpServicePatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpServicePatchOutput) ToElasticsearchSpecHttpServicePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServicePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpServicePatch) *ElasticsearchSpecHttpServicePatch {
		return &v
	}).(ElasticsearchSpecHttpServicePatchPtrOutput)
}

func (o ElasticsearchSpecHttpServicePatchOutput) Metadata() ElasticsearchSpecHttpServiceMetadataPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServicePatch) *ElasticsearchSpecHttpServiceMetadataPatch {
		return v.Metadata
	}).(ElasticsearchSpecHttpServiceMetadataPatchPtrOutput)
}

func (o ElasticsearchSpecHttpServicePatchOutput) Spec() ElasticsearchSpecHttpServiceSpecPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServicePatch) *ElasticsearchSpecHttpServiceSpecPatch { return v.Spec }).(ElasticsearchSpecHttpServiceSpecPatchPtrOutput)
}

type ElasticsearchSpecHttpServicePatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServicePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServicePatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServicePatchPtrOutput) ToElasticsearchSpecHttpServicePatchPtrOutput() ElasticsearchSpecHttpServicePatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServicePatchPtrOutput) ToElasticsearchSpecHttpServicePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServicePatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServicePatchPtrOutput) Elem() ElasticsearchSpecHttpServicePatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServicePatch) ElasticsearchSpecHttpServicePatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpServicePatch
		return ret
	}).(ElasticsearchSpecHttpServicePatchOutput)
}

func (o ElasticsearchSpecHttpServicePatchPtrOutput) Metadata() ElasticsearchSpecHttpServiceMetadataPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServicePatch) *ElasticsearchSpecHttpServiceMetadataPatch {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(ElasticsearchSpecHttpServiceMetadataPatchPtrOutput)
}

func (o ElasticsearchSpecHttpServicePatchPtrOutput) Spec() ElasticsearchSpecHttpServiceSpecPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServicePatch) *ElasticsearchSpecHttpServiceSpecPatch {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ElasticsearchSpecHttpServiceSpecPatchPtrOutput)
}

// Spec is the specification of the service.
type ElasticsearchSpecHttpServiceSpec struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []string `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy *string `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies []string `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy *string `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []ElasticsearchSpecHttpServiceSpecPorts `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity       *string                                                `pulumi:"sessionAffinity"`
	SessionAffinityConfig *ElasticsearchSpecHttpServiceSpecSessionAffinityConfig `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution *string `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// ElasticsearchSpecHttpServiceSpecInput is an input type that accepts ElasticsearchSpecHttpServiceSpecArgs and ElasticsearchSpecHttpServiceSpecOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecInput` via:
//
//	ElasticsearchSpecHttpServiceSpecArgs{...}
type ElasticsearchSpecHttpServiceSpecInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecOutput() ElasticsearchSpecHttpServiceSpecOutput
	ToElasticsearchSpecHttpServiceSpecOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecOutput
}

// Spec is the specification of the service.
type ElasticsearchSpecHttpServiceSpecArgs struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts pulumi.BoolPtrInput `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs pulumi.StringArrayInput `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy pulumi.StringPtrInput `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies pulumi.StringArrayInput `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy pulumi.StringPtrInput `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass pulumi.StringPtrInput `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports ElasticsearchSpecHttpServiceSpecPortsArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity       pulumi.StringPtrInput                                         `pulumi:"sessionAffinity"`
	SessionAffinityConfig ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrInput `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution pulumi.StringPtrInput `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ElasticsearchSpecHttpServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpec)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceSpecArgs) ToElasticsearchSpecHttpServiceSpecOutput() ElasticsearchSpecHttpServiceSpecOutput {
	return i.ToElasticsearchSpecHttpServiceSpecOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecArgs) ToElasticsearchSpecHttpServiceSpecOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecOutput)
}

func (i ElasticsearchSpecHttpServiceSpecArgs) ToElasticsearchSpecHttpServiceSpecPtrOutput() ElasticsearchSpecHttpServiceSpecPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecArgs) ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecOutput).ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpServiceSpecPtrInput is an input type that accepts ElasticsearchSpecHttpServiceSpecArgs, ElasticsearchSpecHttpServiceSpecPtr and ElasticsearchSpecHttpServiceSpecPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecPtrInput` via:
//
//	        ElasticsearchSpecHttpServiceSpecArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpServiceSpecPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecPtrOutput() ElasticsearchSpecHttpServiceSpecPtrOutput
	ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecPtrOutput
}

type elasticsearchSpecHttpServiceSpecPtrType ElasticsearchSpecHttpServiceSpecArgs

func ElasticsearchSpecHttpServiceSpecPtr(v *ElasticsearchSpecHttpServiceSpecArgs) ElasticsearchSpecHttpServiceSpecPtrInput {
	return (*elasticsearchSpecHttpServiceSpecPtrType)(v)
}

func (*elasticsearchSpecHttpServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpec)(nil)).Elem()
}

func (i *elasticsearchSpecHttpServiceSpecPtrType) ToElasticsearchSpecHttpServiceSpecPtrOutput() ElasticsearchSpecHttpServiceSpecPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpServiceSpecPtrType) ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecPtrOutput)
}

// Spec is the specification of the service.
type ElasticsearchSpecHttpServiceSpecOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpec)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecOutput) ToElasticsearchSpecHttpServiceSpecOutput() ElasticsearchSpecHttpServiceSpecOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecOutput) ToElasticsearchSpecHttpServiceSpecOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecOutput) ToElasticsearchSpecHttpServiceSpecPtrOutput() ElasticsearchSpecHttpServiceSpecPtrOutput {
	return o.ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpServiceSpecOutput) ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpServiceSpec) *ElasticsearchSpecHttpServiceSpec {
		return &v
	}).(ElasticsearchSpecHttpServiceSpecPtrOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ElasticsearchSpecHttpServiceSpecOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *bool { return v.AllocateLoadBalancerNodePorts }).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) []string { return v.ClusterIPs }).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ElasticsearchSpecHttpServiceSpecOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ElasticsearchSpecHttpServiceSpecOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ElasticsearchSpecHttpServiceSpecOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ElasticsearchSpecHttpServiceSpecOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ElasticsearchSpecHttpServiceSpecOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.InternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ElasticsearchSpecHttpServiceSpecOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ElasticsearchSpecHttpServiceSpecOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.IpFamilyPolicy }).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ElasticsearchSpecHttpServiceSpecOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.LoadBalancerClass }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ElasticsearchSpecHttpServiceSpecOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ElasticsearchSpecHttpServiceSpecOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecOutput) Ports() ElasticsearchSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) []ElasticsearchSpecHttpServiceSpecPorts { return v.Ports }).(ElasticsearchSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ElasticsearchSpecHttpServiceSpecOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ElasticsearchSpecHttpServiceSpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecHttpServiceSpecOutput) SessionAffinityConfig() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfig {
		return v.SessionAffinityConfig
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ElasticsearchSpecHttpServiceSpecOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.TrafficDistribution }).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ElasticsearchSpecHttpServiceSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecHttpServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpec)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecPtrOutput) ToElasticsearchSpecHttpServiceSpecPtrOutput() ElasticsearchSpecHttpServiceSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPtrOutput) ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPtrOutput) Elem() ElasticsearchSpecHttpServiceSpecOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) ElasticsearchSpecHttpServiceSpec {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpServiceSpec
		return ret
	}).(ElasticsearchSpecHttpServiceSpecOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AllocateLoadBalancerNodePorts
	}).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIPs
	}).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.InternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.IpFamilyPolicy
	}).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerClass
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) Ports() ElasticsearchSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) []ElasticsearchSpecHttpServiceSpecPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ElasticsearchSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecHttpServiceSpecPtrOutput) SessionAffinityConfig() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfig {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.TrafficDistribution
	}).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Spec is the specification of the service.
type ElasticsearchSpecHttpServiceSpecPatch struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []string `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy *string `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies []string `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy *string `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []ElasticsearchSpecHttpServiceSpecPortsPatch `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity       *string                                                     `pulumi:"sessionAffinity"`
	SessionAffinityConfig *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatch `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution *string `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// ElasticsearchSpecHttpServiceSpecPatchInput is an input type that accepts ElasticsearchSpecHttpServiceSpecPatchArgs and ElasticsearchSpecHttpServiceSpecPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecPatchInput` via:
//
//	ElasticsearchSpecHttpServiceSpecPatchArgs{...}
type ElasticsearchSpecHttpServiceSpecPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecPatchOutput() ElasticsearchSpecHttpServiceSpecPatchOutput
	ToElasticsearchSpecHttpServiceSpecPatchOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecPatchOutput
}

// Spec is the specification of the service.
type ElasticsearchSpecHttpServiceSpecPatchArgs struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts pulumi.BoolPtrInput `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs pulumi.StringArrayInput `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy pulumi.StringPtrInput `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies pulumi.StringArrayInput `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy pulumi.StringPtrInput `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass pulumi.StringPtrInput `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports ElasticsearchSpecHttpServiceSpecPortsPatchArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity       pulumi.StringPtrInput                                              `pulumi:"sessionAffinity"`
	SessionAffinityConfig ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrInput `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution pulumi.StringPtrInput `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ElasticsearchSpecHttpServiceSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPatch)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceSpecPatchArgs) ToElasticsearchSpecHttpServiceSpecPatchOutput() ElasticsearchSpecHttpServiceSpecPatchOutput {
	return i.ToElasticsearchSpecHttpServiceSpecPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecPatchArgs) ToElasticsearchSpecHttpServiceSpecPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecPatchOutput)
}

func (i ElasticsearchSpecHttpServiceSpecPatchArgs) ToElasticsearchSpecHttpServiceSpecPatchPtrOutput() ElasticsearchSpecHttpServiceSpecPatchPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecPatchArgs) ToElasticsearchSpecHttpServiceSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecPatchOutput).ToElasticsearchSpecHttpServiceSpecPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpServiceSpecPatchPtrInput is an input type that accepts ElasticsearchSpecHttpServiceSpecPatchArgs, ElasticsearchSpecHttpServiceSpecPatchPtr and ElasticsearchSpecHttpServiceSpecPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecPatchPtrInput` via:
//
//	        ElasticsearchSpecHttpServiceSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpServiceSpecPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecPatchPtrOutput() ElasticsearchSpecHttpServiceSpecPatchPtrOutput
	ToElasticsearchSpecHttpServiceSpecPatchPtrOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecPatchPtrOutput
}

type elasticsearchSpecHttpServiceSpecPatchPtrType ElasticsearchSpecHttpServiceSpecPatchArgs

func ElasticsearchSpecHttpServiceSpecPatchPtr(v *ElasticsearchSpecHttpServiceSpecPatchArgs) ElasticsearchSpecHttpServiceSpecPatchPtrInput {
	return (*elasticsearchSpecHttpServiceSpecPatchPtrType)(v)
}

func (*elasticsearchSpecHttpServiceSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpecPatch)(nil)).Elem()
}

func (i *elasticsearchSpecHttpServiceSpecPatchPtrType) ToElasticsearchSpecHttpServiceSpecPatchPtrOutput() ElasticsearchSpecHttpServiceSpecPatchPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpServiceSpecPatchPtrType) ToElasticsearchSpecHttpServiceSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecPatchPtrOutput)
}

// Spec is the specification of the service.
type ElasticsearchSpecHttpServiceSpecPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecPatchOutput) ToElasticsearchSpecHttpServiceSpecPatchOutput() ElasticsearchSpecHttpServiceSpecPatchOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPatchOutput) ToElasticsearchSpecHttpServiceSpecPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPatchOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPatchOutput) ToElasticsearchSpecHttpServiceSpecPatchPtrOutput() ElasticsearchSpecHttpServiceSpecPatchPtrOutput {
	return o.ToElasticsearchSpecHttpServiceSpecPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpServiceSpecPatchOutput) ToElasticsearchSpecHttpServiceSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpServiceSpecPatch) *ElasticsearchSpecHttpServiceSpecPatch {
		return &v
	}).(ElasticsearchSpecHttpServiceSpecPatchPtrOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) *bool { return v.AllocateLoadBalancerNodePorts }).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) []string { return v.ClusterIPs }).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) *string { return v.InternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) *string { return v.IpFamilyPolicy }).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) *string { return v.LoadBalancerClass }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) Ports() ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) []ElasticsearchSpecHttpServiceSpecPortsPatch {
		return v.Ports
	}).(ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecHttpServiceSpecPatchOutput) SessionAffinityConfig() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatch {
		return v.SessionAffinityConfig
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) *string { return v.TrafficDistribution }).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ElasticsearchSpecHttpServiceSpecPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecHttpServiceSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpecPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) ToElasticsearchSpecHttpServiceSpecPatchPtrOutput() ElasticsearchSpecHttpServiceSpecPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) ToElasticsearchSpecHttpServiceSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) Elem() ElasticsearchSpecHttpServiceSpecPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) ElasticsearchSpecHttpServiceSpecPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpServiceSpecPatch
		return ret
	}).(ElasticsearchSpecHttpServiceSpecPatchOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.AllocateLoadBalancerNodePorts
	}).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIPs
	}).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.InternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.IpFamilyPolicy
	}).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerClass
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) Ports() ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) []ElasticsearchSpecHttpServiceSpecPortsPatch {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) SessionAffinityConfig() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatch {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.TrafficDistribution
	}).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ElasticsearchSpecHttpServiceSpecPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ServicePort contains information on service's port.
type ElasticsearchSpecHttpServiceSpecPorts struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port *int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort interface{} `pulumi:"targetPort"`
}

// ElasticsearchSpecHttpServiceSpecPortsInput is an input type that accepts ElasticsearchSpecHttpServiceSpecPortsArgs and ElasticsearchSpecHttpServiceSpecPortsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecPortsInput` via:
//
//	ElasticsearchSpecHttpServiceSpecPortsArgs{...}
type ElasticsearchSpecHttpServiceSpecPortsInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecPortsOutput() ElasticsearchSpecHttpServiceSpecPortsOutput
	ToElasticsearchSpecHttpServiceSpecPortsOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecPortsOutput
}

// ServicePort contains information on service's port.
type ElasticsearchSpecHttpServiceSpecPortsArgs struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort pulumi.Input `pulumi:"targetPort"`
}

func (ElasticsearchSpecHttpServiceSpecPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceSpecPortsArgs) ToElasticsearchSpecHttpServiceSpecPortsOutput() ElasticsearchSpecHttpServiceSpecPortsOutput {
	return i.ToElasticsearchSpecHttpServiceSpecPortsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecPortsArgs) ToElasticsearchSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecPortsOutput)
}

// ElasticsearchSpecHttpServiceSpecPortsArrayInput is an input type that accepts ElasticsearchSpecHttpServiceSpecPortsArray and ElasticsearchSpecHttpServiceSpecPortsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecPortsArrayInput` via:
//
//	ElasticsearchSpecHttpServiceSpecPortsArray{ ElasticsearchSpecHttpServiceSpecPortsArgs{...} }
type ElasticsearchSpecHttpServiceSpecPortsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecPortsArrayOutput() ElasticsearchSpecHttpServiceSpecPortsArrayOutput
	ToElasticsearchSpecHttpServiceSpecPortsArrayOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecPortsArrayOutput
}

type ElasticsearchSpecHttpServiceSpecPortsArray []ElasticsearchSpecHttpServiceSpecPortsInput

func (ElasticsearchSpecHttpServiceSpecPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceSpecPortsArray) ToElasticsearchSpecHttpServiceSpecPortsArrayOutput() ElasticsearchSpecHttpServiceSpecPortsArrayOutput {
	return i.ToElasticsearchSpecHttpServiceSpecPortsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecPortsArray) ToElasticsearchSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecPortsArrayOutput)
}

// ServicePort contains information on service's port.
type ElasticsearchSpecHttpServiceSpecPortsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecPortsOutput) ToElasticsearchSpecHttpServiceSpecPortsOutput() ElasticsearchSpecHttpServiceSpecPortsOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPortsOutput) ToElasticsearchSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPortsOutput {
	return o
}

// The application protocol for this port.
// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
// This field follows standard Kubernetes label syntax.
// Valid values are either:
//
// * Un-prefixed protocol names - reserved for IANA standard service names (as per
// RFC-6335 and https://www.iana.org/assignments/service-names).
//
// * Kubernetes-defined prefixed names:
//   - 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
//   - 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
//   - 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
//
// * Other protocols should use implementation-defined prefixed names such as
// mycompany.com/my-custom-protocol.
func (o ElasticsearchSpecHttpServiceSpecPortsOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPorts) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port within the service. This must be a DNS_LABEL.
// All ports within a ServiceSpec must have unique names. When considering
// the endpoints for a Service, this must match the 'name' field in the
// EndpointPort.
// Optional if only one ServicePort is defined on this service.
func (o ElasticsearchSpecHttpServiceSpecPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type is
// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
// specified, in-range, and not in use it will be used, otherwise the
// operation will fail.  If not specified, a port will be allocated if this
// Service requires one.  If this field is specified when creating a
// Service which does not need it, creation will fail. This field will be
// wiped when updating a Service to no longer need it (e.g. changing type
// from NodePort to ClusterIP).
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o ElasticsearchSpecHttpServiceSpecPortsOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPorts) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o ElasticsearchSpecHttpServiceSpecPortsOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPorts) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
// Default is TCP.
func (o ElasticsearchSpecHttpServiceSpecPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service.
// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
// If this is a string, it will be looked up as a named port in the
// target Pod's container ports. If this is not specified, the value
// of the 'port' field is used (an identity map).
// This field is ignored for services with clusterIP=None, and should be
// omitted or set equal to the 'port' field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o ElasticsearchSpecHttpServiceSpecPortsOutput) TargetPort() pulumi.AnyOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPorts) interface{} { return v.TargetPort }).(pulumi.AnyOutput)
}

type ElasticsearchSpecHttpServiceSpecPortsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecPortsArrayOutput) ToElasticsearchSpecHttpServiceSpecPortsArrayOutput() ElasticsearchSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPortsArrayOutput) ToElasticsearchSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPortsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecHttpServiceSpecPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecHttpServiceSpecPorts {
		return vs[0].([]ElasticsearchSpecHttpServiceSpecPorts)[vs[1].(int)]
	}).(ElasticsearchSpecHttpServiceSpecPortsOutput)
}

// ServicePort contains information on service's port.
type ElasticsearchSpecHttpServiceSpecPortsPatch struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port *int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort interface{} `pulumi:"targetPort"`
}

// ElasticsearchSpecHttpServiceSpecPortsPatchInput is an input type that accepts ElasticsearchSpecHttpServiceSpecPortsPatchArgs and ElasticsearchSpecHttpServiceSpecPortsPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecPortsPatchInput` via:
//
//	ElasticsearchSpecHttpServiceSpecPortsPatchArgs{...}
type ElasticsearchSpecHttpServiceSpecPortsPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecPortsPatchOutput() ElasticsearchSpecHttpServiceSpecPortsPatchOutput
	ToElasticsearchSpecHttpServiceSpecPortsPatchOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecPortsPatchOutput
}

// ServicePort contains information on service's port.
type ElasticsearchSpecHttpServiceSpecPortsPatchArgs struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort pulumi.Input `pulumi:"targetPort"`
}

func (ElasticsearchSpecHttpServiceSpecPortsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPortsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceSpecPortsPatchArgs) ToElasticsearchSpecHttpServiceSpecPortsPatchOutput() ElasticsearchSpecHttpServiceSpecPortsPatchOutput {
	return i.ToElasticsearchSpecHttpServiceSpecPortsPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecPortsPatchArgs) ToElasticsearchSpecHttpServiceSpecPortsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPortsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecPortsPatchOutput)
}

// ElasticsearchSpecHttpServiceSpecPortsPatchArrayInput is an input type that accepts ElasticsearchSpecHttpServiceSpecPortsPatchArray and ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecPortsPatchArrayInput` via:
//
//	ElasticsearchSpecHttpServiceSpecPortsPatchArray{ ElasticsearchSpecHttpServiceSpecPortsPatchArgs{...} }
type ElasticsearchSpecHttpServiceSpecPortsPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput() ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput
	ToElasticsearchSpecHttpServiceSpecPortsPatchArrayOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput
}

type ElasticsearchSpecHttpServiceSpecPortsPatchArray []ElasticsearchSpecHttpServiceSpecPortsPatchInput

func (ElasticsearchSpecHttpServiceSpecPortsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecHttpServiceSpecPortsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceSpecPortsPatchArray) ToElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput() ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput {
	return i.ToElasticsearchSpecHttpServiceSpecPortsPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecPortsPatchArray) ToElasticsearchSpecHttpServiceSpecPortsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput)
}

// ServicePort contains information on service's port.
type ElasticsearchSpecHttpServiceSpecPortsPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecPortsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPortsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecPortsPatchOutput) ToElasticsearchSpecHttpServiceSpecPortsPatchOutput() ElasticsearchSpecHttpServiceSpecPortsPatchOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPortsPatchOutput) ToElasticsearchSpecHttpServiceSpecPortsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPortsPatchOutput {
	return o
}

// The application protocol for this port.
// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
// This field follows standard Kubernetes label syntax.
// Valid values are either:
//
// * Un-prefixed protocol names - reserved for IANA standard service names (as per
// RFC-6335 and https://www.iana.org/assignments/service-names).
//
// * Kubernetes-defined prefixed names:
//   - 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
//   - 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
//   - 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
//
// * Other protocols should use implementation-defined prefixed names such as
// mycompany.com/my-custom-protocol.
func (o ElasticsearchSpecHttpServiceSpecPortsPatchOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPortsPatch) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port within the service. This must be a DNS_LABEL.
// All ports within a ServiceSpec must have unique names. When considering
// the endpoints for a Service, this must match the 'name' field in the
// EndpointPort.
// Optional if only one ServicePort is defined on this service.
func (o ElasticsearchSpecHttpServiceSpecPortsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPortsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type is
// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
// specified, in-range, and not in use it will be used, otherwise the
// operation will fail.  If not specified, a port will be allocated if this
// Service requires one.  If this field is specified when creating a
// Service which does not need it, creation will fail. This field will be
// wiped when updating a Service to no longer need it (e.g. changing type
// from NodePort to ClusterIP).
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o ElasticsearchSpecHttpServiceSpecPortsPatchOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPortsPatch) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o ElasticsearchSpecHttpServiceSpecPortsPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPortsPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
// Default is TCP.
func (o ElasticsearchSpecHttpServiceSpecPortsPatchOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPortsPatch) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service.
// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
// If this is a string, it will be looked up as a named port in the
// target Pod's container ports. If this is not specified, the value
// of the 'port' field is used (an identity map).
// This field is ignored for services with clusterIP=None, and should be
// omitted or set equal to the 'port' field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o ElasticsearchSpecHttpServiceSpecPortsPatchOutput) TargetPort() pulumi.AnyOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPortsPatch) interface{} { return v.TargetPort }).(pulumi.AnyOutput)
}

type ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecHttpServiceSpecPortsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput) ToElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput() ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput) ToElasticsearchSpecHttpServiceSpecPortsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecHttpServiceSpecPortsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecHttpServiceSpecPortsPatch {
		return vs[0].([]ElasticsearchSpecHttpServiceSpecPortsPatch)[vs[1].(int)]
	}).(ElasticsearchSpecHttpServiceSpecPortsPatchOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfig struct {
	ClientIP *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP `pulumi:"clientIP"`
}

// ElasticsearchSpecHttpServiceSpecSessionAffinityConfigInput is an input type that accepts ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs and ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecSessionAffinityConfigInput` via:
//
//	ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs{...}
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput
	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs struct {
	ClientIP ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput `pulumi:"clientIP"`
}

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput)
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput).ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrInput is an input type that accepts ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs, ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtr and ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrInput` via:
//
//	        ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput
	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput
}

type elasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrType ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs

func ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtr(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrInput {
	return (*elasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrType)(v)
}

func (*elasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i *elasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrType) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrType) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpServiceSpecSessionAffinityConfig) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfig {
		return &v
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput) ClientIP() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecSessionAffinityConfig) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP {
		return v.ClientIP
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) Elem() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfig) ElasticsearchSpecHttpServiceSpecSessionAffinityConfig {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpServiceSpecSessionAffinityConfig
		return ret
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput)
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ClientIP() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfig) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPInput is an input type that accepts ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs and ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPInput` via:
//
//	ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs{...}
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput
	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput)
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput).ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput is an input type that accepts ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs, ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtr and ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput` via:
//
//	        ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput
	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput
}

type elasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs

func ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtr(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput {
	return (*elasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType)(v)
}

func (*elasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (i *elasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP {
		return &v
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) Elem() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP
		return ret
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchInput is an input type that accepts ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs and ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchInput` via:
//
//	ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs{...}
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput
	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput)
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput).ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrInput is an input type that accepts ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs, ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtr and ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrInput` via:
//
//	        ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput
	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput
}

type elasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrType ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs

func ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtr(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrInput {
	return (*elasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrType)(v)
}

func (*elasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch)(nil)).Elem()
}

func (i *elasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrType) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrType) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch {
		return &v
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch) *int {
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput) Elem() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch
		return ret
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatch struct {
	ClientIP *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch `pulumi:"clientIP"`
}

// ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchInput is an input type that accepts ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs and ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchInput` via:
//
//	ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs{...}
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput
	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs struct {
	ClientIP ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrInput `pulumi:"clientIP"`
}

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatch)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput)
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput).ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrInput is an input type that accepts ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs, ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtr and ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrInput` via:
//
//	        ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput
	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput
}

type elasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrType ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs

func ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtr(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrInput {
	return (*elasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrType)(v)
}

func (*elasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatch)(nil)).Elem()
}

func (i *elasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrType) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrType) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatch) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatch {
		return &v
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput)
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput) ClientIP() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatch) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch {
		return v.ClientIP
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput)
}

type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput) Elem() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatch) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatch
		return ret
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput)
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput) ClientIP() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatch) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type ElasticsearchSpecHttpTls struct {
	Certificate           *ElasticsearchSpecHttpTlsCertificate           `pulumi:"certificate"`
	SelfSignedCertificate *ElasticsearchSpecHttpTlsSelfSignedCertificate `pulumi:"selfSignedCertificate"`
}

// ElasticsearchSpecHttpTlsInput is an input type that accepts ElasticsearchSpecHttpTlsArgs and ElasticsearchSpecHttpTlsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsInput` via:
//
//	ElasticsearchSpecHttpTlsArgs{...}
type ElasticsearchSpecHttpTlsInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsOutput() ElasticsearchSpecHttpTlsOutput
	ToElasticsearchSpecHttpTlsOutputWithContext(context.Context) ElasticsearchSpecHttpTlsOutput
}

// TLS defines options for configuring TLS for HTTP.
type ElasticsearchSpecHttpTlsArgs struct {
	Certificate           ElasticsearchSpecHttpTlsCertificatePtrInput           `pulumi:"certificate"`
	SelfSignedCertificate ElasticsearchSpecHttpTlsSelfSignedCertificatePtrInput `pulumi:"selfSignedCertificate"`
}

func (ElasticsearchSpecHttpTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTls)(nil)).Elem()
}

func (i ElasticsearchSpecHttpTlsArgs) ToElasticsearchSpecHttpTlsOutput() ElasticsearchSpecHttpTlsOutput {
	return i.ToElasticsearchSpecHttpTlsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsArgs) ToElasticsearchSpecHttpTlsOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsOutput)
}

func (i ElasticsearchSpecHttpTlsArgs) ToElasticsearchSpecHttpTlsPtrOutput() ElasticsearchSpecHttpTlsPtrOutput {
	return i.ToElasticsearchSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsArgs) ToElasticsearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsOutput).ToElasticsearchSpecHttpTlsPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpTlsPtrInput is an input type that accepts ElasticsearchSpecHttpTlsArgs, ElasticsearchSpecHttpTlsPtr and ElasticsearchSpecHttpTlsPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsPtrInput` via:
//
//	        ElasticsearchSpecHttpTlsArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpTlsPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsPtrOutput() ElasticsearchSpecHttpTlsPtrOutput
	ToElasticsearchSpecHttpTlsPtrOutputWithContext(context.Context) ElasticsearchSpecHttpTlsPtrOutput
}

type elasticsearchSpecHttpTlsPtrType ElasticsearchSpecHttpTlsArgs

func ElasticsearchSpecHttpTlsPtr(v *ElasticsearchSpecHttpTlsArgs) ElasticsearchSpecHttpTlsPtrInput {
	return (*elasticsearchSpecHttpTlsPtrType)(v)
}

func (*elasticsearchSpecHttpTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTls)(nil)).Elem()
}

func (i *elasticsearchSpecHttpTlsPtrType) ToElasticsearchSpecHttpTlsPtrOutput() ElasticsearchSpecHttpTlsPtrOutput {
	return i.ToElasticsearchSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpTlsPtrType) ToElasticsearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type ElasticsearchSpecHttpTlsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTls)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsOutput) ToElasticsearchSpecHttpTlsOutput() ElasticsearchSpecHttpTlsOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsOutput) ToElasticsearchSpecHttpTlsOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsOutput) ToElasticsearchSpecHttpTlsPtrOutput() ElasticsearchSpecHttpTlsPtrOutput {
	return o.ToElasticsearchSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpTlsOutput) ToElasticsearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpTls) *ElasticsearchSpecHttpTls {
		return &v
	}).(ElasticsearchSpecHttpTlsPtrOutput)
}

func (o ElasticsearchSpecHttpTlsOutput) Certificate() ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTls) *ElasticsearchSpecHttpTlsCertificate { return v.Certificate }).(ElasticsearchSpecHttpTlsCertificatePtrOutput)
}

func (o ElasticsearchSpecHttpTlsOutput) SelfSignedCertificate() ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTls) *ElasticsearchSpecHttpTlsSelfSignedCertificate {
		return v.SelfSignedCertificate
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

type ElasticsearchSpecHttpTlsPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTls)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsPtrOutput) ToElasticsearchSpecHttpTlsPtrOutput() ElasticsearchSpecHttpTlsPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsPtrOutput) ToElasticsearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsPtrOutput) Elem() ElasticsearchSpecHttpTlsOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTls) ElasticsearchSpecHttpTls {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpTls
		return ret
	}).(ElasticsearchSpecHttpTlsOutput)
}

func (o ElasticsearchSpecHttpTlsPtrOutput) Certificate() ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTls) *ElasticsearchSpecHttpTlsCertificate {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(ElasticsearchSpecHttpTlsCertificatePtrOutput)
}

func (o ElasticsearchSpecHttpTlsPtrOutput) SelfSignedCertificate() ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTls) *ElasticsearchSpecHttpTlsSelfSignedCertificate {
		if v == nil {
			return nil
		}
		return v.SelfSignedCertificate
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type ElasticsearchSpecHttpTlsCertificate struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticsearchSpecHttpTlsCertificateInput is an input type that accepts ElasticsearchSpecHttpTlsCertificateArgs and ElasticsearchSpecHttpTlsCertificateOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsCertificateInput` via:
//
//	ElasticsearchSpecHttpTlsCertificateArgs{...}
type ElasticsearchSpecHttpTlsCertificateInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsCertificateOutput() ElasticsearchSpecHttpTlsCertificateOutput
	ToElasticsearchSpecHttpTlsCertificateOutputWithContext(context.Context) ElasticsearchSpecHttpTlsCertificateOutput
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type ElasticsearchSpecHttpTlsCertificateArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticsearchSpecHttpTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (i ElasticsearchSpecHttpTlsCertificateArgs) ToElasticsearchSpecHttpTlsCertificateOutput() ElasticsearchSpecHttpTlsCertificateOutput {
	return i.ToElasticsearchSpecHttpTlsCertificateOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsCertificateArgs) ToElasticsearchSpecHttpTlsCertificateOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsCertificateOutput)
}

func (i ElasticsearchSpecHttpTlsCertificateArgs) ToElasticsearchSpecHttpTlsCertificatePtrOutput() ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return i.ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsCertificateArgs) ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsCertificateOutput).ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpTlsCertificatePtrInput is an input type that accepts ElasticsearchSpecHttpTlsCertificateArgs, ElasticsearchSpecHttpTlsCertificatePtr and ElasticsearchSpecHttpTlsCertificatePtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsCertificatePtrInput` via:
//
//	        ElasticsearchSpecHttpTlsCertificateArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpTlsCertificatePtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsCertificatePtrOutput() ElasticsearchSpecHttpTlsCertificatePtrOutput
	ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(context.Context) ElasticsearchSpecHttpTlsCertificatePtrOutput
}

type elasticsearchSpecHttpTlsCertificatePtrType ElasticsearchSpecHttpTlsCertificateArgs

func ElasticsearchSpecHttpTlsCertificatePtr(v *ElasticsearchSpecHttpTlsCertificateArgs) ElasticsearchSpecHttpTlsCertificatePtrInput {
	return (*elasticsearchSpecHttpTlsCertificatePtrType)(v)
}

func (*elasticsearchSpecHttpTlsCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (i *elasticsearchSpecHttpTlsCertificatePtrType) ToElasticsearchSpecHttpTlsCertificatePtrOutput() ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return i.ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpTlsCertificatePtrType) ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type ElasticsearchSpecHttpTlsCertificateOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsCertificateOutput) ToElasticsearchSpecHttpTlsCertificateOutput() ElasticsearchSpecHttpTlsCertificateOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsCertificateOutput) ToElasticsearchSpecHttpTlsCertificateOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificateOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsCertificateOutput) ToElasticsearchSpecHttpTlsCertificatePtrOutput() ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return o.ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpTlsCertificateOutput) ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpTlsCertificate) *ElasticsearchSpecHttpTlsCertificate {
		return &v
	}).(ElasticsearchSpecHttpTlsCertificatePtrOutput)
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecHttpTlsCertificateOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsCertificate) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecHttpTlsCertificatePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsCertificatePtrOutput) ToElasticsearchSpecHttpTlsCertificatePtrOutput() ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsCertificatePtrOutput) ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsCertificatePtrOutput) Elem() ElasticsearchSpecHttpTlsCertificateOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsCertificate) ElasticsearchSpecHttpTlsCertificate {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpTlsCertificate
		return ret
	}).(ElasticsearchSpecHttpTlsCertificateOutput)
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecHttpTlsCertificatePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsCertificate) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type ElasticsearchSpecHttpTlsCertificatePatch struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticsearchSpecHttpTlsCertificatePatchInput is an input type that accepts ElasticsearchSpecHttpTlsCertificatePatchArgs and ElasticsearchSpecHttpTlsCertificatePatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsCertificatePatchInput` via:
//
//	ElasticsearchSpecHttpTlsCertificatePatchArgs{...}
type ElasticsearchSpecHttpTlsCertificatePatchInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsCertificatePatchOutput() ElasticsearchSpecHttpTlsCertificatePatchOutput
	ToElasticsearchSpecHttpTlsCertificatePatchOutputWithContext(context.Context) ElasticsearchSpecHttpTlsCertificatePatchOutput
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type ElasticsearchSpecHttpTlsCertificatePatchArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticsearchSpecHttpTlsCertificatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsCertificatePatch)(nil)).Elem()
}

func (i ElasticsearchSpecHttpTlsCertificatePatchArgs) ToElasticsearchSpecHttpTlsCertificatePatchOutput() ElasticsearchSpecHttpTlsCertificatePatchOutput {
	return i.ToElasticsearchSpecHttpTlsCertificatePatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsCertificatePatchArgs) ToElasticsearchSpecHttpTlsCertificatePatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsCertificatePatchOutput)
}

func (i ElasticsearchSpecHttpTlsCertificatePatchArgs) ToElasticsearchSpecHttpTlsCertificatePatchPtrOutput() ElasticsearchSpecHttpTlsCertificatePatchPtrOutput {
	return i.ToElasticsearchSpecHttpTlsCertificatePatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsCertificatePatchArgs) ToElasticsearchSpecHttpTlsCertificatePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsCertificatePatchOutput).ToElasticsearchSpecHttpTlsCertificatePatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpTlsCertificatePatchPtrInput is an input type that accepts ElasticsearchSpecHttpTlsCertificatePatchArgs, ElasticsearchSpecHttpTlsCertificatePatchPtr and ElasticsearchSpecHttpTlsCertificatePatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsCertificatePatchPtrInput` via:
//
//	        ElasticsearchSpecHttpTlsCertificatePatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpTlsCertificatePatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsCertificatePatchPtrOutput() ElasticsearchSpecHttpTlsCertificatePatchPtrOutput
	ToElasticsearchSpecHttpTlsCertificatePatchPtrOutputWithContext(context.Context) ElasticsearchSpecHttpTlsCertificatePatchPtrOutput
}

type elasticsearchSpecHttpTlsCertificatePatchPtrType ElasticsearchSpecHttpTlsCertificatePatchArgs

func ElasticsearchSpecHttpTlsCertificatePatchPtr(v *ElasticsearchSpecHttpTlsCertificatePatchArgs) ElasticsearchSpecHttpTlsCertificatePatchPtrInput {
	return (*elasticsearchSpecHttpTlsCertificatePatchPtrType)(v)
}

func (*elasticsearchSpecHttpTlsCertificatePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTlsCertificatePatch)(nil)).Elem()
}

func (i *elasticsearchSpecHttpTlsCertificatePatchPtrType) ToElasticsearchSpecHttpTlsCertificatePatchPtrOutput() ElasticsearchSpecHttpTlsCertificatePatchPtrOutput {
	return i.ToElasticsearchSpecHttpTlsCertificatePatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpTlsCertificatePatchPtrType) ToElasticsearchSpecHttpTlsCertificatePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsCertificatePatchPtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type ElasticsearchSpecHttpTlsCertificatePatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsCertificatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsCertificatePatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsCertificatePatchOutput) ToElasticsearchSpecHttpTlsCertificatePatchOutput() ElasticsearchSpecHttpTlsCertificatePatchOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsCertificatePatchOutput) ToElasticsearchSpecHttpTlsCertificatePatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificatePatchOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsCertificatePatchOutput) ToElasticsearchSpecHttpTlsCertificatePatchPtrOutput() ElasticsearchSpecHttpTlsCertificatePatchPtrOutput {
	return o.ToElasticsearchSpecHttpTlsCertificatePatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpTlsCertificatePatchOutput) ToElasticsearchSpecHttpTlsCertificatePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificatePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpTlsCertificatePatch) *ElasticsearchSpecHttpTlsCertificatePatch {
		return &v
	}).(ElasticsearchSpecHttpTlsCertificatePatchPtrOutput)
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecHttpTlsCertificatePatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsCertificatePatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecHttpTlsCertificatePatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsCertificatePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTlsCertificatePatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsCertificatePatchPtrOutput) ToElasticsearchSpecHttpTlsCertificatePatchPtrOutput() ElasticsearchSpecHttpTlsCertificatePatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsCertificatePatchPtrOutput) ToElasticsearchSpecHttpTlsCertificatePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificatePatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsCertificatePatchPtrOutput) Elem() ElasticsearchSpecHttpTlsCertificatePatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsCertificatePatch) ElasticsearchSpecHttpTlsCertificatePatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpTlsCertificatePatch
		return ret
	}).(ElasticsearchSpecHttpTlsCertificatePatchOutput)
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecHttpTlsCertificatePatchPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsCertificatePatch) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type ElasticsearchSpecHttpTlsPatch struct {
	Certificate           *ElasticsearchSpecHttpTlsCertificatePatch           `pulumi:"certificate"`
	SelfSignedCertificate *ElasticsearchSpecHttpTlsSelfSignedCertificatePatch `pulumi:"selfSignedCertificate"`
}

// ElasticsearchSpecHttpTlsPatchInput is an input type that accepts ElasticsearchSpecHttpTlsPatchArgs and ElasticsearchSpecHttpTlsPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsPatchInput` via:
//
//	ElasticsearchSpecHttpTlsPatchArgs{...}
type ElasticsearchSpecHttpTlsPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsPatchOutput() ElasticsearchSpecHttpTlsPatchOutput
	ToElasticsearchSpecHttpTlsPatchOutputWithContext(context.Context) ElasticsearchSpecHttpTlsPatchOutput
}

// TLS defines options for configuring TLS for HTTP.
type ElasticsearchSpecHttpTlsPatchArgs struct {
	Certificate           ElasticsearchSpecHttpTlsCertificatePatchPtrInput           `pulumi:"certificate"`
	SelfSignedCertificate ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrInput `pulumi:"selfSignedCertificate"`
}

func (ElasticsearchSpecHttpTlsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecHttpTlsPatchArgs) ToElasticsearchSpecHttpTlsPatchOutput() ElasticsearchSpecHttpTlsPatchOutput {
	return i.ToElasticsearchSpecHttpTlsPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsPatchArgs) ToElasticsearchSpecHttpTlsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsPatchOutput)
}

func (i ElasticsearchSpecHttpTlsPatchArgs) ToElasticsearchSpecHttpTlsPatchPtrOutput() ElasticsearchSpecHttpTlsPatchPtrOutput {
	return i.ToElasticsearchSpecHttpTlsPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsPatchArgs) ToElasticsearchSpecHttpTlsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsPatchOutput).ToElasticsearchSpecHttpTlsPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpTlsPatchPtrInput is an input type that accepts ElasticsearchSpecHttpTlsPatchArgs, ElasticsearchSpecHttpTlsPatchPtr and ElasticsearchSpecHttpTlsPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsPatchPtrInput` via:
//
//	        ElasticsearchSpecHttpTlsPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpTlsPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsPatchPtrOutput() ElasticsearchSpecHttpTlsPatchPtrOutput
	ToElasticsearchSpecHttpTlsPatchPtrOutputWithContext(context.Context) ElasticsearchSpecHttpTlsPatchPtrOutput
}

type elasticsearchSpecHttpTlsPatchPtrType ElasticsearchSpecHttpTlsPatchArgs

func ElasticsearchSpecHttpTlsPatchPtr(v *ElasticsearchSpecHttpTlsPatchArgs) ElasticsearchSpecHttpTlsPatchPtrInput {
	return (*elasticsearchSpecHttpTlsPatchPtrType)(v)
}

func (*elasticsearchSpecHttpTlsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTlsPatch)(nil)).Elem()
}

func (i *elasticsearchSpecHttpTlsPatchPtrType) ToElasticsearchSpecHttpTlsPatchPtrOutput() ElasticsearchSpecHttpTlsPatchPtrOutput {
	return i.ToElasticsearchSpecHttpTlsPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpTlsPatchPtrType) ToElasticsearchSpecHttpTlsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsPatchPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type ElasticsearchSpecHttpTlsPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsPatchOutput) ToElasticsearchSpecHttpTlsPatchOutput() ElasticsearchSpecHttpTlsPatchOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsPatchOutput) ToElasticsearchSpecHttpTlsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsPatchOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsPatchOutput) ToElasticsearchSpecHttpTlsPatchPtrOutput() ElasticsearchSpecHttpTlsPatchPtrOutput {
	return o.ToElasticsearchSpecHttpTlsPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpTlsPatchOutput) ToElasticsearchSpecHttpTlsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpTlsPatch) *ElasticsearchSpecHttpTlsPatch {
		return &v
	}).(ElasticsearchSpecHttpTlsPatchPtrOutput)
}

func (o ElasticsearchSpecHttpTlsPatchOutput) Certificate() ElasticsearchSpecHttpTlsCertificatePatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsPatch) *ElasticsearchSpecHttpTlsCertificatePatch { return v.Certificate }).(ElasticsearchSpecHttpTlsCertificatePatchPtrOutput)
}

func (o ElasticsearchSpecHttpTlsPatchOutput) SelfSignedCertificate() ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsPatch) *ElasticsearchSpecHttpTlsSelfSignedCertificatePatch {
		return v.SelfSignedCertificate
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput)
}

type ElasticsearchSpecHttpTlsPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTlsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsPatchPtrOutput) ToElasticsearchSpecHttpTlsPatchPtrOutput() ElasticsearchSpecHttpTlsPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsPatchPtrOutput) ToElasticsearchSpecHttpTlsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsPatchPtrOutput) Elem() ElasticsearchSpecHttpTlsPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsPatch) ElasticsearchSpecHttpTlsPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpTlsPatch
		return ret
	}).(ElasticsearchSpecHttpTlsPatchOutput)
}

func (o ElasticsearchSpecHttpTlsPatchPtrOutput) Certificate() ElasticsearchSpecHttpTlsCertificatePatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsPatch) *ElasticsearchSpecHttpTlsCertificatePatch {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(ElasticsearchSpecHttpTlsCertificatePatchPtrOutput)
}

func (o ElasticsearchSpecHttpTlsPatchPtrOutput) SelfSignedCertificate() ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsPatch) *ElasticsearchSpecHttpTlsSelfSignedCertificatePatch {
		if v == nil {
			return nil
		}
		return v.SelfSignedCertificate
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecHttpTlsSelfSignedCertificate struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled *bool `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames []ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames `pulumi:"subjectAltNames"`
}

// ElasticsearchSpecHttpTlsSelfSignedCertificateInput is an input type that accepts ElasticsearchSpecHttpTlsSelfSignedCertificateArgs and ElasticsearchSpecHttpTlsSelfSignedCertificateOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsSelfSignedCertificateInput` via:
//
//	ElasticsearchSpecHttpTlsSelfSignedCertificateArgs{...}
type ElasticsearchSpecHttpTlsSelfSignedCertificateInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsSelfSignedCertificateOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateOutput
	ToElasticsearchSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateOutput
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecHttpTlsSelfSignedCertificateArgs struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput `pulumi:"subjectAltNames"`
}

func (ElasticsearchSpecHttpTlsSelfSignedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificateOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateOutput {
	return i.ToElasticsearchSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsSelfSignedCertificateOutput)
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsSelfSignedCertificateOutput).ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpTlsSelfSignedCertificatePtrInput is an input type that accepts ElasticsearchSpecHttpTlsSelfSignedCertificateArgs, ElasticsearchSpecHttpTlsSelfSignedCertificatePtr and ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsSelfSignedCertificatePtrInput` via:
//
//	        ElasticsearchSpecHttpTlsSelfSignedCertificateArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpTlsSelfSignedCertificatePtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput
	ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput
}

type elasticsearchSpecHttpTlsSelfSignedCertificatePtrType ElasticsearchSpecHttpTlsSelfSignedCertificateArgs

func ElasticsearchSpecHttpTlsSelfSignedCertificatePtr(v *ElasticsearchSpecHttpTlsSelfSignedCertificateArgs) ElasticsearchSpecHttpTlsSelfSignedCertificatePtrInput {
	return (*elasticsearchSpecHttpTlsSelfSignedCertificatePtrType)(v)
}

func (*elasticsearchSpecHttpTlsSelfSignedCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i *elasticsearchSpecHttpTlsSelfSignedCertificatePtrType) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpTlsSelfSignedCertificatePtrType) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecHttpTlsSelfSignedCertificateOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsSelfSignedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpTlsSelfSignedCertificate) *ElasticsearchSpecHttpTlsSelfSignedCertificate {
		return &v
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificateOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsSelfSignedCertificate) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificateOutput) SubjectAltNames() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsSelfSignedCertificate) []ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return v.SubjectAltNames
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

type ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput) Elem() ElasticsearchSpecHttpTlsSelfSignedCertificateOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsSelfSignedCertificate) ElasticsearchSpecHttpTlsSelfSignedCertificate {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpTlsSelfSignedCertificate
		return ret
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificateOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsSelfSignedCertificate) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput) SubjectAltNames() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsSelfSignedCertificate) []ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecHttpTlsSelfSignedCertificatePatch struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled *bool `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames []ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch `pulumi:"subjectAltNames"`
}

// ElasticsearchSpecHttpTlsSelfSignedCertificatePatchInput is an input type that accepts ElasticsearchSpecHttpTlsSelfSignedCertificatePatchArgs and ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsSelfSignedCertificatePatchInput` via:
//
//	ElasticsearchSpecHttpTlsSelfSignedCertificatePatchArgs{...}
type ElasticsearchSpecHttpTlsSelfSignedCertificatePatchInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput
	ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutputWithContext(context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecHttpTlsSelfSignedCertificatePatchArgs struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayInput `pulumi:"subjectAltNames"`
}

func (ElasticsearchSpecHttpTlsSelfSignedCertificatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificatePatch)(nil)).Elem()
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificatePatchArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput {
	return i.ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificatePatchArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput)
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificatePatchArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return i.ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificatePatchArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput).ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrInput is an input type that accepts ElasticsearchSpecHttpTlsSelfSignedCertificatePatchArgs, ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtr and ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrInput` via:
//
//	        ElasticsearchSpecHttpTlsSelfSignedCertificatePatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput
	ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput
}

type elasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrType ElasticsearchSpecHttpTlsSelfSignedCertificatePatchArgs

func ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtr(v *ElasticsearchSpecHttpTlsSelfSignedCertificatePatchArgs) ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrInput {
	return (*elasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrType)(v)
}

func (*elasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTlsSelfSignedCertificatePatch)(nil)).Elem()
}

func (i *elasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrType) ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return i.ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrType) ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificatePatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return o.ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpTlsSelfSignedCertificatePatch) *ElasticsearchSpecHttpTlsSelfSignedCertificatePatch {
		return &v
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsSelfSignedCertificatePatch) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput) SubjectAltNames() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsSelfSignedCertificatePatch) []ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch {
		return v.SubjectAltNames
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput)
}

type ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTlsSelfSignedCertificatePatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput) Elem() ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsSelfSignedCertificatePatch) ElasticsearchSpecHttpTlsSelfSignedCertificatePatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpTlsSelfSignedCertificatePatch
		return ret
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsSelfSignedCertificatePatch) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput) SubjectAltNames() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsSelfSignedCertificatePatch) []ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames struct {
	// DNS is the DNS name of the subject.
	Dns *string `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip *string `pulumi:"ip"`
}

// ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput is an input type that accepts ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs and ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput` via:
//
//	ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...}
type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
	ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs struct {
	// DNS is the DNS name of the subject.
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return i.ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput is an input type that accepts ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray and ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput` via:
//
//	ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{ ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...} }
type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
	ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
}

type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray []ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput

func (ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return i.ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

// DNS is the DNS name of the subject.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// IP is the IP address of the subject.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return vs[0].([]ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)[vs[1].(int)]
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch struct {
	// DNS is the DNS name of the subject.
	Dns *string `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip *string `pulumi:"ip"`
}

// ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchInput is an input type that accepts ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs and ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchInput` via:
//
//	ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs{...}
type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput
	ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutputWithContext(context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs struct {
	// DNS is the DNS name of the subject.
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch)(nil)).Elem()
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput {
	return i.ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput)
}

// ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayInput is an input type that accepts ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArray and ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayInput` via:
//
//	ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArray{ ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs{...} }
type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput
	ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutputWithContext(context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput
}

type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArray []ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchInput

func (ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch)(nil)).Elem()
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArray) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput {
	return i.ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArray) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput {
	return o
}

// DNS is the DNS name of the subject.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// IP is the IP address of the subject.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch {
		return vs[0].([]ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch)[vs[1].(int)]
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput)
}

// Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster.
// See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
type ElasticsearchSpecMonitoring struct {
	Logs    *ElasticsearchSpecMonitoringLogs    `pulumi:"logs"`
	Metrics *ElasticsearchSpecMonitoringMetrics `pulumi:"metrics"`
}

// ElasticsearchSpecMonitoringInput is an input type that accepts ElasticsearchSpecMonitoringArgs and ElasticsearchSpecMonitoringOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringInput` via:
//
//	ElasticsearchSpecMonitoringArgs{...}
type ElasticsearchSpecMonitoringInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringOutput() ElasticsearchSpecMonitoringOutput
	ToElasticsearchSpecMonitoringOutputWithContext(context.Context) ElasticsearchSpecMonitoringOutput
}

// Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster.
// See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
type ElasticsearchSpecMonitoringArgs struct {
	Logs    ElasticsearchSpecMonitoringLogsPtrInput    `pulumi:"logs"`
	Metrics ElasticsearchSpecMonitoringMetricsPtrInput `pulumi:"metrics"`
}

func (ElasticsearchSpecMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoring)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringArgs) ToElasticsearchSpecMonitoringOutput() ElasticsearchSpecMonitoringOutput {
	return i.ToElasticsearchSpecMonitoringOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringArgs) ToElasticsearchSpecMonitoringOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringOutput)
}

func (i ElasticsearchSpecMonitoringArgs) ToElasticsearchSpecMonitoringPtrOutput() ElasticsearchSpecMonitoringPtrOutput {
	return i.ToElasticsearchSpecMonitoringPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringArgs) ToElasticsearchSpecMonitoringPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringOutput).ToElasticsearchSpecMonitoringPtrOutputWithContext(ctx)
}

// ElasticsearchSpecMonitoringPtrInput is an input type that accepts ElasticsearchSpecMonitoringArgs, ElasticsearchSpecMonitoringPtr and ElasticsearchSpecMonitoringPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringPtrInput` via:
//
//	        ElasticsearchSpecMonitoringArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecMonitoringPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringPtrOutput() ElasticsearchSpecMonitoringPtrOutput
	ToElasticsearchSpecMonitoringPtrOutputWithContext(context.Context) ElasticsearchSpecMonitoringPtrOutput
}

type elasticsearchSpecMonitoringPtrType ElasticsearchSpecMonitoringArgs

func ElasticsearchSpecMonitoringPtr(v *ElasticsearchSpecMonitoringArgs) ElasticsearchSpecMonitoringPtrInput {
	return (*elasticsearchSpecMonitoringPtrType)(v)
}

func (*elasticsearchSpecMonitoringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoring)(nil)).Elem()
}

func (i *elasticsearchSpecMonitoringPtrType) ToElasticsearchSpecMonitoringPtrOutput() ElasticsearchSpecMonitoringPtrOutput {
	return i.ToElasticsearchSpecMonitoringPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecMonitoringPtrType) ToElasticsearchSpecMonitoringPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringPtrOutput)
}

// Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster.
// See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
type ElasticsearchSpecMonitoringOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoring)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringOutput) ToElasticsearchSpecMonitoringOutput() ElasticsearchSpecMonitoringOutput {
	return o
}

func (o ElasticsearchSpecMonitoringOutput) ToElasticsearchSpecMonitoringOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringOutput {
	return o
}

func (o ElasticsearchSpecMonitoringOutput) ToElasticsearchSpecMonitoringPtrOutput() ElasticsearchSpecMonitoringPtrOutput {
	return o.ToElasticsearchSpecMonitoringPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecMonitoringOutput) ToElasticsearchSpecMonitoringPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecMonitoring) *ElasticsearchSpecMonitoring {
		return &v
	}).(ElasticsearchSpecMonitoringPtrOutput)
}

func (o ElasticsearchSpecMonitoringOutput) Logs() ElasticsearchSpecMonitoringLogsPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoring) *ElasticsearchSpecMonitoringLogs { return v.Logs }).(ElasticsearchSpecMonitoringLogsPtrOutput)
}

func (o ElasticsearchSpecMonitoringOutput) Metrics() ElasticsearchSpecMonitoringMetricsPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoring) *ElasticsearchSpecMonitoringMetrics { return v.Metrics }).(ElasticsearchSpecMonitoringMetricsPtrOutput)
}

type ElasticsearchSpecMonitoringPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoring)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringPtrOutput) ToElasticsearchSpecMonitoringPtrOutput() ElasticsearchSpecMonitoringPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringPtrOutput) ToElasticsearchSpecMonitoringPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringPtrOutput) Elem() ElasticsearchSpecMonitoringOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoring) ElasticsearchSpecMonitoring {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecMonitoring
		return ret
	}).(ElasticsearchSpecMonitoringOutput)
}

func (o ElasticsearchSpecMonitoringPtrOutput) Logs() ElasticsearchSpecMonitoringLogsPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoring) *ElasticsearchSpecMonitoringLogs {
		if v == nil {
			return nil
		}
		return v.Logs
	}).(ElasticsearchSpecMonitoringLogsPtrOutput)
}

func (o ElasticsearchSpecMonitoringPtrOutput) Metrics() ElasticsearchSpecMonitoringMetricsPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoring) *ElasticsearchSpecMonitoringMetrics {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(ElasticsearchSpecMonitoringMetricsPtrOutput)
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
type ElasticsearchSpecMonitoringLogs struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs []ElasticsearchSpecMonitoringLogsElasticsearchRefs `pulumi:"elasticsearchRefs"`
}

// ElasticsearchSpecMonitoringLogsInput is an input type that accepts ElasticsearchSpecMonitoringLogsArgs and ElasticsearchSpecMonitoringLogsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringLogsInput` via:
//
//	ElasticsearchSpecMonitoringLogsArgs{...}
type ElasticsearchSpecMonitoringLogsInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringLogsOutput() ElasticsearchSpecMonitoringLogsOutput
	ToElasticsearchSpecMonitoringLogsOutputWithContext(context.Context) ElasticsearchSpecMonitoringLogsOutput
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
type ElasticsearchSpecMonitoringLogsArgs struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayInput `pulumi:"elasticsearchRefs"`
}

func (ElasticsearchSpecMonitoringLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringLogs)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringLogsArgs) ToElasticsearchSpecMonitoringLogsOutput() ElasticsearchSpecMonitoringLogsOutput {
	return i.ToElasticsearchSpecMonitoringLogsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringLogsArgs) ToElasticsearchSpecMonitoringLogsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringLogsOutput)
}

func (i ElasticsearchSpecMonitoringLogsArgs) ToElasticsearchSpecMonitoringLogsPtrOutput() ElasticsearchSpecMonitoringLogsPtrOutput {
	return i.ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringLogsArgs) ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringLogsOutput).ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(ctx)
}

// ElasticsearchSpecMonitoringLogsPtrInput is an input type that accepts ElasticsearchSpecMonitoringLogsArgs, ElasticsearchSpecMonitoringLogsPtr and ElasticsearchSpecMonitoringLogsPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringLogsPtrInput` via:
//
//	        ElasticsearchSpecMonitoringLogsArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecMonitoringLogsPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringLogsPtrOutput() ElasticsearchSpecMonitoringLogsPtrOutput
	ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(context.Context) ElasticsearchSpecMonitoringLogsPtrOutput
}

type elasticsearchSpecMonitoringLogsPtrType ElasticsearchSpecMonitoringLogsArgs

func ElasticsearchSpecMonitoringLogsPtr(v *ElasticsearchSpecMonitoringLogsArgs) ElasticsearchSpecMonitoringLogsPtrInput {
	return (*elasticsearchSpecMonitoringLogsPtrType)(v)
}

func (*elasticsearchSpecMonitoringLogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoringLogs)(nil)).Elem()
}

func (i *elasticsearchSpecMonitoringLogsPtrType) ToElasticsearchSpecMonitoringLogsPtrOutput() ElasticsearchSpecMonitoringLogsPtrOutput {
	return i.ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecMonitoringLogsPtrType) ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringLogsPtrOutput)
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
type ElasticsearchSpecMonitoringLogsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringLogs)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringLogsOutput) ToElasticsearchSpecMonitoringLogsOutput() ElasticsearchSpecMonitoringLogsOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsOutput) ToElasticsearchSpecMonitoringLogsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsOutput) ToElasticsearchSpecMonitoringLogsPtrOutput() ElasticsearchSpecMonitoringLogsPtrOutput {
	return o.ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecMonitoringLogsOutput) ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecMonitoringLogs) *ElasticsearchSpecMonitoringLogs {
		return &v
	}).(ElasticsearchSpecMonitoringLogsPtrOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o ElasticsearchSpecMonitoringLogsOutput) ElasticsearchRefs() ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringLogs) []ElasticsearchSpecMonitoringLogsElasticsearchRefs {
		return v.ElasticsearchRefs
	}).(ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput)
}

type ElasticsearchSpecMonitoringLogsPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringLogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoringLogs)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringLogsPtrOutput) ToElasticsearchSpecMonitoringLogsPtrOutput() ElasticsearchSpecMonitoringLogsPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsPtrOutput) ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsPtrOutput) Elem() ElasticsearchSpecMonitoringLogsOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoringLogs) ElasticsearchSpecMonitoringLogs {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecMonitoringLogs
		return ret
	}).(ElasticsearchSpecMonitoringLogsOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o ElasticsearchSpecMonitoringLogsPtrOutput) ElasticsearchRefs() ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoringLogs) []ElasticsearchSpecMonitoringLogsElasticsearchRefs {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRefs
	}).(ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringLogsElasticsearchRefs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// ElasticsearchSpecMonitoringLogsElasticsearchRefsInput is an input type that accepts ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs and ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringLogsElasticsearchRefsInput` via:
//
//	ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs{...}
type ElasticsearchSpecMonitoringLogsElasticsearchRefsInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringLogsElasticsearchRefsOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput
	ToElasticsearchSpecMonitoringLogsElasticsearchRefsOutputWithContext(context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringLogsElasticsearchRefs)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs) ToElasticsearchSpecMonitoringLogsElasticsearchRefsOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput {
	return i.ToElasticsearchSpecMonitoringLogsElasticsearchRefsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs) ToElasticsearchSpecMonitoringLogsElasticsearchRefsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput)
}

// ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayInput is an input type that accepts ElasticsearchSpecMonitoringLogsElasticsearchRefsArray and ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayInput` via:
//
//	ElasticsearchSpecMonitoringLogsElasticsearchRefsArray{ ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs{...} }
type ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput
	ToElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutputWithContext(context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput
}

type ElasticsearchSpecMonitoringLogsElasticsearchRefsArray []ElasticsearchSpecMonitoringLogsElasticsearchRefsInput

func (ElasticsearchSpecMonitoringLogsElasticsearchRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecMonitoringLogsElasticsearchRefs)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringLogsElasticsearchRefsArray) ToElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return i.ToElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringLogsElasticsearchRefsArray) ToElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringLogsElasticsearchRefs)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput) ToElasticsearchSpecMonitoringLogsElasticsearchRefsOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput) ToElasticsearchSpecMonitoringLogsElasticsearchRefsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput {
	return o
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringLogsElasticsearchRefs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringLogsElasticsearchRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringLogsElasticsearchRefs) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringLogsElasticsearchRefs) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecMonitoringLogsElasticsearchRefs)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput) ToElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput) ToElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecMonitoringLogsElasticsearchRefs {
		return vs[0].([]ElasticsearchSpecMonitoringLogsElasticsearchRefs)[vs[1].(int)]
	}).(ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringLogsElasticsearchRefsPatch struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchInput is an input type that accepts ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArgs and ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchInput` via:
//
//	ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArgs{...}
type ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput
	ToElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutputWithContext(context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringLogsElasticsearchRefsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArgs) ToElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput {
	return i.ToElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArgs) ToElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput)
}

// ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayInput is an input type that accepts ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArray and ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayInput` via:
//
//	ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArray{ ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArgs{...} }
type ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput
	ToElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutputWithContext(context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput
}

type ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArray []ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchInput

func (ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecMonitoringLogsElasticsearchRefsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArray) ToElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput {
	return i.ToElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArray) ToElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringLogsElasticsearchRefsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput) ToElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput) ToElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput {
	return o
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringLogsElasticsearchRefsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringLogsElasticsearchRefsPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringLogsElasticsearchRefsPatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringLogsElasticsearchRefsPatch) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecMonitoringLogsElasticsearchRefsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput) ToElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput) ToElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecMonitoringLogsElasticsearchRefsPatch {
		return vs[0].([]ElasticsearchSpecMonitoringLogsElasticsearchRefsPatch)[vs[1].(int)]
	}).(ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput)
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
type ElasticsearchSpecMonitoringLogsPatch struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs []ElasticsearchSpecMonitoringLogsElasticsearchRefsPatch `pulumi:"elasticsearchRefs"`
}

// ElasticsearchSpecMonitoringLogsPatchInput is an input type that accepts ElasticsearchSpecMonitoringLogsPatchArgs and ElasticsearchSpecMonitoringLogsPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringLogsPatchInput` via:
//
//	ElasticsearchSpecMonitoringLogsPatchArgs{...}
type ElasticsearchSpecMonitoringLogsPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringLogsPatchOutput() ElasticsearchSpecMonitoringLogsPatchOutput
	ToElasticsearchSpecMonitoringLogsPatchOutputWithContext(context.Context) ElasticsearchSpecMonitoringLogsPatchOutput
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
type ElasticsearchSpecMonitoringLogsPatchArgs struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayInput `pulumi:"elasticsearchRefs"`
}

func (ElasticsearchSpecMonitoringLogsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringLogsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringLogsPatchArgs) ToElasticsearchSpecMonitoringLogsPatchOutput() ElasticsearchSpecMonitoringLogsPatchOutput {
	return i.ToElasticsearchSpecMonitoringLogsPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringLogsPatchArgs) ToElasticsearchSpecMonitoringLogsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringLogsPatchOutput)
}

func (i ElasticsearchSpecMonitoringLogsPatchArgs) ToElasticsearchSpecMonitoringLogsPatchPtrOutput() ElasticsearchSpecMonitoringLogsPatchPtrOutput {
	return i.ToElasticsearchSpecMonitoringLogsPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringLogsPatchArgs) ToElasticsearchSpecMonitoringLogsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringLogsPatchOutput).ToElasticsearchSpecMonitoringLogsPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecMonitoringLogsPatchPtrInput is an input type that accepts ElasticsearchSpecMonitoringLogsPatchArgs, ElasticsearchSpecMonitoringLogsPatchPtr and ElasticsearchSpecMonitoringLogsPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringLogsPatchPtrInput` via:
//
//	        ElasticsearchSpecMonitoringLogsPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecMonitoringLogsPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringLogsPatchPtrOutput() ElasticsearchSpecMonitoringLogsPatchPtrOutput
	ToElasticsearchSpecMonitoringLogsPatchPtrOutputWithContext(context.Context) ElasticsearchSpecMonitoringLogsPatchPtrOutput
}

type elasticsearchSpecMonitoringLogsPatchPtrType ElasticsearchSpecMonitoringLogsPatchArgs

func ElasticsearchSpecMonitoringLogsPatchPtr(v *ElasticsearchSpecMonitoringLogsPatchArgs) ElasticsearchSpecMonitoringLogsPatchPtrInput {
	return (*elasticsearchSpecMonitoringLogsPatchPtrType)(v)
}

func (*elasticsearchSpecMonitoringLogsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoringLogsPatch)(nil)).Elem()
}

func (i *elasticsearchSpecMonitoringLogsPatchPtrType) ToElasticsearchSpecMonitoringLogsPatchPtrOutput() ElasticsearchSpecMonitoringLogsPatchPtrOutput {
	return i.ToElasticsearchSpecMonitoringLogsPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecMonitoringLogsPatchPtrType) ToElasticsearchSpecMonitoringLogsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringLogsPatchPtrOutput)
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
type ElasticsearchSpecMonitoringLogsPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringLogsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringLogsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringLogsPatchOutput) ToElasticsearchSpecMonitoringLogsPatchOutput() ElasticsearchSpecMonitoringLogsPatchOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsPatchOutput) ToElasticsearchSpecMonitoringLogsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsPatchOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsPatchOutput) ToElasticsearchSpecMonitoringLogsPatchPtrOutput() ElasticsearchSpecMonitoringLogsPatchPtrOutput {
	return o.ToElasticsearchSpecMonitoringLogsPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecMonitoringLogsPatchOutput) ToElasticsearchSpecMonitoringLogsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecMonitoringLogsPatch) *ElasticsearchSpecMonitoringLogsPatch {
		return &v
	}).(ElasticsearchSpecMonitoringLogsPatchPtrOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o ElasticsearchSpecMonitoringLogsPatchOutput) ElasticsearchRefs() ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringLogsPatch) []ElasticsearchSpecMonitoringLogsElasticsearchRefsPatch {
		return v.ElasticsearchRefs
	}).(ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput)
}

type ElasticsearchSpecMonitoringLogsPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringLogsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoringLogsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringLogsPatchPtrOutput) ToElasticsearchSpecMonitoringLogsPatchPtrOutput() ElasticsearchSpecMonitoringLogsPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsPatchPtrOutput) ToElasticsearchSpecMonitoringLogsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsPatchPtrOutput) Elem() ElasticsearchSpecMonitoringLogsPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoringLogsPatch) ElasticsearchSpecMonitoringLogsPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecMonitoringLogsPatch
		return ret
	}).(ElasticsearchSpecMonitoringLogsPatchOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o ElasticsearchSpecMonitoringLogsPatchPtrOutput) ElasticsearchRefs() ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoringLogsPatch) []ElasticsearchSpecMonitoringLogsElasticsearchRefsPatch {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRefs
	}).(ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput)
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
type ElasticsearchSpecMonitoringMetrics struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs []ElasticsearchSpecMonitoringMetricsElasticsearchRefs `pulumi:"elasticsearchRefs"`
}

// ElasticsearchSpecMonitoringMetricsInput is an input type that accepts ElasticsearchSpecMonitoringMetricsArgs and ElasticsearchSpecMonitoringMetricsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringMetricsInput` via:
//
//	ElasticsearchSpecMonitoringMetricsArgs{...}
type ElasticsearchSpecMonitoringMetricsInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringMetricsOutput() ElasticsearchSpecMonitoringMetricsOutput
	ToElasticsearchSpecMonitoringMetricsOutputWithContext(context.Context) ElasticsearchSpecMonitoringMetricsOutput
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
type ElasticsearchSpecMonitoringMetricsArgs struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayInput `pulumi:"elasticsearchRefs"`
}

func (ElasticsearchSpecMonitoringMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringMetrics)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringMetricsArgs) ToElasticsearchSpecMonitoringMetricsOutput() ElasticsearchSpecMonitoringMetricsOutput {
	return i.ToElasticsearchSpecMonitoringMetricsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringMetricsArgs) ToElasticsearchSpecMonitoringMetricsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringMetricsOutput)
}

func (i ElasticsearchSpecMonitoringMetricsArgs) ToElasticsearchSpecMonitoringMetricsPtrOutput() ElasticsearchSpecMonitoringMetricsPtrOutput {
	return i.ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringMetricsArgs) ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringMetricsOutput).ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(ctx)
}

// ElasticsearchSpecMonitoringMetricsPtrInput is an input type that accepts ElasticsearchSpecMonitoringMetricsArgs, ElasticsearchSpecMonitoringMetricsPtr and ElasticsearchSpecMonitoringMetricsPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringMetricsPtrInput` via:
//
//	        ElasticsearchSpecMonitoringMetricsArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecMonitoringMetricsPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringMetricsPtrOutput() ElasticsearchSpecMonitoringMetricsPtrOutput
	ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(context.Context) ElasticsearchSpecMonitoringMetricsPtrOutput
}

type elasticsearchSpecMonitoringMetricsPtrType ElasticsearchSpecMonitoringMetricsArgs

func ElasticsearchSpecMonitoringMetricsPtr(v *ElasticsearchSpecMonitoringMetricsArgs) ElasticsearchSpecMonitoringMetricsPtrInput {
	return (*elasticsearchSpecMonitoringMetricsPtrType)(v)
}

func (*elasticsearchSpecMonitoringMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoringMetrics)(nil)).Elem()
}

func (i *elasticsearchSpecMonitoringMetricsPtrType) ToElasticsearchSpecMonitoringMetricsPtrOutput() ElasticsearchSpecMonitoringMetricsPtrOutput {
	return i.ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecMonitoringMetricsPtrType) ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringMetricsPtrOutput)
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
type ElasticsearchSpecMonitoringMetricsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringMetrics)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringMetricsOutput) ToElasticsearchSpecMonitoringMetricsOutput() ElasticsearchSpecMonitoringMetricsOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsOutput) ToElasticsearchSpecMonitoringMetricsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsOutput) ToElasticsearchSpecMonitoringMetricsPtrOutput() ElasticsearchSpecMonitoringMetricsPtrOutput {
	return o.ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecMonitoringMetricsOutput) ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecMonitoringMetrics) *ElasticsearchSpecMonitoringMetrics {
		return &v
	}).(ElasticsearchSpecMonitoringMetricsPtrOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o ElasticsearchSpecMonitoringMetricsOutput) ElasticsearchRefs() ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringMetrics) []ElasticsearchSpecMonitoringMetricsElasticsearchRefs {
		return v.ElasticsearchRefs
	}).(ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput)
}

type ElasticsearchSpecMonitoringMetricsPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoringMetrics)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringMetricsPtrOutput) ToElasticsearchSpecMonitoringMetricsPtrOutput() ElasticsearchSpecMonitoringMetricsPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsPtrOutput) ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsPtrOutput) Elem() ElasticsearchSpecMonitoringMetricsOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoringMetrics) ElasticsearchSpecMonitoringMetrics {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecMonitoringMetrics
		return ret
	}).(ElasticsearchSpecMonitoringMetricsOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o ElasticsearchSpecMonitoringMetricsPtrOutput) ElasticsearchRefs() ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoringMetrics) []ElasticsearchSpecMonitoringMetricsElasticsearchRefs {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRefs
	}).(ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringMetricsElasticsearchRefs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// ElasticsearchSpecMonitoringMetricsElasticsearchRefsInput is an input type that accepts ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs and ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringMetricsElasticsearchRefsInput` via:
//
//	ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs{...}
type ElasticsearchSpecMonitoringMetricsElasticsearchRefsInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput
	ToElasticsearchSpecMonitoringMetricsElasticsearchRefsOutputWithContext(context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsElasticsearchRefs)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput {
	return i.ToElasticsearchSpecMonitoringMetricsElasticsearchRefsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput)
}

// ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayInput is an input type that accepts ElasticsearchSpecMonitoringMetricsElasticsearchRefsArray and ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayInput` via:
//
//	ElasticsearchSpecMonitoringMetricsElasticsearchRefsArray{ ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs{...} }
type ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput
	ToElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutputWithContext(context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput
}

type ElasticsearchSpecMonitoringMetricsElasticsearchRefsArray []ElasticsearchSpecMonitoringMetricsElasticsearchRefsInput

func (ElasticsearchSpecMonitoringMetricsElasticsearchRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecMonitoringMetricsElasticsearchRefs)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringMetricsElasticsearchRefsArray) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return i.ToElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringMetricsElasticsearchRefsArray) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsElasticsearchRefs)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput {
	return o
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringMetricsElasticsearchRefs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringMetricsElasticsearchRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringMetricsElasticsearchRefs) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringMetricsElasticsearchRefs) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecMonitoringMetricsElasticsearchRefs)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecMonitoringMetricsElasticsearchRefs {
		return vs[0].([]ElasticsearchSpecMonitoringMetricsElasticsearchRefs)[vs[1].(int)]
	}).(ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatch struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchInput is an input type that accepts ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArgs and ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchInput` via:
//
//	ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArgs{...}
type ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput
	ToElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutputWithContext(context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArgs) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput {
	return i.ToElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArgs) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput)
}

// ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayInput is an input type that accepts ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArray and ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayInput` via:
//
//	ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArray{ ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArgs{...} }
type ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput
	ToElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutputWithContext(context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput
}

type ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArray []ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchInput

func (ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArray) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput {
	return i.ToElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArray) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput {
	return o
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatch) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatch {
		return vs[0].([]ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatch)[vs[1].(int)]
	}).(ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput)
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
type ElasticsearchSpecMonitoringMetricsPatch struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs []ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatch `pulumi:"elasticsearchRefs"`
}

// ElasticsearchSpecMonitoringMetricsPatchInput is an input type that accepts ElasticsearchSpecMonitoringMetricsPatchArgs and ElasticsearchSpecMonitoringMetricsPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringMetricsPatchInput` via:
//
//	ElasticsearchSpecMonitoringMetricsPatchArgs{...}
type ElasticsearchSpecMonitoringMetricsPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringMetricsPatchOutput() ElasticsearchSpecMonitoringMetricsPatchOutput
	ToElasticsearchSpecMonitoringMetricsPatchOutputWithContext(context.Context) ElasticsearchSpecMonitoringMetricsPatchOutput
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
type ElasticsearchSpecMonitoringMetricsPatchArgs struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayInput `pulumi:"elasticsearchRefs"`
}

func (ElasticsearchSpecMonitoringMetricsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringMetricsPatchArgs) ToElasticsearchSpecMonitoringMetricsPatchOutput() ElasticsearchSpecMonitoringMetricsPatchOutput {
	return i.ToElasticsearchSpecMonitoringMetricsPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringMetricsPatchArgs) ToElasticsearchSpecMonitoringMetricsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringMetricsPatchOutput)
}

func (i ElasticsearchSpecMonitoringMetricsPatchArgs) ToElasticsearchSpecMonitoringMetricsPatchPtrOutput() ElasticsearchSpecMonitoringMetricsPatchPtrOutput {
	return i.ToElasticsearchSpecMonitoringMetricsPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringMetricsPatchArgs) ToElasticsearchSpecMonitoringMetricsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringMetricsPatchOutput).ToElasticsearchSpecMonitoringMetricsPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecMonitoringMetricsPatchPtrInput is an input type that accepts ElasticsearchSpecMonitoringMetricsPatchArgs, ElasticsearchSpecMonitoringMetricsPatchPtr and ElasticsearchSpecMonitoringMetricsPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringMetricsPatchPtrInput` via:
//
//	        ElasticsearchSpecMonitoringMetricsPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecMonitoringMetricsPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringMetricsPatchPtrOutput() ElasticsearchSpecMonitoringMetricsPatchPtrOutput
	ToElasticsearchSpecMonitoringMetricsPatchPtrOutputWithContext(context.Context) ElasticsearchSpecMonitoringMetricsPatchPtrOutput
}

type elasticsearchSpecMonitoringMetricsPatchPtrType ElasticsearchSpecMonitoringMetricsPatchArgs

func ElasticsearchSpecMonitoringMetricsPatchPtr(v *ElasticsearchSpecMonitoringMetricsPatchArgs) ElasticsearchSpecMonitoringMetricsPatchPtrInput {
	return (*elasticsearchSpecMonitoringMetricsPatchPtrType)(v)
}

func (*elasticsearchSpecMonitoringMetricsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoringMetricsPatch)(nil)).Elem()
}

func (i *elasticsearchSpecMonitoringMetricsPatchPtrType) ToElasticsearchSpecMonitoringMetricsPatchPtrOutput() ElasticsearchSpecMonitoringMetricsPatchPtrOutput {
	return i.ToElasticsearchSpecMonitoringMetricsPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecMonitoringMetricsPatchPtrType) ToElasticsearchSpecMonitoringMetricsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringMetricsPatchPtrOutput)
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
type ElasticsearchSpecMonitoringMetricsPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringMetricsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringMetricsPatchOutput) ToElasticsearchSpecMonitoringMetricsPatchOutput() ElasticsearchSpecMonitoringMetricsPatchOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsPatchOutput) ToElasticsearchSpecMonitoringMetricsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsPatchOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsPatchOutput) ToElasticsearchSpecMonitoringMetricsPatchPtrOutput() ElasticsearchSpecMonitoringMetricsPatchPtrOutput {
	return o.ToElasticsearchSpecMonitoringMetricsPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecMonitoringMetricsPatchOutput) ToElasticsearchSpecMonitoringMetricsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecMonitoringMetricsPatch) *ElasticsearchSpecMonitoringMetricsPatch {
		return &v
	}).(ElasticsearchSpecMonitoringMetricsPatchPtrOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o ElasticsearchSpecMonitoringMetricsPatchOutput) ElasticsearchRefs() ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringMetricsPatch) []ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatch {
		return v.ElasticsearchRefs
	}).(ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput)
}

type ElasticsearchSpecMonitoringMetricsPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringMetricsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoringMetricsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringMetricsPatchPtrOutput) ToElasticsearchSpecMonitoringMetricsPatchPtrOutput() ElasticsearchSpecMonitoringMetricsPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsPatchPtrOutput) ToElasticsearchSpecMonitoringMetricsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsPatchPtrOutput) Elem() ElasticsearchSpecMonitoringMetricsPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoringMetricsPatch) ElasticsearchSpecMonitoringMetricsPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecMonitoringMetricsPatch
		return ret
	}).(ElasticsearchSpecMonitoringMetricsPatchOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o ElasticsearchSpecMonitoringMetricsPatchPtrOutput) ElasticsearchRefs() ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoringMetricsPatch) []ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatch {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRefs
	}).(ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput)
}

// Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster.
// See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
type ElasticsearchSpecMonitoringPatch struct {
	Logs    *ElasticsearchSpecMonitoringLogsPatch    `pulumi:"logs"`
	Metrics *ElasticsearchSpecMonitoringMetricsPatch `pulumi:"metrics"`
}

// ElasticsearchSpecMonitoringPatchInput is an input type that accepts ElasticsearchSpecMonitoringPatchArgs and ElasticsearchSpecMonitoringPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringPatchInput` via:
//
//	ElasticsearchSpecMonitoringPatchArgs{...}
type ElasticsearchSpecMonitoringPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringPatchOutput() ElasticsearchSpecMonitoringPatchOutput
	ToElasticsearchSpecMonitoringPatchOutputWithContext(context.Context) ElasticsearchSpecMonitoringPatchOutput
}

// Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster.
// See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
type ElasticsearchSpecMonitoringPatchArgs struct {
	Logs    ElasticsearchSpecMonitoringLogsPatchPtrInput    `pulumi:"logs"`
	Metrics ElasticsearchSpecMonitoringMetricsPatchPtrInput `pulumi:"metrics"`
}

func (ElasticsearchSpecMonitoringPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringPatch)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringPatchArgs) ToElasticsearchSpecMonitoringPatchOutput() ElasticsearchSpecMonitoringPatchOutput {
	return i.ToElasticsearchSpecMonitoringPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringPatchArgs) ToElasticsearchSpecMonitoringPatchOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringPatchOutput)
}

func (i ElasticsearchSpecMonitoringPatchArgs) ToElasticsearchSpecMonitoringPatchPtrOutput() ElasticsearchSpecMonitoringPatchPtrOutput {
	return i.ToElasticsearchSpecMonitoringPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringPatchArgs) ToElasticsearchSpecMonitoringPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringPatchOutput).ToElasticsearchSpecMonitoringPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecMonitoringPatchPtrInput is an input type that accepts ElasticsearchSpecMonitoringPatchArgs, ElasticsearchSpecMonitoringPatchPtr and ElasticsearchSpecMonitoringPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringPatchPtrInput` via:
//
//	        ElasticsearchSpecMonitoringPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecMonitoringPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringPatchPtrOutput() ElasticsearchSpecMonitoringPatchPtrOutput
	ToElasticsearchSpecMonitoringPatchPtrOutputWithContext(context.Context) ElasticsearchSpecMonitoringPatchPtrOutput
}

type elasticsearchSpecMonitoringPatchPtrType ElasticsearchSpecMonitoringPatchArgs

func ElasticsearchSpecMonitoringPatchPtr(v *ElasticsearchSpecMonitoringPatchArgs) ElasticsearchSpecMonitoringPatchPtrInput {
	return (*elasticsearchSpecMonitoringPatchPtrType)(v)
}

func (*elasticsearchSpecMonitoringPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoringPatch)(nil)).Elem()
}

func (i *elasticsearchSpecMonitoringPatchPtrType) ToElasticsearchSpecMonitoringPatchPtrOutput() ElasticsearchSpecMonitoringPatchPtrOutput {
	return i.ToElasticsearchSpecMonitoringPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecMonitoringPatchPtrType) ToElasticsearchSpecMonitoringPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringPatchPtrOutput)
}

// Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster.
// See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
type ElasticsearchSpecMonitoringPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringPatch)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringPatchOutput) ToElasticsearchSpecMonitoringPatchOutput() ElasticsearchSpecMonitoringPatchOutput {
	return o
}

func (o ElasticsearchSpecMonitoringPatchOutput) ToElasticsearchSpecMonitoringPatchOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringPatchOutput {
	return o
}

func (o ElasticsearchSpecMonitoringPatchOutput) ToElasticsearchSpecMonitoringPatchPtrOutput() ElasticsearchSpecMonitoringPatchPtrOutput {
	return o.ToElasticsearchSpecMonitoringPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecMonitoringPatchOutput) ToElasticsearchSpecMonitoringPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecMonitoringPatch) *ElasticsearchSpecMonitoringPatch {
		return &v
	}).(ElasticsearchSpecMonitoringPatchPtrOutput)
}

func (o ElasticsearchSpecMonitoringPatchOutput) Logs() ElasticsearchSpecMonitoringLogsPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringPatch) *ElasticsearchSpecMonitoringLogsPatch { return v.Logs }).(ElasticsearchSpecMonitoringLogsPatchPtrOutput)
}

func (o ElasticsearchSpecMonitoringPatchOutput) Metrics() ElasticsearchSpecMonitoringMetricsPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringPatch) *ElasticsearchSpecMonitoringMetricsPatch { return v.Metrics }).(ElasticsearchSpecMonitoringMetricsPatchPtrOutput)
}

type ElasticsearchSpecMonitoringPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoringPatch)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringPatchPtrOutput) ToElasticsearchSpecMonitoringPatchPtrOutput() ElasticsearchSpecMonitoringPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringPatchPtrOutput) ToElasticsearchSpecMonitoringPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringPatchPtrOutput) Elem() ElasticsearchSpecMonitoringPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoringPatch) ElasticsearchSpecMonitoringPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecMonitoringPatch
		return ret
	}).(ElasticsearchSpecMonitoringPatchOutput)
}

func (o ElasticsearchSpecMonitoringPatchPtrOutput) Logs() ElasticsearchSpecMonitoringLogsPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoringPatch) *ElasticsearchSpecMonitoringLogsPatch {
		if v == nil {
			return nil
		}
		return v.Logs
	}).(ElasticsearchSpecMonitoringLogsPatchPtrOutput)
}

func (o ElasticsearchSpecMonitoringPatchPtrOutput) Metrics() ElasticsearchSpecMonitoringMetricsPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoringPatch) *ElasticsearchSpecMonitoringMetricsPatch {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(ElasticsearchSpecMonitoringMetricsPatchPtrOutput)
}

// NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
type ElasticsearchSpecNodeSets struct {
	// Config holds the Elasticsearch configuration.
	Config map[string]interface{} `pulumi:"config"`
	// Count of Elasticsearch nodes to deploy.
	// If the node set is managed by an autoscaling policy the initial value is automatically set by the autoscaling controller.
	Count *int `pulumi:"count"`
	// Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
	Name *string `pulumi:"name"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
	PodTemplate map[string]interface{} `pulumi:"podTemplate"`
	// VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet.
	// Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate.
	// Items defined here take precedence over any default claims added by the operator with the same name.
	VolumeClaimTemplates []ElasticsearchSpecNodeSetsVolumeClaimTemplates `pulumi:"volumeClaimTemplates"`
}

// ElasticsearchSpecNodeSetsInput is an input type that accepts ElasticsearchSpecNodeSetsArgs and ElasticsearchSpecNodeSetsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsInput` via:
//
//	ElasticsearchSpecNodeSetsArgs{...}
type ElasticsearchSpecNodeSetsInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsOutput() ElasticsearchSpecNodeSetsOutput
	ToElasticsearchSpecNodeSetsOutputWithContext(context.Context) ElasticsearchSpecNodeSetsOutput
}

// NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
type ElasticsearchSpecNodeSetsArgs struct {
	// Config holds the Elasticsearch configuration.
	Config pulumi.MapInput `pulumi:"config"`
	// Count of Elasticsearch nodes to deploy.
	// If the node set is managed by an autoscaling policy the initial value is automatically set by the autoscaling controller.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
	PodTemplate pulumi.MapInput `pulumi:"podTemplate"`
	// VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet.
	// Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate.
	// Items defined here take precedence over any default claims added by the operator with the same name.
	VolumeClaimTemplates ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayInput `pulumi:"volumeClaimTemplates"`
}

func (ElasticsearchSpecNodeSetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSets)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsArgs) ToElasticsearchSpecNodeSetsOutput() ElasticsearchSpecNodeSetsOutput {
	return i.ToElasticsearchSpecNodeSetsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsArgs) ToElasticsearchSpecNodeSetsOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsOutput)
}

// ElasticsearchSpecNodeSetsArrayInput is an input type that accepts ElasticsearchSpecNodeSetsArray and ElasticsearchSpecNodeSetsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsArrayInput` via:
//
//	ElasticsearchSpecNodeSetsArray{ ElasticsearchSpecNodeSetsArgs{...} }
type ElasticsearchSpecNodeSetsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsArrayOutput() ElasticsearchSpecNodeSetsArrayOutput
	ToElasticsearchSpecNodeSetsArrayOutputWithContext(context.Context) ElasticsearchSpecNodeSetsArrayOutput
}

type ElasticsearchSpecNodeSetsArray []ElasticsearchSpecNodeSetsInput

func (ElasticsearchSpecNodeSetsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSets)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsArray) ToElasticsearchSpecNodeSetsArrayOutput() ElasticsearchSpecNodeSetsArrayOutput {
	return i.ToElasticsearchSpecNodeSetsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsArray) ToElasticsearchSpecNodeSetsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsArrayOutput)
}

// NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
type ElasticsearchSpecNodeSetsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSets)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsOutput) ToElasticsearchSpecNodeSetsOutput() ElasticsearchSpecNodeSetsOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsOutput) ToElasticsearchSpecNodeSetsOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsOutput {
	return o
}

// Config holds the Elasticsearch configuration.
func (o ElasticsearchSpecNodeSetsOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSets) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// Count of Elasticsearch nodes to deploy.
// If the node set is managed by an autoscaling policy the initial value is automatically set by the autoscaling controller.
func (o ElasticsearchSpecNodeSetsOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSets) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
func (o ElasticsearchSpecNodeSetsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSets) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
func (o ElasticsearchSpecNodeSetsOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSets) map[string]interface{} { return v.PodTemplate }).(pulumi.MapOutput)
}

// VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet.
// Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate.
// Items defined here take precedence over any default claims added by the operator with the same name.
func (o ElasticsearchSpecNodeSetsOutput) VolumeClaimTemplates() ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSets) []ElasticsearchSpecNodeSetsVolumeClaimTemplates {
		return v.VolumeClaimTemplates
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput)
}

type ElasticsearchSpecNodeSetsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSets)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsArrayOutput) ToElasticsearchSpecNodeSetsArrayOutput() ElasticsearchSpecNodeSetsArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsArrayOutput) ToElasticsearchSpecNodeSetsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecNodeSetsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecNodeSets {
		return vs[0].([]ElasticsearchSpecNodeSets)[vs[1].(int)]
	}).(ElasticsearchSpecNodeSetsOutput)
}

// NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
type ElasticsearchSpecNodeSetsPatch struct {
	// Config holds the Elasticsearch configuration.
	Config map[string]interface{} `pulumi:"config"`
	// Count of Elasticsearch nodes to deploy.
	// If the node set is managed by an autoscaling policy the initial value is automatically set by the autoscaling controller.
	Count *int `pulumi:"count"`
	// Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
	Name *string `pulumi:"name"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
	PodTemplate map[string]interface{} `pulumi:"podTemplate"`
	// VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet.
	// Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate.
	// Items defined here take precedence over any default claims added by the operator with the same name.
	VolumeClaimTemplates []ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatch `pulumi:"volumeClaimTemplates"`
}

// ElasticsearchSpecNodeSetsPatchInput is an input type that accepts ElasticsearchSpecNodeSetsPatchArgs and ElasticsearchSpecNodeSetsPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsPatchInput` via:
//
//	ElasticsearchSpecNodeSetsPatchArgs{...}
type ElasticsearchSpecNodeSetsPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsPatchOutput() ElasticsearchSpecNodeSetsPatchOutput
	ToElasticsearchSpecNodeSetsPatchOutputWithContext(context.Context) ElasticsearchSpecNodeSetsPatchOutput
}

// NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
type ElasticsearchSpecNodeSetsPatchArgs struct {
	// Config holds the Elasticsearch configuration.
	Config pulumi.MapInput `pulumi:"config"`
	// Count of Elasticsearch nodes to deploy.
	// If the node set is managed by an autoscaling policy the initial value is automatically set by the autoscaling controller.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
	PodTemplate pulumi.MapInput `pulumi:"podTemplate"`
	// VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet.
	// Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate.
	// Items defined here take precedence over any default claims added by the operator with the same name.
	VolumeClaimTemplates ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayInput `pulumi:"volumeClaimTemplates"`
}

func (ElasticsearchSpecNodeSetsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsPatchArgs) ToElasticsearchSpecNodeSetsPatchOutput() ElasticsearchSpecNodeSetsPatchOutput {
	return i.ToElasticsearchSpecNodeSetsPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsPatchArgs) ToElasticsearchSpecNodeSetsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsPatchOutput)
}

// ElasticsearchSpecNodeSetsPatchArrayInput is an input type that accepts ElasticsearchSpecNodeSetsPatchArray and ElasticsearchSpecNodeSetsPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsPatchArrayInput` via:
//
//	ElasticsearchSpecNodeSetsPatchArray{ ElasticsearchSpecNodeSetsPatchArgs{...} }
type ElasticsearchSpecNodeSetsPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsPatchArrayOutput() ElasticsearchSpecNodeSetsPatchArrayOutput
	ToElasticsearchSpecNodeSetsPatchArrayOutputWithContext(context.Context) ElasticsearchSpecNodeSetsPatchArrayOutput
}

type ElasticsearchSpecNodeSetsPatchArray []ElasticsearchSpecNodeSetsPatchInput

func (ElasticsearchSpecNodeSetsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSetsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsPatchArray) ToElasticsearchSpecNodeSetsPatchArrayOutput() ElasticsearchSpecNodeSetsPatchArrayOutput {
	return i.ToElasticsearchSpecNodeSetsPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsPatchArray) ToElasticsearchSpecNodeSetsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsPatchArrayOutput)
}

// NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
type ElasticsearchSpecNodeSetsPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsPatchOutput) ToElasticsearchSpecNodeSetsPatchOutput() ElasticsearchSpecNodeSetsPatchOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsPatchOutput) ToElasticsearchSpecNodeSetsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsPatchOutput {
	return o
}

// Config holds the Elasticsearch configuration.
func (o ElasticsearchSpecNodeSetsPatchOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsPatch) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// Count of Elasticsearch nodes to deploy.
// If the node set is managed by an autoscaling policy the initial value is automatically set by the autoscaling controller.
func (o ElasticsearchSpecNodeSetsPatchOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsPatch) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
func (o ElasticsearchSpecNodeSetsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
func (o ElasticsearchSpecNodeSetsPatchOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsPatch) map[string]interface{} { return v.PodTemplate }).(pulumi.MapOutput)
}

// VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet.
// Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate.
// Items defined here take precedence over any default claims added by the operator with the same name.
func (o ElasticsearchSpecNodeSetsPatchOutput) VolumeClaimTemplates() ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsPatch) []ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatch {
		return v.VolumeClaimTemplates
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput)
}

type ElasticsearchSpecNodeSetsPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSetsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsPatchArrayOutput) ToElasticsearchSpecNodeSetsPatchArrayOutput() ElasticsearchSpecNodeSetsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsPatchArrayOutput) ToElasticsearchSpecNodeSetsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecNodeSetsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecNodeSetsPatch {
		return vs[0].([]ElasticsearchSpecNodeSetsPatch)[vs[1].(int)]
	}).(ElasticsearchSpecNodeSetsPatchOutput)
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type ElasticsearchSpecNodeSetsVolumeClaimTemplates struct {
	// APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                                                `pulumi:"kind"`
	Metadata *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata `pulumi:"metadata"`
	Spec     *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec     `pulumi:"spec"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs struct {
	// APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput                                         `pulumi:"kind"`
	Metadata ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrInput `pulumi:"metadata"`
	Spec     ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrInput     `pulumi:"spec"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplates)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesArray and ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesArray{ ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs{...} }
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesArray []ElasticsearchSpecNodeSetsVolumeClaimTemplatesInput

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSetsVolumeClaimTemplates)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesArray) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesArray) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput)
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplates)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object.
// Servers should convert recognized schemas to the latest internal value, and
// may reject unrecognized values.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplates) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents.
// Servers may infer this from the endpoint the client submits requests to.
// Cannot be updated.
// In CamelCase.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplates) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput) Metadata() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplates) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata {
		return v.Metadata
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput) Spec() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplates) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec {
		return v.Spec
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSetsVolumeClaimTemplates)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecNodeSetsVolumeClaimTemplates {
		return vs[0].([]ElasticsearchSpecNodeSetsVolumeClaimTemplates)[vs[1].(int)]
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput)
}

// Standard object's metadata.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput
}

// Standard object's metadata.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput)
}

// Standard object's metadata.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput
}

// Standard object's metadata.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput)
}

// Standard object's metadata.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch) map[string]string {
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatch struct {
	// APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                                                     `pulumi:"kind"`
	Metadata *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch `pulumi:"metadata"`
	Spec     *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch     `pulumi:"spec"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput                                              `pulumi:"kind"`
	Metadata ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrInput `pulumi:"metadata"`
	Spec     ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrInput     `pulumi:"spec"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatch)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArray and ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArray{ ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArgs{...} }
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArray []ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchInput

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatch)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArray) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArray) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput)
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object.
// Servers should convert recognized schemas to the latest internal value, and
// may reject unrecognized values.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents.
// Servers may infer this from the endpoint the client submits requests to.
// Cannot be updated.
// In CamelCase.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput) Metadata() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatch {
		return v.Metadata
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput) Spec() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch {
		return v.Spec
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatch {
		return vs[0].([]ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatch)[vs[1].(int)]
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput)
}

// spec defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   []string                                                        `pulumi:"accessModes"`
	DataSource    *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource    `pulumi:"dataSource"`
	DataSourceRef *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef `pulumi:"dataSourceRef"`
	Resources     *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources     `pulumi:"resources"`
	Selector      *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
	VolumeAttributesClassName *string `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput
}

// spec defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   pulumi.StringArrayInput                                                `pulumi:"accessModes"`
	DataSource    ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrInput    `pulumi:"dataSource"`
	DataSourceRef ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrInput `pulumi:"dataSourceRef"`
	Resources     ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrInput     `pulumi:"resources"`
	Selector      ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrInput      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
	VolumeAttributesClassName pulumi.StringPtrInput `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput)
}

// spec defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) DataSource() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource {
		return v.DataSource
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) DataSourceRef() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef {
		return v.DataSourceRef
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) Resources() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources {
		return v.Resources
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) Selector() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector {
		return v.Selector
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string { return v.VolumeAttributesClassName }).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) DataSource() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) DataSourceRef() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) Resources() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) Selector() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace *string `pulumi:"namespace"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace *string `pulumi:"namespace"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// spec defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   []string                                                             `pulumi:"accessModes"`
	DataSource    *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch    `pulumi:"dataSource"`
	DataSourceRef *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch `pulumi:"dataSourceRef"`
	Resources     *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch     `pulumi:"resources"`
	Selector      *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
	VolumeAttributesClassName *string `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput
}

// spec defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchArgs struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   pulumi.StringArrayInput                                                     `pulumi:"accessModes"`
	DataSource    ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrInput    `pulumi:"dataSource"`
	DataSourceRef ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrInput `pulumi:"dataSourceRef"`
	Resources     ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrInput     `pulumi:"resources"`
	Selector      ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrInput      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
	VolumeAttributesClassName pulumi.StringPtrInput `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput)
}

// spec defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput) DataSource() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch {
		return v.DataSource
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput) DataSourceRef() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch {
		return v.DataSourceRef
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput) Resources() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch {
		return v.Resources
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput) Selector() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch {
		return v.Selector
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *string {
		return v.VolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput) DataSource() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatch {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput) DataSourceRef() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatch {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput) Resources() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput) Selector() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources) map[string]interface{} {
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources) map[string]interface{} {
		return v.Requests
	}).(pulumi.MapOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchArgs struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch) map[string]interface{} {
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch) map[string]interface{} {
		return v.Requests
	}).(pulumi.MapOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// selector is a label query over volumes to consider for binding.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput
}

// selector is a label query over volumes to consider for binding.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput)
}

// selector is a label query over volumes to consider for binding.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput) MatchExpressions() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector) []ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput) MatchExpressions() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector) []ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArray and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArray{ ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs{...} }
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArray []ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsInput

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArray) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArray) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions {
		return vs[0].([]ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArray and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArray{ ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArgs{...} }
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArray []ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchInput

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArray) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArray) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch {
		return vs[0].([]ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput)
}

// selector is a label query over volumes to consider for binding.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput
}

// selector is a label query over volumes to consider for binding.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput)
}

// selector is a label query over volumes to consider for binding.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput) MatchExpressions() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch) []ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput) MatchExpressions() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch) []ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// ElasticsearchSpec holds the specification of an Elasticsearch cluster.
type ElasticsearchSpecPatch struct {
	Auth *ElasticsearchSpecAuthPatch `pulumi:"auth"`
	Http *ElasticsearchSpecHttpPatch `pulumi:"http"`
	// Image is the Elasticsearch Docker image to deploy.
	Image      *string                           `pulumi:"image"`
	Monitoring *ElasticsearchSpecMonitoringPatch `pulumi:"monitoring"`
	// NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
	NodeSets            []ElasticsearchSpecNodeSetsPatch           `pulumi:"nodeSets"`
	PodDisruptionBudget *ElasticsearchSpecPodDisruptionBudgetPatch `pulumi:"podDisruptionBudget"`
	// RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
	RemoteClusters []ElasticsearchSpecRemoteClustersPatch `pulumi:"remoteClusters"`
	// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying StatefulSets.
	RevisionHistoryLimit *int `pulumi:"revisionHistoryLimit"`
	// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
	SecureSettings []ElasticsearchSpecSecureSettingsPatch `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. a remote Elasticsearch cluster) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName *string                               `pulumi:"serviceAccountName"`
	Transport          *ElasticsearchSpecTransportPatch      `pulumi:"transport"`
	UpdateStrategy     *ElasticsearchSpecUpdateStrategyPatch `pulumi:"updateStrategy"`
	// Version of Elasticsearch.
	Version *string `pulumi:"version"`
	// VolumeClaimDeletePolicy sets the policy for handling deletion of PersistentVolumeClaims for all NodeSets.
	// Possible values are DeleteOnScaledownOnly and DeleteOnScaledownAndClusterDeletion. Defaults to DeleteOnScaledownAndClusterDeletion.
	VolumeClaimDeletePolicy *string `pulumi:"volumeClaimDeletePolicy"`
}

// ElasticsearchSpecPatchInput is an input type that accepts ElasticsearchSpecPatchArgs and ElasticsearchSpecPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPatchInput` via:
//
//	ElasticsearchSpecPatchArgs{...}
type ElasticsearchSpecPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecPatchOutput() ElasticsearchSpecPatchOutput
	ToElasticsearchSpecPatchOutputWithContext(context.Context) ElasticsearchSpecPatchOutput
}

// ElasticsearchSpec holds the specification of an Elasticsearch cluster.
type ElasticsearchSpecPatchArgs struct {
	Auth ElasticsearchSpecAuthPatchPtrInput `pulumi:"auth"`
	Http ElasticsearchSpecHttpPatchPtrInput `pulumi:"http"`
	// Image is the Elasticsearch Docker image to deploy.
	Image      pulumi.StringPtrInput                    `pulumi:"image"`
	Monitoring ElasticsearchSpecMonitoringPatchPtrInput `pulumi:"monitoring"`
	// NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
	NodeSets            ElasticsearchSpecNodeSetsPatchArrayInput          `pulumi:"nodeSets"`
	PodDisruptionBudget ElasticsearchSpecPodDisruptionBudgetPatchPtrInput `pulumi:"podDisruptionBudget"`
	// RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
	RemoteClusters ElasticsearchSpecRemoteClustersPatchArrayInput `pulumi:"remoteClusters"`
	// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying StatefulSets.
	RevisionHistoryLimit pulumi.IntPtrInput `pulumi:"revisionHistoryLimit"`
	// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
	SecureSettings ElasticsearchSpecSecureSettingsPatchArrayInput `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. a remote Elasticsearch cluster) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName pulumi.StringPtrInput                        `pulumi:"serviceAccountName"`
	Transport          ElasticsearchSpecTransportPatchPtrInput      `pulumi:"transport"`
	UpdateStrategy     ElasticsearchSpecUpdateStrategyPatchPtrInput `pulumi:"updateStrategy"`
	// Version of Elasticsearch.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// VolumeClaimDeletePolicy sets the policy for handling deletion of PersistentVolumeClaims for all NodeSets.
	// Possible values are DeleteOnScaledownOnly and DeleteOnScaledownAndClusterDeletion. Defaults to DeleteOnScaledownAndClusterDeletion.
	VolumeClaimDeletePolicy pulumi.StringPtrInput `pulumi:"volumeClaimDeletePolicy"`
}

func (ElasticsearchSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPatch)(nil)).Elem()
}

func (i ElasticsearchSpecPatchArgs) ToElasticsearchSpecPatchOutput() ElasticsearchSpecPatchOutput {
	return i.ToElasticsearchSpecPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPatchArgs) ToElasticsearchSpecPatchOutputWithContext(ctx context.Context) ElasticsearchSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPatchOutput)
}

func (i ElasticsearchSpecPatchArgs) ToElasticsearchSpecPatchPtrOutput() ElasticsearchSpecPatchPtrOutput {
	return i.ToElasticsearchSpecPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPatchArgs) ToElasticsearchSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPatchOutput).ToElasticsearchSpecPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecPatchPtrInput is an input type that accepts ElasticsearchSpecPatchArgs, ElasticsearchSpecPatchPtr and ElasticsearchSpecPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPatchPtrInput` via:
//
//	        ElasticsearchSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecPatchPtrOutput() ElasticsearchSpecPatchPtrOutput
	ToElasticsearchSpecPatchPtrOutputWithContext(context.Context) ElasticsearchSpecPatchPtrOutput
}

type elasticsearchSpecPatchPtrType ElasticsearchSpecPatchArgs

func ElasticsearchSpecPatchPtr(v *ElasticsearchSpecPatchArgs) ElasticsearchSpecPatchPtrInput {
	return (*elasticsearchSpecPatchPtrType)(v)
}

func (*elasticsearchSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPatch)(nil)).Elem()
}

func (i *elasticsearchSpecPatchPtrType) ToElasticsearchSpecPatchPtrOutput() ElasticsearchSpecPatchPtrOutput {
	return i.ToElasticsearchSpecPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecPatchPtrType) ToElasticsearchSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPatchPtrOutput)
}

// ElasticsearchSpec holds the specification of an Elasticsearch cluster.
type ElasticsearchSpecPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPatch)(nil)).Elem()
}

func (o ElasticsearchSpecPatchOutput) ToElasticsearchSpecPatchOutput() ElasticsearchSpecPatchOutput {
	return o
}

func (o ElasticsearchSpecPatchOutput) ToElasticsearchSpecPatchOutputWithContext(ctx context.Context) ElasticsearchSpecPatchOutput {
	return o
}

func (o ElasticsearchSpecPatchOutput) ToElasticsearchSpecPatchPtrOutput() ElasticsearchSpecPatchPtrOutput {
	return o.ToElasticsearchSpecPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecPatchOutput) ToElasticsearchSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecPatch) *ElasticsearchSpecPatch {
		return &v
	}).(ElasticsearchSpecPatchPtrOutput)
}

func (o ElasticsearchSpecPatchOutput) Auth() ElasticsearchSpecAuthPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPatch) *ElasticsearchSpecAuthPatch { return v.Auth }).(ElasticsearchSpecAuthPatchPtrOutput)
}

func (o ElasticsearchSpecPatchOutput) Http() ElasticsearchSpecHttpPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPatch) *ElasticsearchSpecHttpPatch { return v.Http }).(ElasticsearchSpecHttpPatchPtrOutput)
}

// Image is the Elasticsearch Docker image to deploy.
func (o ElasticsearchSpecPatchOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPatch) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecPatchOutput) Monitoring() ElasticsearchSpecMonitoringPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPatch) *ElasticsearchSpecMonitoringPatch { return v.Monitoring }).(ElasticsearchSpecMonitoringPatchPtrOutput)
}

// NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
func (o ElasticsearchSpecPatchOutput) NodeSets() ElasticsearchSpecNodeSetsPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecPatch) []ElasticsearchSpecNodeSetsPatch { return v.NodeSets }).(ElasticsearchSpecNodeSetsPatchArrayOutput)
}

func (o ElasticsearchSpecPatchOutput) PodDisruptionBudget() ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPatch) *ElasticsearchSpecPodDisruptionBudgetPatch {
		return v.PodDisruptionBudget
	}).(ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput)
}

// RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
func (o ElasticsearchSpecPatchOutput) RemoteClusters() ElasticsearchSpecRemoteClustersPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecPatch) []ElasticsearchSpecRemoteClustersPatch { return v.RemoteClusters }).(ElasticsearchSpecRemoteClustersPatchArrayOutput)
}

// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying StatefulSets.
func (o ElasticsearchSpecPatchOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPatch) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
func (o ElasticsearchSpecPatchOutput) SecureSettings() ElasticsearchSpecSecureSettingsPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecPatch) []ElasticsearchSpecSecureSettingsPatch { return v.SecureSettings }).(ElasticsearchSpecSecureSettingsPatchArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. a remote Elasticsearch cluster) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o ElasticsearchSpecPatchOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPatch) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecPatchOutput) Transport() ElasticsearchSpecTransportPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPatch) *ElasticsearchSpecTransportPatch { return v.Transport }).(ElasticsearchSpecTransportPatchPtrOutput)
}

func (o ElasticsearchSpecPatchOutput) UpdateStrategy() ElasticsearchSpecUpdateStrategyPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPatch) *ElasticsearchSpecUpdateStrategyPatch { return v.UpdateStrategy }).(ElasticsearchSpecUpdateStrategyPatchPtrOutput)
}

// Version of Elasticsearch.
func (o ElasticsearchSpecPatchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPatch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// VolumeClaimDeletePolicy sets the policy for handling deletion of PersistentVolumeClaims for all NodeSets.
// Possible values are DeleteOnScaledownOnly and DeleteOnScaledownAndClusterDeletion. Defaults to DeleteOnScaledownAndClusterDeletion.
func (o ElasticsearchSpecPatchOutput) VolumeClaimDeletePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPatch) *string { return v.VolumeClaimDeletePolicy }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPatch)(nil)).Elem()
}

func (o ElasticsearchSpecPatchPtrOutput) ToElasticsearchSpecPatchPtrOutput() ElasticsearchSpecPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecPatchPtrOutput) ToElasticsearchSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecPatchPtrOutput) Elem() ElasticsearchSpecPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPatch) ElasticsearchSpecPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecPatch
		return ret
	}).(ElasticsearchSpecPatchOutput)
}

func (o ElasticsearchSpecPatchPtrOutput) Auth() ElasticsearchSpecAuthPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPatch) *ElasticsearchSpecAuthPatch {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ElasticsearchSpecAuthPatchPtrOutput)
}

func (o ElasticsearchSpecPatchPtrOutput) Http() ElasticsearchSpecHttpPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPatch) *ElasticsearchSpecHttpPatch {
		if v == nil {
			return nil
		}
		return v.Http
	}).(ElasticsearchSpecHttpPatchPtrOutput)
}

// Image is the Elasticsearch Docker image to deploy.
func (o ElasticsearchSpecPatchPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecPatchPtrOutput) Monitoring() ElasticsearchSpecMonitoringPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPatch) *ElasticsearchSpecMonitoringPatch {
		if v == nil {
			return nil
		}
		return v.Monitoring
	}).(ElasticsearchSpecMonitoringPatchPtrOutput)
}

// NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
func (o ElasticsearchSpecPatchPtrOutput) NodeSets() ElasticsearchSpecNodeSetsPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPatch) []ElasticsearchSpecNodeSetsPatch {
		if v == nil {
			return nil
		}
		return v.NodeSets
	}).(ElasticsearchSpecNodeSetsPatchArrayOutput)
}

func (o ElasticsearchSpecPatchPtrOutput) PodDisruptionBudget() ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPatch) *ElasticsearchSpecPodDisruptionBudgetPatch {
		if v == nil {
			return nil
		}
		return v.PodDisruptionBudget
	}).(ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput)
}

// RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
func (o ElasticsearchSpecPatchPtrOutput) RemoteClusters() ElasticsearchSpecRemoteClustersPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPatch) []ElasticsearchSpecRemoteClustersPatch {
		if v == nil {
			return nil
		}
		return v.RemoteClusters
	}).(ElasticsearchSpecRemoteClustersPatchArrayOutput)
}

// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying StatefulSets.
func (o ElasticsearchSpecPatchPtrOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.RevisionHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
func (o ElasticsearchSpecPatchPtrOutput) SecureSettings() ElasticsearchSpecSecureSettingsPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPatch) []ElasticsearchSpecSecureSettingsPatch {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(ElasticsearchSpecSecureSettingsPatchArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. a remote Elasticsearch cluster) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o ElasticsearchSpecPatchPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecPatchPtrOutput) Transport() ElasticsearchSpecTransportPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPatch) *ElasticsearchSpecTransportPatch {
		if v == nil {
			return nil
		}
		return v.Transport
	}).(ElasticsearchSpecTransportPatchPtrOutput)
}

func (o ElasticsearchSpecPatchPtrOutput) UpdateStrategy() ElasticsearchSpecUpdateStrategyPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPatch) *ElasticsearchSpecUpdateStrategyPatch {
		if v == nil {
			return nil
		}
		return v.UpdateStrategy
	}).(ElasticsearchSpecUpdateStrategyPatchPtrOutput)
}

// Version of Elasticsearch.
func (o ElasticsearchSpecPatchPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// VolumeClaimDeletePolicy sets the policy for handling deletion of PersistentVolumeClaims for all NodeSets.
// Possible values are DeleteOnScaledownOnly and DeleteOnScaledownAndClusterDeletion. Defaults to DeleteOnScaledownAndClusterDeletion.
func (o ElasticsearchSpecPatchPtrOutput) VolumeClaimDeletePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimDeletePolicy
	}).(pulumi.StringPtrOutput)
}

// PodDisruptionBudget provides access to the default Pod disruption budget for the Elasticsearch cluster.
// The default budget doesn't allow any Pod to be removed in case the cluster is not green or if there is only one node of type `data` or `master`.
// In all other cases the default PodDisruptionBudget sets `minUnavailable` equal to the total number of nodes minus 1.
// To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
type ElasticsearchSpecPodDisruptionBudget struct {
	Metadata *ElasticsearchSpecPodDisruptionBudgetMetadata `pulumi:"metadata"`
	Spec     *ElasticsearchSpecPodDisruptionBudgetSpec     `pulumi:"spec"`
}

// ElasticsearchSpecPodDisruptionBudgetInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetArgs and ElasticsearchSpecPodDisruptionBudgetOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetArgs{...}
type ElasticsearchSpecPodDisruptionBudgetInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetOutput() ElasticsearchSpecPodDisruptionBudgetOutput
	ToElasticsearchSpecPodDisruptionBudgetOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetOutput
}

// PodDisruptionBudget provides access to the default Pod disruption budget for the Elasticsearch cluster.
// The default budget doesn't allow any Pod to be removed in case the cluster is not green or if there is only one node of type `data` or `master`.
// In all other cases the default PodDisruptionBudget sets `minUnavailable` equal to the total number of nodes minus 1.
// To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
type ElasticsearchSpecPodDisruptionBudgetArgs struct {
	Metadata ElasticsearchSpecPodDisruptionBudgetMetadataPtrInput `pulumi:"metadata"`
	Spec     ElasticsearchSpecPodDisruptionBudgetSpecPtrInput     `pulumi:"spec"`
}

func (ElasticsearchSpecPodDisruptionBudgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudget)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetArgs) ToElasticsearchSpecPodDisruptionBudgetOutput() ElasticsearchSpecPodDisruptionBudgetOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetArgs) ToElasticsearchSpecPodDisruptionBudgetOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetOutput)
}

func (i ElasticsearchSpecPodDisruptionBudgetArgs) ToElasticsearchSpecPodDisruptionBudgetPtrOutput() ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetArgs) ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetOutput).ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(ctx)
}

// ElasticsearchSpecPodDisruptionBudgetPtrInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetArgs, ElasticsearchSpecPodDisruptionBudgetPtr and ElasticsearchSpecPodDisruptionBudgetPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetPtrInput` via:
//
//	        ElasticsearchSpecPodDisruptionBudgetArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecPodDisruptionBudgetPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetPtrOutput() ElasticsearchSpecPodDisruptionBudgetPtrOutput
	ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetPtrOutput
}

type elasticsearchSpecPodDisruptionBudgetPtrType ElasticsearchSpecPodDisruptionBudgetArgs

func ElasticsearchSpecPodDisruptionBudgetPtr(v *ElasticsearchSpecPodDisruptionBudgetArgs) ElasticsearchSpecPodDisruptionBudgetPtrInput {
	return (*elasticsearchSpecPodDisruptionBudgetPtrType)(v)
}

func (*elasticsearchSpecPodDisruptionBudgetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudget)(nil)).Elem()
}

func (i *elasticsearchSpecPodDisruptionBudgetPtrType) ToElasticsearchSpecPodDisruptionBudgetPtrOutput() ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecPodDisruptionBudgetPtrType) ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetPtrOutput)
}

// PodDisruptionBudget provides access to the default Pod disruption budget for the Elasticsearch cluster.
// The default budget doesn't allow any Pod to be removed in case the cluster is not green or if there is only one node of type `data` or `master`.
// In all other cases the default PodDisruptionBudget sets `minUnavailable` equal to the total number of nodes minus 1.
// To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
type ElasticsearchSpecPodDisruptionBudgetOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudget)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetOutput) ToElasticsearchSpecPodDisruptionBudgetOutput() ElasticsearchSpecPodDisruptionBudgetOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetOutput) ToElasticsearchSpecPodDisruptionBudgetOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetOutput) ToElasticsearchSpecPodDisruptionBudgetPtrOutput() ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return o.ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecPodDisruptionBudgetOutput) ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecPodDisruptionBudget) *ElasticsearchSpecPodDisruptionBudget {
		return &v
	}).(ElasticsearchSpecPodDisruptionBudgetPtrOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetOutput) Metadata() ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudget) *ElasticsearchSpecPodDisruptionBudgetMetadata {
		return v.Metadata
	}).(ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetOutput) Spec() ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudget) *ElasticsearchSpecPodDisruptionBudgetSpec { return v.Spec }).(ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput)
}

type ElasticsearchSpecPodDisruptionBudgetPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudget)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetPtrOutput) ToElasticsearchSpecPodDisruptionBudgetPtrOutput() ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetPtrOutput) ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetPtrOutput) Elem() ElasticsearchSpecPodDisruptionBudgetOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudget) ElasticsearchSpecPodDisruptionBudget {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecPodDisruptionBudget
		return ret
	}).(ElasticsearchSpecPodDisruptionBudgetOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetPtrOutput) Metadata() ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudget) *ElasticsearchSpecPodDisruptionBudgetMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetPtrOutput) Spec() ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudget) *ElasticsearchSpecPodDisruptionBudgetSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput)
}

// ObjectMeta is the metadata of the PDB.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecPodDisruptionBudgetMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// ElasticsearchSpecPodDisruptionBudgetMetadataInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetMetadataArgs and ElasticsearchSpecPodDisruptionBudgetMetadataOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetMetadataInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetMetadataArgs{...}
type ElasticsearchSpecPodDisruptionBudgetMetadataInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetMetadataOutput() ElasticsearchSpecPodDisruptionBudgetMetadataOutput
	ToElasticsearchSpecPodDisruptionBudgetMetadataOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataOutput
}

// ObjectMeta is the metadata of the PDB.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecPodDisruptionBudgetMetadataArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (ElasticsearchSpecPodDisruptionBudgetMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetMetadata)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetMetadataArgs) ToElasticsearchSpecPodDisruptionBudgetMetadataOutput() ElasticsearchSpecPodDisruptionBudgetMetadataOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetMetadataOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetMetadataArgs) ToElasticsearchSpecPodDisruptionBudgetMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetMetadataOutput)
}

func (i ElasticsearchSpecPodDisruptionBudgetMetadataArgs) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetMetadataArgs) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetMetadataOutput).ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(ctx)
}

// ElasticsearchSpecPodDisruptionBudgetMetadataPtrInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetMetadataArgs, ElasticsearchSpecPodDisruptionBudgetMetadataPtr and ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetMetadataPtrInput` via:
//
//	        ElasticsearchSpecPodDisruptionBudgetMetadataArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecPodDisruptionBudgetMetadataPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput
	ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput
}

type elasticsearchSpecPodDisruptionBudgetMetadataPtrType ElasticsearchSpecPodDisruptionBudgetMetadataArgs

func ElasticsearchSpecPodDisruptionBudgetMetadataPtr(v *ElasticsearchSpecPodDisruptionBudgetMetadataArgs) ElasticsearchSpecPodDisruptionBudgetMetadataPtrInput {
	return (*elasticsearchSpecPodDisruptionBudgetMetadataPtrType)(v)
}

func (*elasticsearchSpecPodDisruptionBudgetMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetMetadata)(nil)).Elem()
}

func (i *elasticsearchSpecPodDisruptionBudgetMetadataPtrType) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecPodDisruptionBudgetMetadataPtrType) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput)
}

// ObjectMeta is the metadata of the PDB.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecPodDisruptionBudgetMetadataOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataOutput() ElasticsearchSpecPodDisruptionBudgetMetadataOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return o.ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecPodDisruptionBudgetMetadata) *ElasticsearchSpecPodDisruptionBudgetMetadata {
		return &v
	}).(ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetMetadata) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) Elem() ElasticsearchSpecPodDisruptionBudgetMetadataOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadata) ElasticsearchSpecPodDisruptionBudgetMetadata {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecPodDisruptionBudgetMetadata
		return ret
	}).(ElasticsearchSpecPodDisruptionBudgetMetadataOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadata) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ObjectMeta is the metadata of the PDB.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecPodDisruptionBudgetMetadataPatch struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// ElasticsearchSpecPodDisruptionBudgetMetadataPatchInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetMetadataPatchArgs and ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetMetadataPatchInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetMetadataPatchArgs{...}
type ElasticsearchSpecPodDisruptionBudgetMetadataPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput
	ToElasticsearchSpecPodDisruptionBudgetMetadataPatchOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput
}

// ObjectMeta is the metadata of the PDB.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecPodDisruptionBudgetMetadataPatchArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (ElasticsearchSpecPodDisruptionBudgetMetadataPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetMetadataPatch)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetMetadataPatchArgs) ToElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetMetadataPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetMetadataPatchArgs) ToElasticsearchSpecPodDisruptionBudgetMetadataPatchOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput)
}

func (i ElasticsearchSpecPodDisruptionBudgetMetadataPatchArgs) ToElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetMetadataPatchArgs) ToElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput).ToElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetMetadataPatchArgs, ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtr and ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrInput` via:
//
//	        ElasticsearchSpecPodDisruptionBudgetMetadataPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput
	ToElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput
}

type elasticsearchSpecPodDisruptionBudgetMetadataPatchPtrType ElasticsearchSpecPodDisruptionBudgetMetadataPatchArgs

func ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtr(v *ElasticsearchSpecPodDisruptionBudgetMetadataPatchArgs) ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrInput {
	return (*elasticsearchSpecPodDisruptionBudgetMetadataPatchPtrType)(v)
}

func (*elasticsearchSpecPodDisruptionBudgetMetadataPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetMetadataPatch)(nil)).Elem()
}

func (i *elasticsearchSpecPodDisruptionBudgetMetadataPatchPtrType) ToElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecPodDisruptionBudgetMetadataPatchPtrType) ToElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput)
}

// ObjectMeta is the metadata of the PDB.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetMetadataPatch)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataPatchOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput {
	return o.ToElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecPodDisruptionBudgetMetadataPatch) *ElasticsearchSpecPodDisruptionBudgetMetadataPatch {
		return &v
	}).(ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetMetadataPatch) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetMetadataPatch) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetMetadataPatch) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetMetadataPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetMetadataPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetMetadataPatch)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput) Elem() ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadataPatch) ElasticsearchSpecPodDisruptionBudgetMetadataPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecPodDisruptionBudgetMetadataPatch
		return ret
	}).(ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadataPatch) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadataPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadataPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// PodDisruptionBudget provides access to the default Pod disruption budget for the Elasticsearch cluster.
// The default budget doesn't allow any Pod to be removed in case the cluster is not green or if there is only one node of type `data` or `master`.
// In all other cases the default PodDisruptionBudget sets `minUnavailable` equal to the total number of nodes minus 1.
// To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
type ElasticsearchSpecPodDisruptionBudgetPatch struct {
	Metadata *ElasticsearchSpecPodDisruptionBudgetMetadataPatch `pulumi:"metadata"`
	Spec     *ElasticsearchSpecPodDisruptionBudgetSpecPatch     `pulumi:"spec"`
}

// ElasticsearchSpecPodDisruptionBudgetPatchInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetPatchArgs and ElasticsearchSpecPodDisruptionBudgetPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetPatchInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetPatchArgs{...}
type ElasticsearchSpecPodDisruptionBudgetPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetPatchOutput() ElasticsearchSpecPodDisruptionBudgetPatchOutput
	ToElasticsearchSpecPodDisruptionBudgetPatchOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetPatchOutput
}

// PodDisruptionBudget provides access to the default Pod disruption budget for the Elasticsearch cluster.
// The default budget doesn't allow any Pod to be removed in case the cluster is not green or if there is only one node of type `data` or `master`.
// In all other cases the default PodDisruptionBudget sets `minUnavailable` equal to the total number of nodes minus 1.
// To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
type ElasticsearchSpecPodDisruptionBudgetPatchArgs struct {
	Metadata ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrInput `pulumi:"metadata"`
	Spec     ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrInput     `pulumi:"spec"`
}

func (ElasticsearchSpecPodDisruptionBudgetPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetPatch)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetPatchArgs) ToElasticsearchSpecPodDisruptionBudgetPatchOutput() ElasticsearchSpecPodDisruptionBudgetPatchOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetPatchArgs) ToElasticsearchSpecPodDisruptionBudgetPatchOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetPatchOutput)
}

func (i ElasticsearchSpecPodDisruptionBudgetPatchArgs) ToElasticsearchSpecPodDisruptionBudgetPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetPatchArgs) ToElasticsearchSpecPodDisruptionBudgetPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetPatchOutput).ToElasticsearchSpecPodDisruptionBudgetPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecPodDisruptionBudgetPatchPtrInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetPatchArgs, ElasticsearchSpecPodDisruptionBudgetPatchPtr and ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetPatchPtrInput` via:
//
//	        ElasticsearchSpecPodDisruptionBudgetPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecPodDisruptionBudgetPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput
	ToElasticsearchSpecPodDisruptionBudgetPatchPtrOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput
}

type elasticsearchSpecPodDisruptionBudgetPatchPtrType ElasticsearchSpecPodDisruptionBudgetPatchArgs

func ElasticsearchSpecPodDisruptionBudgetPatchPtr(v *ElasticsearchSpecPodDisruptionBudgetPatchArgs) ElasticsearchSpecPodDisruptionBudgetPatchPtrInput {
	return (*elasticsearchSpecPodDisruptionBudgetPatchPtrType)(v)
}

func (*elasticsearchSpecPodDisruptionBudgetPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetPatch)(nil)).Elem()
}

func (i *elasticsearchSpecPodDisruptionBudgetPatchPtrType) ToElasticsearchSpecPodDisruptionBudgetPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecPodDisruptionBudgetPatchPtrType) ToElasticsearchSpecPodDisruptionBudgetPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput)
}

// PodDisruptionBudget provides access to the default Pod disruption budget for the Elasticsearch cluster.
// The default budget doesn't allow any Pod to be removed in case the cluster is not green or if there is only one node of type `data` or `master`.
// In all other cases the default PodDisruptionBudget sets `minUnavailable` equal to the total number of nodes minus 1.
// To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
type ElasticsearchSpecPodDisruptionBudgetPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetPatch)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetPatchOutput) ToElasticsearchSpecPodDisruptionBudgetPatchOutput() ElasticsearchSpecPodDisruptionBudgetPatchOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetPatchOutput) ToElasticsearchSpecPodDisruptionBudgetPatchOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetPatchOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetPatchOutput) ToElasticsearchSpecPodDisruptionBudgetPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput {
	return o.ToElasticsearchSpecPodDisruptionBudgetPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecPodDisruptionBudgetPatchOutput) ToElasticsearchSpecPodDisruptionBudgetPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecPodDisruptionBudgetPatch) *ElasticsearchSpecPodDisruptionBudgetPatch {
		return &v
	}).(ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetPatchOutput) Metadata() ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetPatch) *ElasticsearchSpecPodDisruptionBudgetMetadataPatch {
		return v.Metadata
	}).(ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetPatchOutput) Spec() ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetPatch) *ElasticsearchSpecPodDisruptionBudgetSpecPatch {
		return v.Spec
	}).(ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput)
}

type ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetPatch)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput) ToElasticsearchSpecPodDisruptionBudgetPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput) ToElasticsearchSpecPodDisruptionBudgetPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput) Elem() ElasticsearchSpecPodDisruptionBudgetPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetPatch) ElasticsearchSpecPodDisruptionBudgetPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecPodDisruptionBudgetPatch
		return ret
	}).(ElasticsearchSpecPodDisruptionBudgetPatchOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput) Metadata() ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetPatch) *ElasticsearchSpecPodDisruptionBudgetMetadataPatch {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput) Spec() ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetPatch) *ElasticsearchSpecPodDisruptionBudgetSpecPatch {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput)
}

// Spec is the specification of the PDB.
type ElasticsearchSpecPodDisruptionBudgetSpec struct {
	// An eviction is allowed if at most "maxUnavailable" pods selected by
	// "selector" are unavailable after the eviction, i.e. even in absence of
	// the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	MaxUnavailable interface{} `pulumi:"maxUnavailable"`
	// An eviction is allowed if at least "minAvailable" pods selected by
	// "selector" will still be available after the eviction, i.e. even in the
	// absence of the evicted pod.  So for example you can prevent all voluntary
	// evictions by specifying "100%".
	MinAvailable interface{}                                       `pulumi:"minAvailable"`
	Selector     *ElasticsearchSpecPodDisruptionBudgetSpecSelector `pulumi:"selector"`
	// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods
	// should be considered for eviction. Current implementation considers healthy pods,
	// as pods that have status.conditions item with type="Ready",status="True".
	//
	// Valid policies are IfHealthyBudget and AlwaysAllow.
	// If no policy is specified, the default behavior will be used,
	// which corresponds to the IfHealthyBudget policy.
	//
	// IfHealthyBudget policy means that running pods (status.phase="Running"),
	// but not yet healthy can be evicted only if the guarded application is not
	// disrupted (status.currentHealthy is at least equal to status.desiredHealthy).
	// Healthy pods will be subject to the PDB for eviction.
	//
	// AlwaysAllow policy means that all running pods (status.phase="Running"),
	// but not yet healthy are considered disrupted and can be evicted regardless
	// of whether the criteria in a PDB is met. This means perspective running
	// pods of a disrupted application might not get a chance to become healthy.
	// Healthy pods will be subject to the PDB for eviction.
	//
	// Additional policies may be added in the future.
	// Clients making eviction decisions should disallow eviction of unhealthy pods
	// if they encounter an unrecognized policy in this field.
	//
	// This field is beta-level. The eviction API uses this field when
	// the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
	UnhealthyPodEvictionPolicy *string `pulumi:"unhealthyPodEvictionPolicy"`
}

// ElasticsearchSpecPodDisruptionBudgetSpecInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecArgs and ElasticsearchSpecPodDisruptionBudgetSpecOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetSpecArgs{...}
type ElasticsearchSpecPodDisruptionBudgetSpecInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecOutput() ElasticsearchSpecPodDisruptionBudgetSpecOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecOutput
}

// Spec is the specification of the PDB.
type ElasticsearchSpecPodDisruptionBudgetSpecArgs struct {
	// An eviction is allowed if at most "maxUnavailable" pods selected by
	// "selector" are unavailable after the eviction, i.e. even in absence of
	// the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	MaxUnavailable pulumi.Input `pulumi:"maxUnavailable"`
	// An eviction is allowed if at least "minAvailable" pods selected by
	// "selector" will still be available after the eviction, i.e. even in the
	// absence of the evicted pod.  So for example you can prevent all voluntary
	// evictions by specifying "100%".
	MinAvailable pulumi.Input                                             `pulumi:"minAvailable"`
	Selector     ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrInput `pulumi:"selector"`
	// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods
	// should be considered for eviction. Current implementation considers healthy pods,
	// as pods that have status.conditions item with type="Ready",status="True".
	//
	// Valid policies are IfHealthyBudget and AlwaysAllow.
	// If no policy is specified, the default behavior will be used,
	// which corresponds to the IfHealthyBudget policy.
	//
	// IfHealthyBudget policy means that running pods (status.phase="Running"),
	// but not yet healthy can be evicted only if the guarded application is not
	// disrupted (status.currentHealthy is at least equal to status.desiredHealthy).
	// Healthy pods will be subject to the PDB for eviction.
	//
	// AlwaysAllow policy means that all running pods (status.phase="Running"),
	// but not yet healthy are considered disrupted and can be evicted regardless
	// of whether the criteria in a PDB is met. This means perspective running
	// pods of a disrupted application might not get a chance to become healthy.
	// Healthy pods will be subject to the PDB for eviction.
	//
	// Additional policies may be added in the future.
	// Clients making eviction decisions should disallow eviction of unhealthy pods
	// if they encounter an unrecognized policy in this field.
	//
	// This field is beta-level. The eviction API uses this field when
	// the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
	UnhealthyPodEvictionPolicy pulumi.StringPtrInput `pulumi:"unhealthyPodEvictionPolicy"`
}

func (ElasticsearchSpecPodDisruptionBudgetSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpec)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecArgs) ToElasticsearchSpecPodDisruptionBudgetSpecOutput() ElasticsearchSpecPodDisruptionBudgetSpecOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecArgs) ToElasticsearchSpecPodDisruptionBudgetSpecOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecOutput)
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecArgs) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecArgs) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecOutput).ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(ctx)
}

// ElasticsearchSpecPodDisruptionBudgetSpecPtrInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecArgs, ElasticsearchSpecPodDisruptionBudgetSpecPtr and ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecPtrInput` via:
//
//	        ElasticsearchSpecPodDisruptionBudgetSpecArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecPodDisruptionBudgetSpecPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput
}

type elasticsearchSpecPodDisruptionBudgetSpecPtrType ElasticsearchSpecPodDisruptionBudgetSpecArgs

func ElasticsearchSpecPodDisruptionBudgetSpecPtr(v *ElasticsearchSpecPodDisruptionBudgetSpecArgs) ElasticsearchSpecPodDisruptionBudgetSpecPtrInput {
	return (*elasticsearchSpecPodDisruptionBudgetSpecPtrType)(v)
}

func (*elasticsearchSpecPodDisruptionBudgetSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetSpec)(nil)).Elem()
}

func (i *elasticsearchSpecPodDisruptionBudgetSpecPtrType) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecPodDisruptionBudgetSpecPtrType) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput)
}

// Spec is the specification of the PDB.
type ElasticsearchSpecPodDisruptionBudgetSpecOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpec)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) ToElasticsearchSpecPodDisruptionBudgetSpecOutput() ElasticsearchSpecPodDisruptionBudgetSpecOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) ToElasticsearchSpecPodDisruptionBudgetSpecOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return o.ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecPodDisruptionBudgetSpec) *ElasticsearchSpecPodDisruptionBudgetSpec {
		return &v
	}).(ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput)
}

// An eviction is allowed if at most "maxUnavailable" pods selected by
// "selector" are unavailable after the eviction, i.e. even in absence of
// the evicted pod. For example, one can prevent all voluntary evictions
// by specifying 0. This is a mutually exclusive setting with "minAvailable".
func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpec) interface{} { return v.MaxUnavailable }).(pulumi.AnyOutput)
}

// An eviction is allowed if at least "minAvailable" pods selected by
// "selector" will still be available after the eviction, i.e. even in the
// absence of the evicted pod.  So for example you can prevent all voluntary
// evictions by specifying "100%".
func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) MinAvailable() pulumi.AnyOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpec) interface{} { return v.MinAvailable }).(pulumi.AnyOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) Selector() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpec) *ElasticsearchSpecPodDisruptionBudgetSpecSelector {
		return v.Selector
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput)
}

// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods
// should be considered for eviction. Current implementation considers healthy pods,
// as pods that have status.conditions item with type="Ready",status="True".
//
// Valid policies are IfHealthyBudget and AlwaysAllow.
// If no policy is specified, the default behavior will be used,
// which corresponds to the IfHealthyBudget policy.
//
// IfHealthyBudget policy means that running pods (status.phase="Running"),
// but not yet healthy can be evicted only if the guarded application is not
// disrupted (status.currentHealthy is at least equal to status.desiredHealthy).
// Healthy pods will be subject to the PDB for eviction.
//
// AlwaysAllow policy means that all running pods (status.phase="Running"),
// but not yet healthy are considered disrupted and can be evicted regardless
// of whether the criteria in a PDB is met. This means perspective running
// pods of a disrupted application might not get a chance to become healthy.
// Healthy pods will be subject to the PDB for eviction.
//
// Additional policies may be added in the future.
// Clients making eviction decisions should disallow eviction of unhealthy pods
// if they encounter an unrecognized policy in this field.
//
// This field is beta-level. The eviction API uses this field when
// the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) UnhealthyPodEvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpec) *string { return v.UnhealthyPodEvictionPolicy }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetSpec)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) Elem() ElasticsearchSpecPodDisruptionBudgetSpecOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpec) ElasticsearchSpecPodDisruptionBudgetSpec {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecPodDisruptionBudgetSpec
		return ret
	}).(ElasticsearchSpecPodDisruptionBudgetSpecOutput)
}

// An eviction is allowed if at most "maxUnavailable" pods selected by
// "selector" are unavailable after the eviction, i.e. even in absence of
// the evicted pod. For example, one can prevent all voluntary evictions
// by specifying 0. This is a mutually exclusive setting with "minAvailable".
func (o ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.AnyOutput)
}

// An eviction is allowed if at least "minAvailable" pods selected by
// "selector" will still be available after the eviction, i.e. even in the
// absence of the evicted pod.  So for example you can prevent all voluntary
// evictions by specifying "100%".
func (o ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) MinAvailable() pulumi.AnyOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.MinAvailable
	}).(pulumi.AnyOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) Selector() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpec) *ElasticsearchSpecPodDisruptionBudgetSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput)
}

// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods
// should be considered for eviction. Current implementation considers healthy pods,
// as pods that have status.conditions item with type="Ready",status="True".
//
// Valid policies are IfHealthyBudget and AlwaysAllow.
// If no policy is specified, the default behavior will be used,
// which corresponds to the IfHealthyBudget policy.
//
// IfHealthyBudget policy means that running pods (status.phase="Running"),
// but not yet healthy can be evicted only if the guarded application is not
// disrupted (status.currentHealthy is at least equal to status.desiredHealthy).
// Healthy pods will be subject to the PDB for eviction.
//
// AlwaysAllow policy means that all running pods (status.phase="Running"),
// but not yet healthy are considered disrupted and can be evicted regardless
// of whether the criteria in a PDB is met. This means perspective running
// pods of a disrupted application might not get a chance to become healthy.
// Healthy pods will be subject to the PDB for eviction.
//
// Additional policies may be added in the future.
// Clients making eviction decisions should disallow eviction of unhealthy pods
// if they encounter an unrecognized policy in this field.
//
// This field is beta-level. The eviction API uses this field when
// the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
func (o ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) UnhealthyPodEvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpec) *string {
		if v == nil {
			return nil
		}
		return v.UnhealthyPodEvictionPolicy
	}).(pulumi.StringPtrOutput)
}

// Spec is the specification of the PDB.
type ElasticsearchSpecPodDisruptionBudgetSpecPatch struct {
	// An eviction is allowed if at most "maxUnavailable" pods selected by
	// "selector" are unavailable after the eviction, i.e. even in absence of
	// the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	MaxUnavailable interface{} `pulumi:"maxUnavailable"`
	// An eviction is allowed if at least "minAvailable" pods selected by
	// "selector" will still be available after the eviction, i.e. even in the
	// absence of the evicted pod.  So for example you can prevent all voluntary
	// evictions by specifying "100%".
	MinAvailable interface{}                                            `pulumi:"minAvailable"`
	Selector     *ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch `pulumi:"selector"`
	// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods
	// should be considered for eviction. Current implementation considers healthy pods,
	// as pods that have status.conditions item with type="Ready",status="True".
	//
	// Valid policies are IfHealthyBudget and AlwaysAllow.
	// If no policy is specified, the default behavior will be used,
	// which corresponds to the IfHealthyBudget policy.
	//
	// IfHealthyBudget policy means that running pods (status.phase="Running"),
	// but not yet healthy can be evicted only if the guarded application is not
	// disrupted (status.currentHealthy is at least equal to status.desiredHealthy).
	// Healthy pods will be subject to the PDB for eviction.
	//
	// AlwaysAllow policy means that all running pods (status.phase="Running"),
	// but not yet healthy are considered disrupted and can be evicted regardless
	// of whether the criteria in a PDB is met. This means perspective running
	// pods of a disrupted application might not get a chance to become healthy.
	// Healthy pods will be subject to the PDB for eviction.
	//
	// Additional policies may be added in the future.
	// Clients making eviction decisions should disallow eviction of unhealthy pods
	// if they encounter an unrecognized policy in this field.
	//
	// This field is beta-level. The eviction API uses this field when
	// the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
	UnhealthyPodEvictionPolicy *string `pulumi:"unhealthyPodEvictionPolicy"`
}

// ElasticsearchSpecPodDisruptionBudgetSpecPatchInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecPatchArgs and ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecPatchInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetSpecPatchArgs{...}
type ElasticsearchSpecPodDisruptionBudgetSpecPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecPatchOutput() ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecPatchOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput
}

// Spec is the specification of the PDB.
type ElasticsearchSpecPodDisruptionBudgetSpecPatchArgs struct {
	// An eviction is allowed if at most "maxUnavailable" pods selected by
	// "selector" are unavailable after the eviction, i.e. even in absence of
	// the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	MaxUnavailable pulumi.Input `pulumi:"maxUnavailable"`
	// An eviction is allowed if at least "minAvailable" pods selected by
	// "selector" will still be available after the eviction, i.e. even in the
	// absence of the evicted pod.  So for example you can prevent all voluntary
	// evictions by specifying "100%".
	MinAvailable pulumi.Input                                                  `pulumi:"minAvailable"`
	Selector     ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrInput `pulumi:"selector"`
	// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods
	// should be considered for eviction. Current implementation considers healthy pods,
	// as pods that have status.conditions item with type="Ready",status="True".
	//
	// Valid policies are IfHealthyBudget and AlwaysAllow.
	// If no policy is specified, the default behavior will be used,
	// which corresponds to the IfHealthyBudget policy.
	//
	// IfHealthyBudget policy means that running pods (status.phase="Running"),
	// but not yet healthy can be evicted only if the guarded application is not
	// disrupted (status.currentHealthy is at least equal to status.desiredHealthy).
	// Healthy pods will be subject to the PDB for eviction.
	//
	// AlwaysAllow policy means that all running pods (status.phase="Running"),
	// but not yet healthy are considered disrupted and can be evicted regardless
	// of whether the criteria in a PDB is met. This means perspective running
	// pods of a disrupted application might not get a chance to become healthy.
	// Healthy pods will be subject to the PDB for eviction.
	//
	// Additional policies may be added in the future.
	// Clients making eviction decisions should disallow eviction of unhealthy pods
	// if they encounter an unrecognized policy in this field.
	//
	// This field is beta-level. The eviction API uses this field when
	// the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
	UnhealthyPodEvictionPolicy pulumi.StringPtrInput `pulumi:"unhealthyPodEvictionPolicy"`
}

func (ElasticsearchSpecPodDisruptionBudgetSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecPatch)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecPatchArgs) ToElasticsearchSpecPodDisruptionBudgetSpecPatchOutput() ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecPatchArgs) ToElasticsearchSpecPodDisruptionBudgetSpecPatchOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput)
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecPatchArgs) ToElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecPatchArgs) ToElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput).ToElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecPatchArgs, ElasticsearchSpecPodDisruptionBudgetSpecPatchPtr and ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrInput` via:
//
//	        ElasticsearchSpecPodDisruptionBudgetSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput
}

type elasticsearchSpecPodDisruptionBudgetSpecPatchPtrType ElasticsearchSpecPodDisruptionBudgetSpecPatchArgs

func ElasticsearchSpecPodDisruptionBudgetSpecPatchPtr(v *ElasticsearchSpecPodDisruptionBudgetSpecPatchArgs) ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrInput {
	return (*elasticsearchSpecPodDisruptionBudgetSpecPatchPtrType)(v)
}

func (*elasticsearchSpecPodDisruptionBudgetSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetSpecPatch)(nil)).Elem()
}

func (i *elasticsearchSpecPodDisruptionBudgetSpecPatchPtrType) ToElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecPodDisruptionBudgetSpecPatchPtrType) ToElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput)
}

// Spec is the specification of the PDB.
type ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecPatch)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput) ToElasticsearchSpecPodDisruptionBudgetSpecPatchOutput() ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput) ToElasticsearchSpecPodDisruptionBudgetSpecPatchOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput) ToElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput {
	return o.ToElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput) ToElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecPodDisruptionBudgetSpecPatch) *ElasticsearchSpecPodDisruptionBudgetSpecPatch {
		return &v
	}).(ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput)
}

// An eviction is allowed if at most "maxUnavailable" pods selected by
// "selector" are unavailable after the eviction, i.e. even in absence of
// the evicted pod. For example, one can prevent all voluntary evictions
// by specifying 0. This is a mutually exclusive setting with "minAvailable".
func (o ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecPatch) interface{} { return v.MaxUnavailable }).(pulumi.AnyOutput)
}

// An eviction is allowed if at least "minAvailable" pods selected by
// "selector" will still be available after the eviction, i.e. even in the
// absence of the evicted pod.  So for example you can prevent all voluntary
// evictions by specifying "100%".
func (o ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput) MinAvailable() pulumi.AnyOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecPatch) interface{} { return v.MinAvailable }).(pulumi.AnyOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput) Selector() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecPatch) *ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch {
		return v.Selector
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput)
}

// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods
// should be considered for eviction. Current implementation considers healthy pods,
// as pods that have status.conditions item with type="Ready",status="True".
//
// Valid policies are IfHealthyBudget and AlwaysAllow.
// If no policy is specified, the default behavior will be used,
// which corresponds to the IfHealthyBudget policy.
//
// IfHealthyBudget policy means that running pods (status.phase="Running"),
// but not yet healthy can be evicted only if the guarded application is not
// disrupted (status.currentHealthy is at least equal to status.desiredHealthy).
// Healthy pods will be subject to the PDB for eviction.
//
// AlwaysAllow policy means that all running pods (status.phase="Running"),
// but not yet healthy are considered disrupted and can be evicted regardless
// of whether the criteria in a PDB is met. This means perspective running
// pods of a disrupted application might not get a chance to become healthy.
// Healthy pods will be subject to the PDB for eviction.
//
// Additional policies may be added in the future.
// Clients making eviction decisions should disallow eviction of unhealthy pods
// if they encounter an unrecognized policy in this field.
//
// This field is beta-level. The eviction API uses this field when
// the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
func (o ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput) UnhealthyPodEvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecPatch) *string { return v.UnhealthyPodEvictionPolicy }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetSpecPatch)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput) ToElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput) ToElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput) Elem() ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpecPatch) ElasticsearchSpecPodDisruptionBudgetSpecPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecPodDisruptionBudgetSpecPatch
		return ret
	}).(ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput)
}

// An eviction is allowed if at most "maxUnavailable" pods selected by
// "selector" are unavailable after the eviction, i.e. even in absence of
// the evicted pod. For example, one can prevent all voluntary evictions
// by specifying 0. This is a mutually exclusive setting with "minAvailable".
func (o ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpecPatch) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.AnyOutput)
}

// An eviction is allowed if at least "minAvailable" pods selected by
// "selector" will still be available after the eviction, i.e. even in the
// absence of the evicted pod.  So for example you can prevent all voluntary
// evictions by specifying "100%".
func (o ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput) MinAvailable() pulumi.AnyOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpecPatch) interface{} {
		if v == nil {
			return nil
		}
		return v.MinAvailable
	}).(pulumi.AnyOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput) Selector() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpecPatch) *ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput)
}

// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods
// should be considered for eviction. Current implementation considers healthy pods,
// as pods that have status.conditions item with type="Ready",status="True".
//
// Valid policies are IfHealthyBudget and AlwaysAllow.
// If no policy is specified, the default behavior will be used,
// which corresponds to the IfHealthyBudget policy.
//
// IfHealthyBudget policy means that running pods (status.phase="Running"),
// but not yet healthy can be evicted only if the guarded application is not
// disrupted (status.currentHealthy is at least equal to status.desiredHealthy).
// Healthy pods will be subject to the PDB for eviction.
//
// AlwaysAllow policy means that all running pods (status.phase="Running"),
// but not yet healthy are considered disrupted and can be evicted regardless
// of whether the criteria in a PDB is met. This means perspective running
// pods of a disrupted application might not get a chance to become healthy.
// Healthy pods will be subject to the PDB for eviction.
//
// Additional policies may be added in the future.
// Clients making eviction decisions should disallow eviction of unhealthy pods
// if they encounter an unrecognized policy in this field.
//
// This field is beta-level. The eviction API uses this field when
// the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
func (o ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput) UnhealthyPodEvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.UnhealthyPodEvictionPolicy
	}).(pulumi.StringPtrOutput)
}

// Label query over pods whose evictions are managed by the disruption
// budget.
// A null selector will match no pods, while an empty ({}) selector will select
// all pods within the namespace.
type ElasticsearchSpecPodDisruptionBudgetSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ElasticsearchSpecPodDisruptionBudgetSpecSelectorInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs and ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecSelectorInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs{...}
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput
}

// Label query over pods whose evictions are managed by the disruption
// budget.
// A null selector will match no pods, while an empty ({}) selector will select
// all pods within the namespace.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelector)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput)
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput).ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(ctx)
}

// ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs, ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtr and ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrInput` via:
//
//	        ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput
}

type elasticsearchSpecPodDisruptionBudgetSpecSelectorPtrType ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs

func ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtr(v *ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrInput {
	return (*elasticsearchSpecPodDisruptionBudgetSpecSelectorPtrType)(v)
}

func (*elasticsearchSpecPodDisruptionBudgetSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetSpecSelector)(nil)).Elem()
}

func (i *elasticsearchSpecPodDisruptionBudgetSpecSelectorPtrType) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecPodDisruptionBudgetSpecSelectorPtrType) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput)
}

// Label query over pods whose evictions are managed by the disruption
// budget.
// A null selector will match no pods, while an empty ({}) selector will select
// all pods within the namespace.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelector)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return o.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecPodDisruptionBudgetSpecSelector) *ElasticsearchSpecPodDisruptionBudgetSpecSelector {
		return &v
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput) MatchExpressions() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecSelector) []ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetSpecSelector)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput) Elem() ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpecSelector) ElasticsearchSpecPodDisruptionBudgetSpecSelector {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecPodDisruptionBudgetSpecSelector
		return ret
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput) MatchExpressions() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpecSelector) []ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs and ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs{...}
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput)
}

// ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArray and ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArray{ ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs{...} }
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput
}

type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArray []ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsInput

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArray) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArray) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions {
		return vs[0].([]ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArgs and ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArgs{...}
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput)
}

// ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArray and ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArray{ ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArgs{...} }
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput
}

type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArray []ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchInput

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArray) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArray) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatch {
		return vs[0].([]ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput)
}

// Label query over pods whose evictions are managed by the disruption
// budget.
// A null selector will match no pods, while an empty ({}) selector will select
// all pods within the namespace.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchArgs and ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchArgs{...}
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput
}

// Label query over pods whose evictions are managed by the disruption
// budget.
// A null selector will match no pods, while an empty ({}) selector will select
// all pods within the namespace.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput)
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput).ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchArgs, ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtr and ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrInput` via:
//
//	        ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput
}

type elasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrType ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchArgs

func ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtr(v *ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchArgs) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrInput {
	return (*elasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrType)(v)
}

func (*elasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch)(nil)).Elem()
}

func (i *elasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrType) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrType) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput)
}

// Label query over pods whose evictions are managed by the disruption
// budget.
// A null selector will match no pods, while an empty ({}) selector will select
// all pods within the namespace.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput {
	return o.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch) *ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch {
		return &v
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput) MatchExpressions() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch) []ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput) Elem() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch
		return ret
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput) MatchExpressions() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch) []ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// RemoteCluster declares a remote Elasticsearch cluster connection.
type ElasticsearchSpecRemoteClusters struct {
	ElasticsearchRef *ElasticsearchSpecRemoteClustersElasticsearchRef `pulumi:"elasticsearchRef"`
	// Name is the name of the remote cluster as it is set in the Elasticsearch settings.
	// The name is expected to be unique for each remote clusters.
	Name *string `pulumi:"name"`
}

// ElasticsearchSpecRemoteClustersInput is an input type that accepts ElasticsearchSpecRemoteClustersArgs and ElasticsearchSpecRemoteClustersOutput values.
// You can construct a concrete instance of `ElasticsearchSpecRemoteClustersInput` via:
//
//	ElasticsearchSpecRemoteClustersArgs{...}
type ElasticsearchSpecRemoteClustersInput interface {
	pulumi.Input

	ToElasticsearchSpecRemoteClustersOutput() ElasticsearchSpecRemoteClustersOutput
	ToElasticsearchSpecRemoteClustersOutputWithContext(context.Context) ElasticsearchSpecRemoteClustersOutput
}

// RemoteCluster declares a remote Elasticsearch cluster connection.
type ElasticsearchSpecRemoteClustersArgs struct {
	ElasticsearchRef ElasticsearchSpecRemoteClustersElasticsearchRefPtrInput `pulumi:"elasticsearchRef"`
	// Name is the name of the remote cluster as it is set in the Elasticsearch settings.
	// The name is expected to be unique for each remote clusters.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ElasticsearchSpecRemoteClustersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecRemoteClusters)(nil)).Elem()
}

func (i ElasticsearchSpecRemoteClustersArgs) ToElasticsearchSpecRemoteClustersOutput() ElasticsearchSpecRemoteClustersOutput {
	return i.ToElasticsearchSpecRemoteClustersOutputWithContext(context.Background())
}

func (i ElasticsearchSpecRemoteClustersArgs) ToElasticsearchSpecRemoteClustersOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecRemoteClustersOutput)
}

// ElasticsearchSpecRemoteClustersArrayInput is an input type that accepts ElasticsearchSpecRemoteClustersArray and ElasticsearchSpecRemoteClustersArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecRemoteClustersArrayInput` via:
//
//	ElasticsearchSpecRemoteClustersArray{ ElasticsearchSpecRemoteClustersArgs{...} }
type ElasticsearchSpecRemoteClustersArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecRemoteClustersArrayOutput() ElasticsearchSpecRemoteClustersArrayOutput
	ToElasticsearchSpecRemoteClustersArrayOutputWithContext(context.Context) ElasticsearchSpecRemoteClustersArrayOutput
}

type ElasticsearchSpecRemoteClustersArray []ElasticsearchSpecRemoteClustersInput

func (ElasticsearchSpecRemoteClustersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecRemoteClusters)(nil)).Elem()
}

func (i ElasticsearchSpecRemoteClustersArray) ToElasticsearchSpecRemoteClustersArrayOutput() ElasticsearchSpecRemoteClustersArrayOutput {
	return i.ToElasticsearchSpecRemoteClustersArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecRemoteClustersArray) ToElasticsearchSpecRemoteClustersArrayOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecRemoteClustersArrayOutput)
}

// RemoteCluster declares a remote Elasticsearch cluster connection.
type ElasticsearchSpecRemoteClustersOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecRemoteClustersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecRemoteClusters)(nil)).Elem()
}

func (o ElasticsearchSpecRemoteClustersOutput) ToElasticsearchSpecRemoteClustersOutput() ElasticsearchSpecRemoteClustersOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersOutput) ToElasticsearchSpecRemoteClustersOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersOutput) ElasticsearchRef() ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecRemoteClusters) *ElasticsearchSpecRemoteClustersElasticsearchRef {
		return v.ElasticsearchRef
	}).(ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput)
}

// Name is the name of the remote cluster as it is set in the Elasticsearch settings.
// The name is expected to be unique for each remote clusters.
func (o ElasticsearchSpecRemoteClustersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecRemoteClusters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecRemoteClustersArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecRemoteClustersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecRemoteClusters)(nil)).Elem()
}

func (o ElasticsearchSpecRemoteClustersArrayOutput) ToElasticsearchSpecRemoteClustersArrayOutput() ElasticsearchSpecRemoteClustersArrayOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersArrayOutput) ToElasticsearchSpecRemoteClustersArrayOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersArrayOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecRemoteClustersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecRemoteClusters {
		return vs[0].([]ElasticsearchSpecRemoteClusters)[vs[1].(int)]
	}).(ElasticsearchSpecRemoteClustersOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
type ElasticsearchSpecRemoteClustersElasticsearchRef struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// ElasticsearchSpecRemoteClustersElasticsearchRefInput is an input type that accepts ElasticsearchSpecRemoteClustersElasticsearchRefArgs and ElasticsearchSpecRemoteClustersElasticsearchRefOutput values.
// You can construct a concrete instance of `ElasticsearchSpecRemoteClustersElasticsearchRefInput` via:
//
//	ElasticsearchSpecRemoteClustersElasticsearchRefArgs{...}
type ElasticsearchSpecRemoteClustersElasticsearchRefInput interface {
	pulumi.Input

	ToElasticsearchSpecRemoteClustersElasticsearchRefOutput() ElasticsearchSpecRemoteClustersElasticsearchRefOutput
	ToElasticsearchSpecRemoteClustersElasticsearchRefOutputWithContext(context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefOutput
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
type ElasticsearchSpecRemoteClustersElasticsearchRefArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (ElasticsearchSpecRemoteClustersElasticsearchRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecRemoteClustersElasticsearchRef)(nil)).Elem()
}

func (i ElasticsearchSpecRemoteClustersElasticsearchRefArgs) ToElasticsearchSpecRemoteClustersElasticsearchRefOutput() ElasticsearchSpecRemoteClustersElasticsearchRefOutput {
	return i.ToElasticsearchSpecRemoteClustersElasticsearchRefOutputWithContext(context.Background())
}

func (i ElasticsearchSpecRemoteClustersElasticsearchRefArgs) ToElasticsearchSpecRemoteClustersElasticsearchRefOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecRemoteClustersElasticsearchRefOutput)
}

func (i ElasticsearchSpecRemoteClustersElasticsearchRefArgs) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return i.ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecRemoteClustersElasticsearchRefArgs) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecRemoteClustersElasticsearchRefOutput).ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(ctx)
}

// ElasticsearchSpecRemoteClustersElasticsearchRefPtrInput is an input type that accepts ElasticsearchSpecRemoteClustersElasticsearchRefArgs, ElasticsearchSpecRemoteClustersElasticsearchRefPtr and ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecRemoteClustersElasticsearchRefPtrInput` via:
//
//	        ElasticsearchSpecRemoteClustersElasticsearchRefArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecRemoteClustersElasticsearchRefPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput
	ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput
}

type elasticsearchSpecRemoteClustersElasticsearchRefPtrType ElasticsearchSpecRemoteClustersElasticsearchRefArgs

func ElasticsearchSpecRemoteClustersElasticsearchRefPtr(v *ElasticsearchSpecRemoteClustersElasticsearchRefArgs) ElasticsearchSpecRemoteClustersElasticsearchRefPtrInput {
	return (*elasticsearchSpecRemoteClustersElasticsearchRefPtrType)(v)
}

func (*elasticsearchSpecRemoteClustersElasticsearchRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecRemoteClustersElasticsearchRef)(nil)).Elem()
}

func (i *elasticsearchSpecRemoteClustersElasticsearchRefPtrType) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return i.ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecRemoteClustersElasticsearchRefPtrType) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
type ElasticsearchSpecRemoteClustersElasticsearchRefOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecRemoteClustersElasticsearchRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecRemoteClustersElasticsearchRef)(nil)).Elem()
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefOutput() ElasticsearchSpecRemoteClustersElasticsearchRefOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return o.ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecRemoteClustersElasticsearchRef) *ElasticsearchSpecRemoteClustersElasticsearchRef {
		return &v
	}).(ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecRemoteClustersElasticsearchRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecRemoteClustersElasticsearchRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecRemoteClustersElasticsearchRef) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecRemoteClustersElasticsearchRef)(nil)).Elem()
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput) Elem() ElasticsearchSpecRemoteClustersElasticsearchRefOutput {
	return o.ApplyT(func(v *ElasticsearchSpecRemoteClustersElasticsearchRef) ElasticsearchSpecRemoteClustersElasticsearchRef {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecRemoteClustersElasticsearchRef
		return ret
	}).(ElasticsearchSpecRemoteClustersElasticsearchRefOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecRemoteClustersElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecRemoteClustersElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecRemoteClustersElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
type ElasticsearchSpecRemoteClustersElasticsearchRefPatch struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// ElasticsearchSpecRemoteClustersElasticsearchRefPatchInput is an input type that accepts ElasticsearchSpecRemoteClustersElasticsearchRefPatchArgs and ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecRemoteClustersElasticsearchRefPatchInput` via:
//
//	ElasticsearchSpecRemoteClustersElasticsearchRefPatchArgs{...}
type ElasticsearchSpecRemoteClustersElasticsearchRefPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput
	ToElasticsearchSpecRemoteClustersElasticsearchRefPatchOutputWithContext(context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
type ElasticsearchSpecRemoteClustersElasticsearchRefPatchArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (ElasticsearchSpecRemoteClustersElasticsearchRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecRemoteClustersElasticsearchRefPatch)(nil)).Elem()
}

func (i ElasticsearchSpecRemoteClustersElasticsearchRefPatchArgs) ToElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput {
	return i.ToElasticsearchSpecRemoteClustersElasticsearchRefPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecRemoteClustersElasticsearchRefPatchArgs) ToElasticsearchSpecRemoteClustersElasticsearchRefPatchOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput)
}

func (i ElasticsearchSpecRemoteClustersElasticsearchRefPatchArgs) ToElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput {
	return i.ToElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecRemoteClustersElasticsearchRefPatchArgs) ToElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput).ToElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrInput is an input type that accepts ElasticsearchSpecRemoteClustersElasticsearchRefPatchArgs, ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtr and ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrInput` via:
//
//	        ElasticsearchSpecRemoteClustersElasticsearchRefPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput
	ToElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutputWithContext(context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput
}

type elasticsearchSpecRemoteClustersElasticsearchRefPatchPtrType ElasticsearchSpecRemoteClustersElasticsearchRefPatchArgs

func ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtr(v *ElasticsearchSpecRemoteClustersElasticsearchRefPatchArgs) ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrInput {
	return (*elasticsearchSpecRemoteClustersElasticsearchRefPatchPtrType)(v)
}

func (*elasticsearchSpecRemoteClustersElasticsearchRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecRemoteClustersElasticsearchRefPatch)(nil)).Elem()
}

func (i *elasticsearchSpecRemoteClustersElasticsearchRefPatchPtrType) ToElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput {
	return i.ToElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecRemoteClustersElasticsearchRefPatchPtrType) ToElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
type ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecRemoteClustersElasticsearchRefPatch)(nil)).Elem()
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefPatchOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput {
	return o.ToElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecRemoteClustersElasticsearchRefPatch) *ElasticsearchSpecRemoteClustersElasticsearchRefPatch {
		return &v
	}).(ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecRemoteClustersElasticsearchRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecRemoteClustersElasticsearchRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecRemoteClustersElasticsearchRefPatch) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecRemoteClustersElasticsearchRefPatch)(nil)).Elem()
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput) Elem() ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecRemoteClustersElasticsearchRefPatch) ElasticsearchSpecRemoteClustersElasticsearchRefPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecRemoteClustersElasticsearchRefPatch
		return ret
	}).(ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecRemoteClustersElasticsearchRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecRemoteClustersElasticsearchRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecRemoteClustersElasticsearchRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// RemoteCluster declares a remote Elasticsearch cluster connection.
type ElasticsearchSpecRemoteClustersPatch struct {
	ElasticsearchRef *ElasticsearchSpecRemoteClustersElasticsearchRefPatch `pulumi:"elasticsearchRef"`
	// Name is the name of the remote cluster as it is set in the Elasticsearch settings.
	// The name is expected to be unique for each remote clusters.
	Name *string `pulumi:"name"`
}

// ElasticsearchSpecRemoteClustersPatchInput is an input type that accepts ElasticsearchSpecRemoteClustersPatchArgs and ElasticsearchSpecRemoteClustersPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecRemoteClustersPatchInput` via:
//
//	ElasticsearchSpecRemoteClustersPatchArgs{...}
type ElasticsearchSpecRemoteClustersPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecRemoteClustersPatchOutput() ElasticsearchSpecRemoteClustersPatchOutput
	ToElasticsearchSpecRemoteClustersPatchOutputWithContext(context.Context) ElasticsearchSpecRemoteClustersPatchOutput
}

// RemoteCluster declares a remote Elasticsearch cluster connection.
type ElasticsearchSpecRemoteClustersPatchArgs struct {
	ElasticsearchRef ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrInput `pulumi:"elasticsearchRef"`
	// Name is the name of the remote cluster as it is set in the Elasticsearch settings.
	// The name is expected to be unique for each remote clusters.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ElasticsearchSpecRemoteClustersPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecRemoteClustersPatch)(nil)).Elem()
}

func (i ElasticsearchSpecRemoteClustersPatchArgs) ToElasticsearchSpecRemoteClustersPatchOutput() ElasticsearchSpecRemoteClustersPatchOutput {
	return i.ToElasticsearchSpecRemoteClustersPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecRemoteClustersPatchArgs) ToElasticsearchSpecRemoteClustersPatchOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecRemoteClustersPatchOutput)
}

// ElasticsearchSpecRemoteClustersPatchArrayInput is an input type that accepts ElasticsearchSpecRemoteClustersPatchArray and ElasticsearchSpecRemoteClustersPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecRemoteClustersPatchArrayInput` via:
//
//	ElasticsearchSpecRemoteClustersPatchArray{ ElasticsearchSpecRemoteClustersPatchArgs{...} }
type ElasticsearchSpecRemoteClustersPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecRemoteClustersPatchArrayOutput() ElasticsearchSpecRemoteClustersPatchArrayOutput
	ToElasticsearchSpecRemoteClustersPatchArrayOutputWithContext(context.Context) ElasticsearchSpecRemoteClustersPatchArrayOutput
}

type ElasticsearchSpecRemoteClustersPatchArray []ElasticsearchSpecRemoteClustersPatchInput

func (ElasticsearchSpecRemoteClustersPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecRemoteClustersPatch)(nil)).Elem()
}

func (i ElasticsearchSpecRemoteClustersPatchArray) ToElasticsearchSpecRemoteClustersPatchArrayOutput() ElasticsearchSpecRemoteClustersPatchArrayOutput {
	return i.ToElasticsearchSpecRemoteClustersPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecRemoteClustersPatchArray) ToElasticsearchSpecRemoteClustersPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecRemoteClustersPatchArrayOutput)
}

// RemoteCluster declares a remote Elasticsearch cluster connection.
type ElasticsearchSpecRemoteClustersPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecRemoteClustersPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecRemoteClustersPatch)(nil)).Elem()
}

func (o ElasticsearchSpecRemoteClustersPatchOutput) ToElasticsearchSpecRemoteClustersPatchOutput() ElasticsearchSpecRemoteClustersPatchOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersPatchOutput) ToElasticsearchSpecRemoteClustersPatchOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersPatchOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersPatchOutput) ElasticsearchRef() ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecRemoteClustersPatch) *ElasticsearchSpecRemoteClustersElasticsearchRefPatch {
		return v.ElasticsearchRef
	}).(ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput)
}

// Name is the name of the remote cluster as it is set in the Elasticsearch settings.
// The name is expected to be unique for each remote clusters.
func (o ElasticsearchSpecRemoteClustersPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecRemoteClustersPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecRemoteClustersPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecRemoteClustersPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecRemoteClustersPatch)(nil)).Elem()
}

func (o ElasticsearchSpecRemoteClustersPatchArrayOutput) ToElasticsearchSpecRemoteClustersPatchArrayOutput() ElasticsearchSpecRemoteClustersPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersPatchArrayOutput) ToElasticsearchSpecRemoteClustersPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecRemoteClustersPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecRemoteClustersPatch {
		return vs[0].([]ElasticsearchSpecRemoteClustersPatch)[vs[1].(int)]
	}).(ElasticsearchSpecRemoteClustersPatchOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type ElasticsearchSpecSecureSettings struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries []ElasticsearchSpecSecureSettingsEntries `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticsearchSpecSecureSettingsInput is an input type that accepts ElasticsearchSpecSecureSettingsArgs and ElasticsearchSpecSecureSettingsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecSecureSettingsInput` via:
//
//	ElasticsearchSpecSecureSettingsArgs{...}
type ElasticsearchSpecSecureSettingsInput interface {
	pulumi.Input

	ToElasticsearchSpecSecureSettingsOutput() ElasticsearchSpecSecureSettingsOutput
	ToElasticsearchSpecSecureSettingsOutputWithContext(context.Context) ElasticsearchSpecSecureSettingsOutput
}

// SecretSource defines a data source based on a Kubernetes Secret.
type ElasticsearchSpecSecureSettingsArgs struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries ElasticsearchSpecSecureSettingsEntriesArrayInput `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticsearchSpecSecureSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecSecureSettings)(nil)).Elem()
}

func (i ElasticsearchSpecSecureSettingsArgs) ToElasticsearchSpecSecureSettingsOutput() ElasticsearchSpecSecureSettingsOutput {
	return i.ToElasticsearchSpecSecureSettingsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecSecureSettingsArgs) ToElasticsearchSpecSecureSettingsOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecSecureSettingsOutput)
}

// ElasticsearchSpecSecureSettingsArrayInput is an input type that accepts ElasticsearchSpecSecureSettingsArray and ElasticsearchSpecSecureSettingsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecSecureSettingsArrayInput` via:
//
//	ElasticsearchSpecSecureSettingsArray{ ElasticsearchSpecSecureSettingsArgs{...} }
type ElasticsearchSpecSecureSettingsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecSecureSettingsArrayOutput() ElasticsearchSpecSecureSettingsArrayOutput
	ToElasticsearchSpecSecureSettingsArrayOutputWithContext(context.Context) ElasticsearchSpecSecureSettingsArrayOutput
}

type ElasticsearchSpecSecureSettingsArray []ElasticsearchSpecSecureSettingsInput

func (ElasticsearchSpecSecureSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecSecureSettings)(nil)).Elem()
}

func (i ElasticsearchSpecSecureSettingsArray) ToElasticsearchSpecSecureSettingsArrayOutput() ElasticsearchSpecSecureSettingsArrayOutput {
	return i.ToElasticsearchSpecSecureSettingsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecSecureSettingsArray) ToElasticsearchSpecSecureSettingsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecSecureSettingsArrayOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type ElasticsearchSpecSecureSettingsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecSecureSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecSecureSettings)(nil)).Elem()
}

func (o ElasticsearchSpecSecureSettingsOutput) ToElasticsearchSpecSecureSettingsOutput() ElasticsearchSpecSecureSettingsOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsOutput) ToElasticsearchSpecSecureSettingsOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsOutput {
	return o
}

// Entries define how to project each key-value pair in the secret to filesystem paths.
// If not defined, all keys will be projected to similarly named paths in the filesystem.
// If defined, only the specified keys will be projected to the corresponding paths.
func (o ElasticsearchSpecSecureSettingsOutput) Entries() ElasticsearchSpecSecureSettingsEntriesArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecSecureSettings) []ElasticsearchSpecSecureSettingsEntries { return v.Entries }).(ElasticsearchSpecSecureSettingsEntriesArrayOutput)
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecSecureSettingsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecSecureSettings) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecSecureSettingsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecSecureSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecSecureSettings)(nil)).Elem()
}

func (o ElasticsearchSpecSecureSettingsArrayOutput) ToElasticsearchSpecSecureSettingsArrayOutput() ElasticsearchSpecSecureSettingsArrayOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsArrayOutput) ToElasticsearchSpecSecureSettingsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsArrayOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecSecureSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecSecureSettings {
		return vs[0].([]ElasticsearchSpecSecureSettings)[vs[1].(int)]
	}).(ElasticsearchSpecSecureSettingsOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type ElasticsearchSpecSecureSettingsEntries struct {
	// Key is the key contained in the secret.
	Key *string `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path *string `pulumi:"path"`
}

// ElasticsearchSpecSecureSettingsEntriesInput is an input type that accepts ElasticsearchSpecSecureSettingsEntriesArgs and ElasticsearchSpecSecureSettingsEntriesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecSecureSettingsEntriesInput` via:
//
//	ElasticsearchSpecSecureSettingsEntriesArgs{...}
type ElasticsearchSpecSecureSettingsEntriesInput interface {
	pulumi.Input

	ToElasticsearchSpecSecureSettingsEntriesOutput() ElasticsearchSpecSecureSettingsEntriesOutput
	ToElasticsearchSpecSecureSettingsEntriesOutputWithContext(context.Context) ElasticsearchSpecSecureSettingsEntriesOutput
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type ElasticsearchSpecSecureSettingsEntriesArgs struct {
	// Key is the key contained in the secret.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ElasticsearchSpecSecureSettingsEntriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecSecureSettingsEntries)(nil)).Elem()
}

func (i ElasticsearchSpecSecureSettingsEntriesArgs) ToElasticsearchSpecSecureSettingsEntriesOutput() ElasticsearchSpecSecureSettingsEntriesOutput {
	return i.ToElasticsearchSpecSecureSettingsEntriesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecSecureSettingsEntriesArgs) ToElasticsearchSpecSecureSettingsEntriesOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsEntriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecSecureSettingsEntriesOutput)
}

// ElasticsearchSpecSecureSettingsEntriesArrayInput is an input type that accepts ElasticsearchSpecSecureSettingsEntriesArray and ElasticsearchSpecSecureSettingsEntriesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecSecureSettingsEntriesArrayInput` via:
//
//	ElasticsearchSpecSecureSettingsEntriesArray{ ElasticsearchSpecSecureSettingsEntriesArgs{...} }
type ElasticsearchSpecSecureSettingsEntriesArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecSecureSettingsEntriesArrayOutput() ElasticsearchSpecSecureSettingsEntriesArrayOutput
	ToElasticsearchSpecSecureSettingsEntriesArrayOutputWithContext(context.Context) ElasticsearchSpecSecureSettingsEntriesArrayOutput
}

type ElasticsearchSpecSecureSettingsEntriesArray []ElasticsearchSpecSecureSettingsEntriesInput

func (ElasticsearchSpecSecureSettingsEntriesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecSecureSettingsEntries)(nil)).Elem()
}

func (i ElasticsearchSpecSecureSettingsEntriesArray) ToElasticsearchSpecSecureSettingsEntriesArrayOutput() ElasticsearchSpecSecureSettingsEntriesArrayOutput {
	return i.ToElasticsearchSpecSecureSettingsEntriesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecSecureSettingsEntriesArray) ToElasticsearchSpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsEntriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecSecureSettingsEntriesArrayOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type ElasticsearchSpecSecureSettingsEntriesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecSecureSettingsEntriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecSecureSettingsEntries)(nil)).Elem()
}

func (o ElasticsearchSpecSecureSettingsEntriesOutput) ToElasticsearchSpecSecureSettingsEntriesOutput() ElasticsearchSpecSecureSettingsEntriesOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsEntriesOutput) ToElasticsearchSpecSecureSettingsEntriesOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsEntriesOutput {
	return o
}

// Key is the key contained in the secret.
func (o ElasticsearchSpecSecureSettingsEntriesOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecSecureSettingsEntries) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Path is the relative file path to map the key to.
// Path must not be an absolute file path and must not contain any ".." components.
func (o ElasticsearchSpecSecureSettingsEntriesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecSecureSettingsEntries) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecSecureSettingsEntriesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecSecureSettingsEntriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecSecureSettingsEntries)(nil)).Elem()
}

func (o ElasticsearchSpecSecureSettingsEntriesArrayOutput) ToElasticsearchSpecSecureSettingsEntriesArrayOutput() ElasticsearchSpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsEntriesArrayOutput) ToElasticsearchSpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsEntriesArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecSecureSettingsEntriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecSecureSettingsEntries {
		return vs[0].([]ElasticsearchSpecSecureSettingsEntries)[vs[1].(int)]
	}).(ElasticsearchSpecSecureSettingsEntriesOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type ElasticsearchSpecSecureSettingsEntriesPatch struct {
	// Key is the key contained in the secret.
	Key *string `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path *string `pulumi:"path"`
}

// ElasticsearchSpecSecureSettingsEntriesPatchInput is an input type that accepts ElasticsearchSpecSecureSettingsEntriesPatchArgs and ElasticsearchSpecSecureSettingsEntriesPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecSecureSettingsEntriesPatchInput` via:
//
//	ElasticsearchSpecSecureSettingsEntriesPatchArgs{...}
type ElasticsearchSpecSecureSettingsEntriesPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecSecureSettingsEntriesPatchOutput() ElasticsearchSpecSecureSettingsEntriesPatchOutput
	ToElasticsearchSpecSecureSettingsEntriesPatchOutputWithContext(context.Context) ElasticsearchSpecSecureSettingsEntriesPatchOutput
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type ElasticsearchSpecSecureSettingsEntriesPatchArgs struct {
	// Key is the key contained in the secret.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ElasticsearchSpecSecureSettingsEntriesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecSecureSettingsEntriesPatch)(nil)).Elem()
}

func (i ElasticsearchSpecSecureSettingsEntriesPatchArgs) ToElasticsearchSpecSecureSettingsEntriesPatchOutput() ElasticsearchSpecSecureSettingsEntriesPatchOutput {
	return i.ToElasticsearchSpecSecureSettingsEntriesPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecSecureSettingsEntriesPatchArgs) ToElasticsearchSpecSecureSettingsEntriesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsEntriesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecSecureSettingsEntriesPatchOutput)
}

// ElasticsearchSpecSecureSettingsEntriesPatchArrayInput is an input type that accepts ElasticsearchSpecSecureSettingsEntriesPatchArray and ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecSecureSettingsEntriesPatchArrayInput` via:
//
//	ElasticsearchSpecSecureSettingsEntriesPatchArray{ ElasticsearchSpecSecureSettingsEntriesPatchArgs{...} }
type ElasticsearchSpecSecureSettingsEntriesPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecSecureSettingsEntriesPatchArrayOutput() ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput
	ToElasticsearchSpecSecureSettingsEntriesPatchArrayOutputWithContext(context.Context) ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput
}

type ElasticsearchSpecSecureSettingsEntriesPatchArray []ElasticsearchSpecSecureSettingsEntriesPatchInput

func (ElasticsearchSpecSecureSettingsEntriesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecSecureSettingsEntriesPatch)(nil)).Elem()
}

func (i ElasticsearchSpecSecureSettingsEntriesPatchArray) ToElasticsearchSpecSecureSettingsEntriesPatchArrayOutput() ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput {
	return i.ToElasticsearchSpecSecureSettingsEntriesPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecSecureSettingsEntriesPatchArray) ToElasticsearchSpecSecureSettingsEntriesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type ElasticsearchSpecSecureSettingsEntriesPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecSecureSettingsEntriesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecSecureSettingsEntriesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecSecureSettingsEntriesPatchOutput) ToElasticsearchSpecSecureSettingsEntriesPatchOutput() ElasticsearchSpecSecureSettingsEntriesPatchOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsEntriesPatchOutput) ToElasticsearchSpecSecureSettingsEntriesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsEntriesPatchOutput {
	return o
}

// Key is the key contained in the secret.
func (o ElasticsearchSpecSecureSettingsEntriesPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecSecureSettingsEntriesPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Path is the relative file path to map the key to.
// Path must not be an absolute file path and must not contain any ".." components.
func (o ElasticsearchSpecSecureSettingsEntriesPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecSecureSettingsEntriesPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecSecureSettingsEntriesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput) ToElasticsearchSpecSecureSettingsEntriesPatchArrayOutput() ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput) ToElasticsearchSpecSecureSettingsEntriesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecSecureSettingsEntriesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecSecureSettingsEntriesPatch {
		return vs[0].([]ElasticsearchSpecSecureSettingsEntriesPatch)[vs[1].(int)]
	}).(ElasticsearchSpecSecureSettingsEntriesPatchOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type ElasticsearchSpecSecureSettingsPatch struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries []ElasticsearchSpecSecureSettingsEntriesPatch `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticsearchSpecSecureSettingsPatchInput is an input type that accepts ElasticsearchSpecSecureSettingsPatchArgs and ElasticsearchSpecSecureSettingsPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecSecureSettingsPatchInput` via:
//
//	ElasticsearchSpecSecureSettingsPatchArgs{...}
type ElasticsearchSpecSecureSettingsPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecSecureSettingsPatchOutput() ElasticsearchSpecSecureSettingsPatchOutput
	ToElasticsearchSpecSecureSettingsPatchOutputWithContext(context.Context) ElasticsearchSpecSecureSettingsPatchOutput
}

// SecretSource defines a data source based on a Kubernetes Secret.
type ElasticsearchSpecSecureSettingsPatchArgs struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries ElasticsearchSpecSecureSettingsEntriesPatchArrayInput `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticsearchSpecSecureSettingsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecSecureSettingsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecSecureSettingsPatchArgs) ToElasticsearchSpecSecureSettingsPatchOutput() ElasticsearchSpecSecureSettingsPatchOutput {
	return i.ToElasticsearchSpecSecureSettingsPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecSecureSettingsPatchArgs) ToElasticsearchSpecSecureSettingsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecSecureSettingsPatchOutput)
}

// ElasticsearchSpecSecureSettingsPatchArrayInput is an input type that accepts ElasticsearchSpecSecureSettingsPatchArray and ElasticsearchSpecSecureSettingsPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecSecureSettingsPatchArrayInput` via:
//
//	ElasticsearchSpecSecureSettingsPatchArray{ ElasticsearchSpecSecureSettingsPatchArgs{...} }
type ElasticsearchSpecSecureSettingsPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecSecureSettingsPatchArrayOutput() ElasticsearchSpecSecureSettingsPatchArrayOutput
	ToElasticsearchSpecSecureSettingsPatchArrayOutputWithContext(context.Context) ElasticsearchSpecSecureSettingsPatchArrayOutput
}

type ElasticsearchSpecSecureSettingsPatchArray []ElasticsearchSpecSecureSettingsPatchInput

func (ElasticsearchSpecSecureSettingsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecSecureSettingsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecSecureSettingsPatchArray) ToElasticsearchSpecSecureSettingsPatchArrayOutput() ElasticsearchSpecSecureSettingsPatchArrayOutput {
	return i.ToElasticsearchSpecSecureSettingsPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecSecureSettingsPatchArray) ToElasticsearchSpecSecureSettingsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecSecureSettingsPatchArrayOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type ElasticsearchSpecSecureSettingsPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecSecureSettingsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecSecureSettingsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecSecureSettingsPatchOutput) ToElasticsearchSpecSecureSettingsPatchOutput() ElasticsearchSpecSecureSettingsPatchOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsPatchOutput) ToElasticsearchSpecSecureSettingsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsPatchOutput {
	return o
}

// Entries define how to project each key-value pair in the secret to filesystem paths.
// If not defined, all keys will be projected to similarly named paths in the filesystem.
// If defined, only the specified keys will be projected to the corresponding paths.
func (o ElasticsearchSpecSecureSettingsPatchOutput) Entries() ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecSecureSettingsPatch) []ElasticsearchSpecSecureSettingsEntriesPatch {
		return v.Entries
	}).(ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput)
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecSecureSettingsPatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecSecureSettingsPatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecSecureSettingsPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecSecureSettingsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecSecureSettingsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecSecureSettingsPatchArrayOutput) ToElasticsearchSpecSecureSettingsPatchArrayOutput() ElasticsearchSpecSecureSettingsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsPatchArrayOutput) ToElasticsearchSpecSecureSettingsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecSecureSettingsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecSecureSettingsPatch {
		return vs[0].([]ElasticsearchSpecSecureSettingsPatch)[vs[1].(int)]
	}).(ElasticsearchSpecSecureSettingsPatchOutput)
}

// Transport holds transport layer settings for Elasticsearch.
type ElasticsearchSpecTransport struct {
	Service *ElasticsearchSpecTransportService `pulumi:"service"`
	Tls     *ElasticsearchSpecTransportTls     `pulumi:"tls"`
}

// ElasticsearchSpecTransportInput is an input type that accepts ElasticsearchSpecTransportArgs and ElasticsearchSpecTransportOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportInput` via:
//
//	ElasticsearchSpecTransportArgs{...}
type ElasticsearchSpecTransportInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportOutput() ElasticsearchSpecTransportOutput
	ToElasticsearchSpecTransportOutputWithContext(context.Context) ElasticsearchSpecTransportOutput
}

// Transport holds transport layer settings for Elasticsearch.
type ElasticsearchSpecTransportArgs struct {
	Service ElasticsearchSpecTransportServicePtrInput `pulumi:"service"`
	Tls     ElasticsearchSpecTransportTlsPtrInput     `pulumi:"tls"`
}

func (ElasticsearchSpecTransportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransport)(nil)).Elem()
}

func (i ElasticsearchSpecTransportArgs) ToElasticsearchSpecTransportOutput() ElasticsearchSpecTransportOutput {
	return i.ToElasticsearchSpecTransportOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportArgs) ToElasticsearchSpecTransportOutputWithContext(ctx context.Context) ElasticsearchSpecTransportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportOutput)
}

func (i ElasticsearchSpecTransportArgs) ToElasticsearchSpecTransportPtrOutput() ElasticsearchSpecTransportPtrOutput {
	return i.ToElasticsearchSpecTransportPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportArgs) ToElasticsearchSpecTransportPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportOutput).ToElasticsearchSpecTransportPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportPtrInput is an input type that accepts ElasticsearchSpecTransportArgs, ElasticsearchSpecTransportPtr and ElasticsearchSpecTransportPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportPtrInput` via:
//
//	        ElasticsearchSpecTransportArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportPtrOutput() ElasticsearchSpecTransportPtrOutput
	ToElasticsearchSpecTransportPtrOutputWithContext(context.Context) ElasticsearchSpecTransportPtrOutput
}

type elasticsearchSpecTransportPtrType ElasticsearchSpecTransportArgs

func ElasticsearchSpecTransportPtr(v *ElasticsearchSpecTransportArgs) ElasticsearchSpecTransportPtrInput {
	return (*elasticsearchSpecTransportPtrType)(v)
}

func (*elasticsearchSpecTransportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransport)(nil)).Elem()
}

func (i *elasticsearchSpecTransportPtrType) ToElasticsearchSpecTransportPtrOutput() ElasticsearchSpecTransportPtrOutput {
	return i.ToElasticsearchSpecTransportPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportPtrType) ToElasticsearchSpecTransportPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportPtrOutput)
}

// Transport holds transport layer settings for Elasticsearch.
type ElasticsearchSpecTransportOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransport)(nil)).Elem()
}

func (o ElasticsearchSpecTransportOutput) ToElasticsearchSpecTransportOutput() ElasticsearchSpecTransportOutput {
	return o
}

func (o ElasticsearchSpecTransportOutput) ToElasticsearchSpecTransportOutputWithContext(ctx context.Context) ElasticsearchSpecTransportOutput {
	return o
}

func (o ElasticsearchSpecTransportOutput) ToElasticsearchSpecTransportPtrOutput() ElasticsearchSpecTransportPtrOutput {
	return o.ToElasticsearchSpecTransportPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportOutput) ToElasticsearchSpecTransportPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransport) *ElasticsearchSpecTransport {
		return &v
	}).(ElasticsearchSpecTransportPtrOutput)
}

func (o ElasticsearchSpecTransportOutput) Service() ElasticsearchSpecTransportServicePtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransport) *ElasticsearchSpecTransportService { return v.Service }).(ElasticsearchSpecTransportServicePtrOutput)
}

func (o ElasticsearchSpecTransportOutput) Tls() ElasticsearchSpecTransportTlsPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransport) *ElasticsearchSpecTransportTls { return v.Tls }).(ElasticsearchSpecTransportTlsPtrOutput)
}

type ElasticsearchSpecTransportPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransport)(nil)).Elem()
}

func (o ElasticsearchSpecTransportPtrOutput) ToElasticsearchSpecTransportPtrOutput() ElasticsearchSpecTransportPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportPtrOutput) ToElasticsearchSpecTransportPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportPtrOutput) Elem() ElasticsearchSpecTransportOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransport) ElasticsearchSpecTransport {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransport
		return ret
	}).(ElasticsearchSpecTransportOutput)
}

func (o ElasticsearchSpecTransportPtrOutput) Service() ElasticsearchSpecTransportServicePtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransport) *ElasticsearchSpecTransportService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ElasticsearchSpecTransportServicePtrOutput)
}

func (o ElasticsearchSpecTransportPtrOutput) Tls() ElasticsearchSpecTransportTlsPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransport) *ElasticsearchSpecTransportTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ElasticsearchSpecTransportTlsPtrOutput)
}

// Transport holds transport layer settings for Elasticsearch.
type ElasticsearchSpecTransportPatch struct {
	Service *ElasticsearchSpecTransportServicePatch `pulumi:"service"`
	Tls     *ElasticsearchSpecTransportTlsPatch     `pulumi:"tls"`
}

// ElasticsearchSpecTransportPatchInput is an input type that accepts ElasticsearchSpecTransportPatchArgs and ElasticsearchSpecTransportPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportPatchInput` via:
//
//	ElasticsearchSpecTransportPatchArgs{...}
type ElasticsearchSpecTransportPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportPatchOutput() ElasticsearchSpecTransportPatchOutput
	ToElasticsearchSpecTransportPatchOutputWithContext(context.Context) ElasticsearchSpecTransportPatchOutput
}

// Transport holds transport layer settings for Elasticsearch.
type ElasticsearchSpecTransportPatchArgs struct {
	Service ElasticsearchSpecTransportServicePatchPtrInput `pulumi:"service"`
	Tls     ElasticsearchSpecTransportTlsPatchPtrInput     `pulumi:"tls"`
}

func (ElasticsearchSpecTransportPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportPatch)(nil)).Elem()
}

func (i ElasticsearchSpecTransportPatchArgs) ToElasticsearchSpecTransportPatchOutput() ElasticsearchSpecTransportPatchOutput {
	return i.ToElasticsearchSpecTransportPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportPatchArgs) ToElasticsearchSpecTransportPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportPatchOutput)
}

func (i ElasticsearchSpecTransportPatchArgs) ToElasticsearchSpecTransportPatchPtrOutput() ElasticsearchSpecTransportPatchPtrOutput {
	return i.ToElasticsearchSpecTransportPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportPatchArgs) ToElasticsearchSpecTransportPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportPatchOutput).ToElasticsearchSpecTransportPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportPatchPtrInput is an input type that accepts ElasticsearchSpecTransportPatchArgs, ElasticsearchSpecTransportPatchPtr and ElasticsearchSpecTransportPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportPatchPtrInput` via:
//
//	        ElasticsearchSpecTransportPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportPatchPtrOutput() ElasticsearchSpecTransportPatchPtrOutput
	ToElasticsearchSpecTransportPatchPtrOutputWithContext(context.Context) ElasticsearchSpecTransportPatchPtrOutput
}

type elasticsearchSpecTransportPatchPtrType ElasticsearchSpecTransportPatchArgs

func ElasticsearchSpecTransportPatchPtr(v *ElasticsearchSpecTransportPatchArgs) ElasticsearchSpecTransportPatchPtrInput {
	return (*elasticsearchSpecTransportPatchPtrType)(v)
}

func (*elasticsearchSpecTransportPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportPatch)(nil)).Elem()
}

func (i *elasticsearchSpecTransportPatchPtrType) ToElasticsearchSpecTransportPatchPtrOutput() ElasticsearchSpecTransportPatchPtrOutput {
	return i.ToElasticsearchSpecTransportPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportPatchPtrType) ToElasticsearchSpecTransportPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportPatchPtrOutput)
}

// Transport holds transport layer settings for Elasticsearch.
type ElasticsearchSpecTransportPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportPatchOutput) ToElasticsearchSpecTransportPatchOutput() ElasticsearchSpecTransportPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportPatchOutput) ToElasticsearchSpecTransportPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportPatchOutput) ToElasticsearchSpecTransportPatchPtrOutput() ElasticsearchSpecTransportPatchPtrOutput {
	return o.ToElasticsearchSpecTransportPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportPatchOutput) ToElasticsearchSpecTransportPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportPatch) *ElasticsearchSpecTransportPatch {
		return &v
	}).(ElasticsearchSpecTransportPatchPtrOutput)
}

func (o ElasticsearchSpecTransportPatchOutput) Service() ElasticsearchSpecTransportServicePatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportPatch) *ElasticsearchSpecTransportServicePatch { return v.Service }).(ElasticsearchSpecTransportServicePatchPtrOutput)
}

func (o ElasticsearchSpecTransportPatchOutput) Tls() ElasticsearchSpecTransportTlsPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportPatch) *ElasticsearchSpecTransportTlsPatch { return v.Tls }).(ElasticsearchSpecTransportTlsPatchPtrOutput)
}

type ElasticsearchSpecTransportPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportPatchPtrOutput) ToElasticsearchSpecTransportPatchPtrOutput() ElasticsearchSpecTransportPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportPatchPtrOutput) ToElasticsearchSpecTransportPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportPatchPtrOutput) Elem() ElasticsearchSpecTransportPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportPatch) ElasticsearchSpecTransportPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportPatch
		return ret
	}).(ElasticsearchSpecTransportPatchOutput)
}

func (o ElasticsearchSpecTransportPatchPtrOutput) Service() ElasticsearchSpecTransportServicePatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportPatch) *ElasticsearchSpecTransportServicePatch {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ElasticsearchSpecTransportServicePatchPtrOutput)
}

func (o ElasticsearchSpecTransportPatchPtrOutput) Tls() ElasticsearchSpecTransportTlsPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportPatch) *ElasticsearchSpecTransportTlsPatch {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ElasticsearchSpecTransportTlsPatchPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecTransportService struct {
	Metadata *ElasticsearchSpecTransportServiceMetadata `pulumi:"metadata"`
	Spec     *ElasticsearchSpecTransportServiceSpec     `pulumi:"spec"`
}

// ElasticsearchSpecTransportServiceInput is an input type that accepts ElasticsearchSpecTransportServiceArgs and ElasticsearchSpecTransportServiceOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceInput` via:
//
//	ElasticsearchSpecTransportServiceArgs{...}
type ElasticsearchSpecTransportServiceInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceOutput() ElasticsearchSpecTransportServiceOutput
	ToElasticsearchSpecTransportServiceOutputWithContext(context.Context) ElasticsearchSpecTransportServiceOutput
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecTransportServiceArgs struct {
	Metadata ElasticsearchSpecTransportServiceMetadataPtrInput `pulumi:"metadata"`
	Spec     ElasticsearchSpecTransportServiceSpecPtrInput     `pulumi:"spec"`
}

func (ElasticsearchSpecTransportServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportService)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceArgs) ToElasticsearchSpecTransportServiceOutput() ElasticsearchSpecTransportServiceOutput {
	return i.ToElasticsearchSpecTransportServiceOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceArgs) ToElasticsearchSpecTransportServiceOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceOutput)
}

func (i ElasticsearchSpecTransportServiceArgs) ToElasticsearchSpecTransportServicePtrOutput() ElasticsearchSpecTransportServicePtrOutput {
	return i.ToElasticsearchSpecTransportServicePtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceArgs) ToElasticsearchSpecTransportServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceOutput).ToElasticsearchSpecTransportServicePtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportServicePtrInput is an input type that accepts ElasticsearchSpecTransportServiceArgs, ElasticsearchSpecTransportServicePtr and ElasticsearchSpecTransportServicePtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServicePtrInput` via:
//
//	        ElasticsearchSpecTransportServiceArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportServicePtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServicePtrOutput() ElasticsearchSpecTransportServicePtrOutput
	ToElasticsearchSpecTransportServicePtrOutputWithContext(context.Context) ElasticsearchSpecTransportServicePtrOutput
}

type elasticsearchSpecTransportServicePtrType ElasticsearchSpecTransportServiceArgs

func ElasticsearchSpecTransportServicePtr(v *ElasticsearchSpecTransportServiceArgs) ElasticsearchSpecTransportServicePtrInput {
	return (*elasticsearchSpecTransportServicePtrType)(v)
}

func (*elasticsearchSpecTransportServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportService)(nil)).Elem()
}

func (i *elasticsearchSpecTransportServicePtrType) ToElasticsearchSpecTransportServicePtrOutput() ElasticsearchSpecTransportServicePtrOutput {
	return i.ToElasticsearchSpecTransportServicePtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportServicePtrType) ToElasticsearchSpecTransportServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServicePtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecTransportServiceOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportService)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceOutput) ToElasticsearchSpecTransportServiceOutput() ElasticsearchSpecTransportServiceOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceOutput) ToElasticsearchSpecTransportServiceOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceOutput) ToElasticsearchSpecTransportServicePtrOutput() ElasticsearchSpecTransportServicePtrOutput {
	return o.ToElasticsearchSpecTransportServicePtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportServiceOutput) ToElasticsearchSpecTransportServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportService) *ElasticsearchSpecTransportService {
		return &v
	}).(ElasticsearchSpecTransportServicePtrOutput)
}

func (o ElasticsearchSpecTransportServiceOutput) Metadata() ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportService) *ElasticsearchSpecTransportServiceMetadata {
		return v.Metadata
	}).(ElasticsearchSpecTransportServiceMetadataPtrOutput)
}

func (o ElasticsearchSpecTransportServiceOutput) Spec() ElasticsearchSpecTransportServiceSpecPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportService) *ElasticsearchSpecTransportServiceSpec { return v.Spec }).(ElasticsearchSpecTransportServiceSpecPtrOutput)
}

type ElasticsearchSpecTransportServicePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportService)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServicePtrOutput) ToElasticsearchSpecTransportServicePtrOutput() ElasticsearchSpecTransportServicePtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServicePtrOutput) ToElasticsearchSpecTransportServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServicePtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServicePtrOutput) Elem() ElasticsearchSpecTransportServiceOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportService) ElasticsearchSpecTransportService {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportService
		return ret
	}).(ElasticsearchSpecTransportServiceOutput)
}

func (o ElasticsearchSpecTransportServicePtrOutput) Metadata() ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportService) *ElasticsearchSpecTransportServiceMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(ElasticsearchSpecTransportServiceMetadataPtrOutput)
}

func (o ElasticsearchSpecTransportServicePtrOutput) Spec() ElasticsearchSpecTransportServiceSpecPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportService) *ElasticsearchSpecTransportServiceSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ElasticsearchSpecTransportServiceSpecPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecTransportServiceMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// ElasticsearchSpecTransportServiceMetadataInput is an input type that accepts ElasticsearchSpecTransportServiceMetadataArgs and ElasticsearchSpecTransportServiceMetadataOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceMetadataInput` via:
//
//	ElasticsearchSpecTransportServiceMetadataArgs{...}
type ElasticsearchSpecTransportServiceMetadataInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceMetadataOutput() ElasticsearchSpecTransportServiceMetadataOutput
	ToElasticsearchSpecTransportServiceMetadataOutputWithContext(context.Context) ElasticsearchSpecTransportServiceMetadataOutput
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecTransportServiceMetadataArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (ElasticsearchSpecTransportServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceMetadata)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceMetadataArgs) ToElasticsearchSpecTransportServiceMetadataOutput() ElasticsearchSpecTransportServiceMetadataOutput {
	return i.ToElasticsearchSpecTransportServiceMetadataOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceMetadataArgs) ToElasticsearchSpecTransportServiceMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceMetadataOutput)
}

func (i ElasticsearchSpecTransportServiceMetadataArgs) ToElasticsearchSpecTransportServiceMetadataPtrOutput() ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return i.ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceMetadataArgs) ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceMetadataOutput).ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportServiceMetadataPtrInput is an input type that accepts ElasticsearchSpecTransportServiceMetadataArgs, ElasticsearchSpecTransportServiceMetadataPtr and ElasticsearchSpecTransportServiceMetadataPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceMetadataPtrInput` via:
//
//	        ElasticsearchSpecTransportServiceMetadataArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportServiceMetadataPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceMetadataPtrOutput() ElasticsearchSpecTransportServiceMetadataPtrOutput
	ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(context.Context) ElasticsearchSpecTransportServiceMetadataPtrOutput
}

type elasticsearchSpecTransportServiceMetadataPtrType ElasticsearchSpecTransportServiceMetadataArgs

func ElasticsearchSpecTransportServiceMetadataPtr(v *ElasticsearchSpecTransportServiceMetadataArgs) ElasticsearchSpecTransportServiceMetadataPtrInput {
	return (*elasticsearchSpecTransportServiceMetadataPtrType)(v)
}

func (*elasticsearchSpecTransportServiceMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceMetadata)(nil)).Elem()
}

func (i *elasticsearchSpecTransportServiceMetadataPtrType) ToElasticsearchSpecTransportServiceMetadataPtrOutput() ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return i.ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportServiceMetadataPtrType) ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceMetadataPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecTransportServiceMetadataOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) ToElasticsearchSpecTransportServiceMetadataOutput() ElasticsearchSpecTransportServiceMetadataOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) ToElasticsearchSpecTransportServiceMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) ToElasticsearchSpecTransportServiceMetadataPtrOutput() ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return o.ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportServiceMetadata) *ElasticsearchSpecTransportServiceMetadata {
		return &v
	}).(ElasticsearchSpecTransportServiceMetadataPtrOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceMetadata) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportServiceMetadataPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) ToElasticsearchSpecTransportServiceMetadataPtrOutput() ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) Elem() ElasticsearchSpecTransportServiceMetadataOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadata) ElasticsearchSpecTransportServiceMetadata {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportServiceMetadata
		return ret
	}).(ElasticsearchSpecTransportServiceMetadataOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadata) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecTransportServiceMetadataPatch struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// ElasticsearchSpecTransportServiceMetadataPatchInput is an input type that accepts ElasticsearchSpecTransportServiceMetadataPatchArgs and ElasticsearchSpecTransportServiceMetadataPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceMetadataPatchInput` via:
//
//	ElasticsearchSpecTransportServiceMetadataPatchArgs{...}
type ElasticsearchSpecTransportServiceMetadataPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceMetadataPatchOutput() ElasticsearchSpecTransportServiceMetadataPatchOutput
	ToElasticsearchSpecTransportServiceMetadataPatchOutputWithContext(context.Context) ElasticsearchSpecTransportServiceMetadataPatchOutput
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecTransportServiceMetadataPatchArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (ElasticsearchSpecTransportServiceMetadataPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceMetadataPatch)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceMetadataPatchArgs) ToElasticsearchSpecTransportServiceMetadataPatchOutput() ElasticsearchSpecTransportServiceMetadataPatchOutput {
	return i.ToElasticsearchSpecTransportServiceMetadataPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceMetadataPatchArgs) ToElasticsearchSpecTransportServiceMetadataPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceMetadataPatchOutput)
}

func (i ElasticsearchSpecTransportServiceMetadataPatchArgs) ToElasticsearchSpecTransportServiceMetadataPatchPtrOutput() ElasticsearchSpecTransportServiceMetadataPatchPtrOutput {
	return i.ToElasticsearchSpecTransportServiceMetadataPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceMetadataPatchArgs) ToElasticsearchSpecTransportServiceMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceMetadataPatchOutput).ToElasticsearchSpecTransportServiceMetadataPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportServiceMetadataPatchPtrInput is an input type that accepts ElasticsearchSpecTransportServiceMetadataPatchArgs, ElasticsearchSpecTransportServiceMetadataPatchPtr and ElasticsearchSpecTransportServiceMetadataPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceMetadataPatchPtrInput` via:
//
//	        ElasticsearchSpecTransportServiceMetadataPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportServiceMetadataPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceMetadataPatchPtrOutput() ElasticsearchSpecTransportServiceMetadataPatchPtrOutput
	ToElasticsearchSpecTransportServiceMetadataPatchPtrOutputWithContext(context.Context) ElasticsearchSpecTransportServiceMetadataPatchPtrOutput
}

type elasticsearchSpecTransportServiceMetadataPatchPtrType ElasticsearchSpecTransportServiceMetadataPatchArgs

func ElasticsearchSpecTransportServiceMetadataPatchPtr(v *ElasticsearchSpecTransportServiceMetadataPatchArgs) ElasticsearchSpecTransportServiceMetadataPatchPtrInput {
	return (*elasticsearchSpecTransportServiceMetadataPatchPtrType)(v)
}

func (*elasticsearchSpecTransportServiceMetadataPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceMetadataPatch)(nil)).Elem()
}

func (i *elasticsearchSpecTransportServiceMetadataPatchPtrType) ToElasticsearchSpecTransportServiceMetadataPatchPtrOutput() ElasticsearchSpecTransportServiceMetadataPatchPtrOutput {
	return i.ToElasticsearchSpecTransportServiceMetadataPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportServiceMetadataPatchPtrType) ToElasticsearchSpecTransportServiceMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceMetadataPatchPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecTransportServiceMetadataPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceMetadataPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceMetadataPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceMetadataPatchOutput) ToElasticsearchSpecTransportServiceMetadataPatchOutput() ElasticsearchSpecTransportServiceMetadataPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceMetadataPatchOutput) ToElasticsearchSpecTransportServiceMetadataPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceMetadataPatchOutput) ToElasticsearchSpecTransportServiceMetadataPatchPtrOutput() ElasticsearchSpecTransportServiceMetadataPatchPtrOutput {
	return o.ToElasticsearchSpecTransportServiceMetadataPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportServiceMetadataPatchOutput) ToElasticsearchSpecTransportServiceMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportServiceMetadataPatch) *ElasticsearchSpecTransportServiceMetadataPatch {
		return &v
	}).(ElasticsearchSpecTransportServiceMetadataPatchPtrOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPatchOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceMetadataPatch) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPatchOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceMetadataPatch) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceMetadataPatch) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceMetadataPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceMetadataPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportServiceMetadataPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceMetadataPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceMetadataPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceMetadataPatchPtrOutput) ToElasticsearchSpecTransportServiceMetadataPatchPtrOutput() ElasticsearchSpecTransportServiceMetadataPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceMetadataPatchPtrOutput) ToElasticsearchSpecTransportServiceMetadataPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceMetadataPatchPtrOutput) Elem() ElasticsearchSpecTransportServiceMetadataPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadataPatch) ElasticsearchSpecTransportServiceMetadataPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportServiceMetadataPatch
		return ret
	}).(ElasticsearchSpecTransportServiceMetadataPatchOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPatchPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPatchPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadataPatch) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPatchPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadataPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadataPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecTransportServicePatch struct {
	Metadata *ElasticsearchSpecTransportServiceMetadataPatch `pulumi:"metadata"`
	Spec     *ElasticsearchSpecTransportServiceSpecPatch     `pulumi:"spec"`
}

// ElasticsearchSpecTransportServicePatchInput is an input type that accepts ElasticsearchSpecTransportServicePatchArgs and ElasticsearchSpecTransportServicePatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServicePatchInput` via:
//
//	ElasticsearchSpecTransportServicePatchArgs{...}
type ElasticsearchSpecTransportServicePatchInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServicePatchOutput() ElasticsearchSpecTransportServicePatchOutput
	ToElasticsearchSpecTransportServicePatchOutputWithContext(context.Context) ElasticsearchSpecTransportServicePatchOutput
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecTransportServicePatchArgs struct {
	Metadata ElasticsearchSpecTransportServiceMetadataPatchPtrInput `pulumi:"metadata"`
	Spec     ElasticsearchSpecTransportServiceSpecPatchPtrInput     `pulumi:"spec"`
}

func (ElasticsearchSpecTransportServicePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServicePatch)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServicePatchArgs) ToElasticsearchSpecTransportServicePatchOutput() ElasticsearchSpecTransportServicePatchOutput {
	return i.ToElasticsearchSpecTransportServicePatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServicePatchArgs) ToElasticsearchSpecTransportServicePatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServicePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServicePatchOutput)
}

func (i ElasticsearchSpecTransportServicePatchArgs) ToElasticsearchSpecTransportServicePatchPtrOutput() ElasticsearchSpecTransportServicePatchPtrOutput {
	return i.ToElasticsearchSpecTransportServicePatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServicePatchArgs) ToElasticsearchSpecTransportServicePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServicePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServicePatchOutput).ToElasticsearchSpecTransportServicePatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportServicePatchPtrInput is an input type that accepts ElasticsearchSpecTransportServicePatchArgs, ElasticsearchSpecTransportServicePatchPtr and ElasticsearchSpecTransportServicePatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServicePatchPtrInput` via:
//
//	        ElasticsearchSpecTransportServicePatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportServicePatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServicePatchPtrOutput() ElasticsearchSpecTransportServicePatchPtrOutput
	ToElasticsearchSpecTransportServicePatchPtrOutputWithContext(context.Context) ElasticsearchSpecTransportServicePatchPtrOutput
}

type elasticsearchSpecTransportServicePatchPtrType ElasticsearchSpecTransportServicePatchArgs

func ElasticsearchSpecTransportServicePatchPtr(v *ElasticsearchSpecTransportServicePatchArgs) ElasticsearchSpecTransportServicePatchPtrInput {
	return (*elasticsearchSpecTransportServicePatchPtrType)(v)
}

func (*elasticsearchSpecTransportServicePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServicePatch)(nil)).Elem()
}

func (i *elasticsearchSpecTransportServicePatchPtrType) ToElasticsearchSpecTransportServicePatchPtrOutput() ElasticsearchSpecTransportServicePatchPtrOutput {
	return i.ToElasticsearchSpecTransportServicePatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportServicePatchPtrType) ToElasticsearchSpecTransportServicePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServicePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServicePatchPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecTransportServicePatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServicePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServicePatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServicePatchOutput) ToElasticsearchSpecTransportServicePatchOutput() ElasticsearchSpecTransportServicePatchOutput {
	return o
}

func (o ElasticsearchSpecTransportServicePatchOutput) ToElasticsearchSpecTransportServicePatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServicePatchOutput {
	return o
}

func (o ElasticsearchSpecTransportServicePatchOutput) ToElasticsearchSpecTransportServicePatchPtrOutput() ElasticsearchSpecTransportServicePatchPtrOutput {
	return o.ToElasticsearchSpecTransportServicePatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportServicePatchOutput) ToElasticsearchSpecTransportServicePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServicePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportServicePatch) *ElasticsearchSpecTransportServicePatch {
		return &v
	}).(ElasticsearchSpecTransportServicePatchPtrOutput)
}

func (o ElasticsearchSpecTransportServicePatchOutput) Metadata() ElasticsearchSpecTransportServiceMetadataPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServicePatch) *ElasticsearchSpecTransportServiceMetadataPatch {
		return v.Metadata
	}).(ElasticsearchSpecTransportServiceMetadataPatchPtrOutput)
}

func (o ElasticsearchSpecTransportServicePatchOutput) Spec() ElasticsearchSpecTransportServiceSpecPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServicePatch) *ElasticsearchSpecTransportServiceSpecPatch {
		return v.Spec
	}).(ElasticsearchSpecTransportServiceSpecPatchPtrOutput)
}

type ElasticsearchSpecTransportServicePatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServicePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServicePatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServicePatchPtrOutput) ToElasticsearchSpecTransportServicePatchPtrOutput() ElasticsearchSpecTransportServicePatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServicePatchPtrOutput) ToElasticsearchSpecTransportServicePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServicePatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServicePatchPtrOutput) Elem() ElasticsearchSpecTransportServicePatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServicePatch) ElasticsearchSpecTransportServicePatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportServicePatch
		return ret
	}).(ElasticsearchSpecTransportServicePatchOutput)
}

func (o ElasticsearchSpecTransportServicePatchPtrOutput) Metadata() ElasticsearchSpecTransportServiceMetadataPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServicePatch) *ElasticsearchSpecTransportServiceMetadataPatch {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(ElasticsearchSpecTransportServiceMetadataPatchPtrOutput)
}

func (o ElasticsearchSpecTransportServicePatchPtrOutput) Spec() ElasticsearchSpecTransportServiceSpecPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServicePatch) *ElasticsearchSpecTransportServiceSpecPatch {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ElasticsearchSpecTransportServiceSpecPatchPtrOutput)
}

// Spec is the specification of the service.
type ElasticsearchSpecTransportServiceSpec struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []string `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy *string `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies []string `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy *string `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []ElasticsearchSpecTransportServiceSpecPorts `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity       *string                                                     `pulumi:"sessionAffinity"`
	SessionAffinityConfig *ElasticsearchSpecTransportServiceSpecSessionAffinityConfig `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution *string `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// ElasticsearchSpecTransportServiceSpecInput is an input type that accepts ElasticsearchSpecTransportServiceSpecArgs and ElasticsearchSpecTransportServiceSpecOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecInput` via:
//
//	ElasticsearchSpecTransportServiceSpecArgs{...}
type ElasticsearchSpecTransportServiceSpecInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecOutput() ElasticsearchSpecTransportServiceSpecOutput
	ToElasticsearchSpecTransportServiceSpecOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecOutput
}

// Spec is the specification of the service.
type ElasticsearchSpecTransportServiceSpecArgs struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts pulumi.BoolPtrInput `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs pulumi.StringArrayInput `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy pulumi.StringPtrInput `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies pulumi.StringArrayInput `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy pulumi.StringPtrInput `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass pulumi.StringPtrInput `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports ElasticsearchSpecTransportServiceSpecPortsArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity       pulumi.StringPtrInput                                              `pulumi:"sessionAffinity"`
	SessionAffinityConfig ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrInput `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution pulumi.StringPtrInput `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ElasticsearchSpecTransportServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpec)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceSpecArgs) ToElasticsearchSpecTransportServiceSpecOutput() ElasticsearchSpecTransportServiceSpecOutput {
	return i.ToElasticsearchSpecTransportServiceSpecOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecArgs) ToElasticsearchSpecTransportServiceSpecOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecOutput)
}

func (i ElasticsearchSpecTransportServiceSpecArgs) ToElasticsearchSpecTransportServiceSpecPtrOutput() ElasticsearchSpecTransportServiceSpecPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecArgs) ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecOutput).ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportServiceSpecPtrInput is an input type that accepts ElasticsearchSpecTransportServiceSpecArgs, ElasticsearchSpecTransportServiceSpecPtr and ElasticsearchSpecTransportServiceSpecPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecPtrInput` via:
//
//	        ElasticsearchSpecTransportServiceSpecArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportServiceSpecPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecPtrOutput() ElasticsearchSpecTransportServiceSpecPtrOutput
	ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecPtrOutput
}

type elasticsearchSpecTransportServiceSpecPtrType ElasticsearchSpecTransportServiceSpecArgs

func ElasticsearchSpecTransportServiceSpecPtr(v *ElasticsearchSpecTransportServiceSpecArgs) ElasticsearchSpecTransportServiceSpecPtrInput {
	return (*elasticsearchSpecTransportServiceSpecPtrType)(v)
}

func (*elasticsearchSpecTransportServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpec)(nil)).Elem()
}

func (i *elasticsearchSpecTransportServiceSpecPtrType) ToElasticsearchSpecTransportServiceSpecPtrOutput() ElasticsearchSpecTransportServiceSpecPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportServiceSpecPtrType) ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecPtrOutput)
}

// Spec is the specification of the service.
type ElasticsearchSpecTransportServiceSpecOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpec)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecOutput) ToElasticsearchSpecTransportServiceSpecOutput() ElasticsearchSpecTransportServiceSpecOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecOutput) ToElasticsearchSpecTransportServiceSpecOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecOutput) ToElasticsearchSpecTransportServiceSpecPtrOutput() ElasticsearchSpecTransportServiceSpecPtrOutput {
	return o.ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportServiceSpecOutput) ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportServiceSpec) *ElasticsearchSpecTransportServiceSpec {
		return &v
	}).(ElasticsearchSpecTransportServiceSpecPtrOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ElasticsearchSpecTransportServiceSpecOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *bool { return v.AllocateLoadBalancerNodePorts }).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) []string { return v.ClusterIPs }).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ElasticsearchSpecTransportServiceSpecOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ElasticsearchSpecTransportServiceSpecOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ElasticsearchSpecTransportServiceSpecOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ElasticsearchSpecTransportServiceSpecOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ElasticsearchSpecTransportServiceSpecOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.InternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ElasticsearchSpecTransportServiceSpecOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ElasticsearchSpecTransportServiceSpecOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.IpFamilyPolicy }).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ElasticsearchSpecTransportServiceSpecOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.LoadBalancerClass }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ElasticsearchSpecTransportServiceSpecOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ElasticsearchSpecTransportServiceSpecOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecOutput) Ports() ElasticsearchSpecTransportServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) []ElasticsearchSpecTransportServiceSpecPorts {
		return v.Ports
	}).(ElasticsearchSpecTransportServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ElasticsearchSpecTransportServiceSpecOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ElasticsearchSpecTransportServiceSpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecTransportServiceSpecOutput) SessionAffinityConfig() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfig {
		return v.SessionAffinityConfig
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ElasticsearchSpecTransportServiceSpecOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.TrafficDistribution }).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ElasticsearchSpecTransportServiceSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpec)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecPtrOutput) ToElasticsearchSpecTransportServiceSpecPtrOutput() ElasticsearchSpecTransportServiceSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPtrOutput) ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPtrOutput) Elem() ElasticsearchSpecTransportServiceSpecOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) ElasticsearchSpecTransportServiceSpec {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportServiceSpec
		return ret
	}).(ElasticsearchSpecTransportServiceSpecOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AllocateLoadBalancerNodePorts
	}).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIPs
	}).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.InternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.IpFamilyPolicy
	}).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerClass
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) Ports() ElasticsearchSpecTransportServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) []ElasticsearchSpecTransportServiceSpecPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ElasticsearchSpecTransportServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecTransportServiceSpecPtrOutput) SessionAffinityConfig() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfig {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.TrafficDistribution
	}).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Spec is the specification of the service.
type ElasticsearchSpecTransportServiceSpecPatch struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []string `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy *string `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies []string `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy *string `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []ElasticsearchSpecTransportServiceSpecPortsPatch `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity       *string                                                          `pulumi:"sessionAffinity"`
	SessionAffinityConfig *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatch `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution *string `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// ElasticsearchSpecTransportServiceSpecPatchInput is an input type that accepts ElasticsearchSpecTransportServiceSpecPatchArgs and ElasticsearchSpecTransportServiceSpecPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecPatchInput` via:
//
//	ElasticsearchSpecTransportServiceSpecPatchArgs{...}
type ElasticsearchSpecTransportServiceSpecPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecPatchOutput() ElasticsearchSpecTransportServiceSpecPatchOutput
	ToElasticsearchSpecTransportServiceSpecPatchOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecPatchOutput
}

// Spec is the specification of the service.
type ElasticsearchSpecTransportServiceSpecPatchArgs struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts pulumi.BoolPtrInput `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs pulumi.StringArrayInput `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy pulumi.StringPtrInput `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies pulumi.StringArrayInput `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy pulumi.StringPtrInput `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass pulumi.StringPtrInput `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports ElasticsearchSpecTransportServiceSpecPortsPatchArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity       pulumi.StringPtrInput                                                   `pulumi:"sessionAffinity"`
	SessionAffinityConfig ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrInput `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution pulumi.StringPtrInput `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ElasticsearchSpecTransportServiceSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPatch)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceSpecPatchArgs) ToElasticsearchSpecTransportServiceSpecPatchOutput() ElasticsearchSpecTransportServiceSpecPatchOutput {
	return i.ToElasticsearchSpecTransportServiceSpecPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecPatchArgs) ToElasticsearchSpecTransportServiceSpecPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecPatchOutput)
}

func (i ElasticsearchSpecTransportServiceSpecPatchArgs) ToElasticsearchSpecTransportServiceSpecPatchPtrOutput() ElasticsearchSpecTransportServiceSpecPatchPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecPatchArgs) ToElasticsearchSpecTransportServiceSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecPatchOutput).ToElasticsearchSpecTransportServiceSpecPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportServiceSpecPatchPtrInput is an input type that accepts ElasticsearchSpecTransportServiceSpecPatchArgs, ElasticsearchSpecTransportServiceSpecPatchPtr and ElasticsearchSpecTransportServiceSpecPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecPatchPtrInput` via:
//
//	        ElasticsearchSpecTransportServiceSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportServiceSpecPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecPatchPtrOutput() ElasticsearchSpecTransportServiceSpecPatchPtrOutput
	ToElasticsearchSpecTransportServiceSpecPatchPtrOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecPatchPtrOutput
}

type elasticsearchSpecTransportServiceSpecPatchPtrType ElasticsearchSpecTransportServiceSpecPatchArgs

func ElasticsearchSpecTransportServiceSpecPatchPtr(v *ElasticsearchSpecTransportServiceSpecPatchArgs) ElasticsearchSpecTransportServiceSpecPatchPtrInput {
	return (*elasticsearchSpecTransportServiceSpecPatchPtrType)(v)
}

func (*elasticsearchSpecTransportServiceSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpecPatch)(nil)).Elem()
}

func (i *elasticsearchSpecTransportServiceSpecPatchPtrType) ToElasticsearchSpecTransportServiceSpecPatchPtrOutput() ElasticsearchSpecTransportServiceSpecPatchPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportServiceSpecPatchPtrType) ToElasticsearchSpecTransportServiceSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecPatchPtrOutput)
}

// Spec is the specification of the service.
type ElasticsearchSpecTransportServiceSpecPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecPatchOutput) ToElasticsearchSpecTransportServiceSpecPatchOutput() ElasticsearchSpecTransportServiceSpecPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPatchOutput) ToElasticsearchSpecTransportServiceSpecPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPatchOutput) ToElasticsearchSpecTransportServiceSpecPatchPtrOutput() ElasticsearchSpecTransportServiceSpecPatchPtrOutput {
	return o.ToElasticsearchSpecTransportServiceSpecPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportServiceSpecPatchOutput) ToElasticsearchSpecTransportServiceSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportServiceSpecPatch) *ElasticsearchSpecTransportServiceSpecPatch {
		return &v
	}).(ElasticsearchSpecTransportServiceSpecPatchPtrOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) *bool { return v.AllocateLoadBalancerNodePorts }).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) []string { return v.ClusterIPs }).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) *string { return v.InternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) *string { return v.IpFamilyPolicy }).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) *string { return v.LoadBalancerClass }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) Ports() ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) []ElasticsearchSpecTransportServiceSpecPortsPatch {
		return v.Ports
	}).(ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecTransportServiceSpecPatchOutput) SessionAffinityConfig() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatch {
		return v.SessionAffinityConfig
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) *string { return v.TrafficDistribution }).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ElasticsearchSpecTransportServiceSpecPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportServiceSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpecPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) ToElasticsearchSpecTransportServiceSpecPatchPtrOutput() ElasticsearchSpecTransportServiceSpecPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) ToElasticsearchSpecTransportServiceSpecPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) Elem() ElasticsearchSpecTransportServiceSpecPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) ElasticsearchSpecTransportServiceSpecPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportServiceSpecPatch
		return ret
	}).(ElasticsearchSpecTransportServiceSpecPatchOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.AllocateLoadBalancerNodePorts
	}).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIPs
	}).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.InternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.IpFamilyPolicy
	}).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerClass
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) Ports() ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) []ElasticsearchSpecTransportServiceSpecPortsPatch {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) SessionAffinityConfig() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatch {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.TrafficDistribution
	}).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ElasticsearchSpecTransportServiceSpecPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ServicePort contains information on service's port.
type ElasticsearchSpecTransportServiceSpecPorts struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port *int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort interface{} `pulumi:"targetPort"`
}

// ElasticsearchSpecTransportServiceSpecPortsInput is an input type that accepts ElasticsearchSpecTransportServiceSpecPortsArgs and ElasticsearchSpecTransportServiceSpecPortsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecPortsInput` via:
//
//	ElasticsearchSpecTransportServiceSpecPortsArgs{...}
type ElasticsearchSpecTransportServiceSpecPortsInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecPortsOutput() ElasticsearchSpecTransportServiceSpecPortsOutput
	ToElasticsearchSpecTransportServiceSpecPortsOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecPortsOutput
}

// ServicePort contains information on service's port.
type ElasticsearchSpecTransportServiceSpecPortsArgs struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort pulumi.Input `pulumi:"targetPort"`
}

func (ElasticsearchSpecTransportServiceSpecPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPorts)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceSpecPortsArgs) ToElasticsearchSpecTransportServiceSpecPortsOutput() ElasticsearchSpecTransportServiceSpecPortsOutput {
	return i.ToElasticsearchSpecTransportServiceSpecPortsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecPortsArgs) ToElasticsearchSpecTransportServiceSpecPortsOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecPortsOutput)
}

// ElasticsearchSpecTransportServiceSpecPortsArrayInput is an input type that accepts ElasticsearchSpecTransportServiceSpecPortsArray and ElasticsearchSpecTransportServiceSpecPortsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecPortsArrayInput` via:
//
//	ElasticsearchSpecTransportServiceSpecPortsArray{ ElasticsearchSpecTransportServiceSpecPortsArgs{...} }
type ElasticsearchSpecTransportServiceSpecPortsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecPortsArrayOutput() ElasticsearchSpecTransportServiceSpecPortsArrayOutput
	ToElasticsearchSpecTransportServiceSpecPortsArrayOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecPortsArrayOutput
}

type ElasticsearchSpecTransportServiceSpecPortsArray []ElasticsearchSpecTransportServiceSpecPortsInput

func (ElasticsearchSpecTransportServiceSpecPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecTransportServiceSpecPorts)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceSpecPortsArray) ToElasticsearchSpecTransportServiceSpecPortsArrayOutput() ElasticsearchSpecTransportServiceSpecPortsArrayOutput {
	return i.ToElasticsearchSpecTransportServiceSpecPortsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecPortsArray) ToElasticsearchSpecTransportServiceSpecPortsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecPortsArrayOutput)
}

// ServicePort contains information on service's port.
type ElasticsearchSpecTransportServiceSpecPortsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPorts)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecPortsOutput) ToElasticsearchSpecTransportServiceSpecPortsOutput() ElasticsearchSpecTransportServiceSpecPortsOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPortsOutput) ToElasticsearchSpecTransportServiceSpecPortsOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPortsOutput {
	return o
}

// The application protocol for this port.
// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
// This field follows standard Kubernetes label syntax.
// Valid values are either:
//
// * Un-prefixed protocol names - reserved for IANA standard service names (as per
// RFC-6335 and https://www.iana.org/assignments/service-names).
//
// * Kubernetes-defined prefixed names:
//   - 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
//   - 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
//   - 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
//
// * Other protocols should use implementation-defined prefixed names such as
// mycompany.com/my-custom-protocol.
func (o ElasticsearchSpecTransportServiceSpecPortsOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPorts) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port within the service. This must be a DNS_LABEL.
// All ports within a ServiceSpec must have unique names. When considering
// the endpoints for a Service, this must match the 'name' field in the
// EndpointPort.
// Optional if only one ServicePort is defined on this service.
func (o ElasticsearchSpecTransportServiceSpecPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type is
// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
// specified, in-range, and not in use it will be used, otherwise the
// operation will fail.  If not specified, a port will be allocated if this
// Service requires one.  If this field is specified when creating a
// Service which does not need it, creation will fail. This field will be
// wiped when updating a Service to no longer need it (e.g. changing type
// from NodePort to ClusterIP).
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o ElasticsearchSpecTransportServiceSpecPortsOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPorts) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o ElasticsearchSpecTransportServiceSpecPortsOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPorts) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
// Default is TCP.
func (o ElasticsearchSpecTransportServiceSpecPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service.
// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
// If this is a string, it will be looked up as a named port in the
// target Pod's container ports. If this is not specified, the value
// of the 'port' field is used (an identity map).
// This field is ignored for services with clusterIP=None, and should be
// omitted or set equal to the 'port' field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o ElasticsearchSpecTransportServiceSpecPortsOutput) TargetPort() pulumi.AnyOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPorts) interface{} { return v.TargetPort }).(pulumi.AnyOutput)
}

type ElasticsearchSpecTransportServiceSpecPortsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecTransportServiceSpecPorts)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecPortsArrayOutput) ToElasticsearchSpecTransportServiceSpecPortsArrayOutput() ElasticsearchSpecTransportServiceSpecPortsArrayOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPortsArrayOutput) ToElasticsearchSpecTransportServiceSpecPortsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPortsArrayOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPortsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecTransportServiceSpecPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecTransportServiceSpecPorts {
		return vs[0].([]ElasticsearchSpecTransportServiceSpecPorts)[vs[1].(int)]
	}).(ElasticsearchSpecTransportServiceSpecPortsOutput)
}

// ServicePort contains information on service's port.
type ElasticsearchSpecTransportServiceSpecPortsPatch struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port *int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort interface{} `pulumi:"targetPort"`
}

// ElasticsearchSpecTransportServiceSpecPortsPatchInput is an input type that accepts ElasticsearchSpecTransportServiceSpecPortsPatchArgs and ElasticsearchSpecTransportServiceSpecPortsPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecPortsPatchInput` via:
//
//	ElasticsearchSpecTransportServiceSpecPortsPatchArgs{...}
type ElasticsearchSpecTransportServiceSpecPortsPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecPortsPatchOutput() ElasticsearchSpecTransportServiceSpecPortsPatchOutput
	ToElasticsearchSpecTransportServiceSpecPortsPatchOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecPortsPatchOutput
}

// ServicePort contains information on service's port.
type ElasticsearchSpecTransportServiceSpecPortsPatchArgs struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort pulumi.Input `pulumi:"targetPort"`
}

func (ElasticsearchSpecTransportServiceSpecPortsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPortsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceSpecPortsPatchArgs) ToElasticsearchSpecTransportServiceSpecPortsPatchOutput() ElasticsearchSpecTransportServiceSpecPortsPatchOutput {
	return i.ToElasticsearchSpecTransportServiceSpecPortsPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecPortsPatchArgs) ToElasticsearchSpecTransportServiceSpecPortsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPortsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecPortsPatchOutput)
}

// ElasticsearchSpecTransportServiceSpecPortsPatchArrayInput is an input type that accepts ElasticsearchSpecTransportServiceSpecPortsPatchArray and ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecPortsPatchArrayInput` via:
//
//	ElasticsearchSpecTransportServiceSpecPortsPatchArray{ ElasticsearchSpecTransportServiceSpecPortsPatchArgs{...} }
type ElasticsearchSpecTransportServiceSpecPortsPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput() ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput
	ToElasticsearchSpecTransportServiceSpecPortsPatchArrayOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput
}

type ElasticsearchSpecTransportServiceSpecPortsPatchArray []ElasticsearchSpecTransportServiceSpecPortsPatchInput

func (ElasticsearchSpecTransportServiceSpecPortsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecTransportServiceSpecPortsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceSpecPortsPatchArray) ToElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput() ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput {
	return i.ToElasticsearchSpecTransportServiceSpecPortsPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecPortsPatchArray) ToElasticsearchSpecTransportServiceSpecPortsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput)
}

// ServicePort contains information on service's port.
type ElasticsearchSpecTransportServiceSpecPortsPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecPortsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPortsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecPortsPatchOutput) ToElasticsearchSpecTransportServiceSpecPortsPatchOutput() ElasticsearchSpecTransportServiceSpecPortsPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPortsPatchOutput) ToElasticsearchSpecTransportServiceSpecPortsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPortsPatchOutput {
	return o
}

// The application protocol for this port.
// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
// This field follows standard Kubernetes label syntax.
// Valid values are either:
//
// * Un-prefixed protocol names - reserved for IANA standard service names (as per
// RFC-6335 and https://www.iana.org/assignments/service-names).
//
// * Kubernetes-defined prefixed names:
//   - 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
//   - 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
//   - 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
//
// * Other protocols should use implementation-defined prefixed names such as
// mycompany.com/my-custom-protocol.
func (o ElasticsearchSpecTransportServiceSpecPortsPatchOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPortsPatch) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port within the service. This must be a DNS_LABEL.
// All ports within a ServiceSpec must have unique names. When considering
// the endpoints for a Service, this must match the 'name' field in the
// EndpointPort.
// Optional if only one ServicePort is defined on this service.
func (o ElasticsearchSpecTransportServiceSpecPortsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPortsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type is
// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
// specified, in-range, and not in use it will be used, otherwise the
// operation will fail.  If not specified, a port will be allocated if this
// Service requires one.  If this field is specified when creating a
// Service which does not need it, creation will fail. This field will be
// wiped when updating a Service to no longer need it (e.g. changing type
// from NodePort to ClusterIP).
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o ElasticsearchSpecTransportServiceSpecPortsPatchOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPortsPatch) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o ElasticsearchSpecTransportServiceSpecPortsPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPortsPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
// Default is TCP.
func (o ElasticsearchSpecTransportServiceSpecPortsPatchOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPortsPatch) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service.
// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
// If this is a string, it will be looked up as a named port in the
// target Pod's container ports. If this is not specified, the value
// of the 'port' field is used (an identity map).
// This field is ignored for services with clusterIP=None, and should be
// omitted or set equal to the 'port' field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o ElasticsearchSpecTransportServiceSpecPortsPatchOutput) TargetPort() pulumi.AnyOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPortsPatch) interface{} { return v.TargetPort }).(pulumi.AnyOutput)
}

type ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecTransportServiceSpecPortsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput) ToElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput() ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput) ToElasticsearchSpecTransportServiceSpecPortsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecTransportServiceSpecPortsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecTransportServiceSpecPortsPatch {
		return vs[0].([]ElasticsearchSpecTransportServiceSpecPortsPatch)[vs[1].(int)]
	}).(ElasticsearchSpecTransportServiceSpecPortsPatchOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfig struct {
	ClientIP *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP `pulumi:"clientIP"`
}

// ElasticsearchSpecTransportServiceSpecSessionAffinityConfigInput is an input type that accepts ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs and ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecSessionAffinityConfigInput` via:
//
//	ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs{...}
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput
	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs struct {
	ClientIP ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrInput `pulumi:"clientIP"`
}

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput)
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput).ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrInput is an input type that accepts ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs, ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtr and ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrInput` via:
//
//	        ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput
	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput
}

type elasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrType ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs

func ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtr(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrInput {
	return (*elasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrType)(v)
}

func (*elasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i *elasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrType) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrType) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return o.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportServiceSpecSessionAffinityConfig) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfig {
		return &v
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput)
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput) ClientIP() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecSessionAffinityConfig) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP {
		return v.ClientIP
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput) Elem() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfig) ElasticsearchSpecTransportServiceSpecSessionAffinityConfig {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportServiceSpecSessionAffinityConfig
		return ret
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput)
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput) ClientIP() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfig) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPInput is an input type that accepts ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs and ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPInput` via:
//
//	ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs{...}
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput
	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput)
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput).ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrInput is an input type that accepts ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs, ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtr and ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrInput` via:
//
//	        ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput
	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput
}

type elasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrType ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs

func ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtr(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrInput {
	return (*elasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrType)(v)
}

func (*elasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (i *elasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrType) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrType) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP {
		return &v
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP) *int {
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput) Elem() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP
		return ret
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatch struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchInput is an input type that accepts ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchArgs and ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchInput` via:
//
//	ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchArgs{...}
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput
	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatch)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput)
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput).ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrInput is an input type that accepts ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchArgs, ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtr and ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrInput` via:
//
//	        ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput
	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput
}

type elasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrType ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchArgs

func ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtr(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchArgs) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrInput {
	return (*elasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrType)(v)
}

func (*elasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatch)(nil)).Elem()
}

func (i *elasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrType) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrType) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatch) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatch {
		return &v
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatch) *int {
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput) Elem() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatch) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatch
		return ret
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatch) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatch struct {
	ClientIP *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatch `pulumi:"clientIP"`
}

// ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchInput is an input type that accepts ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchArgs and ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchInput` via:
//
//	ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchArgs{...}
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput
	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchArgs struct {
	ClientIP ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrInput `pulumi:"clientIP"`
}

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatch)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput)
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput).ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrInput is an input type that accepts ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchArgs, ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtr and ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrInput` via:
//
//	        ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput
	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput
}

type elasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrType ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchArgs

func ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtr(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchArgs) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrInput {
	return (*elasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrType)(v)
}

func (*elasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatch)(nil)).Elem()
}

func (i *elasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrType) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrType) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatch) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatch {
		return &v
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput)
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput) ClientIP() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatch) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatch {
		return v.ClientIP
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput)
}

type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput) Elem() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatch) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatch
		return ret
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput)
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput) ClientIP() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatch) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatch {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput)
}

// TLS defines options for configuring TLS on the transport layer.
type ElasticsearchSpecTransportTls struct {
	Certificate            *ElasticsearchSpecTransportTlsCertificate            `pulumi:"certificate"`
	CertificateAuthorities *ElasticsearchSpecTransportTlsCertificateAuthorities `pulumi:"certificateAuthorities"`
	// OtherNameSuffix when defined will be prefixed with the Pod name and used as the common name,
	// and the first DNSName, as well as an OtherName required by Elasticsearch in the Subject Alternative Name
	// extension of each Elasticsearch node's transport TLS certificate.
	// Example: if set to "node.cluster.local", the generated certificate will have its otherName set to "<pod_name>.node.cluster.local".
	OtherNameSuffix        *string                                              `pulumi:"otherNameSuffix"`
	SelfSignedCertificates *ElasticsearchSpecTransportTlsSelfSignedCertificates `pulumi:"selfSignedCertificates"`
	// SubjectAlternativeNames is a list of SANs to include in the generated node transport TLS certificates.
	SubjectAltNames []ElasticsearchSpecTransportTlsSubjectAltNames `pulumi:"subjectAltNames"`
}

// ElasticsearchSpecTransportTlsInput is an input type that accepts ElasticsearchSpecTransportTlsArgs and ElasticsearchSpecTransportTlsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsInput` via:
//
//	ElasticsearchSpecTransportTlsArgs{...}
type ElasticsearchSpecTransportTlsInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsOutput() ElasticsearchSpecTransportTlsOutput
	ToElasticsearchSpecTransportTlsOutputWithContext(context.Context) ElasticsearchSpecTransportTlsOutput
}

// TLS defines options for configuring TLS on the transport layer.
type ElasticsearchSpecTransportTlsArgs struct {
	Certificate            ElasticsearchSpecTransportTlsCertificatePtrInput            `pulumi:"certificate"`
	CertificateAuthorities ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrInput `pulumi:"certificateAuthorities"`
	// OtherNameSuffix when defined will be prefixed with the Pod name and used as the common name,
	// and the first DNSName, as well as an OtherName required by Elasticsearch in the Subject Alternative Name
	// extension of each Elasticsearch node's transport TLS certificate.
	// Example: if set to "node.cluster.local", the generated certificate will have its otherName set to "<pod_name>.node.cluster.local".
	OtherNameSuffix        pulumi.StringPtrInput                                       `pulumi:"otherNameSuffix"`
	SelfSignedCertificates ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrInput `pulumi:"selfSignedCertificates"`
	// SubjectAlternativeNames is a list of SANs to include in the generated node transport TLS certificates.
	SubjectAltNames ElasticsearchSpecTransportTlsSubjectAltNamesArrayInput `pulumi:"subjectAltNames"`
}

func (ElasticsearchSpecTransportTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTls)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsArgs) ToElasticsearchSpecTransportTlsOutput() ElasticsearchSpecTransportTlsOutput {
	return i.ToElasticsearchSpecTransportTlsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsArgs) ToElasticsearchSpecTransportTlsOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsOutput)
}

func (i ElasticsearchSpecTransportTlsArgs) ToElasticsearchSpecTransportTlsPtrOutput() ElasticsearchSpecTransportTlsPtrOutput {
	return i.ToElasticsearchSpecTransportTlsPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsArgs) ToElasticsearchSpecTransportTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsOutput).ToElasticsearchSpecTransportTlsPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportTlsPtrInput is an input type that accepts ElasticsearchSpecTransportTlsArgs, ElasticsearchSpecTransportTlsPtr and ElasticsearchSpecTransportTlsPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsPtrInput` via:
//
//	        ElasticsearchSpecTransportTlsArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportTlsPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsPtrOutput() ElasticsearchSpecTransportTlsPtrOutput
	ToElasticsearchSpecTransportTlsPtrOutputWithContext(context.Context) ElasticsearchSpecTransportTlsPtrOutput
}

type elasticsearchSpecTransportTlsPtrType ElasticsearchSpecTransportTlsArgs

func ElasticsearchSpecTransportTlsPtr(v *ElasticsearchSpecTransportTlsArgs) ElasticsearchSpecTransportTlsPtrInput {
	return (*elasticsearchSpecTransportTlsPtrType)(v)
}

func (*elasticsearchSpecTransportTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTls)(nil)).Elem()
}

func (i *elasticsearchSpecTransportTlsPtrType) ToElasticsearchSpecTransportTlsPtrOutput() ElasticsearchSpecTransportTlsPtrOutput {
	return i.ToElasticsearchSpecTransportTlsPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportTlsPtrType) ToElasticsearchSpecTransportTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsPtrOutput)
}

// TLS defines options for configuring TLS on the transport layer.
type ElasticsearchSpecTransportTlsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTls)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsOutput) ToElasticsearchSpecTransportTlsOutput() ElasticsearchSpecTransportTlsOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsOutput) ToElasticsearchSpecTransportTlsOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsOutput) ToElasticsearchSpecTransportTlsPtrOutput() ElasticsearchSpecTransportTlsPtrOutput {
	return o.ToElasticsearchSpecTransportTlsPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportTlsOutput) ToElasticsearchSpecTransportTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportTls) *ElasticsearchSpecTransportTls {
		return &v
	}).(ElasticsearchSpecTransportTlsPtrOutput)
}

func (o ElasticsearchSpecTransportTlsOutput) Certificate() ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTls) *ElasticsearchSpecTransportTlsCertificate { return v.Certificate }).(ElasticsearchSpecTransportTlsCertificatePtrOutput)
}

func (o ElasticsearchSpecTransportTlsOutput) CertificateAuthorities() ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTls) *ElasticsearchSpecTransportTlsCertificateAuthorities {
		return v.CertificateAuthorities
	}).(ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput)
}

// OtherNameSuffix when defined will be prefixed with the Pod name and used as the common name,
// and the first DNSName, as well as an OtherName required by Elasticsearch in the Subject Alternative Name
// extension of each Elasticsearch node's transport TLS certificate.
// Example: if set to "node.cluster.local", the generated certificate will have its otherName set to "<pod_name>.node.cluster.local".
func (o ElasticsearchSpecTransportTlsOutput) OtherNameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTls) *string { return v.OtherNameSuffix }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecTransportTlsOutput) SelfSignedCertificates() ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTls) *ElasticsearchSpecTransportTlsSelfSignedCertificates {
		return v.SelfSignedCertificates
	}).(ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated node transport TLS certificates.
func (o ElasticsearchSpecTransportTlsOutput) SubjectAltNames() ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTls) []ElasticsearchSpecTransportTlsSubjectAltNames {
		return v.SubjectAltNames
	}).(ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput)
}

type ElasticsearchSpecTransportTlsPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTls)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsPtrOutput) ToElasticsearchSpecTransportTlsPtrOutput() ElasticsearchSpecTransportTlsPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsPtrOutput) ToElasticsearchSpecTransportTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsPtrOutput) Elem() ElasticsearchSpecTransportTlsOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTls) ElasticsearchSpecTransportTls {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportTls
		return ret
	}).(ElasticsearchSpecTransportTlsOutput)
}

func (o ElasticsearchSpecTransportTlsPtrOutput) Certificate() ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTls) *ElasticsearchSpecTransportTlsCertificate {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(ElasticsearchSpecTransportTlsCertificatePtrOutput)
}

func (o ElasticsearchSpecTransportTlsPtrOutput) CertificateAuthorities() ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTls) *ElasticsearchSpecTransportTlsCertificateAuthorities {
		if v == nil {
			return nil
		}
		return v.CertificateAuthorities
	}).(ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput)
}

// OtherNameSuffix when defined will be prefixed with the Pod name and used as the common name,
// and the first DNSName, as well as an OtherName required by Elasticsearch in the Subject Alternative Name
// extension of each Elasticsearch node's transport TLS certificate.
// Example: if set to "node.cluster.local", the generated certificate will have its otherName set to "<pod_name>.node.cluster.local".
func (o ElasticsearchSpecTransportTlsPtrOutput) OtherNameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTls) *string {
		if v == nil {
			return nil
		}
		return v.OtherNameSuffix
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecTransportTlsPtrOutput) SelfSignedCertificates() ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTls) *ElasticsearchSpecTransportTlsSelfSignedCertificates {
		if v == nil {
			return nil
		}
		return v.SelfSignedCertificates
	}).(ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated node transport TLS certificates.
func (o ElasticsearchSpecTransportTlsPtrOutput) SubjectAltNames() ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTls) []ElasticsearchSpecTransportTlsSubjectAltNames {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the CA certificate
// and private key for generating node certificates.
// The referenced secret should contain the following:
//
// - `ca.crt`: The CA certificate in PEM format.
// - `ca.key`: The private key for the CA certificate in PEM format.
type ElasticsearchSpecTransportTlsCertificate struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticsearchSpecTransportTlsCertificateInput is an input type that accepts ElasticsearchSpecTransportTlsCertificateArgs and ElasticsearchSpecTransportTlsCertificateOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsCertificateInput` via:
//
//	ElasticsearchSpecTransportTlsCertificateArgs{...}
type ElasticsearchSpecTransportTlsCertificateInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsCertificateOutput() ElasticsearchSpecTransportTlsCertificateOutput
	ToElasticsearchSpecTransportTlsCertificateOutputWithContext(context.Context) ElasticsearchSpecTransportTlsCertificateOutput
}

// Certificate is a reference to a Kubernetes secret that contains the CA certificate
// and private key for generating node certificates.
// The referenced secret should contain the following:
//
// - `ca.crt`: The CA certificate in PEM format.
// - `ca.key`: The private key for the CA certificate in PEM format.
type ElasticsearchSpecTransportTlsCertificateArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticsearchSpecTransportTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificate)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsCertificateArgs) ToElasticsearchSpecTransportTlsCertificateOutput() ElasticsearchSpecTransportTlsCertificateOutput {
	return i.ToElasticsearchSpecTransportTlsCertificateOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsCertificateArgs) ToElasticsearchSpecTransportTlsCertificateOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificateOutput)
}

func (i ElasticsearchSpecTransportTlsCertificateArgs) ToElasticsearchSpecTransportTlsCertificatePtrOutput() ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return i.ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsCertificateArgs) ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificateOutput).ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportTlsCertificatePtrInput is an input type that accepts ElasticsearchSpecTransportTlsCertificateArgs, ElasticsearchSpecTransportTlsCertificatePtr and ElasticsearchSpecTransportTlsCertificatePtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsCertificatePtrInput` via:
//
//	        ElasticsearchSpecTransportTlsCertificateArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportTlsCertificatePtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsCertificatePtrOutput() ElasticsearchSpecTransportTlsCertificatePtrOutput
	ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(context.Context) ElasticsearchSpecTransportTlsCertificatePtrOutput
}

type elasticsearchSpecTransportTlsCertificatePtrType ElasticsearchSpecTransportTlsCertificateArgs

func ElasticsearchSpecTransportTlsCertificatePtr(v *ElasticsearchSpecTransportTlsCertificateArgs) ElasticsearchSpecTransportTlsCertificatePtrInput {
	return (*elasticsearchSpecTransportTlsCertificatePtrType)(v)
}

func (*elasticsearchSpecTransportTlsCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsCertificate)(nil)).Elem()
}

func (i *elasticsearchSpecTransportTlsCertificatePtrType) ToElasticsearchSpecTransportTlsCertificatePtrOutput() ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return i.ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportTlsCertificatePtrType) ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the CA certificate
// and private key for generating node certificates.
// The referenced secret should contain the following:
//
// - `ca.crt`: The CA certificate in PEM format.
// - `ca.key`: The private key for the CA certificate in PEM format.
type ElasticsearchSpecTransportTlsCertificateOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificate)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsCertificateOutput) ToElasticsearchSpecTransportTlsCertificateOutput() ElasticsearchSpecTransportTlsCertificateOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateOutput) ToElasticsearchSpecTransportTlsCertificateOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateOutput) ToElasticsearchSpecTransportTlsCertificatePtrOutput() ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return o.ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportTlsCertificateOutput) ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportTlsCertificate) *ElasticsearchSpecTransportTlsCertificate {
		return &v
	}).(ElasticsearchSpecTransportTlsCertificatePtrOutput)
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecTransportTlsCertificateOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsCertificate) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportTlsCertificatePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsCertificate)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsCertificatePtrOutput) ToElasticsearchSpecTransportTlsCertificatePtrOutput() ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificatePtrOutput) ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificatePtrOutput) Elem() ElasticsearchSpecTransportTlsCertificateOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsCertificate) ElasticsearchSpecTransportTlsCertificate {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportTlsCertificate
		return ret
	}).(ElasticsearchSpecTransportTlsCertificateOutput)
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecTransportTlsCertificatePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsCertificate) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// CertificateAuthorities is a reference to a config map that contains one or more x509 certificates for
// trusted authorities in PEM format. The certificates need to be in a file called `ca.crt`.
type ElasticsearchSpecTransportTlsCertificateAuthorities struct {
	ConfigMapName *string `pulumi:"configMapName"`
}

// ElasticsearchSpecTransportTlsCertificateAuthoritiesInput is an input type that accepts ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs and ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsCertificateAuthoritiesInput` via:
//
//	ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs{...}
type ElasticsearchSpecTransportTlsCertificateAuthoritiesInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsCertificateAuthoritiesOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput
	ToElasticsearchSpecTransportTlsCertificateAuthoritiesOutputWithContext(context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput
}

// CertificateAuthorities is a reference to a config map that contains one or more x509 certificates for
// trusted authorities in PEM format. The certificates need to be in a file called `ca.crt`.
type ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs struct {
	ConfigMapName pulumi.StringPtrInput `pulumi:"configMapName"`
}

func (ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificateAuthorities)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs) ToElasticsearchSpecTransportTlsCertificateAuthoritiesOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput {
	return i.ToElasticsearchSpecTransportTlsCertificateAuthoritiesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs) ToElasticsearchSpecTransportTlsCertificateAuthoritiesOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput)
}

func (i ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return i.ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput).ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrInput is an input type that accepts ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs, ElasticsearchSpecTransportTlsCertificateAuthoritiesPtr and ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrInput` via:
//
//	        ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput
	ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput
}

type elasticsearchSpecTransportTlsCertificateAuthoritiesPtrType ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs

func ElasticsearchSpecTransportTlsCertificateAuthoritiesPtr(v *ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs) ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrInput {
	return (*elasticsearchSpecTransportTlsCertificateAuthoritiesPtrType)(v)
}

func (*elasticsearchSpecTransportTlsCertificateAuthoritiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsCertificateAuthorities)(nil)).Elem()
}

func (i *elasticsearchSpecTransportTlsCertificateAuthoritiesPtrType) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return i.ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportTlsCertificateAuthoritiesPtrType) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput)
}

// CertificateAuthorities is a reference to a config map that contains one or more x509 certificates for
// trusted authorities in PEM format. The certificates need to be in a file called `ca.crt`.
type ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificateAuthorities)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return o.ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportTlsCertificateAuthorities) *ElasticsearchSpecTransportTlsCertificateAuthorities {
		return &v
	}).(ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput)
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput) ConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsCertificateAuthorities) *string { return v.ConfigMapName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsCertificateAuthorities)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput) Elem() ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsCertificateAuthorities) ElasticsearchSpecTransportTlsCertificateAuthorities {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportTlsCertificateAuthorities
		return ret
	}).(ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput)
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput) ConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsCertificateAuthorities) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMapName
	}).(pulumi.StringPtrOutput)
}

// CertificateAuthorities is a reference to a config map that contains one or more x509 certificates for
// trusted authorities in PEM format. The certificates need to be in a file called `ca.crt`.
type ElasticsearchSpecTransportTlsCertificateAuthoritiesPatch struct {
	ConfigMapName *string `pulumi:"configMapName"`
}

// ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchInput is an input type that accepts ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchArgs and ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchInput` via:
//
//	ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchArgs{...}
type ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput
	ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutputWithContext(context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput
}

// CertificateAuthorities is a reference to a config map that contains one or more x509 certificates for
// trusted authorities in PEM format. The certificates need to be in a file called `ca.crt`.
type ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchArgs struct {
	ConfigMapName pulumi.StringPtrInput `pulumi:"configMapName"`
}

func (ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificateAuthoritiesPatch)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchArgs) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput {
	return i.ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchArgs) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput)
}

func (i ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchArgs) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput {
	return i.ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchArgs) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput).ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrInput is an input type that accepts ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchArgs, ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtr and ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrInput` via:
//
//	        ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput
	ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutputWithContext(context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput
}

type elasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrType ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchArgs

func ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtr(v *ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchArgs) ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrInput {
	return (*elasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrType)(v)
}

func (*elasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsCertificateAuthoritiesPatch)(nil)).Elem()
}

func (i *elasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrType) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput {
	return i.ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrType) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput)
}

// CertificateAuthorities is a reference to a config map that contains one or more x509 certificates for
// trusted authorities in PEM format. The certificates need to be in a file called `ca.crt`.
type ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificateAuthoritiesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput {
	return o.ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportTlsCertificateAuthoritiesPatch) *ElasticsearchSpecTransportTlsCertificateAuthoritiesPatch {
		return &v
	}).(ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput)
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput) ConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsCertificateAuthoritiesPatch) *string { return v.ConfigMapName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsCertificateAuthoritiesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput) Elem() ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsCertificateAuthoritiesPatch) ElasticsearchSpecTransportTlsCertificateAuthoritiesPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportTlsCertificateAuthoritiesPatch
		return ret
	}).(ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput)
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput) ConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsCertificateAuthoritiesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMapName
	}).(pulumi.StringPtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the CA certificate
// and private key for generating node certificates.
// The referenced secret should contain the following:
//
// - `ca.crt`: The CA certificate in PEM format.
// - `ca.key`: The private key for the CA certificate in PEM format.
type ElasticsearchSpecTransportTlsCertificatePatch struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticsearchSpecTransportTlsCertificatePatchInput is an input type that accepts ElasticsearchSpecTransportTlsCertificatePatchArgs and ElasticsearchSpecTransportTlsCertificatePatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsCertificatePatchInput` via:
//
//	ElasticsearchSpecTransportTlsCertificatePatchArgs{...}
type ElasticsearchSpecTransportTlsCertificatePatchInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsCertificatePatchOutput() ElasticsearchSpecTransportTlsCertificatePatchOutput
	ToElasticsearchSpecTransportTlsCertificatePatchOutputWithContext(context.Context) ElasticsearchSpecTransportTlsCertificatePatchOutput
}

// Certificate is a reference to a Kubernetes secret that contains the CA certificate
// and private key for generating node certificates.
// The referenced secret should contain the following:
//
// - `ca.crt`: The CA certificate in PEM format.
// - `ca.key`: The private key for the CA certificate in PEM format.
type ElasticsearchSpecTransportTlsCertificatePatchArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticsearchSpecTransportTlsCertificatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificatePatch)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsCertificatePatchArgs) ToElasticsearchSpecTransportTlsCertificatePatchOutput() ElasticsearchSpecTransportTlsCertificatePatchOutput {
	return i.ToElasticsearchSpecTransportTlsCertificatePatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsCertificatePatchArgs) ToElasticsearchSpecTransportTlsCertificatePatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificatePatchOutput)
}

func (i ElasticsearchSpecTransportTlsCertificatePatchArgs) ToElasticsearchSpecTransportTlsCertificatePatchPtrOutput() ElasticsearchSpecTransportTlsCertificatePatchPtrOutput {
	return i.ToElasticsearchSpecTransportTlsCertificatePatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsCertificatePatchArgs) ToElasticsearchSpecTransportTlsCertificatePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificatePatchOutput).ToElasticsearchSpecTransportTlsCertificatePatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportTlsCertificatePatchPtrInput is an input type that accepts ElasticsearchSpecTransportTlsCertificatePatchArgs, ElasticsearchSpecTransportTlsCertificatePatchPtr and ElasticsearchSpecTransportTlsCertificatePatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsCertificatePatchPtrInput` via:
//
//	        ElasticsearchSpecTransportTlsCertificatePatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportTlsCertificatePatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsCertificatePatchPtrOutput() ElasticsearchSpecTransportTlsCertificatePatchPtrOutput
	ToElasticsearchSpecTransportTlsCertificatePatchPtrOutputWithContext(context.Context) ElasticsearchSpecTransportTlsCertificatePatchPtrOutput
}

type elasticsearchSpecTransportTlsCertificatePatchPtrType ElasticsearchSpecTransportTlsCertificatePatchArgs

func ElasticsearchSpecTransportTlsCertificatePatchPtr(v *ElasticsearchSpecTransportTlsCertificatePatchArgs) ElasticsearchSpecTransportTlsCertificatePatchPtrInput {
	return (*elasticsearchSpecTransportTlsCertificatePatchPtrType)(v)
}

func (*elasticsearchSpecTransportTlsCertificatePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsCertificatePatch)(nil)).Elem()
}

func (i *elasticsearchSpecTransportTlsCertificatePatchPtrType) ToElasticsearchSpecTransportTlsCertificatePatchPtrOutput() ElasticsearchSpecTransportTlsCertificatePatchPtrOutput {
	return i.ToElasticsearchSpecTransportTlsCertificatePatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportTlsCertificatePatchPtrType) ToElasticsearchSpecTransportTlsCertificatePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificatePatchPtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the CA certificate
// and private key for generating node certificates.
// The referenced secret should contain the following:
//
// - `ca.crt`: The CA certificate in PEM format.
// - `ca.key`: The private key for the CA certificate in PEM format.
type ElasticsearchSpecTransportTlsCertificatePatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsCertificatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificatePatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsCertificatePatchOutput) ToElasticsearchSpecTransportTlsCertificatePatchOutput() ElasticsearchSpecTransportTlsCertificatePatchOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificatePatchOutput) ToElasticsearchSpecTransportTlsCertificatePatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificatePatchOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificatePatchOutput) ToElasticsearchSpecTransportTlsCertificatePatchPtrOutput() ElasticsearchSpecTransportTlsCertificatePatchPtrOutput {
	return o.ToElasticsearchSpecTransportTlsCertificatePatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportTlsCertificatePatchOutput) ToElasticsearchSpecTransportTlsCertificatePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificatePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportTlsCertificatePatch) *ElasticsearchSpecTransportTlsCertificatePatch {
		return &v
	}).(ElasticsearchSpecTransportTlsCertificatePatchPtrOutput)
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecTransportTlsCertificatePatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsCertificatePatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportTlsCertificatePatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsCertificatePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsCertificatePatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsCertificatePatchPtrOutput) ToElasticsearchSpecTransportTlsCertificatePatchPtrOutput() ElasticsearchSpecTransportTlsCertificatePatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificatePatchPtrOutput) ToElasticsearchSpecTransportTlsCertificatePatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificatePatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificatePatchPtrOutput) Elem() ElasticsearchSpecTransportTlsCertificatePatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsCertificatePatch) ElasticsearchSpecTransportTlsCertificatePatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportTlsCertificatePatch
		return ret
	}).(ElasticsearchSpecTransportTlsCertificatePatchOutput)
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecTransportTlsCertificatePatchPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsCertificatePatch) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// TLS defines options for configuring TLS on the transport layer.
type ElasticsearchSpecTransportTlsPatch struct {
	Certificate            *ElasticsearchSpecTransportTlsCertificatePatch            `pulumi:"certificate"`
	CertificateAuthorities *ElasticsearchSpecTransportTlsCertificateAuthoritiesPatch `pulumi:"certificateAuthorities"`
	// OtherNameSuffix when defined will be prefixed with the Pod name and used as the common name,
	// and the first DNSName, as well as an OtherName required by Elasticsearch in the Subject Alternative Name
	// extension of each Elasticsearch node's transport TLS certificate.
	// Example: if set to "node.cluster.local", the generated certificate will have its otherName set to "<pod_name>.node.cluster.local".
	OtherNameSuffix        *string                                                   `pulumi:"otherNameSuffix"`
	SelfSignedCertificates *ElasticsearchSpecTransportTlsSelfSignedCertificatesPatch `pulumi:"selfSignedCertificates"`
	// SubjectAlternativeNames is a list of SANs to include in the generated node transport TLS certificates.
	SubjectAltNames []ElasticsearchSpecTransportTlsSubjectAltNamesPatch `pulumi:"subjectAltNames"`
}

// ElasticsearchSpecTransportTlsPatchInput is an input type that accepts ElasticsearchSpecTransportTlsPatchArgs and ElasticsearchSpecTransportTlsPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsPatchInput` via:
//
//	ElasticsearchSpecTransportTlsPatchArgs{...}
type ElasticsearchSpecTransportTlsPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsPatchOutput() ElasticsearchSpecTransportTlsPatchOutput
	ToElasticsearchSpecTransportTlsPatchOutputWithContext(context.Context) ElasticsearchSpecTransportTlsPatchOutput
}

// TLS defines options for configuring TLS on the transport layer.
type ElasticsearchSpecTransportTlsPatchArgs struct {
	Certificate            ElasticsearchSpecTransportTlsCertificatePatchPtrInput            `pulumi:"certificate"`
	CertificateAuthorities ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrInput `pulumi:"certificateAuthorities"`
	// OtherNameSuffix when defined will be prefixed with the Pod name and used as the common name,
	// and the first DNSName, as well as an OtherName required by Elasticsearch in the Subject Alternative Name
	// extension of each Elasticsearch node's transport TLS certificate.
	// Example: if set to "node.cluster.local", the generated certificate will have its otherName set to "<pod_name>.node.cluster.local".
	OtherNameSuffix        pulumi.StringPtrInput                                            `pulumi:"otherNameSuffix"`
	SelfSignedCertificates ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrInput `pulumi:"selfSignedCertificates"`
	// SubjectAlternativeNames is a list of SANs to include in the generated node transport TLS certificates.
	SubjectAltNames ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayInput `pulumi:"subjectAltNames"`
}

func (ElasticsearchSpecTransportTlsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsPatch)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsPatchArgs) ToElasticsearchSpecTransportTlsPatchOutput() ElasticsearchSpecTransportTlsPatchOutput {
	return i.ToElasticsearchSpecTransportTlsPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsPatchArgs) ToElasticsearchSpecTransportTlsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsPatchOutput)
}

func (i ElasticsearchSpecTransportTlsPatchArgs) ToElasticsearchSpecTransportTlsPatchPtrOutput() ElasticsearchSpecTransportTlsPatchPtrOutput {
	return i.ToElasticsearchSpecTransportTlsPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsPatchArgs) ToElasticsearchSpecTransportTlsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsPatchOutput).ToElasticsearchSpecTransportTlsPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportTlsPatchPtrInput is an input type that accepts ElasticsearchSpecTransportTlsPatchArgs, ElasticsearchSpecTransportTlsPatchPtr and ElasticsearchSpecTransportTlsPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsPatchPtrInput` via:
//
//	        ElasticsearchSpecTransportTlsPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportTlsPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsPatchPtrOutput() ElasticsearchSpecTransportTlsPatchPtrOutput
	ToElasticsearchSpecTransportTlsPatchPtrOutputWithContext(context.Context) ElasticsearchSpecTransportTlsPatchPtrOutput
}

type elasticsearchSpecTransportTlsPatchPtrType ElasticsearchSpecTransportTlsPatchArgs

func ElasticsearchSpecTransportTlsPatchPtr(v *ElasticsearchSpecTransportTlsPatchArgs) ElasticsearchSpecTransportTlsPatchPtrInput {
	return (*elasticsearchSpecTransportTlsPatchPtrType)(v)
}

func (*elasticsearchSpecTransportTlsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsPatch)(nil)).Elem()
}

func (i *elasticsearchSpecTransportTlsPatchPtrType) ToElasticsearchSpecTransportTlsPatchPtrOutput() ElasticsearchSpecTransportTlsPatchPtrOutput {
	return i.ToElasticsearchSpecTransportTlsPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportTlsPatchPtrType) ToElasticsearchSpecTransportTlsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsPatchPtrOutput)
}

// TLS defines options for configuring TLS on the transport layer.
type ElasticsearchSpecTransportTlsPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsPatchOutput) ToElasticsearchSpecTransportTlsPatchOutput() ElasticsearchSpecTransportTlsPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsPatchOutput) ToElasticsearchSpecTransportTlsPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsPatchOutput) ToElasticsearchSpecTransportTlsPatchPtrOutput() ElasticsearchSpecTransportTlsPatchPtrOutput {
	return o.ToElasticsearchSpecTransportTlsPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportTlsPatchOutput) ToElasticsearchSpecTransportTlsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportTlsPatch) *ElasticsearchSpecTransportTlsPatch {
		return &v
	}).(ElasticsearchSpecTransportTlsPatchPtrOutput)
}

func (o ElasticsearchSpecTransportTlsPatchOutput) Certificate() ElasticsearchSpecTransportTlsCertificatePatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsPatch) *ElasticsearchSpecTransportTlsCertificatePatch {
		return v.Certificate
	}).(ElasticsearchSpecTransportTlsCertificatePatchPtrOutput)
}

func (o ElasticsearchSpecTransportTlsPatchOutput) CertificateAuthorities() ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsPatch) *ElasticsearchSpecTransportTlsCertificateAuthoritiesPatch {
		return v.CertificateAuthorities
	}).(ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput)
}

// OtherNameSuffix when defined will be prefixed with the Pod name and used as the common name,
// and the first DNSName, as well as an OtherName required by Elasticsearch in the Subject Alternative Name
// extension of each Elasticsearch node's transport TLS certificate.
// Example: if set to "node.cluster.local", the generated certificate will have its otherName set to "<pod_name>.node.cluster.local".
func (o ElasticsearchSpecTransportTlsPatchOutput) OtherNameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsPatch) *string { return v.OtherNameSuffix }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecTransportTlsPatchOutput) SelfSignedCertificates() ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsPatch) *ElasticsearchSpecTransportTlsSelfSignedCertificatesPatch {
		return v.SelfSignedCertificates
	}).(ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated node transport TLS certificates.
func (o ElasticsearchSpecTransportTlsPatchOutput) SubjectAltNames() ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsPatch) []ElasticsearchSpecTransportTlsSubjectAltNamesPatch {
		return v.SubjectAltNames
	}).(ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput)
}

type ElasticsearchSpecTransportTlsPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsPatchPtrOutput) ToElasticsearchSpecTransportTlsPatchPtrOutput() ElasticsearchSpecTransportTlsPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsPatchPtrOutput) ToElasticsearchSpecTransportTlsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsPatchPtrOutput) Elem() ElasticsearchSpecTransportTlsPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsPatch) ElasticsearchSpecTransportTlsPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportTlsPatch
		return ret
	}).(ElasticsearchSpecTransportTlsPatchOutput)
}

func (o ElasticsearchSpecTransportTlsPatchPtrOutput) Certificate() ElasticsearchSpecTransportTlsCertificatePatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsPatch) *ElasticsearchSpecTransportTlsCertificatePatch {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(ElasticsearchSpecTransportTlsCertificatePatchPtrOutput)
}

func (o ElasticsearchSpecTransportTlsPatchPtrOutput) CertificateAuthorities() ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsPatch) *ElasticsearchSpecTransportTlsCertificateAuthoritiesPatch {
		if v == nil {
			return nil
		}
		return v.CertificateAuthorities
	}).(ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput)
}

// OtherNameSuffix when defined will be prefixed with the Pod name and used as the common name,
// and the first DNSName, as well as an OtherName required by Elasticsearch in the Subject Alternative Name
// extension of each Elasticsearch node's transport TLS certificate.
// Example: if set to "node.cluster.local", the generated certificate will have its otherName set to "<pod_name>.node.cluster.local".
func (o ElasticsearchSpecTransportTlsPatchPtrOutput) OtherNameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsPatch) *string {
		if v == nil {
			return nil
		}
		return v.OtherNameSuffix
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecTransportTlsPatchPtrOutput) SelfSignedCertificates() ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsPatch) *ElasticsearchSpecTransportTlsSelfSignedCertificatesPatch {
		if v == nil {
			return nil
		}
		return v.SelfSignedCertificates
	}).(ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated node transport TLS certificates.
func (o ElasticsearchSpecTransportTlsPatchPtrOutput) SubjectAltNames() ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsPatch) []ElasticsearchSpecTransportTlsSubjectAltNamesPatch {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput)
}

// SelfSignedCertificates allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecTransportTlsSelfSignedCertificates struct {
	// Disabled indicates that provisioning of the self-signed certificates should be disabled.
	Disabled *bool `pulumi:"disabled"`
}

// ElasticsearchSpecTransportTlsSelfSignedCertificatesInput is an input type that accepts ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs and ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsSelfSignedCertificatesInput` via:
//
//	ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs{...}
type ElasticsearchSpecTransportTlsSelfSignedCertificatesInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsSelfSignedCertificatesOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput
	ToElasticsearchSpecTransportTlsSelfSignedCertificatesOutputWithContext(context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput
}

// SelfSignedCertificates allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs struct {
	// Disabled indicates that provisioning of the self-signed certificates should be disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsSelfSignedCertificates)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs) ToElasticsearchSpecTransportTlsSelfSignedCertificatesOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput {
	return i.ToElasticsearchSpecTransportTlsSelfSignedCertificatesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs) ToElasticsearchSpecTransportTlsSelfSignedCertificatesOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput)
}

func (i ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return i.ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput).ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrInput is an input type that accepts ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs, ElasticsearchSpecTransportTlsSelfSignedCertificatesPtr and ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrInput` via:
//
//	        ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput
	ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput
}

type elasticsearchSpecTransportTlsSelfSignedCertificatesPtrType ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs

func ElasticsearchSpecTransportTlsSelfSignedCertificatesPtr(v *ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs) ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrInput {
	return (*elasticsearchSpecTransportTlsSelfSignedCertificatesPtrType)(v)
}

func (*elasticsearchSpecTransportTlsSelfSignedCertificatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsSelfSignedCertificates)(nil)).Elem()
}

func (i *elasticsearchSpecTransportTlsSelfSignedCertificatesPtrType) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return i.ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportTlsSelfSignedCertificatesPtrType) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput)
}

// SelfSignedCertificates allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsSelfSignedCertificates)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return o.ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportTlsSelfSignedCertificates) *ElasticsearchSpecTransportTlsSelfSignedCertificates {
		return &v
	}).(ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput)
}

// Disabled indicates that provisioning of the self-signed certificates should be disabled.
func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsSelfSignedCertificates) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsSelfSignedCertificates)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput) Elem() ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsSelfSignedCertificates) ElasticsearchSpecTransportTlsSelfSignedCertificates {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportTlsSelfSignedCertificates
		return ret
	}).(ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput)
}

// Disabled indicates that provisioning of the self-signed certificates should be disabled.
func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsSelfSignedCertificates) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// SelfSignedCertificates allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecTransportTlsSelfSignedCertificatesPatch struct {
	// Disabled indicates that provisioning of the self-signed certificates should be disabled.
	Disabled *bool `pulumi:"disabled"`
}

// ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchInput is an input type that accepts ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchArgs and ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchInput` via:
//
//	ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchArgs{...}
type ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput
	ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutputWithContext(context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput
}

// SelfSignedCertificates allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchArgs struct {
	// Disabled indicates that provisioning of the self-signed certificates should be disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsSelfSignedCertificatesPatch)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchArgs) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput {
	return i.ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchArgs) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput)
}

func (i ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchArgs) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput {
	return i.ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchArgs) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput).ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrInput is an input type that accepts ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchArgs, ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtr and ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrInput` via:
//
//	        ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput
	ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutputWithContext(context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput
}

type elasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrType ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchArgs

func ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtr(v *ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchArgs) ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrInput {
	return (*elasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrType)(v)
}

func (*elasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsSelfSignedCertificatesPatch)(nil)).Elem()
}

func (i *elasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrType) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput {
	return i.ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrType) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput)
}

// SelfSignedCertificates allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsSelfSignedCertificatesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput {
	return o.ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportTlsSelfSignedCertificatesPatch) *ElasticsearchSpecTransportTlsSelfSignedCertificatesPatch {
		return &v
	}).(ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput)
}

// Disabled indicates that provisioning of the self-signed certificates should be disabled.
func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsSelfSignedCertificatesPatch) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsSelfSignedCertificatesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput) Elem() ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsSelfSignedCertificatesPatch) ElasticsearchSpecTransportTlsSelfSignedCertificatesPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportTlsSelfSignedCertificatesPatch
		return ret
	}).(ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput)
}

// Disabled indicates that provisioning of the self-signed certificates should be disabled.
func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsSelfSignedCertificatesPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecTransportTlsSubjectAltNames struct {
	// DNS is the DNS name of the subject.
	Dns *string `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip *string `pulumi:"ip"`
}

// ElasticsearchSpecTransportTlsSubjectAltNamesInput is an input type that accepts ElasticsearchSpecTransportTlsSubjectAltNamesArgs and ElasticsearchSpecTransportTlsSubjectAltNamesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsSubjectAltNamesInput` via:
//
//	ElasticsearchSpecTransportTlsSubjectAltNamesArgs{...}
type ElasticsearchSpecTransportTlsSubjectAltNamesInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsSubjectAltNamesOutput() ElasticsearchSpecTransportTlsSubjectAltNamesOutput
	ToElasticsearchSpecTransportTlsSubjectAltNamesOutputWithContext(context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesOutput
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecTransportTlsSubjectAltNamesArgs struct {
	// DNS is the DNS name of the subject.
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (ElasticsearchSpecTransportTlsSubjectAltNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsSubjectAltNames)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsSubjectAltNamesArgs) ToElasticsearchSpecTransportTlsSubjectAltNamesOutput() ElasticsearchSpecTransportTlsSubjectAltNamesOutput {
	return i.ToElasticsearchSpecTransportTlsSubjectAltNamesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsSubjectAltNamesArgs) ToElasticsearchSpecTransportTlsSubjectAltNamesOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsSubjectAltNamesOutput)
}

// ElasticsearchSpecTransportTlsSubjectAltNamesArrayInput is an input type that accepts ElasticsearchSpecTransportTlsSubjectAltNamesArray and ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsSubjectAltNamesArrayInput` via:
//
//	ElasticsearchSpecTransportTlsSubjectAltNamesArray{ ElasticsearchSpecTransportTlsSubjectAltNamesArgs{...} }
type ElasticsearchSpecTransportTlsSubjectAltNamesArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput() ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput
	ToElasticsearchSpecTransportTlsSubjectAltNamesArrayOutputWithContext(context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput
}

type ElasticsearchSpecTransportTlsSubjectAltNamesArray []ElasticsearchSpecTransportTlsSubjectAltNamesInput

func (ElasticsearchSpecTransportTlsSubjectAltNamesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecTransportTlsSubjectAltNames)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsSubjectAltNamesArray) ToElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput() ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput {
	return i.ToElasticsearchSpecTransportTlsSubjectAltNamesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsSubjectAltNamesArray) ToElasticsearchSpecTransportTlsSubjectAltNamesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecTransportTlsSubjectAltNamesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsSubjectAltNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsSubjectAltNames)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsSubjectAltNamesOutput) ToElasticsearchSpecTransportTlsSubjectAltNamesOutput() ElasticsearchSpecTransportTlsSubjectAltNamesOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSubjectAltNamesOutput) ToElasticsearchSpecTransportTlsSubjectAltNamesOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesOutput {
	return o
}

// DNS is the DNS name of the subject.
func (o ElasticsearchSpecTransportTlsSubjectAltNamesOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsSubjectAltNames) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// IP is the IP address of the subject.
func (o ElasticsearchSpecTransportTlsSubjectAltNamesOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsSubjectAltNames) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecTransportTlsSubjectAltNames)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput) ToElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput() ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput) ToElasticsearchSpecTransportTlsSubjectAltNamesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecTransportTlsSubjectAltNamesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecTransportTlsSubjectAltNames {
		return vs[0].([]ElasticsearchSpecTransportTlsSubjectAltNames)[vs[1].(int)]
	}).(ElasticsearchSpecTransportTlsSubjectAltNamesOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecTransportTlsSubjectAltNamesPatch struct {
	// DNS is the DNS name of the subject.
	Dns *string `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip *string `pulumi:"ip"`
}

// ElasticsearchSpecTransportTlsSubjectAltNamesPatchInput is an input type that accepts ElasticsearchSpecTransportTlsSubjectAltNamesPatchArgs and ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsSubjectAltNamesPatchInput` via:
//
//	ElasticsearchSpecTransportTlsSubjectAltNamesPatchArgs{...}
type ElasticsearchSpecTransportTlsSubjectAltNamesPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput() ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput
	ToElasticsearchSpecTransportTlsSubjectAltNamesPatchOutputWithContext(context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecTransportTlsSubjectAltNamesPatchArgs struct {
	// DNS is the DNS name of the subject.
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (ElasticsearchSpecTransportTlsSubjectAltNamesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsSubjectAltNamesPatch)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsSubjectAltNamesPatchArgs) ToElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput() ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput {
	return i.ToElasticsearchSpecTransportTlsSubjectAltNamesPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsSubjectAltNamesPatchArgs) ToElasticsearchSpecTransportTlsSubjectAltNamesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput)
}

// ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayInput is an input type that accepts ElasticsearchSpecTransportTlsSubjectAltNamesPatchArray and ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayInput` via:
//
//	ElasticsearchSpecTransportTlsSubjectAltNamesPatchArray{ ElasticsearchSpecTransportTlsSubjectAltNamesPatchArgs{...} }
type ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput() ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput
	ToElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutputWithContext(context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput
}

type ElasticsearchSpecTransportTlsSubjectAltNamesPatchArray []ElasticsearchSpecTransportTlsSubjectAltNamesPatchInput

func (ElasticsearchSpecTransportTlsSubjectAltNamesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecTransportTlsSubjectAltNamesPatch)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsSubjectAltNamesPatchArray) ToElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput() ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput {
	return i.ToElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsSubjectAltNamesPatchArray) ToElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsSubjectAltNamesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput) ToElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput() ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput) ToElasticsearchSpecTransportTlsSubjectAltNamesPatchOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput {
	return o
}

// DNS is the DNS name of the subject.
func (o ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsSubjectAltNamesPatch) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// IP is the IP address of the subject.
func (o ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsSubjectAltNamesPatch) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecTransportTlsSubjectAltNamesPatch)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput) ToElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput() ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput) ToElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecTransportTlsSubjectAltNamesPatch {
		return vs[0].([]ElasticsearchSpecTransportTlsSubjectAltNamesPatch)[vs[1].(int)]
	}).(ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput)
}

// UpdateStrategy specifies how updates to the cluster should be performed.
type ElasticsearchSpecUpdateStrategy struct {
	ChangeBudget *ElasticsearchSpecUpdateStrategyChangeBudget `pulumi:"changeBudget"`
}

// ElasticsearchSpecUpdateStrategyInput is an input type that accepts ElasticsearchSpecUpdateStrategyArgs and ElasticsearchSpecUpdateStrategyOutput values.
// You can construct a concrete instance of `ElasticsearchSpecUpdateStrategyInput` via:
//
//	ElasticsearchSpecUpdateStrategyArgs{...}
type ElasticsearchSpecUpdateStrategyInput interface {
	pulumi.Input

	ToElasticsearchSpecUpdateStrategyOutput() ElasticsearchSpecUpdateStrategyOutput
	ToElasticsearchSpecUpdateStrategyOutputWithContext(context.Context) ElasticsearchSpecUpdateStrategyOutput
}

// UpdateStrategy specifies how updates to the cluster should be performed.
type ElasticsearchSpecUpdateStrategyArgs struct {
	ChangeBudget ElasticsearchSpecUpdateStrategyChangeBudgetPtrInput `pulumi:"changeBudget"`
}

func (ElasticsearchSpecUpdateStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecUpdateStrategy)(nil)).Elem()
}

func (i ElasticsearchSpecUpdateStrategyArgs) ToElasticsearchSpecUpdateStrategyOutput() ElasticsearchSpecUpdateStrategyOutput {
	return i.ToElasticsearchSpecUpdateStrategyOutputWithContext(context.Background())
}

func (i ElasticsearchSpecUpdateStrategyArgs) ToElasticsearchSpecUpdateStrategyOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyOutput)
}

func (i ElasticsearchSpecUpdateStrategyArgs) ToElasticsearchSpecUpdateStrategyPtrOutput() ElasticsearchSpecUpdateStrategyPtrOutput {
	return i.ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecUpdateStrategyArgs) ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyOutput).ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(ctx)
}

// ElasticsearchSpecUpdateStrategyPtrInput is an input type that accepts ElasticsearchSpecUpdateStrategyArgs, ElasticsearchSpecUpdateStrategyPtr and ElasticsearchSpecUpdateStrategyPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecUpdateStrategyPtrInput` via:
//
//	        ElasticsearchSpecUpdateStrategyArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecUpdateStrategyPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecUpdateStrategyPtrOutput() ElasticsearchSpecUpdateStrategyPtrOutput
	ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(context.Context) ElasticsearchSpecUpdateStrategyPtrOutput
}

type elasticsearchSpecUpdateStrategyPtrType ElasticsearchSpecUpdateStrategyArgs

func ElasticsearchSpecUpdateStrategyPtr(v *ElasticsearchSpecUpdateStrategyArgs) ElasticsearchSpecUpdateStrategyPtrInput {
	return (*elasticsearchSpecUpdateStrategyPtrType)(v)
}

func (*elasticsearchSpecUpdateStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecUpdateStrategy)(nil)).Elem()
}

func (i *elasticsearchSpecUpdateStrategyPtrType) ToElasticsearchSpecUpdateStrategyPtrOutput() ElasticsearchSpecUpdateStrategyPtrOutput {
	return i.ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecUpdateStrategyPtrType) ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyPtrOutput)
}

// UpdateStrategy specifies how updates to the cluster should be performed.
type ElasticsearchSpecUpdateStrategyOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecUpdateStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecUpdateStrategy)(nil)).Elem()
}

func (o ElasticsearchSpecUpdateStrategyOutput) ToElasticsearchSpecUpdateStrategyOutput() ElasticsearchSpecUpdateStrategyOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyOutput) ToElasticsearchSpecUpdateStrategyOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyOutput) ToElasticsearchSpecUpdateStrategyPtrOutput() ElasticsearchSpecUpdateStrategyPtrOutput {
	return o.ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecUpdateStrategyOutput) ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecUpdateStrategy) *ElasticsearchSpecUpdateStrategy {
		return &v
	}).(ElasticsearchSpecUpdateStrategyPtrOutput)
}

func (o ElasticsearchSpecUpdateStrategyOutput) ChangeBudget() ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecUpdateStrategy) *ElasticsearchSpecUpdateStrategyChangeBudget {
		return v.ChangeBudget
	}).(ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput)
}

type ElasticsearchSpecUpdateStrategyPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecUpdateStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecUpdateStrategy)(nil)).Elem()
}

func (o ElasticsearchSpecUpdateStrategyPtrOutput) ToElasticsearchSpecUpdateStrategyPtrOutput() ElasticsearchSpecUpdateStrategyPtrOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyPtrOutput) ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyPtrOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyPtrOutput) Elem() ElasticsearchSpecUpdateStrategyOutput {
	return o.ApplyT(func(v *ElasticsearchSpecUpdateStrategy) ElasticsearchSpecUpdateStrategy {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecUpdateStrategy
		return ret
	}).(ElasticsearchSpecUpdateStrategyOutput)
}

func (o ElasticsearchSpecUpdateStrategyPtrOutput) ChangeBudget() ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecUpdateStrategy) *ElasticsearchSpecUpdateStrategyChangeBudget {
		if v == nil {
			return nil
		}
		return v.ChangeBudget
	}).(ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput)
}

// ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
type ElasticsearchSpecUpdateStrategyChangeBudget struct {
	// MaxSurge is the maximum number of new Pods that can be created exceeding the original number of Pods defined in
	// the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will
	// disable the restriction. Defaults to unbounded if not specified.
	MaxSurge *int `pulumi:"maxSurge"`
	// MaxUnavailable is the maximum number of Pods that can be unavailable (not ready) during the update due to
	// circumstances under the control of the operator. Setting a negative value will disable this restriction.
	// Defaults to 1 if not specified.
	MaxUnavailable *int `pulumi:"maxUnavailable"`
}

// ElasticsearchSpecUpdateStrategyChangeBudgetInput is an input type that accepts ElasticsearchSpecUpdateStrategyChangeBudgetArgs and ElasticsearchSpecUpdateStrategyChangeBudgetOutput values.
// You can construct a concrete instance of `ElasticsearchSpecUpdateStrategyChangeBudgetInput` via:
//
//	ElasticsearchSpecUpdateStrategyChangeBudgetArgs{...}
type ElasticsearchSpecUpdateStrategyChangeBudgetInput interface {
	pulumi.Input

	ToElasticsearchSpecUpdateStrategyChangeBudgetOutput() ElasticsearchSpecUpdateStrategyChangeBudgetOutput
	ToElasticsearchSpecUpdateStrategyChangeBudgetOutputWithContext(context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetOutput
}

// ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
type ElasticsearchSpecUpdateStrategyChangeBudgetArgs struct {
	// MaxSurge is the maximum number of new Pods that can be created exceeding the original number of Pods defined in
	// the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will
	// disable the restriction. Defaults to unbounded if not specified.
	MaxSurge pulumi.IntPtrInput `pulumi:"maxSurge"`
	// MaxUnavailable is the maximum number of Pods that can be unavailable (not ready) during the update due to
	// circumstances under the control of the operator. Setting a negative value will disable this restriction.
	// Defaults to 1 if not specified.
	MaxUnavailable pulumi.IntPtrInput `pulumi:"maxUnavailable"`
}

func (ElasticsearchSpecUpdateStrategyChangeBudgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecUpdateStrategyChangeBudget)(nil)).Elem()
}

func (i ElasticsearchSpecUpdateStrategyChangeBudgetArgs) ToElasticsearchSpecUpdateStrategyChangeBudgetOutput() ElasticsearchSpecUpdateStrategyChangeBudgetOutput {
	return i.ToElasticsearchSpecUpdateStrategyChangeBudgetOutputWithContext(context.Background())
}

func (i ElasticsearchSpecUpdateStrategyChangeBudgetArgs) ToElasticsearchSpecUpdateStrategyChangeBudgetOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyChangeBudgetOutput)
}

func (i ElasticsearchSpecUpdateStrategyChangeBudgetArgs) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return i.ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecUpdateStrategyChangeBudgetArgs) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyChangeBudgetOutput).ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(ctx)
}

// ElasticsearchSpecUpdateStrategyChangeBudgetPtrInput is an input type that accepts ElasticsearchSpecUpdateStrategyChangeBudgetArgs, ElasticsearchSpecUpdateStrategyChangeBudgetPtr and ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecUpdateStrategyChangeBudgetPtrInput` via:
//
//	        ElasticsearchSpecUpdateStrategyChangeBudgetArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecUpdateStrategyChangeBudgetPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput
	ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput
}

type elasticsearchSpecUpdateStrategyChangeBudgetPtrType ElasticsearchSpecUpdateStrategyChangeBudgetArgs

func ElasticsearchSpecUpdateStrategyChangeBudgetPtr(v *ElasticsearchSpecUpdateStrategyChangeBudgetArgs) ElasticsearchSpecUpdateStrategyChangeBudgetPtrInput {
	return (*elasticsearchSpecUpdateStrategyChangeBudgetPtrType)(v)
}

func (*elasticsearchSpecUpdateStrategyChangeBudgetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecUpdateStrategyChangeBudget)(nil)).Elem()
}

func (i *elasticsearchSpecUpdateStrategyChangeBudgetPtrType) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return i.ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecUpdateStrategyChangeBudgetPtrType) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput)
}

// ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
type ElasticsearchSpecUpdateStrategyChangeBudgetOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecUpdateStrategyChangeBudgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecUpdateStrategyChangeBudget)(nil)).Elem()
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetOutput() ElasticsearchSpecUpdateStrategyChangeBudgetOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return o.ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecUpdateStrategyChangeBudget) *ElasticsearchSpecUpdateStrategyChangeBudget {
		return &v
	}).(ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput)
}

// MaxSurge is the maximum number of new Pods that can be created exceeding the original number of Pods defined in
// the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will
// disable the restriction. Defaults to unbounded if not specified.
func (o ElasticsearchSpecUpdateStrategyChangeBudgetOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecUpdateStrategyChangeBudget) *int { return v.MaxSurge }).(pulumi.IntPtrOutput)
}

// MaxUnavailable is the maximum number of Pods that can be unavailable (not ready) during the update due to
// circumstances under the control of the operator. Setting a negative value will disable this restriction.
// Defaults to 1 if not specified.
func (o ElasticsearchSpecUpdateStrategyChangeBudgetOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecUpdateStrategyChangeBudget) *int { return v.MaxUnavailable }).(pulumi.IntPtrOutput)
}

type ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecUpdateStrategyChangeBudget)(nil)).Elem()
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput) Elem() ElasticsearchSpecUpdateStrategyChangeBudgetOutput {
	return o.ApplyT(func(v *ElasticsearchSpecUpdateStrategyChangeBudget) ElasticsearchSpecUpdateStrategyChangeBudget {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecUpdateStrategyChangeBudget
		return ret
	}).(ElasticsearchSpecUpdateStrategyChangeBudgetOutput)
}

// MaxSurge is the maximum number of new Pods that can be created exceeding the original number of Pods defined in
// the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will
// disable the restriction. Defaults to unbounded if not specified.
func (o ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecUpdateStrategyChangeBudget) *int {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.IntPtrOutput)
}

// MaxUnavailable is the maximum number of Pods that can be unavailable (not ready) during the update due to
// circumstances under the control of the operator. Setting a negative value will disable this restriction.
// Defaults to 1 if not specified.
func (o ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecUpdateStrategyChangeBudget) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.IntPtrOutput)
}

// ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
type ElasticsearchSpecUpdateStrategyChangeBudgetPatch struct {
	// MaxSurge is the maximum number of new Pods that can be created exceeding the original number of Pods defined in
	// the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will
	// disable the restriction. Defaults to unbounded if not specified.
	MaxSurge *int `pulumi:"maxSurge"`
	// MaxUnavailable is the maximum number of Pods that can be unavailable (not ready) during the update due to
	// circumstances under the control of the operator. Setting a negative value will disable this restriction.
	// Defaults to 1 if not specified.
	MaxUnavailable *int `pulumi:"maxUnavailable"`
}

// ElasticsearchSpecUpdateStrategyChangeBudgetPatchInput is an input type that accepts ElasticsearchSpecUpdateStrategyChangeBudgetPatchArgs and ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecUpdateStrategyChangeBudgetPatchInput` via:
//
//	ElasticsearchSpecUpdateStrategyChangeBudgetPatchArgs{...}
type ElasticsearchSpecUpdateStrategyChangeBudgetPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput
	ToElasticsearchSpecUpdateStrategyChangeBudgetPatchOutputWithContext(context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput
}

// ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
type ElasticsearchSpecUpdateStrategyChangeBudgetPatchArgs struct {
	// MaxSurge is the maximum number of new Pods that can be created exceeding the original number of Pods defined in
	// the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will
	// disable the restriction. Defaults to unbounded if not specified.
	MaxSurge pulumi.IntPtrInput `pulumi:"maxSurge"`
	// MaxUnavailable is the maximum number of Pods that can be unavailable (not ready) during the update due to
	// circumstances under the control of the operator. Setting a negative value will disable this restriction.
	// Defaults to 1 if not specified.
	MaxUnavailable pulumi.IntPtrInput `pulumi:"maxUnavailable"`
}

func (ElasticsearchSpecUpdateStrategyChangeBudgetPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecUpdateStrategyChangeBudgetPatch)(nil)).Elem()
}

func (i ElasticsearchSpecUpdateStrategyChangeBudgetPatchArgs) ToElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput {
	return i.ToElasticsearchSpecUpdateStrategyChangeBudgetPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecUpdateStrategyChangeBudgetPatchArgs) ToElasticsearchSpecUpdateStrategyChangeBudgetPatchOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput)
}

func (i ElasticsearchSpecUpdateStrategyChangeBudgetPatchArgs) ToElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput {
	return i.ToElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecUpdateStrategyChangeBudgetPatchArgs) ToElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput).ToElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrInput is an input type that accepts ElasticsearchSpecUpdateStrategyChangeBudgetPatchArgs, ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtr and ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrInput` via:
//
//	        ElasticsearchSpecUpdateStrategyChangeBudgetPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput
	ToElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutputWithContext(context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput
}

type elasticsearchSpecUpdateStrategyChangeBudgetPatchPtrType ElasticsearchSpecUpdateStrategyChangeBudgetPatchArgs

func ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtr(v *ElasticsearchSpecUpdateStrategyChangeBudgetPatchArgs) ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrInput {
	return (*elasticsearchSpecUpdateStrategyChangeBudgetPatchPtrType)(v)
}

func (*elasticsearchSpecUpdateStrategyChangeBudgetPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecUpdateStrategyChangeBudgetPatch)(nil)).Elem()
}

func (i *elasticsearchSpecUpdateStrategyChangeBudgetPatchPtrType) ToElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput {
	return i.ToElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecUpdateStrategyChangeBudgetPatchPtrType) ToElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput)
}

// ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
type ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecUpdateStrategyChangeBudgetPatch)(nil)).Elem()
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetPatchOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput {
	return o.ToElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecUpdateStrategyChangeBudgetPatch) *ElasticsearchSpecUpdateStrategyChangeBudgetPatch {
		return &v
	}).(ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput)
}

// MaxSurge is the maximum number of new Pods that can be created exceeding the original number of Pods defined in
// the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will
// disable the restriction. Defaults to unbounded if not specified.
func (o ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecUpdateStrategyChangeBudgetPatch) *int { return v.MaxSurge }).(pulumi.IntPtrOutput)
}

// MaxUnavailable is the maximum number of Pods that can be unavailable (not ready) during the update due to
// circumstances under the control of the operator. Setting a negative value will disable this restriction.
// Defaults to 1 if not specified.
func (o ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecUpdateStrategyChangeBudgetPatch) *int { return v.MaxUnavailable }).(pulumi.IntPtrOutput)
}

type ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecUpdateStrategyChangeBudgetPatch)(nil)).Elem()
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput) Elem() ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecUpdateStrategyChangeBudgetPatch) ElasticsearchSpecUpdateStrategyChangeBudgetPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecUpdateStrategyChangeBudgetPatch
		return ret
	}).(ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput)
}

// MaxSurge is the maximum number of new Pods that can be created exceeding the original number of Pods defined in
// the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will
// disable the restriction. Defaults to unbounded if not specified.
func (o ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecUpdateStrategyChangeBudgetPatch) *int {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.IntPtrOutput)
}

// MaxUnavailable is the maximum number of Pods that can be unavailable (not ready) during the update due to
// circumstances under the control of the operator. Setting a negative value will disable this restriction.
// Defaults to 1 if not specified.
func (o ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecUpdateStrategyChangeBudgetPatch) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.IntPtrOutput)
}

// UpdateStrategy specifies how updates to the cluster should be performed.
type ElasticsearchSpecUpdateStrategyPatch struct {
	ChangeBudget *ElasticsearchSpecUpdateStrategyChangeBudgetPatch `pulumi:"changeBudget"`
}

// ElasticsearchSpecUpdateStrategyPatchInput is an input type that accepts ElasticsearchSpecUpdateStrategyPatchArgs and ElasticsearchSpecUpdateStrategyPatchOutput values.
// You can construct a concrete instance of `ElasticsearchSpecUpdateStrategyPatchInput` via:
//
//	ElasticsearchSpecUpdateStrategyPatchArgs{...}
type ElasticsearchSpecUpdateStrategyPatchInput interface {
	pulumi.Input

	ToElasticsearchSpecUpdateStrategyPatchOutput() ElasticsearchSpecUpdateStrategyPatchOutput
	ToElasticsearchSpecUpdateStrategyPatchOutputWithContext(context.Context) ElasticsearchSpecUpdateStrategyPatchOutput
}

// UpdateStrategy specifies how updates to the cluster should be performed.
type ElasticsearchSpecUpdateStrategyPatchArgs struct {
	ChangeBudget ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrInput `pulumi:"changeBudget"`
}

func (ElasticsearchSpecUpdateStrategyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecUpdateStrategyPatch)(nil)).Elem()
}

func (i ElasticsearchSpecUpdateStrategyPatchArgs) ToElasticsearchSpecUpdateStrategyPatchOutput() ElasticsearchSpecUpdateStrategyPatchOutput {
	return i.ToElasticsearchSpecUpdateStrategyPatchOutputWithContext(context.Background())
}

func (i ElasticsearchSpecUpdateStrategyPatchArgs) ToElasticsearchSpecUpdateStrategyPatchOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyPatchOutput)
}

func (i ElasticsearchSpecUpdateStrategyPatchArgs) ToElasticsearchSpecUpdateStrategyPatchPtrOutput() ElasticsearchSpecUpdateStrategyPatchPtrOutput {
	return i.ToElasticsearchSpecUpdateStrategyPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecUpdateStrategyPatchArgs) ToElasticsearchSpecUpdateStrategyPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyPatchOutput).ToElasticsearchSpecUpdateStrategyPatchPtrOutputWithContext(ctx)
}

// ElasticsearchSpecUpdateStrategyPatchPtrInput is an input type that accepts ElasticsearchSpecUpdateStrategyPatchArgs, ElasticsearchSpecUpdateStrategyPatchPtr and ElasticsearchSpecUpdateStrategyPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecUpdateStrategyPatchPtrInput` via:
//
//	        ElasticsearchSpecUpdateStrategyPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecUpdateStrategyPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecUpdateStrategyPatchPtrOutput() ElasticsearchSpecUpdateStrategyPatchPtrOutput
	ToElasticsearchSpecUpdateStrategyPatchPtrOutputWithContext(context.Context) ElasticsearchSpecUpdateStrategyPatchPtrOutput
}

type elasticsearchSpecUpdateStrategyPatchPtrType ElasticsearchSpecUpdateStrategyPatchArgs

func ElasticsearchSpecUpdateStrategyPatchPtr(v *ElasticsearchSpecUpdateStrategyPatchArgs) ElasticsearchSpecUpdateStrategyPatchPtrInput {
	return (*elasticsearchSpecUpdateStrategyPatchPtrType)(v)
}

func (*elasticsearchSpecUpdateStrategyPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecUpdateStrategyPatch)(nil)).Elem()
}

func (i *elasticsearchSpecUpdateStrategyPatchPtrType) ToElasticsearchSpecUpdateStrategyPatchPtrOutput() ElasticsearchSpecUpdateStrategyPatchPtrOutput {
	return i.ToElasticsearchSpecUpdateStrategyPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecUpdateStrategyPatchPtrType) ToElasticsearchSpecUpdateStrategyPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyPatchPtrOutput)
}

// UpdateStrategy specifies how updates to the cluster should be performed.
type ElasticsearchSpecUpdateStrategyPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecUpdateStrategyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecUpdateStrategyPatch)(nil)).Elem()
}

func (o ElasticsearchSpecUpdateStrategyPatchOutput) ToElasticsearchSpecUpdateStrategyPatchOutput() ElasticsearchSpecUpdateStrategyPatchOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyPatchOutput) ToElasticsearchSpecUpdateStrategyPatchOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyPatchOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyPatchOutput) ToElasticsearchSpecUpdateStrategyPatchPtrOutput() ElasticsearchSpecUpdateStrategyPatchPtrOutput {
	return o.ToElasticsearchSpecUpdateStrategyPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecUpdateStrategyPatchOutput) ToElasticsearchSpecUpdateStrategyPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecUpdateStrategyPatch) *ElasticsearchSpecUpdateStrategyPatch {
		return &v
	}).(ElasticsearchSpecUpdateStrategyPatchPtrOutput)
}

func (o ElasticsearchSpecUpdateStrategyPatchOutput) ChangeBudget() ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecUpdateStrategyPatch) *ElasticsearchSpecUpdateStrategyChangeBudgetPatch {
		return v.ChangeBudget
	}).(ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput)
}

type ElasticsearchSpecUpdateStrategyPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecUpdateStrategyPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecUpdateStrategyPatch)(nil)).Elem()
}

func (o ElasticsearchSpecUpdateStrategyPatchPtrOutput) ToElasticsearchSpecUpdateStrategyPatchPtrOutput() ElasticsearchSpecUpdateStrategyPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyPatchPtrOutput) ToElasticsearchSpecUpdateStrategyPatchPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyPatchPtrOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyPatchPtrOutput) Elem() ElasticsearchSpecUpdateStrategyPatchOutput {
	return o.ApplyT(func(v *ElasticsearchSpecUpdateStrategyPatch) ElasticsearchSpecUpdateStrategyPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecUpdateStrategyPatch
		return ret
	}).(ElasticsearchSpecUpdateStrategyPatchOutput)
}

func (o ElasticsearchSpecUpdateStrategyPatchPtrOutput) ChangeBudget() ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecUpdateStrategyPatch) *ElasticsearchSpecUpdateStrategyChangeBudgetPatch {
		if v == nil {
			return nil
		}
		return v.ChangeBudget
	}).(ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput)
}

// ElasticsearchStatus represents the observed state of Elasticsearch.
type ElasticsearchStatus struct {
	// AvailableNodes is the number of available instances.
	AvailableNodes *int `pulumi:"availableNodes"`
	// Conditions holds the current service state of an Elasticsearch cluster.
	// **This API is in technical preview and may be changed or removed in a future release.**
	Conditions []ElasticsearchStatusConditions `pulumi:"conditions"`
	// ElasticsearchHealth is the health of the cluster as returned by the health API.
	Health               *string                                  `pulumi:"health"`
	InProgressOperations *ElasticsearchStatusInProgressOperations `pulumi:"inProgressOperations"`
	// AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that
	// have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
	MonitoringAssociationStatus map[string]string `pulumi:"monitoringAssociationStatus"`
	// ObservedGeneration is the most recent generation observed for this Elasticsearch cluster.
	// It corresponds to the metadata generation, which is updated on mutation by the API Server.
	// If the generation observed in status diverges from the generation in metadata, the Elasticsearch
	// controller has not yet processed the changes contained in the Elasticsearch specification.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
	Phase *string `pulumi:"phase"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version *string `pulumi:"version"`
}

// ElasticsearchStatusInput is an input type that accepts ElasticsearchStatusArgs and ElasticsearchStatusOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInput` via:
//
//	ElasticsearchStatusArgs{...}
type ElasticsearchStatusInput interface {
	pulumi.Input

	ToElasticsearchStatusOutput() ElasticsearchStatusOutput
	ToElasticsearchStatusOutputWithContext(context.Context) ElasticsearchStatusOutput
}

// ElasticsearchStatus represents the observed state of Elasticsearch.
type ElasticsearchStatusArgs struct {
	// AvailableNodes is the number of available instances.
	AvailableNodes pulumi.IntPtrInput `pulumi:"availableNodes"`
	// Conditions holds the current service state of an Elasticsearch cluster.
	// **This API is in technical preview and may be changed or removed in a future release.**
	Conditions ElasticsearchStatusConditionsArrayInput `pulumi:"conditions"`
	// ElasticsearchHealth is the health of the cluster as returned by the health API.
	Health               pulumi.StringPtrInput                           `pulumi:"health"`
	InProgressOperations ElasticsearchStatusInProgressOperationsPtrInput `pulumi:"inProgressOperations"`
	// AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that
	// have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
	MonitoringAssociationStatus pulumi.StringMapInput `pulumi:"monitoringAssociationStatus"`
	// ObservedGeneration is the most recent generation observed for this Elasticsearch cluster.
	// It corresponds to the metadata generation, which is updated on mutation by the API Server.
	// If the generation observed in status diverges from the generation in metadata, the Elasticsearch
	// controller has not yet processed the changes contained in the Elasticsearch specification.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ElasticsearchStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatus)(nil)).Elem()
}

func (i ElasticsearchStatusArgs) ToElasticsearchStatusOutput() ElasticsearchStatusOutput {
	return i.ToElasticsearchStatusOutputWithContext(context.Background())
}

func (i ElasticsearchStatusArgs) ToElasticsearchStatusOutputWithContext(ctx context.Context) ElasticsearchStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusOutput)
}

func (i ElasticsearchStatusArgs) ToElasticsearchStatusPtrOutput() ElasticsearchStatusPtrOutput {
	return i.ToElasticsearchStatusPtrOutputWithContext(context.Background())
}

func (i ElasticsearchStatusArgs) ToElasticsearchStatusPtrOutputWithContext(ctx context.Context) ElasticsearchStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusOutput).ToElasticsearchStatusPtrOutputWithContext(ctx)
}

// ElasticsearchStatusPtrInput is an input type that accepts ElasticsearchStatusArgs, ElasticsearchStatusPtr and ElasticsearchStatusPtrOutput values.
// You can construct a concrete instance of `ElasticsearchStatusPtrInput` via:
//
//	        ElasticsearchStatusArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchStatusPtrInput interface {
	pulumi.Input

	ToElasticsearchStatusPtrOutput() ElasticsearchStatusPtrOutput
	ToElasticsearchStatusPtrOutputWithContext(context.Context) ElasticsearchStatusPtrOutput
}

type elasticsearchStatusPtrType ElasticsearchStatusArgs

func ElasticsearchStatusPtr(v *ElasticsearchStatusArgs) ElasticsearchStatusPtrInput {
	return (*elasticsearchStatusPtrType)(v)
}

func (*elasticsearchStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatus)(nil)).Elem()
}

func (i *elasticsearchStatusPtrType) ToElasticsearchStatusPtrOutput() ElasticsearchStatusPtrOutput {
	return i.ToElasticsearchStatusPtrOutputWithContext(context.Background())
}

func (i *elasticsearchStatusPtrType) ToElasticsearchStatusPtrOutputWithContext(ctx context.Context) ElasticsearchStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusPtrOutput)
}

// ElasticsearchStatus represents the observed state of Elasticsearch.
type ElasticsearchStatusOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatus)(nil)).Elem()
}

func (o ElasticsearchStatusOutput) ToElasticsearchStatusOutput() ElasticsearchStatusOutput {
	return o
}

func (o ElasticsearchStatusOutput) ToElasticsearchStatusOutputWithContext(ctx context.Context) ElasticsearchStatusOutput {
	return o
}

func (o ElasticsearchStatusOutput) ToElasticsearchStatusPtrOutput() ElasticsearchStatusPtrOutput {
	return o.ToElasticsearchStatusPtrOutputWithContext(context.Background())
}

func (o ElasticsearchStatusOutput) ToElasticsearchStatusPtrOutputWithContext(ctx context.Context) ElasticsearchStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchStatus) *ElasticsearchStatus {
		return &v
	}).(ElasticsearchStatusPtrOutput)
}

// AvailableNodes is the number of available instances.
func (o ElasticsearchStatusOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatus) *int { return v.AvailableNodes }).(pulumi.IntPtrOutput)
}

// Conditions holds the current service state of an Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
func (o ElasticsearchStatusOutput) Conditions() ElasticsearchStatusConditionsArrayOutput {
	return o.ApplyT(func(v ElasticsearchStatus) []ElasticsearchStatusConditions { return v.Conditions }).(ElasticsearchStatusConditionsArrayOutput)
}

// ElasticsearchHealth is the health of the cluster as returned by the health API.
func (o ElasticsearchStatusOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatus) *string { return v.Health }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchStatusOutput) InProgressOperations() ElasticsearchStatusInProgressOperationsPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatus) *ElasticsearchStatusInProgressOperations { return v.InProgressOperations }).(ElasticsearchStatusInProgressOperationsPtrOutput)
}

// AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that
// have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
func (o ElasticsearchStatusOutput) MonitoringAssociationStatus() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchStatus) map[string]string { return v.MonitoringAssociationStatus }).(pulumi.StringMapOutput)
}

// ObservedGeneration is the most recent generation observed for this Elasticsearch cluster.
// It corresponds to the metadata generation, which is updated on mutation by the API Server.
// If the generation observed in status diverges from the generation in metadata, the Elasticsearch
// controller has not yet processed the changes contained in the Elasticsearch specification.
func (o ElasticsearchStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
func (o ElasticsearchStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o ElasticsearchStatusOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatus) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ElasticsearchStatusPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatus)(nil)).Elem()
}

func (o ElasticsearchStatusPtrOutput) ToElasticsearchStatusPtrOutput() ElasticsearchStatusPtrOutput {
	return o
}

func (o ElasticsearchStatusPtrOutput) ToElasticsearchStatusPtrOutputWithContext(ctx context.Context) ElasticsearchStatusPtrOutput {
	return o
}

func (o ElasticsearchStatusPtrOutput) Elem() ElasticsearchStatusOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) ElasticsearchStatus {
		if v != nil {
			return *v
		}
		var ret ElasticsearchStatus
		return ret
	}).(ElasticsearchStatusOutput)
}

// AvailableNodes is the number of available instances.
func (o ElasticsearchStatusPtrOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableNodes
	}).(pulumi.IntPtrOutput)
}

// Conditions holds the current service state of an Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
func (o ElasticsearchStatusPtrOutput) Conditions() ElasticsearchStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) []ElasticsearchStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ElasticsearchStatusConditionsArrayOutput)
}

// ElasticsearchHealth is the health of the cluster as returned by the health API.
func (o ElasticsearchStatusPtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Health
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchStatusPtrOutput) InProgressOperations() ElasticsearchStatusInProgressOperationsPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) *ElasticsearchStatusInProgressOperations {
		if v == nil {
			return nil
		}
		return v.InProgressOperations
	}).(ElasticsearchStatusInProgressOperationsPtrOutput)
}

// AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that
// have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
func (o ElasticsearchStatusPtrOutput) MonitoringAssociationStatus() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.MonitoringAssociationStatus
	}).(pulumi.StringMapOutput)
}

// ObservedGeneration is the most recent generation observed for this Elasticsearch cluster.
// It corresponds to the metadata generation, which is updated on mutation by the API Server.
// If the generation observed in status diverges from the generation in metadata, the Elasticsearch
// controller has not yet processed the changes contained in the Elasticsearch specification.
func (o ElasticsearchStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
func (o ElasticsearchStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o ElasticsearchStatusPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Condition represents Elasticsearch resource's condition.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusConditions struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	Status             *string `pulumi:"status"`
	// ConditionType defines the condition of an Elasticsearch resource.
	Type *string `pulumi:"type"`
}

// ElasticsearchStatusConditionsInput is an input type that accepts ElasticsearchStatusConditionsArgs and ElasticsearchStatusConditionsOutput values.
// You can construct a concrete instance of `ElasticsearchStatusConditionsInput` via:
//
//	ElasticsearchStatusConditionsArgs{...}
type ElasticsearchStatusConditionsInput interface {
	pulumi.Input

	ToElasticsearchStatusConditionsOutput() ElasticsearchStatusConditionsOutput
	ToElasticsearchStatusConditionsOutputWithContext(context.Context) ElasticsearchStatusConditionsOutput
}

// Condition represents Elasticsearch resource's condition.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusConditionsArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	Status             pulumi.StringPtrInput `pulumi:"status"`
	// ConditionType defines the condition of an Elasticsearch resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ElasticsearchStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusConditions)(nil)).Elem()
}

func (i ElasticsearchStatusConditionsArgs) ToElasticsearchStatusConditionsOutput() ElasticsearchStatusConditionsOutput {
	return i.ToElasticsearchStatusConditionsOutputWithContext(context.Background())
}

func (i ElasticsearchStatusConditionsArgs) ToElasticsearchStatusConditionsOutputWithContext(ctx context.Context) ElasticsearchStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusConditionsOutput)
}

// ElasticsearchStatusConditionsArrayInput is an input type that accepts ElasticsearchStatusConditionsArray and ElasticsearchStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchStatusConditionsArrayInput` via:
//
//	ElasticsearchStatusConditionsArray{ ElasticsearchStatusConditionsArgs{...} }
type ElasticsearchStatusConditionsArrayInput interface {
	pulumi.Input

	ToElasticsearchStatusConditionsArrayOutput() ElasticsearchStatusConditionsArrayOutput
	ToElasticsearchStatusConditionsArrayOutputWithContext(context.Context) ElasticsearchStatusConditionsArrayOutput
}

type ElasticsearchStatusConditionsArray []ElasticsearchStatusConditionsInput

func (ElasticsearchStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusConditions)(nil)).Elem()
}

func (i ElasticsearchStatusConditionsArray) ToElasticsearchStatusConditionsArrayOutput() ElasticsearchStatusConditionsArrayOutput {
	return i.ToElasticsearchStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchStatusConditionsArray) ToElasticsearchStatusConditionsArrayOutputWithContext(ctx context.Context) ElasticsearchStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusConditionsArrayOutput)
}

// Condition represents Elasticsearch resource's condition.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusConditionsOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusConditions)(nil)).Elem()
}

func (o ElasticsearchStatusConditionsOutput) ToElasticsearchStatusConditionsOutput() ElasticsearchStatusConditionsOutput {
	return o
}

func (o ElasticsearchStatusConditionsOutput) ToElasticsearchStatusConditionsOutputWithContext(ctx context.Context) ElasticsearchStatusConditionsOutput {
	return o
}

func (o ElasticsearchStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// ConditionType defines the condition of an Elasticsearch resource.
func (o ElasticsearchStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ElasticsearchStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusConditions)(nil)).Elem()
}

func (o ElasticsearchStatusConditionsArrayOutput) ToElasticsearchStatusConditionsArrayOutput() ElasticsearchStatusConditionsArrayOutput {
	return o
}

func (o ElasticsearchStatusConditionsArrayOutput) ToElasticsearchStatusConditionsArrayOutputWithContext(ctx context.Context) ElasticsearchStatusConditionsArrayOutput {
	return o
}

func (o ElasticsearchStatusConditionsArrayOutput) Index(i pulumi.IntInput) ElasticsearchStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchStatusConditions {
		return vs[0].([]ElasticsearchStatusConditions)[vs[1].(int)]
	}).(ElasticsearchStatusConditionsOutput)
}

// Condition represents Elasticsearch resource's condition.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusConditionsPatch struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	Status             *string `pulumi:"status"`
	// ConditionType defines the condition of an Elasticsearch resource.
	Type *string `pulumi:"type"`
}

// ElasticsearchStatusConditionsPatchInput is an input type that accepts ElasticsearchStatusConditionsPatchArgs and ElasticsearchStatusConditionsPatchOutput values.
// You can construct a concrete instance of `ElasticsearchStatusConditionsPatchInput` via:
//
//	ElasticsearchStatusConditionsPatchArgs{...}
type ElasticsearchStatusConditionsPatchInput interface {
	pulumi.Input

	ToElasticsearchStatusConditionsPatchOutput() ElasticsearchStatusConditionsPatchOutput
	ToElasticsearchStatusConditionsPatchOutputWithContext(context.Context) ElasticsearchStatusConditionsPatchOutput
}

// Condition represents Elasticsearch resource's condition.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusConditionsPatchArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	Status             pulumi.StringPtrInput `pulumi:"status"`
	// ConditionType defines the condition of an Elasticsearch resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ElasticsearchStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusConditionsPatch)(nil)).Elem()
}

func (i ElasticsearchStatusConditionsPatchArgs) ToElasticsearchStatusConditionsPatchOutput() ElasticsearchStatusConditionsPatchOutput {
	return i.ToElasticsearchStatusConditionsPatchOutputWithContext(context.Background())
}

func (i ElasticsearchStatusConditionsPatchArgs) ToElasticsearchStatusConditionsPatchOutputWithContext(ctx context.Context) ElasticsearchStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusConditionsPatchOutput)
}

// ElasticsearchStatusConditionsPatchArrayInput is an input type that accepts ElasticsearchStatusConditionsPatchArray and ElasticsearchStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchStatusConditionsPatchArrayInput` via:
//
//	ElasticsearchStatusConditionsPatchArray{ ElasticsearchStatusConditionsPatchArgs{...} }
type ElasticsearchStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchStatusConditionsPatchArrayOutput() ElasticsearchStatusConditionsPatchArrayOutput
	ToElasticsearchStatusConditionsPatchArrayOutputWithContext(context.Context) ElasticsearchStatusConditionsPatchArrayOutput
}

type ElasticsearchStatusConditionsPatchArray []ElasticsearchStatusConditionsPatchInput

func (ElasticsearchStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusConditionsPatch)(nil)).Elem()
}

func (i ElasticsearchStatusConditionsPatchArray) ToElasticsearchStatusConditionsPatchArrayOutput() ElasticsearchStatusConditionsPatchArrayOutput {
	return i.ToElasticsearchStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchStatusConditionsPatchArray) ToElasticsearchStatusConditionsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusConditionsPatchArrayOutput)
}

// Condition represents Elasticsearch resource's condition.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusConditionsPatch)(nil)).Elem()
}

func (o ElasticsearchStatusConditionsPatchOutput) ToElasticsearchStatusConditionsPatchOutput() ElasticsearchStatusConditionsPatchOutput {
	return o
}

func (o ElasticsearchStatusConditionsPatchOutput) ToElasticsearchStatusConditionsPatchOutputWithContext(ctx context.Context) ElasticsearchStatusConditionsPatchOutput {
	return o
}

func (o ElasticsearchStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// ConditionType defines the condition of an Elasticsearch resource.
func (o ElasticsearchStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ElasticsearchStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusConditionsPatch)(nil)).Elem()
}

func (o ElasticsearchStatusConditionsPatchArrayOutput) ToElasticsearchStatusConditionsPatchArrayOutput() ElasticsearchStatusConditionsPatchArrayOutput {
	return o
}

func (o ElasticsearchStatusConditionsPatchArrayOutput) ToElasticsearchStatusConditionsPatchArrayOutputWithContext(ctx context.Context) ElasticsearchStatusConditionsPatchArrayOutput {
	return o
}

func (o ElasticsearchStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchStatusConditionsPatch {
		return vs[0].([]ElasticsearchStatusConditionsPatch)[vs[1].(int)]
	}).(ElasticsearchStatusConditionsPatchOutput)
}

// InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperations struct {
	Downscale *ElasticsearchStatusInProgressOperationsDownscale `pulumi:"downscale"`
	Upgrade   *ElasticsearchStatusInProgressOperationsUpgrade   `pulumi:"upgrade"`
	Upscale   *ElasticsearchStatusInProgressOperationsUpscale   `pulumi:"upscale"`
}

// ElasticsearchStatusInProgressOperationsInput is an input type that accepts ElasticsearchStatusInProgressOperationsArgs and ElasticsearchStatusInProgressOperationsOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsInput` via:
//
//	ElasticsearchStatusInProgressOperationsArgs{...}
type ElasticsearchStatusInProgressOperationsInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsOutput() ElasticsearchStatusInProgressOperationsOutput
	ToElasticsearchStatusInProgressOperationsOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsOutput
}

// InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsArgs struct {
	Downscale ElasticsearchStatusInProgressOperationsDownscalePtrInput `pulumi:"downscale"`
	Upgrade   ElasticsearchStatusInProgressOperationsUpgradePtrInput   `pulumi:"upgrade"`
	Upscale   ElasticsearchStatusInProgressOperationsUpscalePtrInput   `pulumi:"upscale"`
}

func (ElasticsearchStatusInProgressOperationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperations)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsArgs) ToElasticsearchStatusInProgressOperationsOutput() ElasticsearchStatusInProgressOperationsOutput {
	return i.ToElasticsearchStatusInProgressOperationsOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsArgs) ToElasticsearchStatusInProgressOperationsOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsOutput)
}

func (i ElasticsearchStatusInProgressOperationsArgs) ToElasticsearchStatusInProgressOperationsPtrOutput() ElasticsearchStatusInProgressOperationsPtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsArgs) ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsOutput).ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(ctx)
}

// ElasticsearchStatusInProgressOperationsPtrInput is an input type that accepts ElasticsearchStatusInProgressOperationsArgs, ElasticsearchStatusInProgressOperationsPtr and ElasticsearchStatusInProgressOperationsPtrOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsPtrInput` via:
//
//	        ElasticsearchStatusInProgressOperationsArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchStatusInProgressOperationsPtrInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsPtrOutput() ElasticsearchStatusInProgressOperationsPtrOutput
	ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsPtrOutput
}

type elasticsearchStatusInProgressOperationsPtrType ElasticsearchStatusInProgressOperationsArgs

func ElasticsearchStatusInProgressOperationsPtr(v *ElasticsearchStatusInProgressOperationsArgs) ElasticsearchStatusInProgressOperationsPtrInput {
	return (*elasticsearchStatusInProgressOperationsPtrType)(v)
}

func (*elasticsearchStatusInProgressOperationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperations)(nil)).Elem()
}

func (i *elasticsearchStatusInProgressOperationsPtrType) ToElasticsearchStatusInProgressOperationsPtrOutput() ElasticsearchStatusInProgressOperationsPtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(context.Background())
}

func (i *elasticsearchStatusInProgressOperationsPtrType) ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsPtrOutput)
}

// InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperations)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsOutput) ToElasticsearchStatusInProgressOperationsOutput() ElasticsearchStatusInProgressOperationsOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsOutput) ToElasticsearchStatusInProgressOperationsOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsOutput) ToElasticsearchStatusInProgressOperationsPtrOutput() ElasticsearchStatusInProgressOperationsPtrOutput {
	return o.ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(context.Background())
}

func (o ElasticsearchStatusInProgressOperationsOutput) ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchStatusInProgressOperations) *ElasticsearchStatusInProgressOperations {
		return &v
	}).(ElasticsearchStatusInProgressOperationsPtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsOutput) Downscale() ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperations) *ElasticsearchStatusInProgressOperationsDownscale {
		return v.Downscale
	}).(ElasticsearchStatusInProgressOperationsDownscalePtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsOutput) Upgrade() ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperations) *ElasticsearchStatusInProgressOperationsUpgrade {
		return v.Upgrade
	}).(ElasticsearchStatusInProgressOperationsUpgradePtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsOutput) Upscale() ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperations) *ElasticsearchStatusInProgressOperationsUpscale {
		return v.Upscale
	}).(ElasticsearchStatusInProgressOperationsUpscalePtrOutput)
}

type ElasticsearchStatusInProgressOperationsPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperations)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsPtrOutput) ToElasticsearchStatusInProgressOperationsPtrOutput() ElasticsearchStatusInProgressOperationsPtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsPtrOutput) ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsPtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsPtrOutput) Elem() ElasticsearchStatusInProgressOperationsOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperations) ElasticsearchStatusInProgressOperations {
		if v != nil {
			return *v
		}
		var ret ElasticsearchStatusInProgressOperations
		return ret
	}).(ElasticsearchStatusInProgressOperationsOutput)
}

func (o ElasticsearchStatusInProgressOperationsPtrOutput) Downscale() ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperations) *ElasticsearchStatusInProgressOperationsDownscale {
		if v == nil {
			return nil
		}
		return v.Downscale
	}).(ElasticsearchStatusInProgressOperationsDownscalePtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsPtrOutput) Upgrade() ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperations) *ElasticsearchStatusInProgressOperationsUpgrade {
		if v == nil {
			return nil
		}
		return v.Upgrade
	}).(ElasticsearchStatusInProgressOperationsUpgradePtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsPtrOutput) Upscale() ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperations) *ElasticsearchStatusInProgressOperationsUpscale {
		if v == nil {
			return nil
		}
		return v.Upscale
	}).(ElasticsearchStatusInProgressOperationsUpscalePtrOutput)
}

// DownscaleOperation provides details about in progress downscale operations.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscale struct {
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// Nodes which are scheduled to be removed from the cluster.
	Nodes []ElasticsearchStatusInProgressOperationsDownscaleNodes `pulumi:"nodes"`
	// Stalled represents a state where no progress can be made.
	// It is only available for clusters managed with the Elasticsearch shutdown API.
	Stalled *bool `pulumi:"stalled"`
}

// ElasticsearchStatusInProgressOperationsDownscaleInput is an input type that accepts ElasticsearchStatusInProgressOperationsDownscaleArgs and ElasticsearchStatusInProgressOperationsDownscaleOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsDownscaleInput` via:
//
//	ElasticsearchStatusInProgressOperationsDownscaleArgs{...}
type ElasticsearchStatusInProgressOperationsDownscaleInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsDownscaleOutput() ElasticsearchStatusInProgressOperationsDownscaleOutput
	ToElasticsearchStatusInProgressOperationsDownscaleOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsDownscaleOutput
}

// DownscaleOperation provides details about in progress downscale operations.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscaleArgs struct {
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// Nodes which are scheduled to be removed from the cluster.
	Nodes ElasticsearchStatusInProgressOperationsDownscaleNodesArrayInput `pulumi:"nodes"`
	// Stalled represents a state where no progress can be made.
	// It is only available for clusters managed with the Elasticsearch shutdown API.
	Stalled pulumi.BoolPtrInput `pulumi:"stalled"`
}

func (ElasticsearchStatusInProgressOperationsDownscaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscale)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsDownscaleArgs) ToElasticsearchStatusInProgressOperationsDownscaleOutput() ElasticsearchStatusInProgressOperationsDownscaleOutput {
	return i.ToElasticsearchStatusInProgressOperationsDownscaleOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsDownscaleArgs) ToElasticsearchStatusInProgressOperationsDownscaleOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsDownscaleOutput)
}

func (i ElasticsearchStatusInProgressOperationsDownscaleArgs) ToElasticsearchStatusInProgressOperationsDownscalePtrOutput() ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsDownscaleArgs) ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsDownscaleOutput).ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(ctx)
}

// ElasticsearchStatusInProgressOperationsDownscalePtrInput is an input type that accepts ElasticsearchStatusInProgressOperationsDownscaleArgs, ElasticsearchStatusInProgressOperationsDownscalePtr and ElasticsearchStatusInProgressOperationsDownscalePtrOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsDownscalePtrInput` via:
//
//	        ElasticsearchStatusInProgressOperationsDownscaleArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchStatusInProgressOperationsDownscalePtrInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsDownscalePtrOutput() ElasticsearchStatusInProgressOperationsDownscalePtrOutput
	ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsDownscalePtrOutput
}

type elasticsearchStatusInProgressOperationsDownscalePtrType ElasticsearchStatusInProgressOperationsDownscaleArgs

func ElasticsearchStatusInProgressOperationsDownscalePtr(v *ElasticsearchStatusInProgressOperationsDownscaleArgs) ElasticsearchStatusInProgressOperationsDownscalePtrInput {
	return (*elasticsearchStatusInProgressOperationsDownscalePtrType)(v)
}

func (*elasticsearchStatusInProgressOperationsDownscalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsDownscale)(nil)).Elem()
}

func (i *elasticsearchStatusInProgressOperationsDownscalePtrType) ToElasticsearchStatusInProgressOperationsDownscalePtrOutput() ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(context.Background())
}

func (i *elasticsearchStatusInProgressOperationsDownscalePtrType) ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsDownscalePtrOutput)
}

// DownscaleOperation provides details about in progress downscale operations.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscaleOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsDownscaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscale)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsDownscaleOutput) ToElasticsearchStatusInProgressOperationsDownscaleOutput() ElasticsearchStatusInProgressOperationsDownscaleOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscaleOutput) ToElasticsearchStatusInProgressOperationsDownscaleOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscaleOutput) ToElasticsearchStatusInProgressOperationsDownscalePtrOutput() ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return o.ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(context.Background())
}

func (o ElasticsearchStatusInProgressOperationsDownscaleOutput) ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchStatusInProgressOperationsDownscale) *ElasticsearchStatusInProgressOperationsDownscale {
		return &v
	}).(ElasticsearchStatusInProgressOperationsDownscalePtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsDownscaleOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscale) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// Nodes which are scheduled to be removed from the cluster.
func (o ElasticsearchStatusInProgressOperationsDownscaleOutput) Nodes() ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscale) []ElasticsearchStatusInProgressOperationsDownscaleNodes {
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput)
}

// Stalled represents a state where no progress can be made.
// It is only available for clusters managed with the Elasticsearch shutdown API.
func (o ElasticsearchStatusInProgressOperationsDownscaleOutput) Stalled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscale) *bool { return v.Stalled }).(pulumi.BoolPtrOutput)
}

type ElasticsearchStatusInProgressOperationsDownscalePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsDownscalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsDownscale)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsDownscalePtrOutput) ToElasticsearchStatusInProgressOperationsDownscalePtrOutput() ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscalePtrOutput) ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscalePtrOutput) Elem() ElasticsearchStatusInProgressOperationsDownscaleOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsDownscale) ElasticsearchStatusInProgressOperationsDownscale {
		if v != nil {
			return *v
		}
		var ret ElasticsearchStatusInProgressOperationsDownscale
		return ret
	}).(ElasticsearchStatusInProgressOperationsDownscaleOutput)
}

func (o ElasticsearchStatusInProgressOperationsDownscalePtrOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsDownscale) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdatedTime
	}).(pulumi.StringPtrOutput)
}

// Nodes which are scheduled to be removed from the cluster.
func (o ElasticsearchStatusInProgressOperationsDownscalePtrOutput) Nodes() ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsDownscale) []ElasticsearchStatusInProgressOperationsDownscaleNodes {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput)
}

// Stalled represents a state where no progress can be made.
// It is only available for clusters managed with the Elasticsearch shutdown API.
func (o ElasticsearchStatusInProgressOperationsDownscalePtrOutput) Stalled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsDownscale) *bool {
		if v == nil {
			return nil
		}
		return v.Stalled
	}).(pulumi.BoolPtrOutput)
}

// DownscaledNode provides an overview of in progress changes applied by the operator to remove Elasticsearch nodes from the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscaleNodes struct {
	// Explanation provides details about an in progress node shutdown. It is only available for clusters managed with the
	// Elasticsearch shutdown API.
	Explanation *string `pulumi:"explanation"`
	// Name of the Elasticsearch node that should be removed.
	Name *string `pulumi:"name"`
	// Shutdown status as returned by the Elasticsearch shutdown API.
	// If the Elasticsearch shutdown API is not available, the shutdown status is then inferred from the remaining
	// shards on the nodes, as observed by the operator.
	ShutdownStatus *string `pulumi:"shutdownStatus"`
}

// ElasticsearchStatusInProgressOperationsDownscaleNodesInput is an input type that accepts ElasticsearchStatusInProgressOperationsDownscaleNodesArgs and ElasticsearchStatusInProgressOperationsDownscaleNodesOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsDownscaleNodesInput` via:
//
//	ElasticsearchStatusInProgressOperationsDownscaleNodesArgs{...}
type ElasticsearchStatusInProgressOperationsDownscaleNodesInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsDownscaleNodesOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesOutput
	ToElasticsearchStatusInProgressOperationsDownscaleNodesOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesOutput
}

// DownscaledNode provides an overview of in progress changes applied by the operator to remove Elasticsearch nodes from the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscaleNodesArgs struct {
	// Explanation provides details about an in progress node shutdown. It is only available for clusters managed with the
	// Elasticsearch shutdown API.
	Explanation pulumi.StringPtrInput `pulumi:"explanation"`
	// Name of the Elasticsearch node that should be removed.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Shutdown status as returned by the Elasticsearch shutdown API.
	// If the Elasticsearch shutdown API is not available, the shutdown status is then inferred from the remaining
	// shards on the nodes, as observed by the operator.
	ShutdownStatus pulumi.StringPtrInput `pulumi:"shutdownStatus"`
}

func (ElasticsearchStatusInProgressOperationsDownscaleNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscaleNodes)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsDownscaleNodesArgs) ToElasticsearchStatusInProgressOperationsDownscaleNodesOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesOutput {
	return i.ToElasticsearchStatusInProgressOperationsDownscaleNodesOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsDownscaleNodesArgs) ToElasticsearchStatusInProgressOperationsDownscaleNodesOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsDownscaleNodesOutput)
}

// ElasticsearchStatusInProgressOperationsDownscaleNodesArrayInput is an input type that accepts ElasticsearchStatusInProgressOperationsDownscaleNodesArray and ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsDownscaleNodesArrayInput` via:
//
//	ElasticsearchStatusInProgressOperationsDownscaleNodesArray{ ElasticsearchStatusInProgressOperationsDownscaleNodesArgs{...} }
type ElasticsearchStatusInProgressOperationsDownscaleNodesArrayInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput
	ToElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput
}

type ElasticsearchStatusInProgressOperationsDownscaleNodesArray []ElasticsearchStatusInProgressOperationsDownscaleNodesInput

func (ElasticsearchStatusInProgressOperationsDownscaleNodesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsDownscaleNodes)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsDownscaleNodesArray) ToElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput {
	return i.ToElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsDownscaleNodesArray) ToElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput)
}

// DownscaledNode provides an overview of in progress changes applied by the operator to remove Elasticsearch nodes from the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscaleNodesOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsDownscaleNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscaleNodes)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsDownscaleNodesOutput) ToElasticsearchStatusInProgressOperationsDownscaleNodesOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscaleNodesOutput) ToElasticsearchStatusInProgressOperationsDownscaleNodesOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesOutput {
	return o
}

// Explanation provides details about an in progress node shutdown. It is only available for clusters managed with the
// Elasticsearch shutdown API.
func (o ElasticsearchStatusInProgressOperationsDownscaleNodesOutput) Explanation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscaleNodes) *string { return v.Explanation }).(pulumi.StringPtrOutput)
}

// Name of the Elasticsearch node that should be removed.
func (o ElasticsearchStatusInProgressOperationsDownscaleNodesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscaleNodes) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Shutdown status as returned by the Elasticsearch shutdown API.
// If the Elasticsearch shutdown API is not available, the shutdown status is then inferred from the remaining
// shards on the nodes, as observed by the operator.
func (o ElasticsearchStatusInProgressOperationsDownscaleNodesOutput) ShutdownStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscaleNodes) *string { return v.ShutdownStatus }).(pulumi.StringPtrOutput)
}

type ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsDownscaleNodes)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput) ToElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput) ToElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput) Index(i pulumi.IntInput) ElasticsearchStatusInProgressOperationsDownscaleNodesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchStatusInProgressOperationsDownscaleNodes {
		return vs[0].([]ElasticsearchStatusInProgressOperationsDownscaleNodes)[vs[1].(int)]
	}).(ElasticsearchStatusInProgressOperationsDownscaleNodesOutput)
}

// DownscaledNode provides an overview of in progress changes applied by the operator to remove Elasticsearch nodes from the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscaleNodesPatch struct {
	// Explanation provides details about an in progress node shutdown. It is only available for clusters managed with the
	// Elasticsearch shutdown API.
	Explanation *string `pulumi:"explanation"`
	// Name of the Elasticsearch node that should be removed.
	Name *string `pulumi:"name"`
	// Shutdown status as returned by the Elasticsearch shutdown API.
	// If the Elasticsearch shutdown API is not available, the shutdown status is then inferred from the remaining
	// shards on the nodes, as observed by the operator.
	ShutdownStatus *string `pulumi:"shutdownStatus"`
}

// ElasticsearchStatusInProgressOperationsDownscaleNodesPatchInput is an input type that accepts ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArgs and ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsDownscaleNodesPatchInput` via:
//
//	ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArgs{...}
type ElasticsearchStatusInProgressOperationsDownscaleNodesPatchInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput
	ToElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput
}

// DownscaledNode provides an overview of in progress changes applied by the operator to remove Elasticsearch nodes from the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArgs struct {
	// Explanation provides details about an in progress node shutdown. It is only available for clusters managed with the
	// Elasticsearch shutdown API.
	Explanation pulumi.StringPtrInput `pulumi:"explanation"`
	// Name of the Elasticsearch node that should be removed.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Shutdown status as returned by the Elasticsearch shutdown API.
	// If the Elasticsearch shutdown API is not available, the shutdown status is then inferred from the remaining
	// shards on the nodes, as observed by the operator.
	ShutdownStatus pulumi.StringPtrInput `pulumi:"shutdownStatus"`
}

func (ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscaleNodesPatch)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArgs) ToElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput {
	return i.ToElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArgs) ToElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput)
}

// ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayInput is an input type that accepts ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArray and ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayInput` via:
//
//	ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArray{ ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArgs{...} }
type ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput
	ToElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput
}

type ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArray []ElasticsearchStatusInProgressOperationsDownscaleNodesPatchInput

func (ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsDownscaleNodesPatch)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArray) ToElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput {
	return i.ToElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArray) ToElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput)
}

// DownscaledNode provides an overview of in progress changes applied by the operator to remove Elasticsearch nodes from the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscaleNodesPatch)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput) ToElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput) ToElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput {
	return o
}

// Explanation provides details about an in progress node shutdown. It is only available for clusters managed with the
// Elasticsearch shutdown API.
func (o ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput) Explanation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscaleNodesPatch) *string { return v.Explanation }).(pulumi.StringPtrOutput)
}

// Name of the Elasticsearch node that should be removed.
func (o ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscaleNodesPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Shutdown status as returned by the Elasticsearch shutdown API.
// If the Elasticsearch shutdown API is not available, the shutdown status is then inferred from the remaining
// shards on the nodes, as observed by the operator.
func (o ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput) ShutdownStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscaleNodesPatch) *string { return v.ShutdownStatus }).(pulumi.StringPtrOutput)
}

type ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsDownscaleNodesPatch)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput) ToElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput) ToElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchStatusInProgressOperationsDownscaleNodesPatch {
		return vs[0].([]ElasticsearchStatusInProgressOperationsDownscaleNodesPatch)[vs[1].(int)]
	}).(ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput)
}

// DownscaleOperation provides details about in progress downscale operations.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscalePatch struct {
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// Nodes which are scheduled to be removed from the cluster.
	Nodes []ElasticsearchStatusInProgressOperationsDownscaleNodesPatch `pulumi:"nodes"`
	// Stalled represents a state where no progress can be made.
	// It is only available for clusters managed with the Elasticsearch shutdown API.
	Stalled *bool `pulumi:"stalled"`
}

// ElasticsearchStatusInProgressOperationsDownscalePatchInput is an input type that accepts ElasticsearchStatusInProgressOperationsDownscalePatchArgs and ElasticsearchStatusInProgressOperationsDownscalePatchOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsDownscalePatchInput` via:
//
//	ElasticsearchStatusInProgressOperationsDownscalePatchArgs{...}
type ElasticsearchStatusInProgressOperationsDownscalePatchInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsDownscalePatchOutput() ElasticsearchStatusInProgressOperationsDownscalePatchOutput
	ToElasticsearchStatusInProgressOperationsDownscalePatchOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsDownscalePatchOutput
}

// DownscaleOperation provides details about in progress downscale operations.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscalePatchArgs struct {
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// Nodes which are scheduled to be removed from the cluster.
	Nodes ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayInput `pulumi:"nodes"`
	// Stalled represents a state where no progress can be made.
	// It is only available for clusters managed with the Elasticsearch shutdown API.
	Stalled pulumi.BoolPtrInput `pulumi:"stalled"`
}

func (ElasticsearchStatusInProgressOperationsDownscalePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscalePatch)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsDownscalePatchArgs) ToElasticsearchStatusInProgressOperationsDownscalePatchOutput() ElasticsearchStatusInProgressOperationsDownscalePatchOutput {
	return i.ToElasticsearchStatusInProgressOperationsDownscalePatchOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsDownscalePatchArgs) ToElasticsearchStatusInProgressOperationsDownscalePatchOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscalePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsDownscalePatchOutput)
}

func (i ElasticsearchStatusInProgressOperationsDownscalePatchArgs) ToElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput() ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsDownscalePatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsDownscalePatchArgs) ToElasticsearchStatusInProgressOperationsDownscalePatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsDownscalePatchOutput).ToElasticsearchStatusInProgressOperationsDownscalePatchPtrOutputWithContext(ctx)
}

// ElasticsearchStatusInProgressOperationsDownscalePatchPtrInput is an input type that accepts ElasticsearchStatusInProgressOperationsDownscalePatchArgs, ElasticsearchStatusInProgressOperationsDownscalePatchPtr and ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsDownscalePatchPtrInput` via:
//
//	        ElasticsearchStatusInProgressOperationsDownscalePatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchStatusInProgressOperationsDownscalePatchPtrInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput() ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput
	ToElasticsearchStatusInProgressOperationsDownscalePatchPtrOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput
}

type elasticsearchStatusInProgressOperationsDownscalePatchPtrType ElasticsearchStatusInProgressOperationsDownscalePatchArgs

func ElasticsearchStatusInProgressOperationsDownscalePatchPtr(v *ElasticsearchStatusInProgressOperationsDownscalePatchArgs) ElasticsearchStatusInProgressOperationsDownscalePatchPtrInput {
	return (*elasticsearchStatusInProgressOperationsDownscalePatchPtrType)(v)
}

func (*elasticsearchStatusInProgressOperationsDownscalePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsDownscalePatch)(nil)).Elem()
}

func (i *elasticsearchStatusInProgressOperationsDownscalePatchPtrType) ToElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput() ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsDownscalePatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchStatusInProgressOperationsDownscalePatchPtrType) ToElasticsearchStatusInProgressOperationsDownscalePatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput)
}

// DownscaleOperation provides details about in progress downscale operations.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscalePatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsDownscalePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscalePatch)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsDownscalePatchOutput) ToElasticsearchStatusInProgressOperationsDownscalePatchOutput() ElasticsearchStatusInProgressOperationsDownscalePatchOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscalePatchOutput) ToElasticsearchStatusInProgressOperationsDownscalePatchOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscalePatchOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscalePatchOutput) ToElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput() ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput {
	return o.ToElasticsearchStatusInProgressOperationsDownscalePatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchStatusInProgressOperationsDownscalePatchOutput) ToElasticsearchStatusInProgressOperationsDownscalePatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchStatusInProgressOperationsDownscalePatch) *ElasticsearchStatusInProgressOperationsDownscalePatch {
		return &v
	}).(ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsDownscalePatchOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscalePatch) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// Nodes which are scheduled to be removed from the cluster.
func (o ElasticsearchStatusInProgressOperationsDownscalePatchOutput) Nodes() ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscalePatch) []ElasticsearchStatusInProgressOperationsDownscaleNodesPatch {
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput)
}

// Stalled represents a state where no progress can be made.
// It is only available for clusters managed with the Elasticsearch shutdown API.
func (o ElasticsearchStatusInProgressOperationsDownscalePatchOutput) Stalled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscalePatch) *bool { return v.Stalled }).(pulumi.BoolPtrOutput)
}

type ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsDownscalePatch)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput) ToElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput() ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput) ToElasticsearchStatusInProgressOperationsDownscalePatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput) Elem() ElasticsearchStatusInProgressOperationsDownscalePatchOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsDownscalePatch) ElasticsearchStatusInProgressOperationsDownscalePatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchStatusInProgressOperationsDownscalePatch
		return ret
	}).(ElasticsearchStatusInProgressOperationsDownscalePatchOutput)
}

func (o ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsDownscalePatch) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdatedTime
	}).(pulumi.StringPtrOutput)
}

// Nodes which are scheduled to be removed from the cluster.
func (o ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput) Nodes() ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsDownscalePatch) []ElasticsearchStatusInProgressOperationsDownscaleNodesPatch {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput)
}

// Stalled represents a state where no progress can be made.
// It is only available for clusters managed with the Elasticsearch shutdown API.
func (o ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput) Stalled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsDownscalePatch) *bool {
		if v == nil {
			return nil
		}
		return v.Stalled
	}).(pulumi.BoolPtrOutput)
}

// InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsPatch struct {
	Downscale *ElasticsearchStatusInProgressOperationsDownscalePatch `pulumi:"downscale"`
	Upgrade   *ElasticsearchStatusInProgressOperationsUpgradePatch   `pulumi:"upgrade"`
	Upscale   *ElasticsearchStatusInProgressOperationsUpscalePatch   `pulumi:"upscale"`
}

// ElasticsearchStatusInProgressOperationsPatchInput is an input type that accepts ElasticsearchStatusInProgressOperationsPatchArgs and ElasticsearchStatusInProgressOperationsPatchOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsPatchInput` via:
//
//	ElasticsearchStatusInProgressOperationsPatchArgs{...}
type ElasticsearchStatusInProgressOperationsPatchInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsPatchOutput() ElasticsearchStatusInProgressOperationsPatchOutput
	ToElasticsearchStatusInProgressOperationsPatchOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsPatchOutput
}

// InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsPatchArgs struct {
	Downscale ElasticsearchStatusInProgressOperationsDownscalePatchPtrInput `pulumi:"downscale"`
	Upgrade   ElasticsearchStatusInProgressOperationsUpgradePatchPtrInput   `pulumi:"upgrade"`
	Upscale   ElasticsearchStatusInProgressOperationsUpscalePatchPtrInput   `pulumi:"upscale"`
}

func (ElasticsearchStatusInProgressOperationsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsPatch)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsPatchArgs) ToElasticsearchStatusInProgressOperationsPatchOutput() ElasticsearchStatusInProgressOperationsPatchOutput {
	return i.ToElasticsearchStatusInProgressOperationsPatchOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsPatchArgs) ToElasticsearchStatusInProgressOperationsPatchOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsPatchOutput)
}

func (i ElasticsearchStatusInProgressOperationsPatchArgs) ToElasticsearchStatusInProgressOperationsPatchPtrOutput() ElasticsearchStatusInProgressOperationsPatchPtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsPatchArgs) ToElasticsearchStatusInProgressOperationsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsPatchOutput).ToElasticsearchStatusInProgressOperationsPatchPtrOutputWithContext(ctx)
}

// ElasticsearchStatusInProgressOperationsPatchPtrInput is an input type that accepts ElasticsearchStatusInProgressOperationsPatchArgs, ElasticsearchStatusInProgressOperationsPatchPtr and ElasticsearchStatusInProgressOperationsPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsPatchPtrInput` via:
//
//	        ElasticsearchStatusInProgressOperationsPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchStatusInProgressOperationsPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsPatchPtrOutput() ElasticsearchStatusInProgressOperationsPatchPtrOutput
	ToElasticsearchStatusInProgressOperationsPatchPtrOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsPatchPtrOutput
}

type elasticsearchStatusInProgressOperationsPatchPtrType ElasticsearchStatusInProgressOperationsPatchArgs

func ElasticsearchStatusInProgressOperationsPatchPtr(v *ElasticsearchStatusInProgressOperationsPatchArgs) ElasticsearchStatusInProgressOperationsPatchPtrInput {
	return (*elasticsearchStatusInProgressOperationsPatchPtrType)(v)
}

func (*elasticsearchStatusInProgressOperationsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsPatch)(nil)).Elem()
}

func (i *elasticsearchStatusInProgressOperationsPatchPtrType) ToElasticsearchStatusInProgressOperationsPatchPtrOutput() ElasticsearchStatusInProgressOperationsPatchPtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchStatusInProgressOperationsPatchPtrType) ToElasticsearchStatusInProgressOperationsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsPatchPtrOutput)
}

// InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsPatch)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsPatchOutput) ToElasticsearchStatusInProgressOperationsPatchOutput() ElasticsearchStatusInProgressOperationsPatchOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsPatchOutput) ToElasticsearchStatusInProgressOperationsPatchOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsPatchOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsPatchOutput) ToElasticsearchStatusInProgressOperationsPatchPtrOutput() ElasticsearchStatusInProgressOperationsPatchPtrOutput {
	return o.ToElasticsearchStatusInProgressOperationsPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchStatusInProgressOperationsPatchOutput) ToElasticsearchStatusInProgressOperationsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchStatusInProgressOperationsPatch) *ElasticsearchStatusInProgressOperationsPatch {
		return &v
	}).(ElasticsearchStatusInProgressOperationsPatchPtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsPatchOutput) Downscale() ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsPatch) *ElasticsearchStatusInProgressOperationsDownscalePatch {
		return v.Downscale
	}).(ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsPatchOutput) Upgrade() ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsPatch) *ElasticsearchStatusInProgressOperationsUpgradePatch {
		return v.Upgrade
	}).(ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsPatchOutput) Upscale() ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsPatch) *ElasticsearchStatusInProgressOperationsUpscalePatch {
		return v.Upscale
	}).(ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput)
}

type ElasticsearchStatusInProgressOperationsPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsPatch)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsPatchPtrOutput) ToElasticsearchStatusInProgressOperationsPatchPtrOutput() ElasticsearchStatusInProgressOperationsPatchPtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsPatchPtrOutput) ToElasticsearchStatusInProgressOperationsPatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsPatchPtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsPatchPtrOutput) Elem() ElasticsearchStatusInProgressOperationsPatchOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsPatch) ElasticsearchStatusInProgressOperationsPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchStatusInProgressOperationsPatch
		return ret
	}).(ElasticsearchStatusInProgressOperationsPatchOutput)
}

func (o ElasticsearchStatusInProgressOperationsPatchPtrOutput) Downscale() ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsPatch) *ElasticsearchStatusInProgressOperationsDownscalePatch {
		if v == nil {
			return nil
		}
		return v.Downscale
	}).(ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsPatchPtrOutput) Upgrade() ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsPatch) *ElasticsearchStatusInProgressOperationsUpgradePatch {
		if v == nil {
			return nil
		}
		return v.Upgrade
	}).(ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsPatchPtrOutput) Upscale() ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsPatch) *ElasticsearchStatusInProgressOperationsUpscalePatch {
		if v == nil {
			return nil
		}
		return v.Upscale
	}).(ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput)
}

// UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgrade struct {
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// Nodes that must be restarted for upgrade.
	Nodes []ElasticsearchStatusInProgressOperationsUpgradeNodes `pulumi:"nodes"`
}

// ElasticsearchStatusInProgressOperationsUpgradeInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpgradeArgs and ElasticsearchStatusInProgressOperationsUpgradeOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpgradeInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpgradeArgs{...}
type ElasticsearchStatusInProgressOperationsUpgradeInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpgradeOutput() ElasticsearchStatusInProgressOperationsUpgradeOutput
	ToElasticsearchStatusInProgressOperationsUpgradeOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpgradeOutput
}

// UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradeArgs struct {
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// Nodes that must be restarted for upgrade.
	Nodes ElasticsearchStatusInProgressOperationsUpgradeNodesArrayInput `pulumi:"nodes"`
}

func (ElasticsearchStatusInProgressOperationsUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgrade)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpgradeArgs) ToElasticsearchStatusInProgressOperationsUpgradeOutput() ElasticsearchStatusInProgressOperationsUpgradeOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpgradeOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpgradeArgs) ToElasticsearchStatusInProgressOperationsUpgradeOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpgradeOutput)
}

func (i ElasticsearchStatusInProgressOperationsUpgradeArgs) ToElasticsearchStatusInProgressOperationsUpgradePtrOutput() ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpgradeArgs) ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpgradeOutput).ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(ctx)
}

// ElasticsearchStatusInProgressOperationsUpgradePtrInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpgradeArgs, ElasticsearchStatusInProgressOperationsUpgradePtr and ElasticsearchStatusInProgressOperationsUpgradePtrOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpgradePtrInput` via:
//
//	        ElasticsearchStatusInProgressOperationsUpgradeArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchStatusInProgressOperationsUpgradePtrInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpgradePtrOutput() ElasticsearchStatusInProgressOperationsUpgradePtrOutput
	ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpgradePtrOutput
}

type elasticsearchStatusInProgressOperationsUpgradePtrType ElasticsearchStatusInProgressOperationsUpgradeArgs

func ElasticsearchStatusInProgressOperationsUpgradePtr(v *ElasticsearchStatusInProgressOperationsUpgradeArgs) ElasticsearchStatusInProgressOperationsUpgradePtrInput {
	return (*elasticsearchStatusInProgressOperationsUpgradePtrType)(v)
}

func (*elasticsearchStatusInProgressOperationsUpgradePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsUpgrade)(nil)).Elem()
}

func (i *elasticsearchStatusInProgressOperationsUpgradePtrType) ToElasticsearchStatusInProgressOperationsUpgradePtrOutput() ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(context.Background())
}

func (i *elasticsearchStatusInProgressOperationsUpgradePtrType) ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpgradePtrOutput)
}

// UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradeOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgrade)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpgradeOutput) ToElasticsearchStatusInProgressOperationsUpgradeOutput() ElasticsearchStatusInProgressOperationsUpgradeOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradeOutput) ToElasticsearchStatusInProgressOperationsUpgradeOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradeOutput) ToElasticsearchStatusInProgressOperationsUpgradePtrOutput() ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return o.ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(context.Background())
}

func (o ElasticsearchStatusInProgressOperationsUpgradeOutput) ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchStatusInProgressOperationsUpgrade) *ElasticsearchStatusInProgressOperationsUpgrade {
		return &v
	}).(ElasticsearchStatusInProgressOperationsUpgradePtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsUpgradeOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgrade) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// Nodes that must be restarted for upgrade.
func (o ElasticsearchStatusInProgressOperationsUpgradeOutput) Nodes() ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgrade) []ElasticsearchStatusInProgressOperationsUpgradeNodes {
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput)
}

type ElasticsearchStatusInProgressOperationsUpgradePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpgradePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsUpgrade)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpgradePtrOutput) ToElasticsearchStatusInProgressOperationsUpgradePtrOutput() ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradePtrOutput) ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradePtrOutput) Elem() ElasticsearchStatusInProgressOperationsUpgradeOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpgrade) ElasticsearchStatusInProgressOperationsUpgrade {
		if v != nil {
			return *v
		}
		var ret ElasticsearchStatusInProgressOperationsUpgrade
		return ret
	}).(ElasticsearchStatusInProgressOperationsUpgradeOutput)
}

func (o ElasticsearchStatusInProgressOperationsUpgradePtrOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpgrade) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdatedTime
	}).(pulumi.StringPtrOutput)
}

// Nodes that must be restarted for upgrade.
func (o ElasticsearchStatusInProgressOperationsUpgradePtrOutput) Nodes() ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpgrade) []ElasticsearchStatusInProgressOperationsUpgradeNodes {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput)
}

// UpgradedNode provides details about the status of nodes which are expected to be updated.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradeNodes struct {
	// Optional message to explain why a node may not be immediately restarted for upgrade.
	Message *string `pulumi:"message"`
	// Name of the Elasticsearch node that should be upgraded.
	Name *string `pulumi:"name"`
	// Predicate is the name of the predicate currently preventing this node from being deleted for an upgrade.
	Predicate *string `pulumi:"predicate"`
	// Status states if the node is either in the process of being deleted for an upgrade,
	// or blocked by a predicate or another condition stated in the message field.
	Status *string `pulumi:"status"`
}

// ElasticsearchStatusInProgressOperationsUpgradeNodesInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpgradeNodesArgs and ElasticsearchStatusInProgressOperationsUpgradeNodesOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpgradeNodesInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpgradeNodesArgs{...}
type ElasticsearchStatusInProgressOperationsUpgradeNodesInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpgradeNodesOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesOutput
	ToElasticsearchStatusInProgressOperationsUpgradeNodesOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesOutput
}

// UpgradedNode provides details about the status of nodes which are expected to be updated.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradeNodesArgs struct {
	// Optional message to explain why a node may not be immediately restarted for upgrade.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Name of the Elasticsearch node that should be upgraded.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Predicate is the name of the predicate currently preventing this node from being deleted for an upgrade.
	Predicate pulumi.StringPtrInput `pulumi:"predicate"`
	// Status states if the node is either in the process of being deleted for an upgrade,
	// or blocked by a predicate or another condition stated in the message field.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ElasticsearchStatusInProgressOperationsUpgradeNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradeNodes)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpgradeNodesArgs) ToElasticsearchStatusInProgressOperationsUpgradeNodesOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpgradeNodesOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpgradeNodesArgs) ToElasticsearchStatusInProgressOperationsUpgradeNodesOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpgradeNodesOutput)
}

// ElasticsearchStatusInProgressOperationsUpgradeNodesArrayInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpgradeNodesArray and ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpgradeNodesArrayInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpgradeNodesArray{ ElasticsearchStatusInProgressOperationsUpgradeNodesArgs{...} }
type ElasticsearchStatusInProgressOperationsUpgradeNodesArrayInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput
	ToElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput
}

type ElasticsearchStatusInProgressOperationsUpgradeNodesArray []ElasticsearchStatusInProgressOperationsUpgradeNodesInput

func (ElasticsearchStatusInProgressOperationsUpgradeNodesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsUpgradeNodes)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpgradeNodesArray) ToElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpgradeNodesArray) ToElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput)
}

// UpgradedNode provides details about the status of nodes which are expected to be updated.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradeNodesOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpgradeNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradeNodes)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpgradeNodesOutput) ToElasticsearchStatusInProgressOperationsUpgradeNodesOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradeNodesOutput) ToElasticsearchStatusInProgressOperationsUpgradeNodesOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesOutput {
	return o
}

// Optional message to explain why a node may not be immediately restarted for upgrade.
func (o ElasticsearchStatusInProgressOperationsUpgradeNodesOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgradeNodes) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Name of the Elasticsearch node that should be upgraded.
func (o ElasticsearchStatusInProgressOperationsUpgradeNodesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgradeNodes) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Predicate is the name of the predicate currently preventing this node from being deleted for an upgrade.
func (o ElasticsearchStatusInProgressOperationsUpgradeNodesOutput) Predicate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgradeNodes) *string { return v.Predicate }).(pulumi.StringPtrOutput)
}

// Status states if the node is either in the process of being deleted for an upgrade,
// or blocked by a predicate or another condition stated in the message field.
func (o ElasticsearchStatusInProgressOperationsUpgradeNodesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgradeNodes) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsUpgradeNodes)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput) ToElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput) ToElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput) Index(i pulumi.IntInput) ElasticsearchStatusInProgressOperationsUpgradeNodesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchStatusInProgressOperationsUpgradeNodes {
		return vs[0].([]ElasticsearchStatusInProgressOperationsUpgradeNodes)[vs[1].(int)]
	}).(ElasticsearchStatusInProgressOperationsUpgradeNodesOutput)
}

// UpgradedNode provides details about the status of nodes which are expected to be updated.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradeNodesPatch struct {
	// Optional message to explain why a node may not be immediately restarted for upgrade.
	Message *string `pulumi:"message"`
	// Name of the Elasticsearch node that should be upgraded.
	Name *string `pulumi:"name"`
	// Predicate is the name of the predicate currently preventing this node from being deleted for an upgrade.
	Predicate *string `pulumi:"predicate"`
	// Status states if the node is either in the process of being deleted for an upgrade,
	// or blocked by a predicate or another condition stated in the message field.
	Status *string `pulumi:"status"`
}

// ElasticsearchStatusInProgressOperationsUpgradeNodesPatchInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArgs and ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpgradeNodesPatchInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArgs{...}
type ElasticsearchStatusInProgressOperationsUpgradeNodesPatchInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput
	ToElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput
}

// UpgradedNode provides details about the status of nodes which are expected to be updated.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArgs struct {
	// Optional message to explain why a node may not be immediately restarted for upgrade.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Name of the Elasticsearch node that should be upgraded.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Predicate is the name of the predicate currently preventing this node from being deleted for an upgrade.
	Predicate pulumi.StringPtrInput `pulumi:"predicate"`
	// Status states if the node is either in the process of being deleted for an upgrade,
	// or blocked by a predicate or another condition stated in the message field.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradeNodesPatch)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArgs) ToElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArgs) ToElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput)
}

// ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArray and ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArray{ ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArgs{...} }
type ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput
	ToElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput
}

type ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArray []ElasticsearchStatusInProgressOperationsUpgradeNodesPatchInput

func (ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsUpgradeNodesPatch)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArray) ToElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArray) ToElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput)
}

// UpgradedNode provides details about the status of nodes which are expected to be updated.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradeNodesPatch)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput) ToElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput) ToElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput {
	return o
}

// Optional message to explain why a node may not be immediately restarted for upgrade.
func (o ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgradeNodesPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Name of the Elasticsearch node that should be upgraded.
func (o ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgradeNodesPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Predicate is the name of the predicate currently preventing this node from being deleted for an upgrade.
func (o ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput) Predicate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgradeNodesPatch) *string { return v.Predicate }).(pulumi.StringPtrOutput)
}

// Status states if the node is either in the process of being deleted for an upgrade,
// or blocked by a predicate or another condition stated in the message field.
func (o ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgradeNodesPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsUpgradeNodesPatch)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput) ToElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput) ToElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchStatusInProgressOperationsUpgradeNodesPatch {
		return vs[0].([]ElasticsearchStatusInProgressOperationsUpgradeNodesPatch)[vs[1].(int)]
	}).(ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput)
}

// UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradePatch struct {
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// Nodes that must be restarted for upgrade.
	Nodes []ElasticsearchStatusInProgressOperationsUpgradeNodesPatch `pulumi:"nodes"`
}

// ElasticsearchStatusInProgressOperationsUpgradePatchInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpgradePatchArgs and ElasticsearchStatusInProgressOperationsUpgradePatchOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpgradePatchInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpgradePatchArgs{...}
type ElasticsearchStatusInProgressOperationsUpgradePatchInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpgradePatchOutput() ElasticsearchStatusInProgressOperationsUpgradePatchOutput
	ToElasticsearchStatusInProgressOperationsUpgradePatchOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpgradePatchOutput
}

// UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradePatchArgs struct {
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// Nodes that must be restarted for upgrade.
	Nodes ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayInput `pulumi:"nodes"`
}

func (ElasticsearchStatusInProgressOperationsUpgradePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradePatch)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpgradePatchArgs) ToElasticsearchStatusInProgressOperationsUpgradePatchOutput() ElasticsearchStatusInProgressOperationsUpgradePatchOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpgradePatchOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpgradePatchArgs) ToElasticsearchStatusInProgressOperationsUpgradePatchOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpgradePatchOutput)
}

func (i ElasticsearchStatusInProgressOperationsUpgradePatchArgs) ToElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput() ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpgradePatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpgradePatchArgs) ToElasticsearchStatusInProgressOperationsUpgradePatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpgradePatchOutput).ToElasticsearchStatusInProgressOperationsUpgradePatchPtrOutputWithContext(ctx)
}

// ElasticsearchStatusInProgressOperationsUpgradePatchPtrInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpgradePatchArgs, ElasticsearchStatusInProgressOperationsUpgradePatchPtr and ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpgradePatchPtrInput` via:
//
//	        ElasticsearchStatusInProgressOperationsUpgradePatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchStatusInProgressOperationsUpgradePatchPtrInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput() ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput
	ToElasticsearchStatusInProgressOperationsUpgradePatchPtrOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput
}

type elasticsearchStatusInProgressOperationsUpgradePatchPtrType ElasticsearchStatusInProgressOperationsUpgradePatchArgs

func ElasticsearchStatusInProgressOperationsUpgradePatchPtr(v *ElasticsearchStatusInProgressOperationsUpgradePatchArgs) ElasticsearchStatusInProgressOperationsUpgradePatchPtrInput {
	return (*elasticsearchStatusInProgressOperationsUpgradePatchPtrType)(v)
}

func (*elasticsearchStatusInProgressOperationsUpgradePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsUpgradePatch)(nil)).Elem()
}

func (i *elasticsearchStatusInProgressOperationsUpgradePatchPtrType) ToElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput() ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpgradePatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchStatusInProgressOperationsUpgradePatchPtrType) ToElasticsearchStatusInProgressOperationsUpgradePatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput)
}

// UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradePatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpgradePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradePatch)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpgradePatchOutput) ToElasticsearchStatusInProgressOperationsUpgradePatchOutput() ElasticsearchStatusInProgressOperationsUpgradePatchOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradePatchOutput) ToElasticsearchStatusInProgressOperationsUpgradePatchOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradePatchOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradePatchOutput) ToElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput() ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput {
	return o.ToElasticsearchStatusInProgressOperationsUpgradePatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchStatusInProgressOperationsUpgradePatchOutput) ToElasticsearchStatusInProgressOperationsUpgradePatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchStatusInProgressOperationsUpgradePatch) *ElasticsearchStatusInProgressOperationsUpgradePatch {
		return &v
	}).(ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsUpgradePatchOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgradePatch) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// Nodes that must be restarted for upgrade.
func (o ElasticsearchStatusInProgressOperationsUpgradePatchOutput) Nodes() ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgradePatch) []ElasticsearchStatusInProgressOperationsUpgradeNodesPatch {
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput)
}

type ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsUpgradePatch)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput) ToElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput() ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput) ToElasticsearchStatusInProgressOperationsUpgradePatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput) Elem() ElasticsearchStatusInProgressOperationsUpgradePatchOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpgradePatch) ElasticsearchStatusInProgressOperationsUpgradePatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchStatusInProgressOperationsUpgradePatch
		return ret
	}).(ElasticsearchStatusInProgressOperationsUpgradePatchOutput)
}

func (o ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpgradePatch) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdatedTime
	}).(pulumi.StringPtrOutput)
}

// Nodes that must be restarted for upgrade.
func (o ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput) Nodes() ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpgradePatch) []ElasticsearchStatusInProgressOperationsUpgradeNodesPatch {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput)
}

// UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpscale struct {
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// Nodes expected to be added by the operator.
	Nodes []ElasticsearchStatusInProgressOperationsUpscaleNodes `pulumi:"nodes"`
}

// ElasticsearchStatusInProgressOperationsUpscaleInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpscaleArgs and ElasticsearchStatusInProgressOperationsUpscaleOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpscaleInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpscaleArgs{...}
type ElasticsearchStatusInProgressOperationsUpscaleInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpscaleOutput() ElasticsearchStatusInProgressOperationsUpscaleOutput
	ToElasticsearchStatusInProgressOperationsUpscaleOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpscaleOutput
}

// UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpscaleArgs struct {
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// Nodes expected to be added by the operator.
	Nodes ElasticsearchStatusInProgressOperationsUpscaleNodesArrayInput `pulumi:"nodes"`
}

func (ElasticsearchStatusInProgressOperationsUpscaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscale)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpscaleArgs) ToElasticsearchStatusInProgressOperationsUpscaleOutput() ElasticsearchStatusInProgressOperationsUpscaleOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpscaleOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpscaleArgs) ToElasticsearchStatusInProgressOperationsUpscaleOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpscaleOutput)
}

func (i ElasticsearchStatusInProgressOperationsUpscaleArgs) ToElasticsearchStatusInProgressOperationsUpscalePtrOutput() ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpscaleArgs) ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpscaleOutput).ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(ctx)
}

// ElasticsearchStatusInProgressOperationsUpscalePtrInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpscaleArgs, ElasticsearchStatusInProgressOperationsUpscalePtr and ElasticsearchStatusInProgressOperationsUpscalePtrOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpscalePtrInput` via:
//
//	        ElasticsearchStatusInProgressOperationsUpscaleArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchStatusInProgressOperationsUpscalePtrInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpscalePtrOutput() ElasticsearchStatusInProgressOperationsUpscalePtrOutput
	ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpscalePtrOutput
}

type elasticsearchStatusInProgressOperationsUpscalePtrType ElasticsearchStatusInProgressOperationsUpscaleArgs

func ElasticsearchStatusInProgressOperationsUpscalePtr(v *ElasticsearchStatusInProgressOperationsUpscaleArgs) ElasticsearchStatusInProgressOperationsUpscalePtrInput {
	return (*elasticsearchStatusInProgressOperationsUpscalePtrType)(v)
}

func (*elasticsearchStatusInProgressOperationsUpscalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsUpscale)(nil)).Elem()
}

func (i *elasticsearchStatusInProgressOperationsUpscalePtrType) ToElasticsearchStatusInProgressOperationsUpscalePtrOutput() ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(context.Background())
}

func (i *elasticsearchStatusInProgressOperationsUpscalePtrType) ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpscalePtrOutput)
}

// UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpscaleOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpscaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscale)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpscaleOutput) ToElasticsearchStatusInProgressOperationsUpscaleOutput() ElasticsearchStatusInProgressOperationsUpscaleOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscaleOutput) ToElasticsearchStatusInProgressOperationsUpscaleOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscaleOutput) ToElasticsearchStatusInProgressOperationsUpscalePtrOutput() ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return o.ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(context.Background())
}

func (o ElasticsearchStatusInProgressOperationsUpscaleOutput) ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchStatusInProgressOperationsUpscale) *ElasticsearchStatusInProgressOperationsUpscale {
		return &v
	}).(ElasticsearchStatusInProgressOperationsUpscalePtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsUpscaleOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpscale) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// Nodes expected to be added by the operator.
func (o ElasticsearchStatusInProgressOperationsUpscaleOutput) Nodes() ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpscale) []ElasticsearchStatusInProgressOperationsUpscaleNodes {
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput)
}

type ElasticsearchStatusInProgressOperationsUpscalePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpscalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsUpscale)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpscalePtrOutput) ToElasticsearchStatusInProgressOperationsUpscalePtrOutput() ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscalePtrOutput) ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscalePtrOutput) Elem() ElasticsearchStatusInProgressOperationsUpscaleOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpscale) ElasticsearchStatusInProgressOperationsUpscale {
		if v != nil {
			return *v
		}
		var ret ElasticsearchStatusInProgressOperationsUpscale
		return ret
	}).(ElasticsearchStatusInProgressOperationsUpscaleOutput)
}

func (o ElasticsearchStatusInProgressOperationsUpscalePtrOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpscale) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdatedTime
	}).(pulumi.StringPtrOutput)
}

// Nodes expected to be added by the operator.
func (o ElasticsearchStatusInProgressOperationsUpscalePtrOutput) Nodes() ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpscale) []ElasticsearchStatusInProgressOperationsUpscaleNodes {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput)
}

type ElasticsearchStatusInProgressOperationsUpscaleNodes struct {
	// Optional message to explain why a node may not be immediately added.
	Message *string `pulumi:"message"`
	// Name of the Elasticsearch node that should be added to the cluster.
	Name *string `pulumi:"name"`
	// NewNodeStatus states if a new node is being created, or if the upscale is delayed.
	Status *string `pulumi:"status"`
}

// ElasticsearchStatusInProgressOperationsUpscaleNodesInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpscaleNodesArgs and ElasticsearchStatusInProgressOperationsUpscaleNodesOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpscaleNodesInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpscaleNodesArgs{...}
type ElasticsearchStatusInProgressOperationsUpscaleNodesInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpscaleNodesOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesOutput
	ToElasticsearchStatusInProgressOperationsUpscaleNodesOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesOutput
}

type ElasticsearchStatusInProgressOperationsUpscaleNodesArgs struct {
	// Optional message to explain why a node may not be immediately added.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Name of the Elasticsearch node that should be added to the cluster.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NewNodeStatus states if a new node is being created, or if the upscale is delayed.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ElasticsearchStatusInProgressOperationsUpscaleNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscaleNodes)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpscaleNodesArgs) ToElasticsearchStatusInProgressOperationsUpscaleNodesOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpscaleNodesOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpscaleNodesArgs) ToElasticsearchStatusInProgressOperationsUpscaleNodesOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpscaleNodesOutput)
}

// ElasticsearchStatusInProgressOperationsUpscaleNodesArrayInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpscaleNodesArray and ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpscaleNodesArrayInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpscaleNodesArray{ ElasticsearchStatusInProgressOperationsUpscaleNodesArgs{...} }
type ElasticsearchStatusInProgressOperationsUpscaleNodesArrayInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput
	ToElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput
}

type ElasticsearchStatusInProgressOperationsUpscaleNodesArray []ElasticsearchStatusInProgressOperationsUpscaleNodesInput

func (ElasticsearchStatusInProgressOperationsUpscaleNodesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsUpscaleNodes)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpscaleNodesArray) ToElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpscaleNodesArray) ToElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput)
}

type ElasticsearchStatusInProgressOperationsUpscaleNodesOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpscaleNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscaleNodes)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpscaleNodesOutput) ToElasticsearchStatusInProgressOperationsUpscaleNodesOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscaleNodesOutput) ToElasticsearchStatusInProgressOperationsUpscaleNodesOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesOutput {
	return o
}

// Optional message to explain why a node may not be immediately added.
func (o ElasticsearchStatusInProgressOperationsUpscaleNodesOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpscaleNodes) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Name of the Elasticsearch node that should be added to the cluster.
func (o ElasticsearchStatusInProgressOperationsUpscaleNodesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpscaleNodes) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NewNodeStatus states if a new node is being created, or if the upscale is delayed.
func (o ElasticsearchStatusInProgressOperationsUpscaleNodesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpscaleNodes) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsUpscaleNodes)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput) ToElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput) ToElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput) Index(i pulumi.IntInput) ElasticsearchStatusInProgressOperationsUpscaleNodesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchStatusInProgressOperationsUpscaleNodes {
		return vs[0].([]ElasticsearchStatusInProgressOperationsUpscaleNodes)[vs[1].(int)]
	}).(ElasticsearchStatusInProgressOperationsUpscaleNodesOutput)
}

type ElasticsearchStatusInProgressOperationsUpscaleNodesPatch struct {
	// Optional message to explain why a node may not be immediately added.
	Message *string `pulumi:"message"`
	// Name of the Elasticsearch node that should be added to the cluster.
	Name *string `pulumi:"name"`
	// NewNodeStatus states if a new node is being created, or if the upscale is delayed.
	Status *string `pulumi:"status"`
}

// ElasticsearchStatusInProgressOperationsUpscaleNodesPatchInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArgs and ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpscaleNodesPatchInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArgs{...}
type ElasticsearchStatusInProgressOperationsUpscaleNodesPatchInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput
	ToElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput
}

type ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArgs struct {
	// Optional message to explain why a node may not be immediately added.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Name of the Elasticsearch node that should be added to the cluster.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NewNodeStatus states if a new node is being created, or if the upscale is delayed.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscaleNodesPatch)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArgs) ToElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArgs) ToElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput)
}

// ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArray and ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArray{ ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArgs{...} }
type ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput
	ToElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput
}

type ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArray []ElasticsearchStatusInProgressOperationsUpscaleNodesPatchInput

func (ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsUpscaleNodesPatch)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArray) ToElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArray) ToElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput)
}

type ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscaleNodesPatch)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput) ToElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput) ToElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput {
	return o
}

// Optional message to explain why a node may not be immediately added.
func (o ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpscaleNodesPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Name of the Elasticsearch node that should be added to the cluster.
func (o ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpscaleNodesPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NewNodeStatus states if a new node is being created, or if the upscale is delayed.
func (o ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpscaleNodesPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsUpscaleNodesPatch)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput) ToElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput) ToElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchStatusInProgressOperationsUpscaleNodesPatch {
		return vs[0].([]ElasticsearchStatusInProgressOperationsUpscaleNodesPatch)[vs[1].(int)]
	}).(ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput)
}

// UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpscalePatch struct {
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// Nodes expected to be added by the operator.
	Nodes []ElasticsearchStatusInProgressOperationsUpscaleNodesPatch `pulumi:"nodes"`
}

// ElasticsearchStatusInProgressOperationsUpscalePatchInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpscalePatchArgs and ElasticsearchStatusInProgressOperationsUpscalePatchOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpscalePatchInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpscalePatchArgs{...}
type ElasticsearchStatusInProgressOperationsUpscalePatchInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpscalePatchOutput() ElasticsearchStatusInProgressOperationsUpscalePatchOutput
	ToElasticsearchStatusInProgressOperationsUpscalePatchOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpscalePatchOutput
}

// UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpscalePatchArgs struct {
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// Nodes expected to be added by the operator.
	Nodes ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayInput `pulumi:"nodes"`
}

func (ElasticsearchStatusInProgressOperationsUpscalePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscalePatch)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpscalePatchArgs) ToElasticsearchStatusInProgressOperationsUpscalePatchOutput() ElasticsearchStatusInProgressOperationsUpscalePatchOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpscalePatchOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpscalePatchArgs) ToElasticsearchStatusInProgressOperationsUpscalePatchOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscalePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpscalePatchOutput)
}

func (i ElasticsearchStatusInProgressOperationsUpscalePatchArgs) ToElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput() ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpscalePatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpscalePatchArgs) ToElasticsearchStatusInProgressOperationsUpscalePatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpscalePatchOutput).ToElasticsearchStatusInProgressOperationsUpscalePatchPtrOutputWithContext(ctx)
}

// ElasticsearchStatusInProgressOperationsUpscalePatchPtrInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpscalePatchArgs, ElasticsearchStatusInProgressOperationsUpscalePatchPtr and ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpscalePatchPtrInput` via:
//
//	        ElasticsearchStatusInProgressOperationsUpscalePatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchStatusInProgressOperationsUpscalePatchPtrInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput() ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput
	ToElasticsearchStatusInProgressOperationsUpscalePatchPtrOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput
}

type elasticsearchStatusInProgressOperationsUpscalePatchPtrType ElasticsearchStatusInProgressOperationsUpscalePatchArgs

func ElasticsearchStatusInProgressOperationsUpscalePatchPtr(v *ElasticsearchStatusInProgressOperationsUpscalePatchArgs) ElasticsearchStatusInProgressOperationsUpscalePatchPtrInput {
	return (*elasticsearchStatusInProgressOperationsUpscalePatchPtrType)(v)
}

func (*elasticsearchStatusInProgressOperationsUpscalePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsUpscalePatch)(nil)).Elem()
}

func (i *elasticsearchStatusInProgressOperationsUpscalePatchPtrType) ToElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput() ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpscalePatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchStatusInProgressOperationsUpscalePatchPtrType) ToElasticsearchStatusInProgressOperationsUpscalePatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput)
}

// UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpscalePatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpscalePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscalePatch)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpscalePatchOutput) ToElasticsearchStatusInProgressOperationsUpscalePatchOutput() ElasticsearchStatusInProgressOperationsUpscalePatchOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscalePatchOutput) ToElasticsearchStatusInProgressOperationsUpscalePatchOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscalePatchOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscalePatchOutput) ToElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput() ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput {
	return o.ToElasticsearchStatusInProgressOperationsUpscalePatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchStatusInProgressOperationsUpscalePatchOutput) ToElasticsearchStatusInProgressOperationsUpscalePatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchStatusInProgressOperationsUpscalePatch) *ElasticsearchStatusInProgressOperationsUpscalePatch {
		return &v
	}).(ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsUpscalePatchOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpscalePatch) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// Nodes expected to be added by the operator.
func (o ElasticsearchStatusInProgressOperationsUpscalePatchOutput) Nodes() ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpscalePatch) []ElasticsearchStatusInProgressOperationsUpscaleNodesPatch {
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput)
}

type ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsUpscalePatch)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput) ToElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput() ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput) ToElasticsearchStatusInProgressOperationsUpscalePatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput) Elem() ElasticsearchStatusInProgressOperationsUpscalePatchOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpscalePatch) ElasticsearchStatusInProgressOperationsUpscalePatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchStatusInProgressOperationsUpscalePatch
		return ret
	}).(ElasticsearchStatusInProgressOperationsUpscalePatchOutput)
}

func (o ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpscalePatch) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdatedTime
	}).(pulumi.StringPtrOutput)
}

// Nodes expected to be added by the operator.
func (o ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput) Nodes() ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpscalePatch) []ElasticsearchStatusInProgressOperationsUpscaleNodesPatch {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput)
}

// ElasticsearchStatus represents the observed state of Elasticsearch.
type ElasticsearchStatusPatch struct {
	// AvailableNodes is the number of available instances.
	AvailableNodes *int `pulumi:"availableNodes"`
	// Conditions holds the current service state of an Elasticsearch cluster.
	// **This API is in technical preview and may be changed or removed in a future release.**
	Conditions []ElasticsearchStatusConditionsPatch `pulumi:"conditions"`
	// ElasticsearchHealth is the health of the cluster as returned by the health API.
	Health               *string                                       `pulumi:"health"`
	InProgressOperations *ElasticsearchStatusInProgressOperationsPatch `pulumi:"inProgressOperations"`
	// AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that
	// have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
	MonitoringAssociationStatus map[string]string `pulumi:"monitoringAssociationStatus"`
	// ObservedGeneration is the most recent generation observed for this Elasticsearch cluster.
	// It corresponds to the metadata generation, which is updated on mutation by the API Server.
	// If the generation observed in status diverges from the generation in metadata, the Elasticsearch
	// controller has not yet processed the changes contained in the Elasticsearch specification.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
	Phase *string `pulumi:"phase"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version *string `pulumi:"version"`
}

// ElasticsearchStatusPatchInput is an input type that accepts ElasticsearchStatusPatchArgs and ElasticsearchStatusPatchOutput values.
// You can construct a concrete instance of `ElasticsearchStatusPatchInput` via:
//
//	ElasticsearchStatusPatchArgs{...}
type ElasticsearchStatusPatchInput interface {
	pulumi.Input

	ToElasticsearchStatusPatchOutput() ElasticsearchStatusPatchOutput
	ToElasticsearchStatusPatchOutputWithContext(context.Context) ElasticsearchStatusPatchOutput
}

// ElasticsearchStatus represents the observed state of Elasticsearch.
type ElasticsearchStatusPatchArgs struct {
	// AvailableNodes is the number of available instances.
	AvailableNodes pulumi.IntPtrInput `pulumi:"availableNodes"`
	// Conditions holds the current service state of an Elasticsearch cluster.
	// **This API is in technical preview and may be changed or removed in a future release.**
	Conditions ElasticsearchStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// ElasticsearchHealth is the health of the cluster as returned by the health API.
	Health               pulumi.StringPtrInput                                `pulumi:"health"`
	InProgressOperations ElasticsearchStatusInProgressOperationsPatchPtrInput `pulumi:"inProgressOperations"`
	// AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that
	// have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
	MonitoringAssociationStatus pulumi.StringMapInput `pulumi:"monitoringAssociationStatus"`
	// ObservedGeneration is the most recent generation observed for this Elasticsearch cluster.
	// It corresponds to the metadata generation, which is updated on mutation by the API Server.
	// If the generation observed in status diverges from the generation in metadata, the Elasticsearch
	// controller has not yet processed the changes contained in the Elasticsearch specification.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ElasticsearchStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusPatch)(nil)).Elem()
}

func (i ElasticsearchStatusPatchArgs) ToElasticsearchStatusPatchOutput() ElasticsearchStatusPatchOutput {
	return i.ToElasticsearchStatusPatchOutputWithContext(context.Background())
}

func (i ElasticsearchStatusPatchArgs) ToElasticsearchStatusPatchOutputWithContext(ctx context.Context) ElasticsearchStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusPatchOutput)
}

func (i ElasticsearchStatusPatchArgs) ToElasticsearchStatusPatchPtrOutput() ElasticsearchStatusPatchPtrOutput {
	return i.ToElasticsearchStatusPatchPtrOutputWithContext(context.Background())
}

func (i ElasticsearchStatusPatchArgs) ToElasticsearchStatusPatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusPatchOutput).ToElasticsearchStatusPatchPtrOutputWithContext(ctx)
}

// ElasticsearchStatusPatchPtrInput is an input type that accepts ElasticsearchStatusPatchArgs, ElasticsearchStatusPatchPtr and ElasticsearchStatusPatchPtrOutput values.
// You can construct a concrete instance of `ElasticsearchStatusPatchPtrInput` via:
//
//	        ElasticsearchStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchStatusPatchPtrInput interface {
	pulumi.Input

	ToElasticsearchStatusPatchPtrOutput() ElasticsearchStatusPatchPtrOutput
	ToElasticsearchStatusPatchPtrOutputWithContext(context.Context) ElasticsearchStatusPatchPtrOutput
}

type elasticsearchStatusPatchPtrType ElasticsearchStatusPatchArgs

func ElasticsearchStatusPatchPtr(v *ElasticsearchStatusPatchArgs) ElasticsearchStatusPatchPtrInput {
	return (*elasticsearchStatusPatchPtrType)(v)
}

func (*elasticsearchStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusPatch)(nil)).Elem()
}

func (i *elasticsearchStatusPatchPtrType) ToElasticsearchStatusPatchPtrOutput() ElasticsearchStatusPatchPtrOutput {
	return i.ToElasticsearchStatusPatchPtrOutputWithContext(context.Background())
}

func (i *elasticsearchStatusPatchPtrType) ToElasticsearchStatusPatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusPatchPtrOutput)
}

// ElasticsearchStatus represents the observed state of Elasticsearch.
type ElasticsearchStatusPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusPatch)(nil)).Elem()
}

func (o ElasticsearchStatusPatchOutput) ToElasticsearchStatusPatchOutput() ElasticsearchStatusPatchOutput {
	return o
}

func (o ElasticsearchStatusPatchOutput) ToElasticsearchStatusPatchOutputWithContext(ctx context.Context) ElasticsearchStatusPatchOutput {
	return o
}

func (o ElasticsearchStatusPatchOutput) ToElasticsearchStatusPatchPtrOutput() ElasticsearchStatusPatchPtrOutput {
	return o.ToElasticsearchStatusPatchPtrOutputWithContext(context.Background())
}

func (o ElasticsearchStatusPatchOutput) ToElasticsearchStatusPatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchStatusPatch) *ElasticsearchStatusPatch {
		return &v
	}).(ElasticsearchStatusPatchPtrOutput)
}

// AvailableNodes is the number of available instances.
func (o ElasticsearchStatusPatchOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusPatch) *int { return v.AvailableNodes }).(pulumi.IntPtrOutput)
}

// Conditions holds the current service state of an Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
func (o ElasticsearchStatusPatchOutput) Conditions() ElasticsearchStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v ElasticsearchStatusPatch) []ElasticsearchStatusConditionsPatch { return v.Conditions }).(ElasticsearchStatusConditionsPatchArrayOutput)
}

// ElasticsearchHealth is the health of the cluster as returned by the health API.
func (o ElasticsearchStatusPatchOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusPatch) *string { return v.Health }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchStatusPatchOutput) InProgressOperations() ElasticsearchStatusInProgressOperationsPatchPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusPatch) *ElasticsearchStatusInProgressOperationsPatch {
		return v.InProgressOperations
	}).(ElasticsearchStatusInProgressOperationsPatchPtrOutput)
}

// AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that
// have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
func (o ElasticsearchStatusPatchOutput) MonitoringAssociationStatus() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchStatusPatch) map[string]string { return v.MonitoringAssociationStatus }).(pulumi.StringMapOutput)
}

// ObservedGeneration is the most recent generation observed for this Elasticsearch cluster.
// It corresponds to the metadata generation, which is updated on mutation by the API Server.
// If the generation observed in status diverges from the generation in metadata, the Elasticsearch
// controller has not yet processed the changes contained in the Elasticsearch specification.
func (o ElasticsearchStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
func (o ElasticsearchStatusPatchOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusPatch) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o ElasticsearchStatusPatchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusPatch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ElasticsearchStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusPatch)(nil)).Elem()
}

func (o ElasticsearchStatusPatchPtrOutput) ToElasticsearchStatusPatchPtrOutput() ElasticsearchStatusPatchPtrOutput {
	return o
}

func (o ElasticsearchStatusPatchPtrOutput) ToElasticsearchStatusPatchPtrOutputWithContext(ctx context.Context) ElasticsearchStatusPatchPtrOutput {
	return o
}

func (o ElasticsearchStatusPatchPtrOutput) Elem() ElasticsearchStatusPatchOutput {
	return o.ApplyT(func(v *ElasticsearchStatusPatch) ElasticsearchStatusPatch {
		if v != nil {
			return *v
		}
		var ret ElasticsearchStatusPatch
		return ret
	}).(ElasticsearchStatusPatchOutput)
}

// AvailableNodes is the number of available instances.
func (o ElasticsearchStatusPatchPtrOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.AvailableNodes
	}).(pulumi.IntPtrOutput)
}

// Conditions holds the current service state of an Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
func (o ElasticsearchStatusPatchPtrOutput) Conditions() ElasticsearchStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *ElasticsearchStatusPatch) []ElasticsearchStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ElasticsearchStatusConditionsPatchArrayOutput)
}

// ElasticsearchHealth is the health of the cluster as returned by the health API.
func (o ElasticsearchStatusPatchPtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Health
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchStatusPatchPtrOutput) InProgressOperations() ElasticsearchStatusInProgressOperationsPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusPatch) *ElasticsearchStatusInProgressOperationsPatch {
		if v == nil {
			return nil
		}
		return v.InProgressOperations
	}).(ElasticsearchStatusInProgressOperationsPatchPtrOutput)
}

// AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that
// have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
func (o ElasticsearchStatusPatchPtrOutput) MonitoringAssociationStatus() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchStatusPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MonitoringAssociationStatus
	}).(pulumi.StringMapOutput)
}

// ObservedGeneration is the most recent generation observed for this Elasticsearch cluster.
// It corresponds to the metadata generation, which is updated on mutation by the API Server.
// If the generation observed in status diverges from the generation in metadata, the Elasticsearch
// controller has not yet processed the changes contained in the Elasticsearch specification.
func (o ElasticsearchStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
func (o ElasticsearchStatusPatchPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o ElasticsearchStatusPatchPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchTypeInput)(nil)).Elem(), ElasticsearchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchTypeArrayInput)(nil)).Elem(), ElasticsearchTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchListTypeInput)(nil)).Elem(), ElasticsearchListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchPatchTypeInput)(nil)).Elem(), ElasticsearchPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecInput)(nil)).Elem(), ElasticsearchSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPtrInput)(nil)).Elem(), ElasticsearchSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthInput)(nil)).Elem(), ElasticsearchSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthPtrInput)(nil)).Elem(), ElasticsearchSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthFileRealmInput)(nil)).Elem(), ElasticsearchSpecAuthFileRealmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthFileRealmArrayInput)(nil)).Elem(), ElasticsearchSpecAuthFileRealmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthFileRealmPatchInput)(nil)).Elem(), ElasticsearchSpecAuthFileRealmPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthFileRealmPatchArrayInput)(nil)).Elem(), ElasticsearchSpecAuthFileRealmPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthPatchInput)(nil)).Elem(), ElasticsearchSpecAuthPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthPatchPtrInput)(nil)).Elem(), ElasticsearchSpecAuthPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthRolesInput)(nil)).Elem(), ElasticsearchSpecAuthRolesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthRolesArrayInput)(nil)).Elem(), ElasticsearchSpecAuthRolesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthRolesPatchInput)(nil)).Elem(), ElasticsearchSpecAuthRolesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthRolesPatchArrayInput)(nil)).Elem(), ElasticsearchSpecAuthRolesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpInput)(nil)).Elem(), ElasticsearchSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpPtrInput)(nil)).Elem(), ElasticsearchSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpPatchInput)(nil)).Elem(), ElasticsearchSpecHttpPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpPatchPtrInput)(nil)).Elem(), ElasticsearchSpecHttpPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceInput)(nil)).Elem(), ElasticsearchSpecHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServicePtrInput)(nil)).Elem(), ElasticsearchSpecHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceMetadataInput)(nil)).Elem(), ElasticsearchSpecHttpServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceMetadataPtrInput)(nil)).Elem(), ElasticsearchSpecHttpServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceMetadataPatchInput)(nil)).Elem(), ElasticsearchSpecHttpServiceMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceMetadataPatchPtrInput)(nil)).Elem(), ElasticsearchSpecHttpServiceMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServicePatchInput)(nil)).Elem(), ElasticsearchSpecHttpServicePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServicePatchPtrInput)(nil)).Elem(), ElasticsearchSpecHttpServicePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPtrInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPatchInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPatchPtrInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPortsInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPortsArrayInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPortsPatchInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecPortsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPortsPatchArrayInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecPortsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsInput)(nil)).Elem(), ElasticsearchSpecHttpTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsPtrInput)(nil)).Elem(), ElasticsearchSpecHttpTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsCertificateInput)(nil)).Elem(), ElasticsearchSpecHttpTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsCertificatePtrInput)(nil)).Elem(), ElasticsearchSpecHttpTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsCertificatePatchInput)(nil)).Elem(), ElasticsearchSpecHttpTlsCertificatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsCertificatePatchPtrInput)(nil)).Elem(), ElasticsearchSpecHttpTlsCertificatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsPatchInput)(nil)).Elem(), ElasticsearchSpecHttpTlsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsPatchPtrInput)(nil)).Elem(), ElasticsearchSpecHttpTlsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificateInput)(nil)).Elem(), ElasticsearchSpecHttpTlsSelfSignedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificatePtrInput)(nil)).Elem(), ElasticsearchSpecHttpTlsSelfSignedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificatePatchInput)(nil)).Elem(), ElasticsearchSpecHttpTlsSelfSignedCertificatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrInput)(nil)).Elem(), ElasticsearchSpecHttpTlsSelfSignedCertificatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput)(nil)).Elem(), ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput)(nil)).Elem(), ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchInput)(nil)).Elem(), ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayInput)(nil)).Elem(), ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringInput)(nil)).Elem(), ElasticsearchSpecMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringPtrInput)(nil)).Elem(), ElasticsearchSpecMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringLogsInput)(nil)).Elem(), ElasticsearchSpecMonitoringLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringLogsPtrInput)(nil)).Elem(), ElasticsearchSpecMonitoringLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringLogsElasticsearchRefsInput)(nil)).Elem(), ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayInput)(nil)).Elem(), ElasticsearchSpecMonitoringLogsElasticsearchRefsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchInput)(nil)).Elem(), ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayInput)(nil)).Elem(), ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringLogsPatchInput)(nil)).Elem(), ElasticsearchSpecMonitoringLogsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringLogsPatchPtrInput)(nil)).Elem(), ElasticsearchSpecMonitoringLogsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsInput)(nil)).Elem(), ElasticsearchSpecMonitoringMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsPtrInput)(nil)).Elem(), ElasticsearchSpecMonitoringMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsElasticsearchRefsInput)(nil)).Elem(), ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayInput)(nil)).Elem(), ElasticsearchSpecMonitoringMetricsElasticsearchRefsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchInput)(nil)).Elem(), ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayInput)(nil)).Elem(), ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsPatchInput)(nil)).Elem(), ElasticsearchSpecMonitoringMetricsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsPatchPtrInput)(nil)).Elem(), ElasticsearchSpecMonitoringMetricsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringPatchInput)(nil)).Elem(), ElasticsearchSpecMonitoringPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringPatchPtrInput)(nil)).Elem(), ElasticsearchSpecMonitoringPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsInput)(nil)).Elem(), ElasticsearchSpecNodeSetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsArrayInput)(nil)).Elem(), ElasticsearchSpecNodeSetsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsPatchInput)(nil)).Elem(), ElasticsearchSpecNodeSetsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsPatchArrayInput)(nil)).Elem(), ElasticsearchSpecNodeSetsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPatchInput)(nil)).Elem(), ElasticsearchSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPatchPtrInput)(nil)).Elem(), ElasticsearchSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetPtrInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetMetadataInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetMetadataPtrInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetMetadataPatchInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetPatchInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetPatchPtrInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecPtrInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecPatchInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecRemoteClustersInput)(nil)).Elem(), ElasticsearchSpecRemoteClustersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecRemoteClustersArrayInput)(nil)).Elem(), ElasticsearchSpecRemoteClustersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecRemoteClustersElasticsearchRefInput)(nil)).Elem(), ElasticsearchSpecRemoteClustersElasticsearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecRemoteClustersElasticsearchRefPtrInput)(nil)).Elem(), ElasticsearchSpecRemoteClustersElasticsearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecRemoteClustersElasticsearchRefPatchInput)(nil)).Elem(), ElasticsearchSpecRemoteClustersElasticsearchRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrInput)(nil)).Elem(), ElasticsearchSpecRemoteClustersElasticsearchRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecRemoteClustersPatchInput)(nil)).Elem(), ElasticsearchSpecRemoteClustersPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecRemoteClustersPatchArrayInput)(nil)).Elem(), ElasticsearchSpecRemoteClustersPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecSecureSettingsInput)(nil)).Elem(), ElasticsearchSpecSecureSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecSecureSettingsArrayInput)(nil)).Elem(), ElasticsearchSpecSecureSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecSecureSettingsEntriesInput)(nil)).Elem(), ElasticsearchSpecSecureSettingsEntriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecSecureSettingsEntriesArrayInput)(nil)).Elem(), ElasticsearchSpecSecureSettingsEntriesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecSecureSettingsEntriesPatchInput)(nil)).Elem(), ElasticsearchSpecSecureSettingsEntriesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecSecureSettingsEntriesPatchArrayInput)(nil)).Elem(), ElasticsearchSpecSecureSettingsEntriesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecSecureSettingsPatchInput)(nil)).Elem(), ElasticsearchSpecSecureSettingsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecSecureSettingsPatchArrayInput)(nil)).Elem(), ElasticsearchSpecSecureSettingsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportInput)(nil)).Elem(), ElasticsearchSpecTransportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportPtrInput)(nil)).Elem(), ElasticsearchSpecTransportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportPatchInput)(nil)).Elem(), ElasticsearchSpecTransportPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportPatchPtrInput)(nil)).Elem(), ElasticsearchSpecTransportPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceInput)(nil)).Elem(), ElasticsearchSpecTransportServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServicePtrInput)(nil)).Elem(), ElasticsearchSpecTransportServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceMetadataInput)(nil)).Elem(), ElasticsearchSpecTransportServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceMetadataPtrInput)(nil)).Elem(), ElasticsearchSpecTransportServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceMetadataPatchInput)(nil)).Elem(), ElasticsearchSpecTransportServiceMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceMetadataPatchPtrInput)(nil)).Elem(), ElasticsearchSpecTransportServiceMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServicePatchInput)(nil)).Elem(), ElasticsearchSpecTransportServicePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServicePatchPtrInput)(nil)).Elem(), ElasticsearchSpecTransportServicePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPtrInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPatchInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPatchPtrInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPortsInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPortsArrayInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPortsPatchInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecPortsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPortsPatchArrayInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecPortsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsInput)(nil)).Elem(), ElasticsearchSpecTransportTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsPtrInput)(nil)).Elem(), ElasticsearchSpecTransportTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificateInput)(nil)).Elem(), ElasticsearchSpecTransportTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificatePtrInput)(nil)).Elem(), ElasticsearchSpecTransportTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificateAuthoritiesInput)(nil)).Elem(), ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrInput)(nil)).Elem(), ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchInput)(nil)).Elem(), ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrInput)(nil)).Elem(), ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificatePatchInput)(nil)).Elem(), ElasticsearchSpecTransportTlsCertificatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificatePatchPtrInput)(nil)).Elem(), ElasticsearchSpecTransportTlsCertificatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsPatchInput)(nil)).Elem(), ElasticsearchSpecTransportTlsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsPatchPtrInput)(nil)).Elem(), ElasticsearchSpecTransportTlsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsSelfSignedCertificatesInput)(nil)).Elem(), ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrInput)(nil)).Elem(), ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchInput)(nil)).Elem(), ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrInput)(nil)).Elem(), ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsSubjectAltNamesInput)(nil)).Elem(), ElasticsearchSpecTransportTlsSubjectAltNamesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsSubjectAltNamesArrayInput)(nil)).Elem(), ElasticsearchSpecTransportTlsSubjectAltNamesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsSubjectAltNamesPatchInput)(nil)).Elem(), ElasticsearchSpecTransportTlsSubjectAltNamesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayInput)(nil)).Elem(), ElasticsearchSpecTransportTlsSubjectAltNamesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecUpdateStrategyInput)(nil)).Elem(), ElasticsearchSpecUpdateStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecUpdateStrategyPtrInput)(nil)).Elem(), ElasticsearchSpecUpdateStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecUpdateStrategyChangeBudgetInput)(nil)).Elem(), ElasticsearchSpecUpdateStrategyChangeBudgetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecUpdateStrategyChangeBudgetPtrInput)(nil)).Elem(), ElasticsearchSpecUpdateStrategyChangeBudgetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecUpdateStrategyChangeBudgetPatchInput)(nil)).Elem(), ElasticsearchSpecUpdateStrategyChangeBudgetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrInput)(nil)).Elem(), ElasticsearchSpecUpdateStrategyChangeBudgetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecUpdateStrategyPatchInput)(nil)).Elem(), ElasticsearchSpecUpdateStrategyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecUpdateStrategyPatchPtrInput)(nil)).Elem(), ElasticsearchSpecUpdateStrategyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInput)(nil)).Elem(), ElasticsearchStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusPtrInput)(nil)).Elem(), ElasticsearchStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusConditionsInput)(nil)).Elem(), ElasticsearchStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusConditionsArrayInput)(nil)).Elem(), ElasticsearchStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusConditionsPatchInput)(nil)).Elem(), ElasticsearchStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusConditionsPatchArrayInput)(nil)).Elem(), ElasticsearchStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsPtrInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscaleInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsDownscaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscalePtrInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsDownscaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscaleNodesInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsDownscaleNodesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscaleNodesArrayInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsDownscaleNodesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscaleNodesPatchInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscalePatchInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsDownscalePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscalePatchPtrInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsDownscalePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsPatchInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsPatchPtrInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradeInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpgradeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradePtrInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpgradeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradeNodesInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpgradeNodesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradeNodesArrayInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpgradeNodesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradeNodesPatchInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradePatchInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpgradePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradePatchPtrInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpgradePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscaleInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpscaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscalePtrInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpscaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscaleNodesInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpscaleNodesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscaleNodesArrayInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpscaleNodesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscaleNodesPatchInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscalePatchInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpscalePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscalePatchPtrInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpscalePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusPatchInput)(nil)).Elem(), ElasticsearchStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusPatchPtrInput)(nil)).Elem(), ElasticsearchStatusPatchArgs{})
	pulumi.RegisterOutputType(ElasticsearchTypeOutput{})
	pulumi.RegisterOutputType(ElasticsearchTypeArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchListTypeOutput{})
	pulumi.RegisterOutputType(ElasticsearchPatchTypeOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthFileRealmOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthFileRealmArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthFileRealmPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthFileRealmPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthRolesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthRolesArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthRolesPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthRolesPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServicePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceMetadataOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceMetadataPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceMetadataPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceMetadataPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServicePatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServicePatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecPortsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecPortsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecPortsPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecPortsPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsCertificateOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsCertificatePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsCertificatePatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsCertificatePatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsSelfSignedCertificateOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsSelfSignedCertificatePatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringLogsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringLogsPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringLogsElasticsearchRefsPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringLogsPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringLogsPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringMetricsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringMetricsPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringMetricsElasticsearchRefsPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringMetricsPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringMetricsPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetMetadataOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetMetadataPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetMetadataPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecRemoteClustersOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecRemoteClustersArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecRemoteClustersElasticsearchRefOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecRemoteClustersElasticsearchRefPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecRemoteClustersElasticsearchRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecRemoteClustersPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecRemoteClustersPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecSecureSettingsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecSecureSettingsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecSecureSettingsEntriesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecSecureSettingsEntriesArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecSecureSettingsEntriesPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecSecureSettingsEntriesPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecSecureSettingsPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecSecureSettingsPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServicePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceMetadataOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceMetadataPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceMetadataPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceMetadataPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServicePatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServicePatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecPortsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecPortsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecPortsPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecPortsPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsCertificateOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsCertificatePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsCertificateAuthoritiesPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsCertificatePatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsCertificatePatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsSelfSignedCertificatesPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsSubjectAltNamesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsSubjectAltNamesPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsSubjectAltNamesPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecUpdateStrategyOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecUpdateStrategyPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecUpdateStrategyChangeBudgetOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecUpdateStrategyChangeBudgetPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecUpdateStrategyChangeBudgetPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecUpdateStrategyPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecUpdateStrategyPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusConditionsOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsDownscaleOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsDownscalePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsDownscaleNodesOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsDownscaleNodesPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsDownscaleNodesPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsDownscalePatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsDownscalePatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsPatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpgradeOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpgradePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpgradeNodesOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpgradeNodesPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpgradeNodesPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpgradePatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpgradePatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpscaleOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpscalePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpscaleNodesOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpscaleNodesPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpscaleNodesPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpscalePatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpscalePatchPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusPatchPtrOutput{})
}
