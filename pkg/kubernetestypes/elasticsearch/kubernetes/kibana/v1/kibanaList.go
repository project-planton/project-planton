// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// KibanaList is a list of Kibana
type KibanaList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of kibanas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KibanaTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewKibanaList registers a new resource with the given unique name, arguments, and options.
func NewKibanaList(ctx *pulumi.Context,
	name string, args *KibanaListArgs, opts ...pulumi.ResourceOption) (*KibanaList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("kibana.k8s.elastic.co/v1")
	args.Kind = pulumi.StringPtr("KibanaList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KibanaList
	err := ctx.RegisterResource("kubernetes:kibana.k8s.elastic.co/v1:KibanaList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKibanaList gets an existing KibanaList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKibanaList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KibanaListState, opts ...pulumi.ResourceOption) (*KibanaList, error) {
	var resource KibanaList
	err := ctx.ReadResource("kubernetes:kibana.k8s.elastic.co/v1:KibanaList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KibanaList resources.
type kibanaListState struct {
}

type KibanaListState struct {
}

func (KibanaListState) ElementType() reflect.Type {
	return reflect.TypeOf((*kibanaListState)(nil)).Elem()
}

type kibanaListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of kibanas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []KibanaType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a KibanaList resource.
type KibanaListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of kibanas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KibanaTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (KibanaListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kibanaListArgs)(nil)).Elem()
}

type KibanaListInput interface {
	pulumi.Input

	ToKibanaListOutput() KibanaListOutput
	ToKibanaListOutputWithContext(ctx context.Context) KibanaListOutput
}

func (*KibanaList) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaList)(nil)).Elem()
}

func (i *KibanaList) ToKibanaListOutput() KibanaListOutput {
	return i.ToKibanaListOutputWithContext(context.Background())
}

func (i *KibanaList) ToKibanaListOutputWithContext(ctx context.Context) KibanaListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaListOutput)
}

// KibanaListArrayInput is an input type that accepts KibanaListArray and KibanaListArrayOutput values.
// You can construct a concrete instance of `KibanaListArrayInput` via:
//
//	KibanaListArray{ KibanaListArgs{...} }
type KibanaListArrayInput interface {
	pulumi.Input

	ToKibanaListArrayOutput() KibanaListArrayOutput
	ToKibanaListArrayOutputWithContext(context.Context) KibanaListArrayOutput
}

type KibanaListArray []KibanaListInput

func (KibanaListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KibanaList)(nil)).Elem()
}

func (i KibanaListArray) ToKibanaListArrayOutput() KibanaListArrayOutput {
	return i.ToKibanaListArrayOutputWithContext(context.Background())
}

func (i KibanaListArray) ToKibanaListArrayOutputWithContext(ctx context.Context) KibanaListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaListArrayOutput)
}

// KibanaListMapInput is an input type that accepts KibanaListMap and KibanaListMapOutput values.
// You can construct a concrete instance of `KibanaListMapInput` via:
//
//	KibanaListMap{ "key": KibanaListArgs{...} }
type KibanaListMapInput interface {
	pulumi.Input

	ToKibanaListMapOutput() KibanaListMapOutput
	ToKibanaListMapOutputWithContext(context.Context) KibanaListMapOutput
}

type KibanaListMap map[string]KibanaListInput

func (KibanaListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KibanaList)(nil)).Elem()
}

func (i KibanaListMap) ToKibanaListMapOutput() KibanaListMapOutput {
	return i.ToKibanaListMapOutputWithContext(context.Background())
}

func (i KibanaListMap) ToKibanaListMapOutputWithContext(ctx context.Context) KibanaListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaListMapOutput)
}

type KibanaListOutput struct{ *pulumi.OutputState }

func (KibanaListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaList)(nil)).Elem()
}

func (o KibanaListOutput) ToKibanaListOutput() KibanaListOutput {
	return o
}

func (o KibanaListOutput) ToKibanaListOutputWithContext(ctx context.Context) KibanaListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KibanaListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KibanaList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of kibanas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o KibanaListOutput) Items() KibanaTypeArrayOutput {
	return o.ApplyT(func(v *KibanaList) KibanaTypeArrayOutput { return v.Items }).(KibanaTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KibanaListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KibanaList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KibanaListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *KibanaList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type KibanaListArrayOutput struct{ *pulumi.OutputState }

func (KibanaListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KibanaList)(nil)).Elem()
}

func (o KibanaListArrayOutput) ToKibanaListArrayOutput() KibanaListArrayOutput {
	return o
}

func (o KibanaListArrayOutput) ToKibanaListArrayOutputWithContext(ctx context.Context) KibanaListArrayOutput {
	return o
}

func (o KibanaListArrayOutput) Index(i pulumi.IntInput) KibanaListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KibanaList {
		return vs[0].([]*KibanaList)[vs[1].(int)]
	}).(KibanaListOutput)
}

type KibanaListMapOutput struct{ *pulumi.OutputState }

func (KibanaListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KibanaList)(nil)).Elem()
}

func (o KibanaListMapOutput) ToKibanaListMapOutput() KibanaListMapOutput {
	return o
}

func (o KibanaListMapOutput) ToKibanaListMapOutputWithContext(ctx context.Context) KibanaListMapOutput {
	return o
}

func (o KibanaListMapOutput) MapIndex(k pulumi.StringInput) KibanaListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KibanaList {
		return vs[0].(map[string]*KibanaList)[vs[1].(string)]
	}).(KibanaListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaListInput)(nil)).Elem(), &KibanaList{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaListArrayInput)(nil)).Elem(), KibanaListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaListMapInput)(nil)).Elem(), KibanaListMap{})
	pulumi.RegisterOutputType(KibanaListOutput{})
	pulumi.RegisterOutputType(KibanaListArrayOutput{})
	pulumi.RegisterOutputType(KibanaListMapOutput{})
}
