// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// to not break compatibility when upgrading from previous versions of the CRD
type KibanaType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
}

// KibanaTypeInput is an input type that accepts KibanaTypeArgs and KibanaTypeOutput values.
// You can construct a concrete instance of `KibanaTypeInput` via:
//
//	KibanaTypeArgs{...}
type KibanaTypeInput interface {
	pulumi.Input

	ToKibanaTypeOutput() KibanaTypeOutput
	ToKibanaTypeOutputWithContext(context.Context) KibanaTypeOutput
}

// to not break compatibility when upgrading from previous versions of the CRD
type KibanaTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
}

func (KibanaTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaType)(nil)).Elem()
}

func (i KibanaTypeArgs) ToKibanaTypeOutput() KibanaTypeOutput {
	return i.ToKibanaTypeOutputWithContext(context.Background())
}

func (i KibanaTypeArgs) ToKibanaTypeOutputWithContext(ctx context.Context) KibanaTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaTypeOutput)
}

// KibanaTypeArrayInput is an input type that accepts KibanaTypeArray and KibanaTypeArrayOutput values.
// You can construct a concrete instance of `KibanaTypeArrayInput` via:
//
//	KibanaTypeArray{ KibanaTypeArgs{...} }
type KibanaTypeArrayInput interface {
	pulumi.Input

	ToKibanaTypeArrayOutput() KibanaTypeArrayOutput
	ToKibanaTypeArrayOutputWithContext(context.Context) KibanaTypeArrayOutput
}

type KibanaTypeArray []KibanaTypeInput

func (KibanaTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaType)(nil)).Elem()
}

func (i KibanaTypeArray) ToKibanaTypeArrayOutput() KibanaTypeArrayOutput {
	return i.ToKibanaTypeArrayOutputWithContext(context.Background())
}

func (i KibanaTypeArray) ToKibanaTypeArrayOutputWithContext(ctx context.Context) KibanaTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaTypeArrayOutput)
}

// to not break compatibility when upgrading from previous versions of the CRD
type KibanaTypeOutput struct{ *pulumi.OutputState }

func (KibanaTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaType)(nil)).Elem()
}

func (o KibanaTypeOutput) ToKibanaTypeOutput() KibanaTypeOutput {
	return o
}

func (o KibanaTypeOutput) ToKibanaTypeOutputWithContext(ctx context.Context) KibanaTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KibanaTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KibanaTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KibanaTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KibanaType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

type KibanaTypeArrayOutput struct{ *pulumi.OutputState }

func (KibanaTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaType)(nil)).Elem()
}

func (o KibanaTypeArrayOutput) ToKibanaTypeArrayOutput() KibanaTypeArrayOutput {
	return o
}

func (o KibanaTypeArrayOutput) ToKibanaTypeArrayOutputWithContext(ctx context.Context) KibanaTypeArrayOutput {
	return o
}

func (o KibanaTypeArrayOutput) Index(i pulumi.IntInput) KibanaTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KibanaType {
		return vs[0].([]KibanaType)[vs[1].(int)]
	}).(KibanaTypeOutput)
}

// KibanaList is a list of Kibana
type KibanaListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of kibanas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []KibanaType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// KibanaListTypeInput is an input type that accepts KibanaListTypeArgs and KibanaListTypeOutput values.
// You can construct a concrete instance of `KibanaListTypeInput` via:
//
//	KibanaListTypeArgs{...}
type KibanaListTypeInput interface {
	pulumi.Input

	ToKibanaListTypeOutput() KibanaListTypeOutput
	ToKibanaListTypeOutputWithContext(context.Context) KibanaListTypeOutput
}

// KibanaList is a list of Kibana
type KibanaListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of kibanas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KibanaTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (KibanaListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaListType)(nil)).Elem()
}

func (i KibanaListTypeArgs) ToKibanaListTypeOutput() KibanaListTypeOutput {
	return i.ToKibanaListTypeOutputWithContext(context.Background())
}

func (i KibanaListTypeArgs) ToKibanaListTypeOutputWithContext(ctx context.Context) KibanaListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaListTypeOutput)
}

// KibanaList is a list of Kibana
type KibanaListTypeOutput struct{ *pulumi.OutputState }

func (KibanaListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaListType)(nil)).Elem()
}

func (o KibanaListTypeOutput) ToKibanaListTypeOutput() KibanaListTypeOutput {
	return o
}

func (o KibanaListTypeOutput) ToKibanaListTypeOutputWithContext(ctx context.Context) KibanaListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KibanaListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of kibanas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o KibanaListTypeOutput) Items() KibanaTypeArrayOutput {
	return o.ApplyT(func(v KibanaListType) []KibanaType { return v.Items }).(KibanaTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KibanaListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KibanaListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v KibanaListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// to not break compatibility when upgrading from previous versions of the CRD
type KibanaPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
}

// KibanaPatchTypeInput is an input type that accepts KibanaPatchTypeArgs and KibanaPatchTypeOutput values.
// You can construct a concrete instance of `KibanaPatchTypeInput` via:
//
//	KibanaPatchTypeArgs{...}
type KibanaPatchTypeInput interface {
	pulumi.Input

	ToKibanaPatchTypeOutput() KibanaPatchTypeOutput
	ToKibanaPatchTypeOutputWithContext(context.Context) KibanaPatchTypeOutput
}

// to not break compatibility when upgrading from previous versions of the CRD
type KibanaPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
}

func (KibanaPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaPatchType)(nil)).Elem()
}

func (i KibanaPatchTypeArgs) ToKibanaPatchTypeOutput() KibanaPatchTypeOutput {
	return i.ToKibanaPatchTypeOutputWithContext(context.Background())
}

func (i KibanaPatchTypeArgs) ToKibanaPatchTypeOutputWithContext(ctx context.Context) KibanaPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaPatchTypeOutput)
}

// to not break compatibility when upgrading from previous versions of the CRD
type KibanaPatchTypeOutput struct{ *pulumi.OutputState }

func (KibanaPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaPatchType)(nil)).Elem()
}

func (o KibanaPatchTypeOutput) ToKibanaPatchTypeOutput() KibanaPatchTypeOutput {
	return o
}

func (o KibanaPatchTypeOutput) ToKibanaPatchTypeOutputWithContext(ctx context.Context) KibanaPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KibanaPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KibanaPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KibanaPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v KibanaPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaTypeInput)(nil)).Elem(), KibanaTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaTypeArrayInput)(nil)).Elem(), KibanaTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaListTypeInput)(nil)).Elem(), KibanaListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaPatchTypeInput)(nil)).Elem(), KibanaPatchTypeArgs{})
	pulumi.RegisterOutputType(KibanaTypeOutput{})
	pulumi.RegisterOutputType(KibanaTypeArrayOutput{})
	pulumi.RegisterOutputType(KibanaListTypeOutput{})
	pulumi.RegisterOutputType(KibanaPatchTypeOutput{})
}
