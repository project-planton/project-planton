// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// to not break compatibility when upgrading from previous versions of the CRD
type Kibana struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
}

// NewKibana registers a new resource with the given unique name, arguments, and options.
func NewKibana(ctx *pulumi.Context,
	name string, args *KibanaArgs, opts ...pulumi.ResourceOption) (*Kibana, error) {
	if args == nil {
		args = &KibanaArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kibana.k8s.elastic.co/v1alpha1")
	args.Kind = pulumi.StringPtr("Kibana")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:kibana.k8s.elastic.co/v1:Kibana"),
		},
		{
			Type: pulumi.String("kubernetes:kibana.k8s.elastic.co/v1beta1:Kibana"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Kibana
	err := ctx.RegisterResource("kubernetes:kibana.k8s.elastic.co/v1alpha1:Kibana", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKibana gets an existing Kibana resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKibana(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KibanaState, opts ...pulumi.ResourceOption) (*Kibana, error) {
	var resource Kibana
	err := ctx.ReadResource("kubernetes:kibana.k8s.elastic.co/v1alpha1:Kibana", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Kibana resources.
type kibanaState struct {
}

type KibanaState struct {
}

func (KibanaState) ElementType() reflect.Type {
	return reflect.TypeOf((*kibanaState)(nil)).Elem()
}

type kibanaArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a Kibana resource.
type KibanaArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
}

func (KibanaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kibanaArgs)(nil)).Elem()
}

type KibanaInput interface {
	pulumi.Input

	ToKibanaOutput() KibanaOutput
	ToKibanaOutputWithContext(ctx context.Context) KibanaOutput
}

func (*Kibana) ElementType() reflect.Type {
	return reflect.TypeOf((**Kibana)(nil)).Elem()
}

func (i *Kibana) ToKibanaOutput() KibanaOutput {
	return i.ToKibanaOutputWithContext(context.Background())
}

func (i *Kibana) ToKibanaOutputWithContext(ctx context.Context) KibanaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaOutput)
}

// KibanaArrayInput is an input type that accepts KibanaArray and KibanaArrayOutput values.
// You can construct a concrete instance of `KibanaArrayInput` via:
//
//	KibanaArray{ KibanaArgs{...} }
type KibanaArrayInput interface {
	pulumi.Input

	ToKibanaArrayOutput() KibanaArrayOutput
	ToKibanaArrayOutputWithContext(context.Context) KibanaArrayOutput
}

type KibanaArray []KibanaInput

func (KibanaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Kibana)(nil)).Elem()
}

func (i KibanaArray) ToKibanaArrayOutput() KibanaArrayOutput {
	return i.ToKibanaArrayOutputWithContext(context.Background())
}

func (i KibanaArray) ToKibanaArrayOutputWithContext(ctx context.Context) KibanaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaArrayOutput)
}

// KibanaMapInput is an input type that accepts KibanaMap and KibanaMapOutput values.
// You can construct a concrete instance of `KibanaMapInput` via:
//
//	KibanaMap{ "key": KibanaArgs{...} }
type KibanaMapInput interface {
	pulumi.Input

	ToKibanaMapOutput() KibanaMapOutput
	ToKibanaMapOutputWithContext(context.Context) KibanaMapOutput
}

type KibanaMap map[string]KibanaInput

func (KibanaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Kibana)(nil)).Elem()
}

func (i KibanaMap) ToKibanaMapOutput() KibanaMapOutput {
	return i.ToKibanaMapOutputWithContext(context.Background())
}

func (i KibanaMap) ToKibanaMapOutputWithContext(ctx context.Context) KibanaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaMapOutput)
}

type KibanaOutput struct{ *pulumi.OutputState }

func (KibanaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Kibana)(nil)).Elem()
}

func (o KibanaOutput) ToKibanaOutput() KibanaOutput {
	return o
}

func (o KibanaOutput) ToKibanaOutputWithContext(ctx context.Context) KibanaOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KibanaOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Kibana) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KibanaOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Kibana) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KibanaOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Kibana) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

type KibanaArrayOutput struct{ *pulumi.OutputState }

func (KibanaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Kibana)(nil)).Elem()
}

func (o KibanaArrayOutput) ToKibanaArrayOutput() KibanaArrayOutput {
	return o
}

func (o KibanaArrayOutput) ToKibanaArrayOutputWithContext(ctx context.Context) KibanaArrayOutput {
	return o
}

func (o KibanaArrayOutput) Index(i pulumi.IntInput) KibanaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Kibana {
		return vs[0].([]*Kibana)[vs[1].(int)]
	}).(KibanaOutput)
}

type KibanaMapOutput struct{ *pulumi.OutputState }

func (KibanaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Kibana)(nil)).Elem()
}

func (o KibanaMapOutput) ToKibanaMapOutput() KibanaMapOutput {
	return o
}

func (o KibanaMapOutput) ToKibanaMapOutputWithContext(ctx context.Context) KibanaMapOutput {
	return o
}

func (o KibanaMapOutput) MapIndex(k pulumi.StringInput) KibanaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Kibana {
		return vs[0].(map[string]*Kibana)[vs[1].(string)]
	}).(KibanaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaInput)(nil)).Elem(), &Kibana{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaArrayInput)(nil)).Elem(), KibanaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaMapInput)(nil)).Elem(), KibanaMap{})
	pulumi.RegisterOutputType(KibanaOutput{})
	pulumi.RegisterOutputType(KibanaArrayOutput{})
	pulumi.RegisterOutputType(KibanaMapOutput{})
}
