// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Logstash is the Schema for the logstashes API
type Logstash struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     LogstashSpecOutput      `pulumi:"spec"`
	Status   LogstashStatusPtrOutput `pulumi:"status"`
}

// NewLogstash registers a new resource with the given unique name, arguments, and options.
func NewLogstash(ctx *pulumi.Context,
	name string, args *LogstashArgs, opts ...pulumi.ResourceOption) (*Logstash, error) {
	if args == nil {
		args = &LogstashArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("logstash.k8s.elastic.co/v1alpha1")
	args.Kind = pulumi.StringPtr("Logstash")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Logstash
	err := ctx.RegisterResource("kubernetes:logstash.k8s.elastic.co/v1alpha1:Logstash", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogstash gets an existing Logstash resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogstash(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogstashState, opts ...pulumi.ResourceOption) (*Logstash, error) {
	var resource Logstash
	err := ctx.ReadResource("kubernetes:logstash.k8s.elastic.co/v1alpha1:Logstash", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Logstash resources.
type logstashState struct {
}

type LogstashState struct {
}

func (LogstashState) ElementType() reflect.Type {
	return reflect.TypeOf((*logstashState)(nil)).Elem()
}

type logstashArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *LogstashSpec      `pulumi:"spec"`
}

// The set of arguments for constructing a Logstash resource.
type LogstashArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     LogstashSpecPtrInput
}

func (LogstashArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logstashArgs)(nil)).Elem()
}

type LogstashInput interface {
	pulumi.Input

	ToLogstashOutput() LogstashOutput
	ToLogstashOutputWithContext(ctx context.Context) LogstashOutput
}

func (*Logstash) ElementType() reflect.Type {
	return reflect.TypeOf((**Logstash)(nil)).Elem()
}

func (i *Logstash) ToLogstashOutput() LogstashOutput {
	return i.ToLogstashOutputWithContext(context.Background())
}

func (i *Logstash) ToLogstashOutputWithContext(ctx context.Context) LogstashOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashOutput)
}

// LogstashArrayInput is an input type that accepts LogstashArray and LogstashArrayOutput values.
// You can construct a concrete instance of `LogstashArrayInput` via:
//
//	LogstashArray{ LogstashArgs{...} }
type LogstashArrayInput interface {
	pulumi.Input

	ToLogstashArrayOutput() LogstashArrayOutput
	ToLogstashArrayOutputWithContext(context.Context) LogstashArrayOutput
}

type LogstashArray []LogstashInput

func (LogstashArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logstash)(nil)).Elem()
}

func (i LogstashArray) ToLogstashArrayOutput() LogstashArrayOutput {
	return i.ToLogstashArrayOutputWithContext(context.Background())
}

func (i LogstashArray) ToLogstashArrayOutputWithContext(ctx context.Context) LogstashArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashArrayOutput)
}

// LogstashMapInput is an input type that accepts LogstashMap and LogstashMapOutput values.
// You can construct a concrete instance of `LogstashMapInput` via:
//
//	LogstashMap{ "key": LogstashArgs{...} }
type LogstashMapInput interface {
	pulumi.Input

	ToLogstashMapOutput() LogstashMapOutput
	ToLogstashMapOutputWithContext(context.Context) LogstashMapOutput
}

type LogstashMap map[string]LogstashInput

func (LogstashMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logstash)(nil)).Elem()
}

func (i LogstashMap) ToLogstashMapOutput() LogstashMapOutput {
	return i.ToLogstashMapOutputWithContext(context.Background())
}

func (i LogstashMap) ToLogstashMapOutputWithContext(ctx context.Context) LogstashMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashMapOutput)
}

type LogstashOutput struct{ *pulumi.OutputState }

func (LogstashOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logstash)(nil)).Elem()
}

func (o LogstashOutput) ToLogstashOutput() LogstashOutput {
	return o
}

func (o LogstashOutput) ToLogstashOutputWithContext(ctx context.Context) LogstashOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LogstashOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LogstashOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LogstashOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Logstash) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o LogstashOutput) Spec() LogstashSpecOutput {
	return o.ApplyT(func(v *Logstash) LogstashSpecOutput { return v.Spec }).(LogstashSpecOutput)
}

func (o LogstashOutput) Status() LogstashStatusPtrOutput {
	return o.ApplyT(func(v *Logstash) LogstashStatusPtrOutput { return v.Status }).(LogstashStatusPtrOutput)
}

type LogstashArrayOutput struct{ *pulumi.OutputState }

func (LogstashArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logstash)(nil)).Elem()
}

func (o LogstashArrayOutput) ToLogstashArrayOutput() LogstashArrayOutput {
	return o
}

func (o LogstashArrayOutput) ToLogstashArrayOutputWithContext(ctx context.Context) LogstashArrayOutput {
	return o
}

func (o LogstashArrayOutput) Index(i pulumi.IntInput) LogstashOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Logstash {
		return vs[0].([]*Logstash)[vs[1].(int)]
	}).(LogstashOutput)
}

type LogstashMapOutput struct{ *pulumi.OutputState }

func (LogstashMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logstash)(nil)).Elem()
}

func (o LogstashMapOutput) ToLogstashMapOutput() LogstashMapOutput {
	return o
}

func (o LogstashMapOutput) ToLogstashMapOutputWithContext(ctx context.Context) LogstashMapOutput {
	return o
}

func (o LogstashMapOutput) MapIndex(k pulumi.StringInput) LogstashOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Logstash {
		return vs[0].(map[string]*Logstash)[vs[1].(string)]
	}).(LogstashOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashInput)(nil)).Elem(), &Logstash{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashArrayInput)(nil)).Elem(), LogstashArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashMapInput)(nil)).Elem(), LogstashMap{})
	pulumi.RegisterOutputType(LogstashOutput{})
	pulumi.RegisterOutputType(LogstashArrayOutput{})
	pulumi.RegisterOutputType(LogstashMapOutput{})
}
