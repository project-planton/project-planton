// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// EnterpriseSearch is a Kubernetes CRD to represent Enterprise Search.
type EnterpriseSearchPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput      `pulumi:"metadata"`
	Spec     EnterpriseSearchSpecPatchPtrOutput   `pulumi:"spec"`
	Status   EnterpriseSearchStatusPatchPtrOutput `pulumi:"status"`
}

// NewEnterpriseSearchPatch registers a new resource with the given unique name, arguments, and options.
func NewEnterpriseSearchPatch(ctx *pulumi.Context,
	name string, args *EnterpriseSearchPatchArgs, opts ...pulumi.ResourceOption) (*EnterpriseSearchPatch, error) {
	if args == nil {
		args = &EnterpriseSearchPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("enterprisesearch.k8s.elastic.co/v1")
	args.Kind = pulumi.StringPtr("EnterpriseSearch")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:enterprisesearch.k8s.elastic.co/v1beta1:EnterpriseSearchPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EnterpriseSearchPatch
	err := ctx.RegisterResource("kubernetes:enterprisesearch.k8s.elastic.co/v1:EnterpriseSearchPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnterpriseSearchPatch gets an existing EnterpriseSearchPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnterpriseSearchPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnterpriseSearchPatchState, opts ...pulumi.ResourceOption) (*EnterpriseSearchPatch, error) {
	var resource EnterpriseSearchPatch
	err := ctx.ReadResource("kubernetes:enterprisesearch.k8s.elastic.co/v1:EnterpriseSearchPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnterpriseSearchPatch resources.
type enterpriseSearchPatchState struct {
}

type EnterpriseSearchPatchState struct {
}

func (EnterpriseSearchPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseSearchPatchState)(nil)).Elem()
}

type enterpriseSearchPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch    `pulumi:"metadata"`
	Spec     *EnterpriseSearchSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a EnterpriseSearchPatch resource.
type EnterpriseSearchPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     EnterpriseSearchSpecPatchPtrInput
}

func (EnterpriseSearchPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseSearchPatchArgs)(nil)).Elem()
}

type EnterpriseSearchPatchInput interface {
	pulumi.Input

	ToEnterpriseSearchPatchOutput() EnterpriseSearchPatchOutput
	ToEnterpriseSearchPatchOutputWithContext(ctx context.Context) EnterpriseSearchPatchOutput
}

func (*EnterpriseSearchPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchPatch)(nil)).Elem()
}

func (i *EnterpriseSearchPatch) ToEnterpriseSearchPatchOutput() EnterpriseSearchPatchOutput {
	return i.ToEnterpriseSearchPatchOutputWithContext(context.Background())
}

func (i *EnterpriseSearchPatch) ToEnterpriseSearchPatchOutputWithContext(ctx context.Context) EnterpriseSearchPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchPatchOutput)
}

// EnterpriseSearchPatchArrayInput is an input type that accepts EnterpriseSearchPatchArray and EnterpriseSearchPatchArrayOutput values.
// You can construct a concrete instance of `EnterpriseSearchPatchArrayInput` via:
//
//	EnterpriseSearchPatchArray{ EnterpriseSearchPatchArgs{...} }
type EnterpriseSearchPatchArrayInput interface {
	pulumi.Input

	ToEnterpriseSearchPatchArrayOutput() EnterpriseSearchPatchArrayOutput
	ToEnterpriseSearchPatchArrayOutputWithContext(context.Context) EnterpriseSearchPatchArrayOutput
}

type EnterpriseSearchPatchArray []EnterpriseSearchPatchInput

func (EnterpriseSearchPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseSearchPatch)(nil)).Elem()
}

func (i EnterpriseSearchPatchArray) ToEnterpriseSearchPatchArrayOutput() EnterpriseSearchPatchArrayOutput {
	return i.ToEnterpriseSearchPatchArrayOutputWithContext(context.Background())
}

func (i EnterpriseSearchPatchArray) ToEnterpriseSearchPatchArrayOutputWithContext(ctx context.Context) EnterpriseSearchPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchPatchArrayOutput)
}

// EnterpriseSearchPatchMapInput is an input type that accepts EnterpriseSearchPatchMap and EnterpriseSearchPatchMapOutput values.
// You can construct a concrete instance of `EnterpriseSearchPatchMapInput` via:
//
//	EnterpriseSearchPatchMap{ "key": EnterpriseSearchPatchArgs{...} }
type EnterpriseSearchPatchMapInput interface {
	pulumi.Input

	ToEnterpriseSearchPatchMapOutput() EnterpriseSearchPatchMapOutput
	ToEnterpriseSearchPatchMapOutputWithContext(context.Context) EnterpriseSearchPatchMapOutput
}

type EnterpriseSearchPatchMap map[string]EnterpriseSearchPatchInput

func (EnterpriseSearchPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseSearchPatch)(nil)).Elem()
}

func (i EnterpriseSearchPatchMap) ToEnterpriseSearchPatchMapOutput() EnterpriseSearchPatchMapOutput {
	return i.ToEnterpriseSearchPatchMapOutputWithContext(context.Background())
}

func (i EnterpriseSearchPatchMap) ToEnterpriseSearchPatchMapOutputWithContext(ctx context.Context) EnterpriseSearchPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchPatchMapOutput)
}

type EnterpriseSearchPatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchPatch)(nil)).Elem()
}

func (o EnterpriseSearchPatchOutput) ToEnterpriseSearchPatchOutput() EnterpriseSearchPatchOutput {
	return o
}

func (o EnterpriseSearchPatchOutput) ToEnterpriseSearchPatchOutputWithContext(ctx context.Context) EnterpriseSearchPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EnterpriseSearchPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EnterpriseSearchPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o EnterpriseSearchPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o EnterpriseSearchPatchOutput) Spec() EnterpriseSearchSpecPatchPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchPatch) EnterpriseSearchSpecPatchPtrOutput { return v.Spec }).(EnterpriseSearchSpecPatchPtrOutput)
}

func (o EnterpriseSearchPatchOutput) Status() EnterpriseSearchStatusPatchPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchPatch) EnterpriseSearchStatusPatchPtrOutput { return v.Status }).(EnterpriseSearchStatusPatchPtrOutput)
}

type EnterpriseSearchPatchArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseSearchPatch)(nil)).Elem()
}

func (o EnterpriseSearchPatchArrayOutput) ToEnterpriseSearchPatchArrayOutput() EnterpriseSearchPatchArrayOutput {
	return o
}

func (o EnterpriseSearchPatchArrayOutput) ToEnterpriseSearchPatchArrayOutputWithContext(ctx context.Context) EnterpriseSearchPatchArrayOutput {
	return o
}

func (o EnterpriseSearchPatchArrayOutput) Index(i pulumi.IntInput) EnterpriseSearchPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnterpriseSearchPatch {
		return vs[0].([]*EnterpriseSearchPatch)[vs[1].(int)]
	}).(EnterpriseSearchPatchOutput)
}

type EnterpriseSearchPatchMapOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseSearchPatch)(nil)).Elem()
}

func (o EnterpriseSearchPatchMapOutput) ToEnterpriseSearchPatchMapOutput() EnterpriseSearchPatchMapOutput {
	return o
}

func (o EnterpriseSearchPatchMapOutput) ToEnterpriseSearchPatchMapOutputWithContext(ctx context.Context) EnterpriseSearchPatchMapOutput {
	return o
}

func (o EnterpriseSearchPatchMapOutput) MapIndex(k pulumi.StringInput) EnterpriseSearchPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnterpriseSearchPatch {
		return vs[0].(map[string]*EnterpriseSearchPatch)[vs[1].(string)]
	}).(EnterpriseSearchPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchPatchInput)(nil)).Elem(), &EnterpriseSearchPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchPatchArrayInput)(nil)).Elem(), EnterpriseSearchPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchPatchMapInput)(nil)).Elem(), EnterpriseSearchPatchMap{})
	pulumi.RegisterOutputType(EnterpriseSearchPatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchPatchArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchPatchMapOutput{})
}
