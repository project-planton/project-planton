// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// EnterpriseSearch is a Kubernetes CRD to represent Enterprise Search.
type EnterpriseSearchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta      `pulumi:"metadata"`
	Spec     *EnterpriseSearchSpec   `pulumi:"spec"`
	Status   *EnterpriseSearchStatus `pulumi:"status"`
}

// EnterpriseSearchTypeInput is an input type that accepts EnterpriseSearchTypeArgs and EnterpriseSearchTypeOutput values.
// You can construct a concrete instance of `EnterpriseSearchTypeInput` via:
//
//	EnterpriseSearchTypeArgs{...}
type EnterpriseSearchTypeInput interface {
	pulumi.Input

	ToEnterpriseSearchTypeOutput() EnterpriseSearchTypeOutput
	ToEnterpriseSearchTypeOutputWithContext(context.Context) EnterpriseSearchTypeOutput
}

// EnterpriseSearch is a Kubernetes CRD to represent Enterprise Search.
type EnterpriseSearchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput      `pulumi:"metadata"`
	Spec     EnterpriseSearchSpecPtrInput   `pulumi:"spec"`
	Status   EnterpriseSearchStatusPtrInput `pulumi:"status"`
}

func (EnterpriseSearchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchType)(nil)).Elem()
}

func (i EnterpriseSearchTypeArgs) ToEnterpriseSearchTypeOutput() EnterpriseSearchTypeOutput {
	return i.ToEnterpriseSearchTypeOutputWithContext(context.Background())
}

func (i EnterpriseSearchTypeArgs) ToEnterpriseSearchTypeOutputWithContext(ctx context.Context) EnterpriseSearchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchTypeOutput)
}

// EnterpriseSearchTypeArrayInput is an input type that accepts EnterpriseSearchTypeArray and EnterpriseSearchTypeArrayOutput values.
// You can construct a concrete instance of `EnterpriseSearchTypeArrayInput` via:
//
//	EnterpriseSearchTypeArray{ EnterpriseSearchTypeArgs{...} }
type EnterpriseSearchTypeArrayInput interface {
	pulumi.Input

	ToEnterpriseSearchTypeArrayOutput() EnterpriseSearchTypeArrayOutput
	ToEnterpriseSearchTypeArrayOutputWithContext(context.Context) EnterpriseSearchTypeArrayOutput
}

type EnterpriseSearchTypeArray []EnterpriseSearchTypeInput

func (EnterpriseSearchTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchType)(nil)).Elem()
}

func (i EnterpriseSearchTypeArray) ToEnterpriseSearchTypeArrayOutput() EnterpriseSearchTypeArrayOutput {
	return i.ToEnterpriseSearchTypeArrayOutputWithContext(context.Background())
}

func (i EnterpriseSearchTypeArray) ToEnterpriseSearchTypeArrayOutputWithContext(ctx context.Context) EnterpriseSearchTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchTypeArrayOutput)
}

// EnterpriseSearch is a Kubernetes CRD to represent Enterprise Search.
type EnterpriseSearchTypeOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchType)(nil)).Elem()
}

func (o EnterpriseSearchTypeOutput) ToEnterpriseSearchTypeOutput() EnterpriseSearchTypeOutput {
	return o
}

func (o EnterpriseSearchTypeOutput) ToEnterpriseSearchTypeOutputWithContext(ctx context.Context) EnterpriseSearchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EnterpriseSearchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EnterpriseSearchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o EnterpriseSearchTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o EnterpriseSearchTypeOutput) Spec() EnterpriseSearchSpecPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchType) *EnterpriseSearchSpec { return v.Spec }).(EnterpriseSearchSpecPtrOutput)
}

func (o EnterpriseSearchTypeOutput) Status() EnterpriseSearchStatusPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchType) *EnterpriseSearchStatus { return v.Status }).(EnterpriseSearchStatusPtrOutput)
}

type EnterpriseSearchTypeArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchType)(nil)).Elem()
}

func (o EnterpriseSearchTypeArrayOutput) ToEnterpriseSearchTypeArrayOutput() EnterpriseSearchTypeArrayOutput {
	return o
}

func (o EnterpriseSearchTypeArrayOutput) ToEnterpriseSearchTypeArrayOutputWithContext(ctx context.Context) EnterpriseSearchTypeArrayOutput {
	return o
}

func (o EnterpriseSearchTypeArrayOutput) Index(i pulumi.IntInput) EnterpriseSearchTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseSearchType {
		return vs[0].([]EnterpriseSearchType)[vs[1].(int)]
	}).(EnterpriseSearchTypeOutput)
}

// EnterpriseSearchList is a list of EnterpriseSearch
type EnterpriseSearchListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of enterprisesearches. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []EnterpriseSearchType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// EnterpriseSearchListTypeInput is an input type that accepts EnterpriseSearchListTypeArgs and EnterpriseSearchListTypeOutput values.
// You can construct a concrete instance of `EnterpriseSearchListTypeInput` via:
//
//	EnterpriseSearchListTypeArgs{...}
type EnterpriseSearchListTypeInput interface {
	pulumi.Input

	ToEnterpriseSearchListTypeOutput() EnterpriseSearchListTypeOutput
	ToEnterpriseSearchListTypeOutputWithContext(context.Context) EnterpriseSearchListTypeOutput
}

// EnterpriseSearchList is a list of EnterpriseSearch
type EnterpriseSearchListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of enterprisesearches. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items EnterpriseSearchTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (EnterpriseSearchListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchListType)(nil)).Elem()
}

func (i EnterpriseSearchListTypeArgs) ToEnterpriseSearchListTypeOutput() EnterpriseSearchListTypeOutput {
	return i.ToEnterpriseSearchListTypeOutputWithContext(context.Background())
}

func (i EnterpriseSearchListTypeArgs) ToEnterpriseSearchListTypeOutputWithContext(ctx context.Context) EnterpriseSearchListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchListTypeOutput)
}

// EnterpriseSearchList is a list of EnterpriseSearch
type EnterpriseSearchListTypeOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchListType)(nil)).Elem()
}

func (o EnterpriseSearchListTypeOutput) ToEnterpriseSearchListTypeOutput() EnterpriseSearchListTypeOutput {
	return o
}

func (o EnterpriseSearchListTypeOutput) ToEnterpriseSearchListTypeOutputWithContext(ctx context.Context) EnterpriseSearchListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EnterpriseSearchListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of enterprisesearches. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o EnterpriseSearchListTypeOutput) Items() EnterpriseSearchTypeArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchListType) []EnterpriseSearchType { return v.Items }).(EnterpriseSearchTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EnterpriseSearchListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EnterpriseSearchListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// EnterpriseSearch is a Kubernetes CRD to represent Enterprise Search.
type EnterpriseSearchPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch      `pulumi:"metadata"`
	Spec     *EnterpriseSearchSpecPatch   `pulumi:"spec"`
	Status   *EnterpriseSearchStatusPatch `pulumi:"status"`
}

// EnterpriseSearchPatchTypeInput is an input type that accepts EnterpriseSearchPatchTypeArgs and EnterpriseSearchPatchTypeOutput values.
// You can construct a concrete instance of `EnterpriseSearchPatchTypeInput` via:
//
//	EnterpriseSearchPatchTypeArgs{...}
type EnterpriseSearchPatchTypeInput interface {
	pulumi.Input

	ToEnterpriseSearchPatchTypeOutput() EnterpriseSearchPatchTypeOutput
	ToEnterpriseSearchPatchTypeOutputWithContext(context.Context) EnterpriseSearchPatchTypeOutput
}

// EnterpriseSearch is a Kubernetes CRD to represent Enterprise Search.
type EnterpriseSearchPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput      `pulumi:"metadata"`
	Spec     EnterpriseSearchSpecPatchPtrInput   `pulumi:"spec"`
	Status   EnterpriseSearchStatusPatchPtrInput `pulumi:"status"`
}

func (EnterpriseSearchPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchPatchType)(nil)).Elem()
}

func (i EnterpriseSearchPatchTypeArgs) ToEnterpriseSearchPatchTypeOutput() EnterpriseSearchPatchTypeOutput {
	return i.ToEnterpriseSearchPatchTypeOutputWithContext(context.Background())
}

func (i EnterpriseSearchPatchTypeArgs) ToEnterpriseSearchPatchTypeOutputWithContext(ctx context.Context) EnterpriseSearchPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchPatchTypeOutput)
}

// EnterpriseSearch is a Kubernetes CRD to represent Enterprise Search.
type EnterpriseSearchPatchTypeOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchPatchType)(nil)).Elem()
}

func (o EnterpriseSearchPatchTypeOutput) ToEnterpriseSearchPatchTypeOutput() EnterpriseSearchPatchTypeOutput {
	return o
}

func (o EnterpriseSearchPatchTypeOutput) ToEnterpriseSearchPatchTypeOutputWithContext(ctx context.Context) EnterpriseSearchPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EnterpriseSearchPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EnterpriseSearchPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o EnterpriseSearchPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o EnterpriseSearchPatchTypeOutput) Spec() EnterpriseSearchSpecPatchPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchPatchType) *EnterpriseSearchSpecPatch { return v.Spec }).(EnterpriseSearchSpecPatchPtrOutput)
}

func (o EnterpriseSearchPatchTypeOutput) Status() EnterpriseSearchStatusPatchPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchPatchType) *EnterpriseSearchStatusPatch { return v.Status }).(EnterpriseSearchStatusPatchPtrOutput)
}

// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
type EnterpriseSearchSpec struct {
	// Config holds the Enterprise Search configuration.
	Config    map[string]interface{}         `pulumi:"config"`
	ConfigRef *EnterpriseSearchSpecConfigRef `pulumi:"configRef"`
	// Count of Enterprise Search instances to deploy.
	Count            *int                                  `pulumi:"count"`
	ElasticsearchRef *EnterpriseSearchSpecElasticsearchRef `pulumi:"elasticsearchRef"`
	Http             *EnterpriseSearchSpecHttp             `pulumi:"http"`
	// Image is the Enterprise Search Docker image to deploy.
	Image *string `pulumi:"image"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on)
	// for the Enterprise Search pods.
	PodTemplate map[string]interface{} `pulumi:"podTemplate"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Version of Enterprise Search.
	Version *string `pulumi:"version"`
}

// EnterpriseSearchSpecInput is an input type that accepts EnterpriseSearchSpecArgs and EnterpriseSearchSpecOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecInput` via:
//
//	EnterpriseSearchSpecArgs{...}
type EnterpriseSearchSpecInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecOutput() EnterpriseSearchSpecOutput
	ToEnterpriseSearchSpecOutputWithContext(context.Context) EnterpriseSearchSpecOutput
}

// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
type EnterpriseSearchSpecArgs struct {
	// Config holds the Enterprise Search configuration.
	Config    pulumi.MapInput                       `pulumi:"config"`
	ConfigRef EnterpriseSearchSpecConfigRefPtrInput `pulumi:"configRef"`
	// Count of Enterprise Search instances to deploy.
	Count            pulumi.IntPtrInput                           `pulumi:"count"`
	ElasticsearchRef EnterpriseSearchSpecElasticsearchRefPtrInput `pulumi:"elasticsearchRef"`
	Http             EnterpriseSearchSpecHttpPtrInput             `pulumi:"http"`
	// Image is the Enterprise Search Docker image to deploy.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on)
	// for the Enterprise Search pods.
	PodTemplate pulumi.MapInput `pulumi:"podTemplate"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// Version of Enterprise Search.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (EnterpriseSearchSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpec)(nil)).Elem()
}

func (i EnterpriseSearchSpecArgs) ToEnterpriseSearchSpecOutput() EnterpriseSearchSpecOutput {
	return i.ToEnterpriseSearchSpecOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecArgs) ToEnterpriseSearchSpecOutputWithContext(ctx context.Context) EnterpriseSearchSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecOutput)
}

func (i EnterpriseSearchSpecArgs) ToEnterpriseSearchSpecPtrOutput() EnterpriseSearchSpecPtrOutput {
	return i.ToEnterpriseSearchSpecPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecArgs) ToEnterpriseSearchSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecOutput).ToEnterpriseSearchSpecPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecPtrInput is an input type that accepts EnterpriseSearchSpecArgs, EnterpriseSearchSpecPtr and EnterpriseSearchSpecPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecPtrInput` via:
//
//	        EnterpriseSearchSpecArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecPtrOutput() EnterpriseSearchSpecPtrOutput
	ToEnterpriseSearchSpecPtrOutputWithContext(context.Context) EnterpriseSearchSpecPtrOutput
}

type enterpriseSearchSpecPtrType EnterpriseSearchSpecArgs

func EnterpriseSearchSpecPtr(v *EnterpriseSearchSpecArgs) EnterpriseSearchSpecPtrInput {
	return (*enterpriseSearchSpecPtrType)(v)
}

func (*enterpriseSearchSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpec)(nil)).Elem()
}

func (i *enterpriseSearchSpecPtrType) ToEnterpriseSearchSpecPtrOutput() EnterpriseSearchSpecPtrOutput {
	return i.ToEnterpriseSearchSpecPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecPtrType) ToEnterpriseSearchSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecPtrOutput)
}

// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
type EnterpriseSearchSpecOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpec)(nil)).Elem()
}

func (o EnterpriseSearchSpecOutput) ToEnterpriseSearchSpecOutput() EnterpriseSearchSpecOutput {
	return o
}

func (o EnterpriseSearchSpecOutput) ToEnterpriseSearchSpecOutputWithContext(ctx context.Context) EnterpriseSearchSpecOutput {
	return o
}

func (o EnterpriseSearchSpecOutput) ToEnterpriseSearchSpecPtrOutput() EnterpriseSearchSpecPtrOutput {
	return o.ToEnterpriseSearchSpecPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecOutput) ToEnterpriseSearchSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpec) *EnterpriseSearchSpec {
		return &v
	}).(EnterpriseSearchSpecPtrOutput)
}

// Config holds the Enterprise Search configuration.
func (o EnterpriseSearchSpecOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

func (o EnterpriseSearchSpecOutput) ConfigRef() EnterpriseSearchSpecConfigRefPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *EnterpriseSearchSpecConfigRef { return v.ConfigRef }).(EnterpriseSearchSpecConfigRefPtrOutput)
}

// Count of Enterprise Search instances to deploy.
func (o EnterpriseSearchSpecOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *int { return v.Count }).(pulumi.IntPtrOutput)
}

func (o EnterpriseSearchSpecOutput) ElasticsearchRef() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *EnterpriseSearchSpecElasticsearchRef { return v.ElasticsearchRef }).(EnterpriseSearchSpecElasticsearchRefPtrOutput)
}

func (o EnterpriseSearchSpecOutput) Http() EnterpriseSearchSpecHttpPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *EnterpriseSearchSpecHttp { return v.Http }).(EnterpriseSearchSpecHttpPtrOutput)
}

// Image is the Enterprise Search Docker image to deploy.
func (o EnterpriseSearchSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on)
// for the Enterprise Search pods.
func (o EnterpriseSearchSpecOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) map[string]interface{} { return v.PodTemplate }).(pulumi.MapOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o EnterpriseSearchSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// Version of Enterprise Search.
func (o EnterpriseSearchSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpec)(nil)).Elem()
}

func (o EnterpriseSearchSpecPtrOutput) ToEnterpriseSearchSpecPtrOutput() EnterpriseSearchSpecPtrOutput {
	return o
}

func (o EnterpriseSearchSpecPtrOutput) ToEnterpriseSearchSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPtrOutput {
	return o
}

func (o EnterpriseSearchSpecPtrOutput) Elem() EnterpriseSearchSpecOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) EnterpriseSearchSpec {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpec
		return ret
	}).(EnterpriseSearchSpecOutput)
}

// Config holds the Enterprise Search configuration.
func (o EnterpriseSearchSpecPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

func (o EnterpriseSearchSpecPtrOutput) ConfigRef() EnterpriseSearchSpecConfigRefPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *EnterpriseSearchSpecConfigRef {
		if v == nil {
			return nil
		}
		return v.ConfigRef
	}).(EnterpriseSearchSpecConfigRefPtrOutput)
}

// Count of Enterprise Search instances to deploy.
func (o EnterpriseSearchSpecPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

func (o EnterpriseSearchSpecPtrOutput) ElasticsearchRef() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *EnterpriseSearchSpecElasticsearchRef {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRef
	}).(EnterpriseSearchSpecElasticsearchRefPtrOutput)
}

func (o EnterpriseSearchSpecPtrOutput) Http() EnterpriseSearchSpecHttpPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *EnterpriseSearchSpecHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(EnterpriseSearchSpecHttpPtrOutput)
}

// Image is the Enterprise Search Docker image to deploy.
func (o EnterpriseSearchSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on)
// for the Enterprise Search pods.
func (o EnterpriseSearchSpecPtrOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.MapOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o EnterpriseSearchSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Version of Enterprise Search.
func (o EnterpriseSearchSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
type EnterpriseSearchSpecConfigRef struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// EnterpriseSearchSpecConfigRefInput is an input type that accepts EnterpriseSearchSpecConfigRefArgs and EnterpriseSearchSpecConfigRefOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecConfigRefInput` via:
//
//	EnterpriseSearchSpecConfigRefArgs{...}
type EnterpriseSearchSpecConfigRefInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecConfigRefOutput() EnterpriseSearchSpecConfigRefOutput
	ToEnterpriseSearchSpecConfigRefOutputWithContext(context.Context) EnterpriseSearchSpecConfigRefOutput
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
type EnterpriseSearchSpecConfigRefArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (EnterpriseSearchSpecConfigRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecConfigRef)(nil)).Elem()
}

func (i EnterpriseSearchSpecConfigRefArgs) ToEnterpriseSearchSpecConfigRefOutput() EnterpriseSearchSpecConfigRefOutput {
	return i.ToEnterpriseSearchSpecConfigRefOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecConfigRefArgs) ToEnterpriseSearchSpecConfigRefOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecConfigRefOutput)
}

func (i EnterpriseSearchSpecConfigRefArgs) ToEnterpriseSearchSpecConfigRefPtrOutput() EnterpriseSearchSpecConfigRefPtrOutput {
	return i.ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecConfigRefArgs) ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecConfigRefOutput).ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecConfigRefPtrInput is an input type that accepts EnterpriseSearchSpecConfigRefArgs, EnterpriseSearchSpecConfigRefPtr and EnterpriseSearchSpecConfigRefPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecConfigRefPtrInput` via:
//
//	        EnterpriseSearchSpecConfigRefArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecConfigRefPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecConfigRefPtrOutput() EnterpriseSearchSpecConfigRefPtrOutput
	ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(context.Context) EnterpriseSearchSpecConfigRefPtrOutput
}

type enterpriseSearchSpecConfigRefPtrType EnterpriseSearchSpecConfigRefArgs

func EnterpriseSearchSpecConfigRefPtr(v *EnterpriseSearchSpecConfigRefArgs) EnterpriseSearchSpecConfigRefPtrInput {
	return (*enterpriseSearchSpecConfigRefPtrType)(v)
}

func (*enterpriseSearchSpecConfigRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecConfigRef)(nil)).Elem()
}

func (i *enterpriseSearchSpecConfigRefPtrType) ToEnterpriseSearchSpecConfigRefPtrOutput() EnterpriseSearchSpecConfigRefPtrOutput {
	return i.ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecConfigRefPtrType) ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecConfigRefPtrOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
type EnterpriseSearchSpecConfigRefOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecConfigRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecConfigRef)(nil)).Elem()
}

func (o EnterpriseSearchSpecConfigRefOutput) ToEnterpriseSearchSpecConfigRefOutput() EnterpriseSearchSpecConfigRefOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefOutput) ToEnterpriseSearchSpecConfigRefOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefOutput) ToEnterpriseSearchSpecConfigRefPtrOutput() EnterpriseSearchSpecConfigRefPtrOutput {
	return o.ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecConfigRefOutput) ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecConfigRef) *EnterpriseSearchSpecConfigRef {
		return &v
	}).(EnterpriseSearchSpecConfigRefPtrOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecConfigRefOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecConfigRef) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecConfigRefPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecConfigRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecConfigRef)(nil)).Elem()
}

func (o EnterpriseSearchSpecConfigRefPtrOutput) ToEnterpriseSearchSpecConfigRefPtrOutput() EnterpriseSearchSpecConfigRefPtrOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefPtrOutput) ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPtrOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefPtrOutput) Elem() EnterpriseSearchSpecConfigRefOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecConfigRef) EnterpriseSearchSpecConfigRef {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecConfigRef
		return ret
	}).(EnterpriseSearchSpecConfigRefOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecConfigRefPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
type EnterpriseSearchSpecConfigRefPatch struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// EnterpriseSearchSpecConfigRefPatchInput is an input type that accepts EnterpriseSearchSpecConfigRefPatchArgs and EnterpriseSearchSpecConfigRefPatchOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecConfigRefPatchInput` via:
//
//	EnterpriseSearchSpecConfigRefPatchArgs{...}
type EnterpriseSearchSpecConfigRefPatchInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecConfigRefPatchOutput() EnterpriseSearchSpecConfigRefPatchOutput
	ToEnterpriseSearchSpecConfigRefPatchOutputWithContext(context.Context) EnterpriseSearchSpecConfigRefPatchOutput
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
type EnterpriseSearchSpecConfigRefPatchArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (EnterpriseSearchSpecConfigRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecConfigRefPatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecConfigRefPatchArgs) ToEnterpriseSearchSpecConfigRefPatchOutput() EnterpriseSearchSpecConfigRefPatchOutput {
	return i.ToEnterpriseSearchSpecConfigRefPatchOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecConfigRefPatchArgs) ToEnterpriseSearchSpecConfigRefPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecConfigRefPatchOutput)
}

func (i EnterpriseSearchSpecConfigRefPatchArgs) ToEnterpriseSearchSpecConfigRefPatchPtrOutput() EnterpriseSearchSpecConfigRefPatchPtrOutput {
	return i.ToEnterpriseSearchSpecConfigRefPatchPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecConfigRefPatchArgs) ToEnterpriseSearchSpecConfigRefPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecConfigRefPatchOutput).ToEnterpriseSearchSpecConfigRefPatchPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecConfigRefPatchPtrInput is an input type that accepts EnterpriseSearchSpecConfigRefPatchArgs, EnterpriseSearchSpecConfigRefPatchPtr and EnterpriseSearchSpecConfigRefPatchPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecConfigRefPatchPtrInput` via:
//
//	        EnterpriseSearchSpecConfigRefPatchArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecConfigRefPatchPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecConfigRefPatchPtrOutput() EnterpriseSearchSpecConfigRefPatchPtrOutput
	ToEnterpriseSearchSpecConfigRefPatchPtrOutputWithContext(context.Context) EnterpriseSearchSpecConfigRefPatchPtrOutput
}

type enterpriseSearchSpecConfigRefPatchPtrType EnterpriseSearchSpecConfigRefPatchArgs

func EnterpriseSearchSpecConfigRefPatchPtr(v *EnterpriseSearchSpecConfigRefPatchArgs) EnterpriseSearchSpecConfigRefPatchPtrInput {
	return (*enterpriseSearchSpecConfigRefPatchPtrType)(v)
}

func (*enterpriseSearchSpecConfigRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecConfigRefPatch)(nil)).Elem()
}

func (i *enterpriseSearchSpecConfigRefPatchPtrType) ToEnterpriseSearchSpecConfigRefPatchPtrOutput() EnterpriseSearchSpecConfigRefPatchPtrOutput {
	return i.ToEnterpriseSearchSpecConfigRefPatchPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecConfigRefPatchPtrType) ToEnterpriseSearchSpecConfigRefPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecConfigRefPatchPtrOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
type EnterpriseSearchSpecConfigRefPatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecConfigRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecConfigRefPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecConfigRefPatchOutput) ToEnterpriseSearchSpecConfigRefPatchOutput() EnterpriseSearchSpecConfigRefPatchOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefPatchOutput) ToEnterpriseSearchSpecConfigRefPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPatchOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefPatchOutput) ToEnterpriseSearchSpecConfigRefPatchPtrOutput() EnterpriseSearchSpecConfigRefPatchPtrOutput {
	return o.ToEnterpriseSearchSpecConfigRefPatchPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecConfigRefPatchOutput) ToEnterpriseSearchSpecConfigRefPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecConfigRefPatch) *EnterpriseSearchSpecConfigRefPatch {
		return &v
	}).(EnterpriseSearchSpecConfigRefPatchPtrOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecConfigRefPatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecConfigRefPatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecConfigRefPatchPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecConfigRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecConfigRefPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecConfigRefPatchPtrOutput) ToEnterpriseSearchSpecConfigRefPatchPtrOutput() EnterpriseSearchSpecConfigRefPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefPatchPtrOutput) ToEnterpriseSearchSpecConfigRefPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefPatchPtrOutput) Elem() EnterpriseSearchSpecConfigRefPatchOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecConfigRefPatch) EnterpriseSearchSpecConfigRefPatch {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecConfigRefPatch
		return ret
	}).(EnterpriseSearchSpecConfigRefPatchOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecConfigRefPatchPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecConfigRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
type EnterpriseSearchSpecElasticsearchRef struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// EnterpriseSearchSpecElasticsearchRefInput is an input type that accepts EnterpriseSearchSpecElasticsearchRefArgs and EnterpriseSearchSpecElasticsearchRefOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecElasticsearchRefInput` via:
//
//	EnterpriseSearchSpecElasticsearchRefArgs{...}
type EnterpriseSearchSpecElasticsearchRefInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecElasticsearchRefOutput() EnterpriseSearchSpecElasticsearchRefOutput
	ToEnterpriseSearchSpecElasticsearchRefOutputWithContext(context.Context) EnterpriseSearchSpecElasticsearchRefOutput
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
type EnterpriseSearchSpecElasticsearchRefArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (EnterpriseSearchSpecElasticsearchRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecElasticsearchRef)(nil)).Elem()
}

func (i EnterpriseSearchSpecElasticsearchRefArgs) ToEnterpriseSearchSpecElasticsearchRefOutput() EnterpriseSearchSpecElasticsearchRefOutput {
	return i.ToEnterpriseSearchSpecElasticsearchRefOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecElasticsearchRefArgs) ToEnterpriseSearchSpecElasticsearchRefOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecElasticsearchRefOutput)
}

func (i EnterpriseSearchSpecElasticsearchRefArgs) ToEnterpriseSearchSpecElasticsearchRefPtrOutput() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return i.ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecElasticsearchRefArgs) ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecElasticsearchRefOutput).ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecElasticsearchRefPtrInput is an input type that accepts EnterpriseSearchSpecElasticsearchRefArgs, EnterpriseSearchSpecElasticsearchRefPtr and EnterpriseSearchSpecElasticsearchRefPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecElasticsearchRefPtrInput` via:
//
//	        EnterpriseSearchSpecElasticsearchRefArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecElasticsearchRefPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecElasticsearchRefPtrOutput() EnterpriseSearchSpecElasticsearchRefPtrOutput
	ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(context.Context) EnterpriseSearchSpecElasticsearchRefPtrOutput
}

type enterpriseSearchSpecElasticsearchRefPtrType EnterpriseSearchSpecElasticsearchRefArgs

func EnterpriseSearchSpecElasticsearchRefPtr(v *EnterpriseSearchSpecElasticsearchRefArgs) EnterpriseSearchSpecElasticsearchRefPtrInput {
	return (*enterpriseSearchSpecElasticsearchRefPtrType)(v)
}

func (*enterpriseSearchSpecElasticsearchRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecElasticsearchRef)(nil)).Elem()
}

func (i *enterpriseSearchSpecElasticsearchRefPtrType) ToEnterpriseSearchSpecElasticsearchRefPtrOutput() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return i.ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecElasticsearchRefPtrType) ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecElasticsearchRefPtrOutput)
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
type EnterpriseSearchSpecElasticsearchRefOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecElasticsearchRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecElasticsearchRef)(nil)).Elem()
}

func (o EnterpriseSearchSpecElasticsearchRefOutput) ToEnterpriseSearchSpecElasticsearchRefOutput() EnterpriseSearchSpecElasticsearchRefOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefOutput) ToEnterpriseSearchSpecElasticsearchRefOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefOutput) ToEnterpriseSearchSpecElasticsearchRefPtrOutput() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o.ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecElasticsearchRefOutput) ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecElasticsearchRef) *EnterpriseSearchSpecElasticsearchRef {
		return &v
	}).(EnterpriseSearchSpecElasticsearchRefPtrOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o EnterpriseSearchSpecElasticsearchRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecElasticsearchRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o EnterpriseSearchSpecElasticsearchRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecElasticsearchRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o EnterpriseSearchSpecElasticsearchRefOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecElasticsearchRef) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o EnterpriseSearchSpecElasticsearchRefOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecElasticsearchRef) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecElasticsearchRefPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecElasticsearchRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecElasticsearchRef)(nil)).Elem()
}

func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) ToEnterpriseSearchSpecElasticsearchRefPtrOutput() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) Elem() EnterpriseSearchSpecElasticsearchRefOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRef) EnterpriseSearchSpecElasticsearchRef {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecElasticsearchRef
		return ret
	}).(EnterpriseSearchSpecElasticsearchRefOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
type EnterpriseSearchSpecElasticsearchRefPatch struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// EnterpriseSearchSpecElasticsearchRefPatchInput is an input type that accepts EnterpriseSearchSpecElasticsearchRefPatchArgs and EnterpriseSearchSpecElasticsearchRefPatchOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecElasticsearchRefPatchInput` via:
//
//	EnterpriseSearchSpecElasticsearchRefPatchArgs{...}
type EnterpriseSearchSpecElasticsearchRefPatchInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecElasticsearchRefPatchOutput() EnterpriseSearchSpecElasticsearchRefPatchOutput
	ToEnterpriseSearchSpecElasticsearchRefPatchOutputWithContext(context.Context) EnterpriseSearchSpecElasticsearchRefPatchOutput
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
type EnterpriseSearchSpecElasticsearchRefPatchArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (EnterpriseSearchSpecElasticsearchRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecElasticsearchRefPatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecElasticsearchRefPatchArgs) ToEnterpriseSearchSpecElasticsearchRefPatchOutput() EnterpriseSearchSpecElasticsearchRefPatchOutput {
	return i.ToEnterpriseSearchSpecElasticsearchRefPatchOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecElasticsearchRefPatchArgs) ToEnterpriseSearchSpecElasticsearchRefPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecElasticsearchRefPatchOutput)
}

func (i EnterpriseSearchSpecElasticsearchRefPatchArgs) ToEnterpriseSearchSpecElasticsearchRefPatchPtrOutput() EnterpriseSearchSpecElasticsearchRefPatchPtrOutput {
	return i.ToEnterpriseSearchSpecElasticsearchRefPatchPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecElasticsearchRefPatchArgs) ToEnterpriseSearchSpecElasticsearchRefPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecElasticsearchRefPatchOutput).ToEnterpriseSearchSpecElasticsearchRefPatchPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecElasticsearchRefPatchPtrInput is an input type that accepts EnterpriseSearchSpecElasticsearchRefPatchArgs, EnterpriseSearchSpecElasticsearchRefPatchPtr and EnterpriseSearchSpecElasticsearchRefPatchPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecElasticsearchRefPatchPtrInput` via:
//
//	        EnterpriseSearchSpecElasticsearchRefPatchArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecElasticsearchRefPatchPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecElasticsearchRefPatchPtrOutput() EnterpriseSearchSpecElasticsearchRefPatchPtrOutput
	ToEnterpriseSearchSpecElasticsearchRefPatchPtrOutputWithContext(context.Context) EnterpriseSearchSpecElasticsearchRefPatchPtrOutput
}

type enterpriseSearchSpecElasticsearchRefPatchPtrType EnterpriseSearchSpecElasticsearchRefPatchArgs

func EnterpriseSearchSpecElasticsearchRefPatchPtr(v *EnterpriseSearchSpecElasticsearchRefPatchArgs) EnterpriseSearchSpecElasticsearchRefPatchPtrInput {
	return (*enterpriseSearchSpecElasticsearchRefPatchPtrType)(v)
}

func (*enterpriseSearchSpecElasticsearchRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecElasticsearchRefPatch)(nil)).Elem()
}

func (i *enterpriseSearchSpecElasticsearchRefPatchPtrType) ToEnterpriseSearchSpecElasticsearchRefPatchPtrOutput() EnterpriseSearchSpecElasticsearchRefPatchPtrOutput {
	return i.ToEnterpriseSearchSpecElasticsearchRefPatchPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecElasticsearchRefPatchPtrType) ToEnterpriseSearchSpecElasticsearchRefPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecElasticsearchRefPatchPtrOutput)
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
type EnterpriseSearchSpecElasticsearchRefPatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecElasticsearchRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecElasticsearchRefPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecElasticsearchRefPatchOutput) ToEnterpriseSearchSpecElasticsearchRefPatchOutput() EnterpriseSearchSpecElasticsearchRefPatchOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefPatchOutput) ToEnterpriseSearchSpecElasticsearchRefPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPatchOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefPatchOutput) ToEnterpriseSearchSpecElasticsearchRefPatchPtrOutput() EnterpriseSearchSpecElasticsearchRefPatchPtrOutput {
	return o.ToEnterpriseSearchSpecElasticsearchRefPatchPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecElasticsearchRefPatchOutput) ToEnterpriseSearchSpecElasticsearchRefPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecElasticsearchRefPatch) *EnterpriseSearchSpecElasticsearchRefPatch {
		return &v
	}).(EnterpriseSearchSpecElasticsearchRefPatchPtrOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o EnterpriseSearchSpecElasticsearchRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecElasticsearchRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o EnterpriseSearchSpecElasticsearchRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecElasticsearchRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o EnterpriseSearchSpecElasticsearchRefPatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecElasticsearchRefPatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o EnterpriseSearchSpecElasticsearchRefPatchOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecElasticsearchRefPatch) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecElasticsearchRefPatchPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecElasticsearchRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecElasticsearchRefPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecElasticsearchRefPatchPtrOutput) ToEnterpriseSearchSpecElasticsearchRefPatchPtrOutput() EnterpriseSearchSpecElasticsearchRefPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefPatchPtrOutput) ToEnterpriseSearchSpecElasticsearchRefPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefPatchPtrOutput) Elem() EnterpriseSearchSpecElasticsearchRefPatchOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRefPatch) EnterpriseSearchSpecElasticsearchRefPatch {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecElasticsearchRefPatch
		return ret
	}).(EnterpriseSearchSpecElasticsearchRefPatchOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o EnterpriseSearchSpecElasticsearchRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o EnterpriseSearchSpecElasticsearchRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o EnterpriseSearchSpecElasticsearchRefPatchPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o EnterpriseSearchSpecElasticsearchRefPatchPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
type EnterpriseSearchSpecHttp struct {
	Service *EnterpriseSearchSpecHttpService `pulumi:"service"`
	Tls     *EnterpriseSearchSpecHttpTls     `pulumi:"tls"`
}

// EnterpriseSearchSpecHttpInput is an input type that accepts EnterpriseSearchSpecHttpArgs and EnterpriseSearchSpecHttpOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpInput` via:
//
//	EnterpriseSearchSpecHttpArgs{...}
type EnterpriseSearchSpecHttpInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpOutput() EnterpriseSearchSpecHttpOutput
	ToEnterpriseSearchSpecHttpOutputWithContext(context.Context) EnterpriseSearchSpecHttpOutput
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
type EnterpriseSearchSpecHttpArgs struct {
	Service EnterpriseSearchSpecHttpServicePtrInput `pulumi:"service"`
	Tls     EnterpriseSearchSpecHttpTlsPtrInput     `pulumi:"tls"`
}

func (EnterpriseSearchSpecHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttp)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpArgs) ToEnterpriseSearchSpecHttpOutput() EnterpriseSearchSpecHttpOutput {
	return i.ToEnterpriseSearchSpecHttpOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpArgs) ToEnterpriseSearchSpecHttpOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpOutput)
}

func (i EnterpriseSearchSpecHttpArgs) ToEnterpriseSearchSpecHttpPtrOutput() EnterpriseSearchSpecHttpPtrOutput {
	return i.ToEnterpriseSearchSpecHttpPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpArgs) ToEnterpriseSearchSpecHttpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpOutput).ToEnterpriseSearchSpecHttpPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpPtrInput is an input type that accepts EnterpriseSearchSpecHttpArgs, EnterpriseSearchSpecHttpPtr and EnterpriseSearchSpecHttpPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpPtrInput` via:
//
//	        EnterpriseSearchSpecHttpArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpPtrOutput() EnterpriseSearchSpecHttpPtrOutput
	ToEnterpriseSearchSpecHttpPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpPtrOutput
}

type enterpriseSearchSpecHttpPtrType EnterpriseSearchSpecHttpArgs

func EnterpriseSearchSpecHttpPtr(v *EnterpriseSearchSpecHttpArgs) EnterpriseSearchSpecHttpPtrInput {
	return (*enterpriseSearchSpecHttpPtrType)(v)
}

func (*enterpriseSearchSpecHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttp)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpPtrType) ToEnterpriseSearchSpecHttpPtrOutput() EnterpriseSearchSpecHttpPtrOutput {
	return i.ToEnterpriseSearchSpecHttpPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpPtrType) ToEnterpriseSearchSpecHttpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpPtrOutput)
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
type EnterpriseSearchSpecHttpOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttp)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpOutput) ToEnterpriseSearchSpecHttpOutput() EnterpriseSearchSpecHttpOutput {
	return o
}

func (o EnterpriseSearchSpecHttpOutput) ToEnterpriseSearchSpecHttpOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpOutput {
	return o
}

func (o EnterpriseSearchSpecHttpOutput) ToEnterpriseSearchSpecHttpPtrOutput() EnterpriseSearchSpecHttpPtrOutput {
	return o.ToEnterpriseSearchSpecHttpPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpOutput) ToEnterpriseSearchSpecHttpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttp) *EnterpriseSearchSpecHttp {
		return &v
	}).(EnterpriseSearchSpecHttpPtrOutput)
}

func (o EnterpriseSearchSpecHttpOutput) Service() EnterpriseSearchSpecHttpServicePtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttp) *EnterpriseSearchSpecHttpService { return v.Service }).(EnterpriseSearchSpecHttpServicePtrOutput)
}

func (o EnterpriseSearchSpecHttpOutput) Tls() EnterpriseSearchSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttp) *EnterpriseSearchSpecHttpTls { return v.Tls }).(EnterpriseSearchSpecHttpTlsPtrOutput)
}

type EnterpriseSearchSpecHttpPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttp)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpPtrOutput) ToEnterpriseSearchSpecHttpPtrOutput() EnterpriseSearchSpecHttpPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpPtrOutput) ToEnterpriseSearchSpecHttpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpPtrOutput) Elem() EnterpriseSearchSpecHttpOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttp) EnterpriseSearchSpecHttp {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttp
		return ret
	}).(EnterpriseSearchSpecHttpOutput)
}

func (o EnterpriseSearchSpecHttpPtrOutput) Service() EnterpriseSearchSpecHttpServicePtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttp) *EnterpriseSearchSpecHttpService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(EnterpriseSearchSpecHttpServicePtrOutput)
}

func (o EnterpriseSearchSpecHttpPtrOutput) Tls() EnterpriseSearchSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttp) *EnterpriseSearchSpecHttpTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(EnterpriseSearchSpecHttpTlsPtrOutput)
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
type EnterpriseSearchSpecHttpPatch struct {
	Service *EnterpriseSearchSpecHttpServicePatch `pulumi:"service"`
	Tls     *EnterpriseSearchSpecHttpTlsPatch     `pulumi:"tls"`
}

// EnterpriseSearchSpecHttpPatchInput is an input type that accepts EnterpriseSearchSpecHttpPatchArgs and EnterpriseSearchSpecHttpPatchOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpPatchInput` via:
//
//	EnterpriseSearchSpecHttpPatchArgs{...}
type EnterpriseSearchSpecHttpPatchInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpPatchOutput() EnterpriseSearchSpecHttpPatchOutput
	ToEnterpriseSearchSpecHttpPatchOutputWithContext(context.Context) EnterpriseSearchSpecHttpPatchOutput
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
type EnterpriseSearchSpecHttpPatchArgs struct {
	Service EnterpriseSearchSpecHttpServicePatchPtrInput `pulumi:"service"`
	Tls     EnterpriseSearchSpecHttpTlsPatchPtrInput     `pulumi:"tls"`
}

func (EnterpriseSearchSpecHttpPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpPatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpPatchArgs) ToEnterpriseSearchSpecHttpPatchOutput() EnterpriseSearchSpecHttpPatchOutput {
	return i.ToEnterpriseSearchSpecHttpPatchOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpPatchArgs) ToEnterpriseSearchSpecHttpPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpPatchOutput)
}

func (i EnterpriseSearchSpecHttpPatchArgs) ToEnterpriseSearchSpecHttpPatchPtrOutput() EnterpriseSearchSpecHttpPatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpPatchPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpPatchArgs) ToEnterpriseSearchSpecHttpPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpPatchOutput).ToEnterpriseSearchSpecHttpPatchPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpPatchPtrInput is an input type that accepts EnterpriseSearchSpecHttpPatchArgs, EnterpriseSearchSpecHttpPatchPtr and EnterpriseSearchSpecHttpPatchPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpPatchPtrInput` via:
//
//	        EnterpriseSearchSpecHttpPatchArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpPatchPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpPatchPtrOutput() EnterpriseSearchSpecHttpPatchPtrOutput
	ToEnterpriseSearchSpecHttpPatchPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpPatchPtrOutput
}

type enterpriseSearchSpecHttpPatchPtrType EnterpriseSearchSpecHttpPatchArgs

func EnterpriseSearchSpecHttpPatchPtr(v *EnterpriseSearchSpecHttpPatchArgs) EnterpriseSearchSpecHttpPatchPtrInput {
	return (*enterpriseSearchSpecHttpPatchPtrType)(v)
}

func (*enterpriseSearchSpecHttpPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpPatch)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpPatchPtrType) ToEnterpriseSearchSpecHttpPatchPtrOutput() EnterpriseSearchSpecHttpPatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpPatchPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpPatchPtrType) ToEnterpriseSearchSpecHttpPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpPatchPtrOutput)
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
type EnterpriseSearchSpecHttpPatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpPatchOutput) ToEnterpriseSearchSpecHttpPatchOutput() EnterpriseSearchSpecHttpPatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpPatchOutput) ToEnterpriseSearchSpecHttpPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpPatchOutput) ToEnterpriseSearchSpecHttpPatchPtrOutput() EnterpriseSearchSpecHttpPatchPtrOutput {
	return o.ToEnterpriseSearchSpecHttpPatchPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpPatchOutput) ToEnterpriseSearchSpecHttpPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpPatch) *EnterpriseSearchSpecHttpPatch {
		return &v
	}).(EnterpriseSearchSpecHttpPatchPtrOutput)
}

func (o EnterpriseSearchSpecHttpPatchOutput) Service() EnterpriseSearchSpecHttpServicePatchPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpPatch) *EnterpriseSearchSpecHttpServicePatch { return v.Service }).(EnterpriseSearchSpecHttpServicePatchPtrOutput)
}

func (o EnterpriseSearchSpecHttpPatchOutput) Tls() EnterpriseSearchSpecHttpTlsPatchPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpPatch) *EnterpriseSearchSpecHttpTlsPatch { return v.Tls }).(EnterpriseSearchSpecHttpTlsPatchPtrOutput)
}

type EnterpriseSearchSpecHttpPatchPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpPatchPtrOutput) ToEnterpriseSearchSpecHttpPatchPtrOutput() EnterpriseSearchSpecHttpPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpPatchPtrOutput) ToEnterpriseSearchSpecHttpPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpPatchPtrOutput) Elem() EnterpriseSearchSpecHttpPatchOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpPatch) EnterpriseSearchSpecHttpPatch {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpPatch
		return ret
	}).(EnterpriseSearchSpecHttpPatchOutput)
}

func (o EnterpriseSearchSpecHttpPatchPtrOutput) Service() EnterpriseSearchSpecHttpServicePatchPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpPatch) *EnterpriseSearchSpecHttpServicePatch {
		if v == nil {
			return nil
		}
		return v.Service
	}).(EnterpriseSearchSpecHttpServicePatchPtrOutput)
}

func (o EnterpriseSearchSpecHttpPatchPtrOutput) Tls() EnterpriseSearchSpecHttpTlsPatchPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpPatch) *EnterpriseSearchSpecHttpTlsPatch {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(EnterpriseSearchSpecHttpTlsPatchPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type EnterpriseSearchSpecHttpService struct {
	Metadata *EnterpriseSearchSpecHttpServiceMetadata `pulumi:"metadata"`
	Spec     *EnterpriseSearchSpecHttpServiceSpec     `pulumi:"spec"`
}

// EnterpriseSearchSpecHttpServiceInput is an input type that accepts EnterpriseSearchSpecHttpServiceArgs and EnterpriseSearchSpecHttpServiceOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceInput` via:
//
//	EnterpriseSearchSpecHttpServiceArgs{...}
type EnterpriseSearchSpecHttpServiceInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceOutput() EnterpriseSearchSpecHttpServiceOutput
	ToEnterpriseSearchSpecHttpServiceOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceOutput
}

// Service defines the template for the associated Kubernetes Service object.
type EnterpriseSearchSpecHttpServiceArgs struct {
	Metadata EnterpriseSearchSpecHttpServiceMetadataPtrInput `pulumi:"metadata"`
	Spec     EnterpriseSearchSpecHttpServiceSpecPtrInput     `pulumi:"spec"`
}

func (EnterpriseSearchSpecHttpServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpService)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceArgs) ToEnterpriseSearchSpecHttpServiceOutput() EnterpriseSearchSpecHttpServiceOutput {
	return i.ToEnterpriseSearchSpecHttpServiceOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceArgs) ToEnterpriseSearchSpecHttpServiceOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceOutput)
}

func (i EnterpriseSearchSpecHttpServiceArgs) ToEnterpriseSearchSpecHttpServicePtrOutput() EnterpriseSearchSpecHttpServicePtrOutput {
	return i.ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceArgs) ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceOutput).ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServicePtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceArgs, EnterpriseSearchSpecHttpServicePtr and EnterpriseSearchSpecHttpServicePtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServicePtrInput` via:
//
//	        EnterpriseSearchSpecHttpServiceArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpServicePtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServicePtrOutput() EnterpriseSearchSpecHttpServicePtrOutput
	ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServicePtrOutput
}

type enterpriseSearchSpecHttpServicePtrType EnterpriseSearchSpecHttpServiceArgs

func EnterpriseSearchSpecHttpServicePtr(v *EnterpriseSearchSpecHttpServiceArgs) EnterpriseSearchSpecHttpServicePtrInput {
	return (*enterpriseSearchSpecHttpServicePtrType)(v)
}

func (*enterpriseSearchSpecHttpServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpService)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServicePtrType) ToEnterpriseSearchSpecHttpServicePtrOutput() EnterpriseSearchSpecHttpServicePtrOutput {
	return i.ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServicePtrType) ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServicePtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type EnterpriseSearchSpecHttpServiceOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpService)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceOutput) ToEnterpriseSearchSpecHttpServiceOutput() EnterpriseSearchSpecHttpServiceOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceOutput) ToEnterpriseSearchSpecHttpServiceOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceOutput) ToEnterpriseSearchSpecHttpServicePtrOutput() EnterpriseSearchSpecHttpServicePtrOutput {
	return o.ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceOutput) ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpService) *EnterpriseSearchSpecHttpService {
		return &v
	}).(EnterpriseSearchSpecHttpServicePtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceOutput) Metadata() EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpService) *EnterpriseSearchSpecHttpServiceMetadata { return v.Metadata }).(EnterpriseSearchSpecHttpServiceMetadataPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceOutput) Spec() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpService) *EnterpriseSearchSpecHttpServiceSpec { return v.Spec }).(EnterpriseSearchSpecHttpServiceSpecPtrOutput)
}

type EnterpriseSearchSpecHttpServicePtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpService)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServicePtrOutput) ToEnterpriseSearchSpecHttpServicePtrOutput() EnterpriseSearchSpecHttpServicePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServicePtrOutput) ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServicePtrOutput) Elem() EnterpriseSearchSpecHttpServiceOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpService) EnterpriseSearchSpecHttpService {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpService
		return ret
	}).(EnterpriseSearchSpecHttpServiceOutput)
}

func (o EnterpriseSearchSpecHttpServicePtrOutput) Metadata() EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpService) *EnterpriseSearchSpecHttpServiceMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(EnterpriseSearchSpecHttpServiceMetadataPtrOutput)
}

func (o EnterpriseSearchSpecHttpServicePtrOutput) Spec() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpService) *EnterpriseSearchSpecHttpServiceSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(EnterpriseSearchSpecHttpServiceSpecPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type EnterpriseSearchSpecHttpServiceMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// EnterpriseSearchSpecHttpServiceMetadataInput is an input type that accepts EnterpriseSearchSpecHttpServiceMetadataArgs and EnterpriseSearchSpecHttpServiceMetadataOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceMetadataInput` via:
//
//	EnterpriseSearchSpecHttpServiceMetadataArgs{...}
type EnterpriseSearchSpecHttpServiceMetadataInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceMetadataOutput() EnterpriseSearchSpecHttpServiceMetadataOutput
	ToEnterpriseSearchSpecHttpServiceMetadataOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceMetadataOutput
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type EnterpriseSearchSpecHttpServiceMetadataArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (EnterpriseSearchSpecHttpServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceMetadataArgs) ToEnterpriseSearchSpecHttpServiceMetadataOutput() EnterpriseSearchSpecHttpServiceMetadataOutput {
	return i.ToEnterpriseSearchSpecHttpServiceMetadataOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceMetadataArgs) ToEnterpriseSearchSpecHttpServiceMetadataOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceMetadataOutput)
}

func (i EnterpriseSearchSpecHttpServiceMetadataArgs) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutput() EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceMetadataArgs) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceMetadataOutput).ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceMetadataPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceMetadataArgs, EnterpriseSearchSpecHttpServiceMetadataPtr and EnterpriseSearchSpecHttpServiceMetadataPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceMetadataPtrInput` via:
//
//	        EnterpriseSearchSpecHttpServiceMetadataArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpServiceMetadataPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceMetadataPtrOutput() EnterpriseSearchSpecHttpServiceMetadataPtrOutput
	ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceMetadataPtrOutput
}

type enterpriseSearchSpecHttpServiceMetadataPtrType EnterpriseSearchSpecHttpServiceMetadataArgs

func EnterpriseSearchSpecHttpServiceMetadataPtr(v *EnterpriseSearchSpecHttpServiceMetadataArgs) EnterpriseSearchSpecHttpServiceMetadataPtrInput {
	return (*enterpriseSearchSpecHttpServiceMetadataPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceMetadataPtrType) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutput() EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceMetadataPtrType) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceMetadataPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type EnterpriseSearchSpecHttpServiceMetadataOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) ToEnterpriseSearchSpecHttpServiceMetadataOutput() EnterpriseSearchSpecHttpServiceMetadataOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) ToEnterpriseSearchSpecHttpServiceMetadataOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutput() EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpServiceMetadata) *EnterpriseSearchSpecHttpServiceMetadata {
		return &v
	}).(EnterpriseSearchSpecHttpServiceMetadataPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceMetadata) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpServiceMetadataPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutput() EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) Elem() EnterpriseSearchSpecHttpServiceMetadataOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadata) EnterpriseSearchSpecHttpServiceMetadata {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpServiceMetadata
		return ret
	}).(EnterpriseSearchSpecHttpServiceMetadataOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadata) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type EnterpriseSearchSpecHttpServiceMetadataPatch struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// EnterpriseSearchSpecHttpServiceMetadataPatchInput is an input type that accepts EnterpriseSearchSpecHttpServiceMetadataPatchArgs and EnterpriseSearchSpecHttpServiceMetadataPatchOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceMetadataPatchInput` via:
//
//	EnterpriseSearchSpecHttpServiceMetadataPatchArgs{...}
type EnterpriseSearchSpecHttpServiceMetadataPatchInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceMetadataPatchOutput() EnterpriseSearchSpecHttpServiceMetadataPatchOutput
	ToEnterpriseSearchSpecHttpServiceMetadataPatchOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceMetadataPatchOutput
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type EnterpriseSearchSpecHttpServiceMetadataPatchArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (EnterpriseSearchSpecHttpServiceMetadataPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceMetadataPatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceMetadataPatchArgs) ToEnterpriseSearchSpecHttpServiceMetadataPatchOutput() EnterpriseSearchSpecHttpServiceMetadataPatchOutput {
	return i.ToEnterpriseSearchSpecHttpServiceMetadataPatchOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceMetadataPatchArgs) ToEnterpriseSearchSpecHttpServiceMetadataPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceMetadataPatchOutput)
}

func (i EnterpriseSearchSpecHttpServiceMetadataPatchArgs) ToEnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput() EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceMetadataPatchPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceMetadataPatchArgs) ToEnterpriseSearchSpecHttpServiceMetadataPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceMetadataPatchOutput).ToEnterpriseSearchSpecHttpServiceMetadataPatchPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceMetadataPatchPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceMetadataPatchArgs, EnterpriseSearchSpecHttpServiceMetadataPatchPtr and EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceMetadataPatchPtrInput` via:
//
//	        EnterpriseSearchSpecHttpServiceMetadataPatchArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpServiceMetadataPatchPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput() EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput
	ToEnterpriseSearchSpecHttpServiceMetadataPatchPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput
}

type enterpriseSearchSpecHttpServiceMetadataPatchPtrType EnterpriseSearchSpecHttpServiceMetadataPatchArgs

func EnterpriseSearchSpecHttpServiceMetadataPatchPtr(v *EnterpriseSearchSpecHttpServiceMetadataPatchArgs) EnterpriseSearchSpecHttpServiceMetadataPatchPtrInput {
	return (*enterpriseSearchSpecHttpServiceMetadataPatchPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceMetadataPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceMetadataPatch)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceMetadataPatchPtrType) ToEnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput() EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceMetadataPatchPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceMetadataPatchPtrType) ToEnterpriseSearchSpecHttpServiceMetadataPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type EnterpriseSearchSpecHttpServiceMetadataPatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceMetadataPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceMetadataPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchOutput) ToEnterpriseSearchSpecHttpServiceMetadataPatchOutput() EnterpriseSearchSpecHttpServiceMetadataPatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchOutput) ToEnterpriseSearchSpecHttpServiceMetadataPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataPatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchOutput) ToEnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput() EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceMetadataPatchPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchOutput) ToEnterpriseSearchSpecHttpServiceMetadataPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpServiceMetadataPatch) *EnterpriseSearchSpecHttpServiceMetadataPatch {
		return &v
	}).(EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceMetadataPatch) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceMetadataPatch) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceMetadataPatch) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceMetadataPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceMetadataPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceMetadataPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput) ToEnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput() EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput) ToEnterpriseSearchSpecHttpServiceMetadataPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput) Elem() EnterpriseSearchSpecHttpServiceMetadataPatchOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadataPatch) EnterpriseSearchSpecHttpServiceMetadataPatch {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpServiceMetadataPatch
		return ret
	}).(EnterpriseSearchSpecHttpServiceMetadataPatchOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadataPatch) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadataPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadataPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type EnterpriseSearchSpecHttpServicePatch struct {
	Metadata *EnterpriseSearchSpecHttpServiceMetadataPatch `pulumi:"metadata"`
	Spec     *EnterpriseSearchSpecHttpServiceSpecPatch     `pulumi:"spec"`
}

// EnterpriseSearchSpecHttpServicePatchInput is an input type that accepts EnterpriseSearchSpecHttpServicePatchArgs and EnterpriseSearchSpecHttpServicePatchOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServicePatchInput` via:
//
//	EnterpriseSearchSpecHttpServicePatchArgs{...}
type EnterpriseSearchSpecHttpServicePatchInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServicePatchOutput() EnterpriseSearchSpecHttpServicePatchOutput
	ToEnterpriseSearchSpecHttpServicePatchOutputWithContext(context.Context) EnterpriseSearchSpecHttpServicePatchOutput
}

// Service defines the template for the associated Kubernetes Service object.
type EnterpriseSearchSpecHttpServicePatchArgs struct {
	Metadata EnterpriseSearchSpecHttpServiceMetadataPatchPtrInput `pulumi:"metadata"`
	Spec     EnterpriseSearchSpecHttpServiceSpecPatchPtrInput     `pulumi:"spec"`
}

func (EnterpriseSearchSpecHttpServicePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServicePatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServicePatchArgs) ToEnterpriseSearchSpecHttpServicePatchOutput() EnterpriseSearchSpecHttpServicePatchOutput {
	return i.ToEnterpriseSearchSpecHttpServicePatchOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServicePatchArgs) ToEnterpriseSearchSpecHttpServicePatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServicePatchOutput)
}

func (i EnterpriseSearchSpecHttpServicePatchArgs) ToEnterpriseSearchSpecHttpServicePatchPtrOutput() EnterpriseSearchSpecHttpServicePatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServicePatchPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServicePatchArgs) ToEnterpriseSearchSpecHttpServicePatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServicePatchOutput).ToEnterpriseSearchSpecHttpServicePatchPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServicePatchPtrInput is an input type that accepts EnterpriseSearchSpecHttpServicePatchArgs, EnterpriseSearchSpecHttpServicePatchPtr and EnterpriseSearchSpecHttpServicePatchPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServicePatchPtrInput` via:
//
//	        EnterpriseSearchSpecHttpServicePatchArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpServicePatchPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServicePatchPtrOutput() EnterpriseSearchSpecHttpServicePatchPtrOutput
	ToEnterpriseSearchSpecHttpServicePatchPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServicePatchPtrOutput
}

type enterpriseSearchSpecHttpServicePatchPtrType EnterpriseSearchSpecHttpServicePatchArgs

func EnterpriseSearchSpecHttpServicePatchPtr(v *EnterpriseSearchSpecHttpServicePatchArgs) EnterpriseSearchSpecHttpServicePatchPtrInput {
	return (*enterpriseSearchSpecHttpServicePatchPtrType)(v)
}

func (*enterpriseSearchSpecHttpServicePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServicePatch)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServicePatchPtrType) ToEnterpriseSearchSpecHttpServicePatchPtrOutput() EnterpriseSearchSpecHttpServicePatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServicePatchPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServicePatchPtrType) ToEnterpriseSearchSpecHttpServicePatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServicePatchPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type EnterpriseSearchSpecHttpServicePatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServicePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServicePatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServicePatchOutput) ToEnterpriseSearchSpecHttpServicePatchOutput() EnterpriseSearchSpecHttpServicePatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServicePatchOutput) ToEnterpriseSearchSpecHttpServicePatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServicePatchOutput) ToEnterpriseSearchSpecHttpServicePatchPtrOutput() EnterpriseSearchSpecHttpServicePatchPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServicePatchPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServicePatchOutput) ToEnterpriseSearchSpecHttpServicePatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpServicePatch) *EnterpriseSearchSpecHttpServicePatch {
		return &v
	}).(EnterpriseSearchSpecHttpServicePatchPtrOutput)
}

func (o EnterpriseSearchSpecHttpServicePatchOutput) Metadata() EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServicePatch) *EnterpriseSearchSpecHttpServiceMetadataPatch {
		return v.Metadata
	}).(EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput)
}

func (o EnterpriseSearchSpecHttpServicePatchOutput) Spec() EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServicePatch) *EnterpriseSearchSpecHttpServiceSpecPatch { return v.Spec }).(EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput)
}

type EnterpriseSearchSpecHttpServicePatchPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServicePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServicePatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServicePatchPtrOutput) ToEnterpriseSearchSpecHttpServicePatchPtrOutput() EnterpriseSearchSpecHttpServicePatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServicePatchPtrOutput) ToEnterpriseSearchSpecHttpServicePatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServicePatchPtrOutput) Elem() EnterpriseSearchSpecHttpServicePatchOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServicePatch) EnterpriseSearchSpecHttpServicePatch {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpServicePatch
		return ret
	}).(EnterpriseSearchSpecHttpServicePatchOutput)
}

func (o EnterpriseSearchSpecHttpServicePatchPtrOutput) Metadata() EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServicePatch) *EnterpriseSearchSpecHttpServiceMetadataPatch {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput)
}

func (o EnterpriseSearchSpecHttpServicePatchPtrOutput) Spec() EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServicePatch) *EnterpriseSearchSpecHttpServiceSpecPatch {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput)
}

// Spec is the specification of the service.
type EnterpriseSearchSpecHttpServiceSpec struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []string `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy *string `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies []string `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy *string `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []EnterpriseSearchSpecHttpServiceSpecPorts `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity       *string                                                   `pulumi:"sessionAffinity"`
	SessionAffinityConfig *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution *string `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// EnterpriseSearchSpecHttpServiceSpecInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecArgs and EnterpriseSearchSpecHttpServiceSpecOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecInput` via:
//
//	EnterpriseSearchSpecHttpServiceSpecArgs{...}
type EnterpriseSearchSpecHttpServiceSpecInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecOutput() EnterpriseSearchSpecHttpServiceSpecOutput
	ToEnterpriseSearchSpecHttpServiceSpecOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecOutput
}

// Spec is the specification of the service.
type EnterpriseSearchSpecHttpServiceSpecArgs struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts pulumi.BoolPtrInput `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs pulumi.StringArrayInput `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy pulumi.StringPtrInput `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies pulumi.StringArrayInput `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy pulumi.StringPtrInput `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass pulumi.StringPtrInput `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports EnterpriseSearchSpecHttpServiceSpecPortsArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity       pulumi.StringPtrInput                                            `pulumi:"sessionAffinity"`
	SessionAffinityConfig EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution pulumi.StringPtrInput `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EnterpriseSearchSpecHttpServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpec)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecArgs) ToEnterpriseSearchSpecHttpServiceSpecOutput() EnterpriseSearchSpecHttpServiceSpecOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecArgs) ToEnterpriseSearchSpecHttpServiceSpecOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecOutput)
}

func (i EnterpriseSearchSpecHttpServiceSpecArgs) ToEnterpriseSearchSpecHttpServiceSpecPtrOutput() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecArgs) ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecOutput).ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceSpecPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecArgs, EnterpriseSearchSpecHttpServiceSpecPtr and EnterpriseSearchSpecHttpServiceSpecPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecPtrInput` via:
//
//	        EnterpriseSearchSpecHttpServiceSpecArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpServiceSpecPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecPtrOutput() EnterpriseSearchSpecHttpServiceSpecPtrOutput
	ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecPtrOutput
}

type enterpriseSearchSpecHttpServiceSpecPtrType EnterpriseSearchSpecHttpServiceSpecArgs

func EnterpriseSearchSpecHttpServiceSpecPtr(v *EnterpriseSearchSpecHttpServiceSpecArgs) EnterpriseSearchSpecHttpServiceSpecPtrInput {
	return (*enterpriseSearchSpecHttpServiceSpecPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpec)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceSpecPtrType) ToEnterpriseSearchSpecHttpServiceSpecPtrOutput() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceSpecPtrType) ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPtrOutput)
}

// Spec is the specification of the service.
type EnterpriseSearchSpecHttpServiceSpecOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpec)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecOutput) ToEnterpriseSearchSpecHttpServiceSpecOutput() EnterpriseSearchSpecHttpServiceSpecOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecOutput) ToEnterpriseSearchSpecHttpServiceSpecOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecOutput) ToEnterpriseSearchSpecHttpServiceSpecPtrOutput() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceSpecOutput) ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpServiceSpec) *EnterpriseSearchSpecHttpServiceSpec {
		return &v
	}).(EnterpriseSearchSpecHttpServiceSpecPtrOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *bool { return v.AllocateLoadBalancerNodePorts }).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) []string { return v.ClusterIPs }).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o EnterpriseSearchSpecHttpServiceSpecOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o EnterpriseSearchSpecHttpServiceSpecOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.InternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.IpFamilyPolicy }).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.LoadBalancerClass }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o EnterpriseSearchSpecHttpServiceSpecOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecOutput) Ports() EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) []EnterpriseSearchSpecHttpServiceSpecPorts { return v.Ports }).(EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o EnterpriseSearchSpecHttpServiceSpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceSpecOutput) SessionAffinityConfig() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig {
		return v.SessionAffinityConfig
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.TrafficDistribution }).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o EnterpriseSearchSpecHttpServiceSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpec)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecPtrOutput() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) Elem() EnterpriseSearchSpecHttpServiceSpecOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) EnterpriseSearchSpecHttpServiceSpec {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpServiceSpec
		return ret
	}).(EnterpriseSearchSpecHttpServiceSpecOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AllocateLoadBalancerNodePorts
	}).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIPs
	}).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.InternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.IpFamilyPolicy
	}).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerClass
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) Ports() EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) []EnterpriseSearchSpecHttpServiceSpecPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) SessionAffinityConfig() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.TrafficDistribution
	}).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Spec is the specification of the service.
type EnterpriseSearchSpecHttpServiceSpecPatch struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []string `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy *string `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies []string `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy *string `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []EnterpriseSearchSpecHttpServiceSpecPortsPatch `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity       *string                                                        `pulumi:"sessionAffinity"`
	SessionAffinityConfig *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatch `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution *string `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// EnterpriseSearchSpecHttpServiceSpecPatchInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecPatchArgs and EnterpriseSearchSpecHttpServiceSpecPatchOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecPatchInput` via:
//
//	EnterpriseSearchSpecHttpServiceSpecPatchArgs{...}
type EnterpriseSearchSpecHttpServiceSpecPatchInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecPatchOutput() EnterpriseSearchSpecHttpServiceSpecPatchOutput
	ToEnterpriseSearchSpecHttpServiceSpecPatchOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecPatchOutput
}

// Spec is the specification of the service.
type EnterpriseSearchSpecHttpServiceSpecPatchArgs struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts pulumi.BoolPtrInput `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs pulumi.StringArrayInput `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy pulumi.StringPtrInput `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies pulumi.StringArrayInput `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy pulumi.StringPtrInput `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass pulumi.StringPtrInput `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity       pulumi.StringPtrInput                                                 `pulumi:"sessionAffinity"`
	SessionAffinityConfig EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrInput `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution pulumi.StringPtrInput `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EnterpriseSearchSpecHttpServiceSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecPatchArgs) ToEnterpriseSearchSpecHttpServiceSpecPatchOutput() EnterpriseSearchSpecHttpServiceSpecPatchOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPatchOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecPatchArgs) ToEnterpriseSearchSpecHttpServiceSpecPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPatchOutput)
}

func (i EnterpriseSearchSpecHttpServiceSpecPatchArgs) ToEnterpriseSearchSpecHttpServiceSpecPatchPtrOutput() EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPatchPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecPatchArgs) ToEnterpriseSearchSpecHttpServiceSpecPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPatchOutput).ToEnterpriseSearchSpecHttpServiceSpecPatchPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceSpecPatchPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecPatchArgs, EnterpriseSearchSpecHttpServiceSpecPatchPtr and EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecPatchPtrInput` via:
//
//	        EnterpriseSearchSpecHttpServiceSpecPatchArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpServiceSpecPatchPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecPatchPtrOutput() EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput
	ToEnterpriseSearchSpecHttpServiceSpecPatchPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput
}

type enterpriseSearchSpecHttpServiceSpecPatchPtrType EnterpriseSearchSpecHttpServiceSpecPatchArgs

func EnterpriseSearchSpecHttpServiceSpecPatchPtr(v *EnterpriseSearchSpecHttpServiceSpecPatchArgs) EnterpriseSearchSpecHttpServiceSpecPatchPtrInput {
	return (*enterpriseSearchSpecHttpServiceSpecPatchPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecPatch)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceSpecPatchPtrType) ToEnterpriseSearchSpecHttpServiceSpecPatchPtrOutput() EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPatchPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceSpecPatchPtrType) ToEnterpriseSearchSpecHttpServiceSpecPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput)
}

// Spec is the specification of the service.
type EnterpriseSearchSpecHttpServiceSpecPatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) ToEnterpriseSearchSpecHttpServiceSpecPatchOutput() EnterpriseSearchSpecHttpServiceSpecPatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) ToEnterpriseSearchSpecHttpServiceSpecPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) ToEnterpriseSearchSpecHttpServiceSpecPatchPtrOutput() EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceSpecPatchPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) ToEnterpriseSearchSpecHttpServiceSpecPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpServiceSpecPatch) *EnterpriseSearchSpecHttpServiceSpecPatch {
		return &v
	}).(EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) *bool { return v.AllocateLoadBalancerNodePorts }).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) []string { return v.ClusterIPs }).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) *string { return v.InternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) *string { return v.IpFamilyPolicy }).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) *string { return v.LoadBalancerClass }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) Ports() EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) []EnterpriseSearchSpecHttpServiceSpecPortsPatch {
		return v.Ports
	}).(EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) SessionAffinityConfig() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatch {
		return v.SessionAffinityConfig
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) *string { return v.TrafficDistribution }).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o EnterpriseSearchSpecHttpServiceSpecPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecPatchPtrOutput() EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) Elem() EnterpriseSearchSpecHttpServiceSpecPatchOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) EnterpriseSearchSpecHttpServiceSpecPatch {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpServiceSpecPatch
		return ret
	}).(EnterpriseSearchSpecHttpServiceSpecPatchOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.AllocateLoadBalancerNodePorts
	}).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIPs
	}).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.InternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.IpFamilyPolicy
	}).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerClass
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) Ports() EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) []EnterpriseSearchSpecHttpServiceSpecPortsPatch {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) SessionAffinityConfig() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatch {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.TrafficDistribution
	}).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ServicePort contains information on service's port.
type EnterpriseSearchSpecHttpServiceSpecPorts struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port *int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort interface{} `pulumi:"targetPort"`
}

// EnterpriseSearchSpecHttpServiceSpecPortsInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecPortsArgs and EnterpriseSearchSpecHttpServiceSpecPortsOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecPortsInput` via:
//
//	EnterpriseSearchSpecHttpServiceSpecPortsArgs{...}
type EnterpriseSearchSpecHttpServiceSpecPortsInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecPortsOutput() EnterpriseSearchSpecHttpServiceSpecPortsOutput
	ToEnterpriseSearchSpecHttpServiceSpecPortsOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecPortsOutput
}

// ServicePort contains information on service's port.
type EnterpriseSearchSpecHttpServiceSpecPortsArgs struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort pulumi.Input `pulumi:"targetPort"`
}

func (EnterpriseSearchSpecHttpServiceSpecPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsArgs) ToEnterpriseSearchSpecHttpServiceSpecPortsOutput() EnterpriseSearchSpecHttpServiceSpecPortsOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPortsOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsArgs) ToEnterpriseSearchSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPortsOutput)
}

// EnterpriseSearchSpecHttpServiceSpecPortsArrayInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecPortsArray and EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecPortsArrayInput` via:
//
//	EnterpriseSearchSpecHttpServiceSpecPortsArray{ EnterpriseSearchSpecHttpServiceSpecPortsArgs{...} }
type EnterpriseSearchSpecHttpServiceSpecPortsArrayInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutput() EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput
	ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput
}

type EnterpriseSearchSpecHttpServiceSpecPortsArray []EnterpriseSearchSpecHttpServiceSpecPortsInput

func (EnterpriseSearchSpecHttpServiceSpecPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsArray) ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutput() EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsArray) ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput)
}

// ServicePort contains information on service's port.
type EnterpriseSearchSpecHttpServiceSpecPortsOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsOutput() EnterpriseSearchSpecHttpServiceSpecPortsOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsOutput {
	return o
}

// The application protocol for this port.
// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
// This field follows standard Kubernetes label syntax.
// Valid values are either:
//
// * Un-prefixed protocol names - reserved for IANA standard service names (as per
// RFC-6335 and https://www.iana.org/assignments/service-names).
//
// * Kubernetes-defined prefixed names:
//   - 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
//   - 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
//   - 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
//
// * Other protocols should use implementation-defined prefixed names such as
// mycompany.com/my-custom-protocol.
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port within the service. This must be a DNS_LABEL.
// All ports within a ServiceSpec must have unique names. When considering
// the endpoints for a Service, this must match the 'name' field in the
// EndpointPort.
// Optional if only one ServicePort is defined on this service.
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type is
// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
// specified, in-range, and not in use it will be used, otherwise the
// operation will fail.  If not specified, a port will be allocated if this
// Service requires one.  If this field is specified when creating a
// Service which does not need it, creation will fail. This field will be
// wiped when updating a Service to no longer need it (e.g. changing type
// from NodePort to ClusterIP).
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
// Default is TCP.
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service.
// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
// If this is a string, it will be looked up as a named port in the
// target Pod's container ports. If this is not specified, the value
// of the 'port' field is used (an identity map).
// This field is ignored for services with clusterIP=None, and should be
// omitted or set equal to the 'port' field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) TargetPort() pulumi.AnyOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) interface{} { return v.TargetPort }).(pulumi.AnyOutput)
}

type EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutput() EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput) Index(i pulumi.IntInput) EnterpriseSearchSpecHttpServiceSpecPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseSearchSpecHttpServiceSpecPorts {
		return vs[0].([]EnterpriseSearchSpecHttpServiceSpecPorts)[vs[1].(int)]
	}).(EnterpriseSearchSpecHttpServiceSpecPortsOutput)
}

// ServicePort contains information on service's port.
type EnterpriseSearchSpecHttpServiceSpecPortsPatch struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port *int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort interface{} `pulumi:"targetPort"`
}

// EnterpriseSearchSpecHttpServiceSpecPortsPatchInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecPortsPatchArgs and EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecPortsPatchInput` via:
//
//	EnterpriseSearchSpecHttpServiceSpecPortsPatchArgs{...}
type EnterpriseSearchSpecHttpServiceSpecPortsPatchInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecPortsPatchOutput() EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput
	ToEnterpriseSearchSpecHttpServiceSpecPortsPatchOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput
}

// ServicePort contains information on service's port.
type EnterpriseSearchSpecHttpServiceSpecPortsPatchArgs struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort pulumi.Input `pulumi:"targetPort"`
}

func (EnterpriseSearchSpecHttpServiceSpecPortsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPortsPatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsPatchArgs) ToEnterpriseSearchSpecHttpServiceSpecPortsPatchOutput() EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPortsPatchOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsPatchArgs) ToEnterpriseSearchSpecHttpServiceSpecPortsPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput)
}

// EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecPortsPatchArray and EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayInput` via:
//
//	EnterpriseSearchSpecHttpServiceSpecPortsPatchArray{ EnterpriseSearchSpecHttpServiceSpecPortsPatchArgs{...} }
type EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput() EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput
	ToEnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput
}

type EnterpriseSearchSpecHttpServiceSpecPortsPatchArray []EnterpriseSearchSpecHttpServiceSpecPortsPatchInput

func (EnterpriseSearchSpecHttpServiceSpecPortsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpServiceSpecPortsPatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsPatchArray) ToEnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput() EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsPatchArray) ToEnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput)
}

// ServicePort contains information on service's port.
type EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPortsPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsPatchOutput() EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput {
	return o
}

// The application protocol for this port.
// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
// This field follows standard Kubernetes label syntax.
// Valid values are either:
//
// * Un-prefixed protocol names - reserved for IANA standard service names (as per
// RFC-6335 and https://www.iana.org/assignments/service-names).
//
// * Kubernetes-defined prefixed names:
//   - 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
//   - 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
//   - 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
//
// * Other protocols should use implementation-defined prefixed names such as
// mycompany.com/my-custom-protocol.
func (o EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPortsPatch) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port within the service. This must be a DNS_LABEL.
// All ports within a ServiceSpec must have unique names. When considering
// the endpoints for a Service, this must match the 'name' field in the
// EndpointPort.
// Optional if only one ServicePort is defined on this service.
func (o EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPortsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type is
// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
// specified, in-range, and not in use it will be used, otherwise the
// operation will fail.  If not specified, a port will be allocated if this
// Service requires one.  If this field is specified when creating a
// Service which does not need it, creation will fail. This field will be
// wiped when updating a Service to no longer need it (e.g. changing type
// from NodePort to ClusterIP).
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPortsPatch) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPortsPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
// Default is TCP.
func (o EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPortsPatch) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service.
// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
// If this is a string, it will be looked up as a named port in the
// target Pod's container ports. If this is not specified, the value
// of the 'port' field is used (an identity map).
// This field is ignored for services with clusterIP=None, and should be
// omitted or set equal to the 'port' field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput) TargetPort() pulumi.AnyOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPortsPatch) interface{} { return v.TargetPort }).(pulumi.AnyOutput)
}

type EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpServiceSpecPortsPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput() EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput) Index(i pulumi.IntInput) EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseSearchSpecHttpServiceSpecPortsPatch {
		return vs[0].([]EnterpriseSearchSpecHttpServiceSpecPortsPatch)[vs[1].(int)]
	}).(EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig struct {
	ClientIP *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP `pulumi:"clientIP"`
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigInput` via:
//
//	EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs{...}
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput
}

// sessionAffinityConfig contains the configurations of session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs struct {
	ClientIP EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput `pulumi:"clientIP"`
}

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput)
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput).ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs, EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtr and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput` via:
//
//	        EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput
}

type enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrType EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs

func EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtr(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput {
	return (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig {
		return &v
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ClientIP() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP {
		return v.ClientIP
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) Elem() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig
		return ret
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput)
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ClientIP() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPInput` via:
//
//	EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs{...}
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput
}

// clientIP contains the configurations of Client IP based session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput)
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput).ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs, EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtr and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput` via:
//
//	        EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput
}

type enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs

func EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtr(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput {
	return (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP {
		return &v
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) Elem() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP
		return ret
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchInput` via:
//
//	EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs{...}
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput
}

// clientIP contains the configurations of Client IP based session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput)
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput).ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs, EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtr and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrInput` via:
//
//	        EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput
}

type enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrType EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs

func EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtr(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrInput {
	return (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch {
		return &v
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch) *int {
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput) Elem() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch
		return ret
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatch struct {
	ClientIP *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch `pulumi:"clientIP"`
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchInput` via:
//
//	EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs{...}
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput
}

// sessionAffinityConfig contains the configurations of session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs struct {
	ClientIP EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrInput `pulumi:"clientIP"`
}

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput)
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput).ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs, EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtr and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrInput` via:
//
//	        EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput
}

type enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrType EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs

func EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtr(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrInput {
	return (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatch)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatch) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatch {
		return &v
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput) ClientIP() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatch) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch {
		return v.ClientIP
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput)
}

type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput) Elem() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatch) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatch {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatch
		return ret
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput)
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput) ClientIP() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatch) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatch {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type EnterpriseSearchSpecHttpTls struct {
	Certificate           *EnterpriseSearchSpecHttpTlsCertificate           `pulumi:"certificate"`
	SelfSignedCertificate *EnterpriseSearchSpecHttpTlsSelfSignedCertificate `pulumi:"selfSignedCertificate"`
}

// EnterpriseSearchSpecHttpTlsInput is an input type that accepts EnterpriseSearchSpecHttpTlsArgs and EnterpriseSearchSpecHttpTlsOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsInput` via:
//
//	EnterpriseSearchSpecHttpTlsArgs{...}
type EnterpriseSearchSpecHttpTlsInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsOutput() EnterpriseSearchSpecHttpTlsOutput
	ToEnterpriseSearchSpecHttpTlsOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsOutput
}

// TLS defines options for configuring TLS for HTTP.
type EnterpriseSearchSpecHttpTlsArgs struct {
	Certificate           EnterpriseSearchSpecHttpTlsCertificatePtrInput           `pulumi:"certificate"`
	SelfSignedCertificate EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput `pulumi:"selfSignedCertificate"`
}

func (EnterpriseSearchSpecHttpTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTls)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsArgs) ToEnterpriseSearchSpecHttpTlsOutput() EnterpriseSearchSpecHttpTlsOutput {
	return i.ToEnterpriseSearchSpecHttpTlsOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsArgs) ToEnterpriseSearchSpecHttpTlsOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsOutput)
}

func (i EnterpriseSearchSpecHttpTlsArgs) ToEnterpriseSearchSpecHttpTlsPtrOutput() EnterpriseSearchSpecHttpTlsPtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsArgs) ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsOutput).ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpTlsPtrInput is an input type that accepts EnterpriseSearchSpecHttpTlsArgs, EnterpriseSearchSpecHttpTlsPtr and EnterpriseSearchSpecHttpTlsPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsPtrInput` via:
//
//	        EnterpriseSearchSpecHttpTlsArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpTlsPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsPtrOutput() EnterpriseSearchSpecHttpTlsPtrOutput
	ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsPtrOutput
}

type enterpriseSearchSpecHttpTlsPtrType EnterpriseSearchSpecHttpTlsArgs

func EnterpriseSearchSpecHttpTlsPtr(v *EnterpriseSearchSpecHttpTlsArgs) EnterpriseSearchSpecHttpTlsPtrInput {
	return (*enterpriseSearchSpecHttpTlsPtrType)(v)
}

func (*enterpriseSearchSpecHttpTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTls)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpTlsPtrType) ToEnterpriseSearchSpecHttpTlsPtrOutput() EnterpriseSearchSpecHttpTlsPtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpTlsPtrType) ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type EnterpriseSearchSpecHttpTlsOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTls)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsOutput) ToEnterpriseSearchSpecHttpTlsOutput() EnterpriseSearchSpecHttpTlsOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsOutput) ToEnterpriseSearchSpecHttpTlsOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsOutput) ToEnterpriseSearchSpecHttpTlsPtrOutput() EnterpriseSearchSpecHttpTlsPtrOutput {
	return o.ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpTlsOutput) ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpTls) *EnterpriseSearchSpecHttpTls {
		return &v
	}).(EnterpriseSearchSpecHttpTlsPtrOutput)
}

func (o EnterpriseSearchSpecHttpTlsOutput) Certificate() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTls) *EnterpriseSearchSpecHttpTlsCertificate { return v.Certificate }).(EnterpriseSearchSpecHttpTlsCertificatePtrOutput)
}

func (o EnterpriseSearchSpecHttpTlsOutput) SelfSignedCertificate() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTls) *EnterpriseSearchSpecHttpTlsSelfSignedCertificate {
		return v.SelfSignedCertificate
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

type EnterpriseSearchSpecHttpTlsPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTls)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsPtrOutput) ToEnterpriseSearchSpecHttpTlsPtrOutput() EnterpriseSearchSpecHttpTlsPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsPtrOutput) ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsPtrOutput) Elem() EnterpriseSearchSpecHttpTlsOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTls) EnterpriseSearchSpecHttpTls {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpTls
		return ret
	}).(EnterpriseSearchSpecHttpTlsOutput)
}

func (o EnterpriseSearchSpecHttpTlsPtrOutput) Certificate() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTls) *EnterpriseSearchSpecHttpTlsCertificate {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(EnterpriseSearchSpecHttpTlsCertificatePtrOutput)
}

func (o EnterpriseSearchSpecHttpTlsPtrOutput) SelfSignedCertificate() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTls) *EnterpriseSearchSpecHttpTlsSelfSignedCertificate {
		if v == nil {
			return nil
		}
		return v.SelfSignedCertificate
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type EnterpriseSearchSpecHttpTlsCertificate struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// EnterpriseSearchSpecHttpTlsCertificateInput is an input type that accepts EnterpriseSearchSpecHttpTlsCertificateArgs and EnterpriseSearchSpecHttpTlsCertificateOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsCertificateInput` via:
//
//	EnterpriseSearchSpecHttpTlsCertificateArgs{...}
type EnterpriseSearchSpecHttpTlsCertificateInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsCertificateOutput() EnterpriseSearchSpecHttpTlsCertificateOutput
	ToEnterpriseSearchSpecHttpTlsCertificateOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsCertificateOutput
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type EnterpriseSearchSpecHttpTlsCertificateArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (EnterpriseSearchSpecHttpTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsCertificateArgs) ToEnterpriseSearchSpecHttpTlsCertificateOutput() EnterpriseSearchSpecHttpTlsCertificateOutput {
	return i.ToEnterpriseSearchSpecHttpTlsCertificateOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsCertificateArgs) ToEnterpriseSearchSpecHttpTlsCertificateOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsCertificateOutput)
}

func (i EnterpriseSearchSpecHttpTlsCertificateArgs) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutput() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsCertificateArgs) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsCertificateOutput).ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpTlsCertificatePtrInput is an input type that accepts EnterpriseSearchSpecHttpTlsCertificateArgs, EnterpriseSearchSpecHttpTlsCertificatePtr and EnterpriseSearchSpecHttpTlsCertificatePtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsCertificatePtrInput` via:
//
//	        EnterpriseSearchSpecHttpTlsCertificateArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpTlsCertificatePtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsCertificatePtrOutput() EnterpriseSearchSpecHttpTlsCertificatePtrOutput
	ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsCertificatePtrOutput
}

type enterpriseSearchSpecHttpTlsCertificatePtrType EnterpriseSearchSpecHttpTlsCertificateArgs

func EnterpriseSearchSpecHttpTlsCertificatePtr(v *EnterpriseSearchSpecHttpTlsCertificateArgs) EnterpriseSearchSpecHttpTlsCertificatePtrInput {
	return (*enterpriseSearchSpecHttpTlsCertificatePtrType)(v)
}

func (*enterpriseSearchSpecHttpTlsCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpTlsCertificatePtrType) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutput() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpTlsCertificatePtrType) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type EnterpriseSearchSpecHttpTlsCertificateOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsCertificateOutput) ToEnterpriseSearchSpecHttpTlsCertificateOutput() EnterpriseSearchSpecHttpTlsCertificateOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificateOutput) ToEnterpriseSearchSpecHttpTlsCertificateOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificateOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificateOutput) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutput() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o.ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpTlsCertificateOutput) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpTlsCertificate) *EnterpriseSearchSpecHttpTlsCertificate {
		return &v
	}).(EnterpriseSearchSpecHttpTlsCertificatePtrOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecHttpTlsCertificateOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsCertificate) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpTlsCertificatePtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsCertificatePtrOutput) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutput() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificatePtrOutput) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificatePtrOutput) Elem() EnterpriseSearchSpecHttpTlsCertificateOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsCertificate) EnterpriseSearchSpecHttpTlsCertificate {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpTlsCertificate
		return ret
	}).(EnterpriseSearchSpecHttpTlsCertificateOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecHttpTlsCertificatePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsCertificate) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type EnterpriseSearchSpecHttpTlsCertificatePatch struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// EnterpriseSearchSpecHttpTlsCertificatePatchInput is an input type that accepts EnterpriseSearchSpecHttpTlsCertificatePatchArgs and EnterpriseSearchSpecHttpTlsCertificatePatchOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsCertificatePatchInput` via:
//
//	EnterpriseSearchSpecHttpTlsCertificatePatchArgs{...}
type EnterpriseSearchSpecHttpTlsCertificatePatchInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsCertificatePatchOutput() EnterpriseSearchSpecHttpTlsCertificatePatchOutput
	ToEnterpriseSearchSpecHttpTlsCertificatePatchOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsCertificatePatchOutput
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type EnterpriseSearchSpecHttpTlsCertificatePatchArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (EnterpriseSearchSpecHttpTlsCertificatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsCertificatePatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsCertificatePatchArgs) ToEnterpriseSearchSpecHttpTlsCertificatePatchOutput() EnterpriseSearchSpecHttpTlsCertificatePatchOutput {
	return i.ToEnterpriseSearchSpecHttpTlsCertificatePatchOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsCertificatePatchArgs) ToEnterpriseSearchSpecHttpTlsCertificatePatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsCertificatePatchOutput)
}

func (i EnterpriseSearchSpecHttpTlsCertificatePatchArgs) ToEnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput() EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsCertificatePatchPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsCertificatePatchArgs) ToEnterpriseSearchSpecHttpTlsCertificatePatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsCertificatePatchOutput).ToEnterpriseSearchSpecHttpTlsCertificatePatchPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpTlsCertificatePatchPtrInput is an input type that accepts EnterpriseSearchSpecHttpTlsCertificatePatchArgs, EnterpriseSearchSpecHttpTlsCertificatePatchPtr and EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsCertificatePatchPtrInput` via:
//
//	        EnterpriseSearchSpecHttpTlsCertificatePatchArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpTlsCertificatePatchPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput() EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput
	ToEnterpriseSearchSpecHttpTlsCertificatePatchPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput
}

type enterpriseSearchSpecHttpTlsCertificatePatchPtrType EnterpriseSearchSpecHttpTlsCertificatePatchArgs

func EnterpriseSearchSpecHttpTlsCertificatePatchPtr(v *EnterpriseSearchSpecHttpTlsCertificatePatchArgs) EnterpriseSearchSpecHttpTlsCertificatePatchPtrInput {
	return (*enterpriseSearchSpecHttpTlsCertificatePatchPtrType)(v)
}

func (*enterpriseSearchSpecHttpTlsCertificatePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsCertificatePatch)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpTlsCertificatePatchPtrType) ToEnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput() EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsCertificatePatchPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpTlsCertificatePatchPtrType) ToEnterpriseSearchSpecHttpTlsCertificatePatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type EnterpriseSearchSpecHttpTlsCertificatePatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsCertificatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsCertificatePatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsCertificatePatchOutput) ToEnterpriseSearchSpecHttpTlsCertificatePatchOutput() EnterpriseSearchSpecHttpTlsCertificatePatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificatePatchOutput) ToEnterpriseSearchSpecHttpTlsCertificatePatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificatePatchOutput) ToEnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput() EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput {
	return o.ToEnterpriseSearchSpecHttpTlsCertificatePatchPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpTlsCertificatePatchOutput) ToEnterpriseSearchSpecHttpTlsCertificatePatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpTlsCertificatePatch) *EnterpriseSearchSpecHttpTlsCertificatePatch {
		return &v
	}).(EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecHttpTlsCertificatePatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsCertificatePatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsCertificatePatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput) ToEnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput() EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput) ToEnterpriseSearchSpecHttpTlsCertificatePatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput) Elem() EnterpriseSearchSpecHttpTlsCertificatePatchOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsCertificatePatch) EnterpriseSearchSpecHttpTlsCertificatePatch {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpTlsCertificatePatch
		return ret
	}).(EnterpriseSearchSpecHttpTlsCertificatePatchOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsCertificatePatch) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type EnterpriseSearchSpecHttpTlsPatch struct {
	Certificate           *EnterpriseSearchSpecHttpTlsCertificatePatch           `pulumi:"certificate"`
	SelfSignedCertificate *EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch `pulumi:"selfSignedCertificate"`
}

// EnterpriseSearchSpecHttpTlsPatchInput is an input type that accepts EnterpriseSearchSpecHttpTlsPatchArgs and EnterpriseSearchSpecHttpTlsPatchOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsPatchInput` via:
//
//	EnterpriseSearchSpecHttpTlsPatchArgs{...}
type EnterpriseSearchSpecHttpTlsPatchInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsPatchOutput() EnterpriseSearchSpecHttpTlsPatchOutput
	ToEnterpriseSearchSpecHttpTlsPatchOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsPatchOutput
}

// TLS defines options for configuring TLS for HTTP.
type EnterpriseSearchSpecHttpTlsPatchArgs struct {
	Certificate           EnterpriseSearchSpecHttpTlsCertificatePatchPtrInput           `pulumi:"certificate"`
	SelfSignedCertificate EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrInput `pulumi:"selfSignedCertificate"`
}

func (EnterpriseSearchSpecHttpTlsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsPatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsPatchArgs) ToEnterpriseSearchSpecHttpTlsPatchOutput() EnterpriseSearchSpecHttpTlsPatchOutput {
	return i.ToEnterpriseSearchSpecHttpTlsPatchOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsPatchArgs) ToEnterpriseSearchSpecHttpTlsPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsPatchOutput)
}

func (i EnterpriseSearchSpecHttpTlsPatchArgs) ToEnterpriseSearchSpecHttpTlsPatchPtrOutput() EnterpriseSearchSpecHttpTlsPatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsPatchPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsPatchArgs) ToEnterpriseSearchSpecHttpTlsPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsPatchOutput).ToEnterpriseSearchSpecHttpTlsPatchPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpTlsPatchPtrInput is an input type that accepts EnterpriseSearchSpecHttpTlsPatchArgs, EnterpriseSearchSpecHttpTlsPatchPtr and EnterpriseSearchSpecHttpTlsPatchPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsPatchPtrInput` via:
//
//	        EnterpriseSearchSpecHttpTlsPatchArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpTlsPatchPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsPatchPtrOutput() EnterpriseSearchSpecHttpTlsPatchPtrOutput
	ToEnterpriseSearchSpecHttpTlsPatchPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsPatchPtrOutput
}

type enterpriseSearchSpecHttpTlsPatchPtrType EnterpriseSearchSpecHttpTlsPatchArgs

func EnterpriseSearchSpecHttpTlsPatchPtr(v *EnterpriseSearchSpecHttpTlsPatchArgs) EnterpriseSearchSpecHttpTlsPatchPtrInput {
	return (*enterpriseSearchSpecHttpTlsPatchPtrType)(v)
}

func (*enterpriseSearchSpecHttpTlsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsPatch)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpTlsPatchPtrType) ToEnterpriseSearchSpecHttpTlsPatchPtrOutput() EnterpriseSearchSpecHttpTlsPatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsPatchPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpTlsPatchPtrType) ToEnterpriseSearchSpecHttpTlsPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsPatchPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type EnterpriseSearchSpecHttpTlsPatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsPatchOutput) ToEnterpriseSearchSpecHttpTlsPatchOutput() EnterpriseSearchSpecHttpTlsPatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsPatchOutput) ToEnterpriseSearchSpecHttpTlsPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsPatchOutput) ToEnterpriseSearchSpecHttpTlsPatchPtrOutput() EnterpriseSearchSpecHttpTlsPatchPtrOutput {
	return o.ToEnterpriseSearchSpecHttpTlsPatchPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpTlsPatchOutput) ToEnterpriseSearchSpecHttpTlsPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpTlsPatch) *EnterpriseSearchSpecHttpTlsPatch {
		return &v
	}).(EnterpriseSearchSpecHttpTlsPatchPtrOutput)
}

func (o EnterpriseSearchSpecHttpTlsPatchOutput) Certificate() EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsPatch) *EnterpriseSearchSpecHttpTlsCertificatePatch {
		return v.Certificate
	}).(EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput)
}

func (o EnterpriseSearchSpecHttpTlsPatchOutput) SelfSignedCertificate() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsPatch) *EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch {
		return v.SelfSignedCertificate
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput)
}

type EnterpriseSearchSpecHttpTlsPatchPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsPatchPtrOutput) ToEnterpriseSearchSpecHttpTlsPatchPtrOutput() EnterpriseSearchSpecHttpTlsPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsPatchPtrOutput) ToEnterpriseSearchSpecHttpTlsPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsPatchPtrOutput) Elem() EnterpriseSearchSpecHttpTlsPatchOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsPatch) EnterpriseSearchSpecHttpTlsPatch {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpTlsPatch
		return ret
	}).(EnterpriseSearchSpecHttpTlsPatchOutput)
}

func (o EnterpriseSearchSpecHttpTlsPatchPtrOutput) Certificate() EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsPatch) *EnterpriseSearchSpecHttpTlsCertificatePatch {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput)
}

func (o EnterpriseSearchSpecHttpTlsPatchPtrOutput) SelfSignedCertificate() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsPatch) *EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch {
		if v == nil {
			return nil
		}
		return v.SelfSignedCertificate
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificate struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled *bool `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames `pulumi:"subjectAltNames"`
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificateInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs and EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificateInput` via:
//
//	EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs{...}
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput `pulumi:"subjectAltNames"`
}

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput)
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput).ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs, EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtr and EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput` via:
//
//	        EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput
}

type enterpriseSearchSpecHttpTlsSelfSignedCertificatePtrType EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs

func EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtr(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput {
	return (*enterpriseSearchSpecHttpTlsSelfSignedCertificatePtrType)(v)
}

func (*enterpriseSearchSpecHttpTlsSelfSignedCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpTlsSelfSignedCertificatePtrType) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpTlsSelfSignedCertificatePtrType) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpTlsSelfSignedCertificate) *EnterpriseSearchSpecHttpTlsSelfSignedCertificate {
		return &v
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificate) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) SubjectAltNames() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificate) []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return v.SubjectAltNames
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

type EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) Elem() EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificate) EnterpriseSearchSpecHttpTlsSelfSignedCertificate {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpTlsSelfSignedCertificate
		return ret
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificate) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) SubjectAltNames() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificate) []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled *bool `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch `pulumi:"subjectAltNames"`
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchArgs and EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchInput` via:
//
//	EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchArgs{...}
type EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchArgs struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayInput `pulumi:"subjectAltNames"`
}

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput)
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput).ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchArgs, EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtr and EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrInput` via:
//
//	        EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput
}

type enterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrType EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchArgs

func EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtr(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchArgs) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrInput {
	return (*enterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrType)(v)
}

func (*enterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrType) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrType) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return o.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch) *EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch {
		return &v
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput) SubjectAltNames() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch) []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch {
		return v.SubjectAltNames
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput)
}

type EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput) Elem() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch
		return ret
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput) SubjectAltNames() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatch) []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames struct {
	// DNS is the DNS name of the subject.
	Dns *string `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip *string `pulumi:"ip"`
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs and EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput` via:
//
//	EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...}
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs struct {
	// DNS is the DNS name of the subject.
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray and EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput` via:
//
//	EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{ EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...} }
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
}

type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

// DNS is the DNS name of the subject.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// IP is the IP address of the subject.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) Index(i pulumi.IntInput) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return vs[0].([]EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)[vs[1].(int)]
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch struct {
	// DNS is the DNS name of the subject.
	Dns *string `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip *string `pulumi:"ip"`
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs and EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchInput` via:
//
//	EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs{...}
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs struct {
	// DNS is the DNS name of the subject.
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput)
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArray and EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayInput` via:
//
//	EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArray{ EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs{...} }
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput
}

type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArray []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchInput

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArray) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArray) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput {
	return o
}

// DNS is the DNS name of the subject.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// IP is the IP address of the subject.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput) Index(i pulumi.IntInput) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch {
		return vs[0].([]EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatch)[vs[1].(int)]
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput)
}

// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
type EnterpriseSearchSpecPatch struct {
	// Config holds the Enterprise Search configuration.
	Config    map[string]interface{}              `pulumi:"config"`
	ConfigRef *EnterpriseSearchSpecConfigRefPatch `pulumi:"configRef"`
	// Count of Enterprise Search instances to deploy.
	Count            *int                                       `pulumi:"count"`
	ElasticsearchRef *EnterpriseSearchSpecElasticsearchRefPatch `pulumi:"elasticsearchRef"`
	Http             *EnterpriseSearchSpecHttpPatch             `pulumi:"http"`
	// Image is the Enterprise Search Docker image to deploy.
	Image *string `pulumi:"image"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on)
	// for the Enterprise Search pods.
	PodTemplate map[string]interface{} `pulumi:"podTemplate"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Version of Enterprise Search.
	Version *string `pulumi:"version"`
}

// EnterpriseSearchSpecPatchInput is an input type that accepts EnterpriseSearchSpecPatchArgs and EnterpriseSearchSpecPatchOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecPatchInput` via:
//
//	EnterpriseSearchSpecPatchArgs{...}
type EnterpriseSearchSpecPatchInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecPatchOutput() EnterpriseSearchSpecPatchOutput
	ToEnterpriseSearchSpecPatchOutputWithContext(context.Context) EnterpriseSearchSpecPatchOutput
}

// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
type EnterpriseSearchSpecPatchArgs struct {
	// Config holds the Enterprise Search configuration.
	Config    pulumi.MapInput                            `pulumi:"config"`
	ConfigRef EnterpriseSearchSpecConfigRefPatchPtrInput `pulumi:"configRef"`
	// Count of Enterprise Search instances to deploy.
	Count            pulumi.IntPtrInput                                `pulumi:"count"`
	ElasticsearchRef EnterpriseSearchSpecElasticsearchRefPatchPtrInput `pulumi:"elasticsearchRef"`
	Http             EnterpriseSearchSpecHttpPatchPtrInput             `pulumi:"http"`
	// Image is the Enterprise Search Docker image to deploy.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on)
	// for the Enterprise Search pods.
	PodTemplate pulumi.MapInput `pulumi:"podTemplate"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// Version of Enterprise Search.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (EnterpriseSearchSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecPatch)(nil)).Elem()
}

func (i EnterpriseSearchSpecPatchArgs) ToEnterpriseSearchSpecPatchOutput() EnterpriseSearchSpecPatchOutput {
	return i.ToEnterpriseSearchSpecPatchOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecPatchArgs) ToEnterpriseSearchSpecPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecPatchOutput)
}

func (i EnterpriseSearchSpecPatchArgs) ToEnterpriseSearchSpecPatchPtrOutput() EnterpriseSearchSpecPatchPtrOutput {
	return i.ToEnterpriseSearchSpecPatchPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecPatchArgs) ToEnterpriseSearchSpecPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecPatchOutput).ToEnterpriseSearchSpecPatchPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecPatchPtrInput is an input type that accepts EnterpriseSearchSpecPatchArgs, EnterpriseSearchSpecPatchPtr and EnterpriseSearchSpecPatchPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecPatchPtrInput` via:
//
//	        EnterpriseSearchSpecPatchArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecPatchPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecPatchPtrOutput() EnterpriseSearchSpecPatchPtrOutput
	ToEnterpriseSearchSpecPatchPtrOutputWithContext(context.Context) EnterpriseSearchSpecPatchPtrOutput
}

type enterpriseSearchSpecPatchPtrType EnterpriseSearchSpecPatchArgs

func EnterpriseSearchSpecPatchPtr(v *EnterpriseSearchSpecPatchArgs) EnterpriseSearchSpecPatchPtrInput {
	return (*enterpriseSearchSpecPatchPtrType)(v)
}

func (*enterpriseSearchSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecPatch)(nil)).Elem()
}

func (i *enterpriseSearchSpecPatchPtrType) ToEnterpriseSearchSpecPatchPtrOutput() EnterpriseSearchSpecPatchPtrOutput {
	return i.ToEnterpriseSearchSpecPatchPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecPatchPtrType) ToEnterpriseSearchSpecPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecPatchPtrOutput)
}

// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
type EnterpriseSearchSpecPatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecPatchOutput) ToEnterpriseSearchSpecPatchOutput() EnterpriseSearchSpecPatchOutput {
	return o
}

func (o EnterpriseSearchSpecPatchOutput) ToEnterpriseSearchSpecPatchOutputWithContext(ctx context.Context) EnterpriseSearchSpecPatchOutput {
	return o
}

func (o EnterpriseSearchSpecPatchOutput) ToEnterpriseSearchSpecPatchPtrOutput() EnterpriseSearchSpecPatchPtrOutput {
	return o.ToEnterpriseSearchSpecPatchPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecPatchOutput) ToEnterpriseSearchSpecPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecPatch) *EnterpriseSearchSpecPatch {
		return &v
	}).(EnterpriseSearchSpecPatchPtrOutput)
}

// Config holds the Enterprise Search configuration.
func (o EnterpriseSearchSpecPatchOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecPatch) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

func (o EnterpriseSearchSpecPatchOutput) ConfigRef() EnterpriseSearchSpecConfigRefPatchPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecPatch) *EnterpriseSearchSpecConfigRefPatch { return v.ConfigRef }).(EnterpriseSearchSpecConfigRefPatchPtrOutput)
}

// Count of Enterprise Search instances to deploy.
func (o EnterpriseSearchSpecPatchOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecPatch) *int { return v.Count }).(pulumi.IntPtrOutput)
}

func (o EnterpriseSearchSpecPatchOutput) ElasticsearchRef() EnterpriseSearchSpecElasticsearchRefPatchPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecPatch) *EnterpriseSearchSpecElasticsearchRefPatch {
		return v.ElasticsearchRef
	}).(EnterpriseSearchSpecElasticsearchRefPatchPtrOutput)
}

func (o EnterpriseSearchSpecPatchOutput) Http() EnterpriseSearchSpecHttpPatchPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecPatch) *EnterpriseSearchSpecHttpPatch { return v.Http }).(EnterpriseSearchSpecHttpPatchPtrOutput)
}

// Image is the Enterprise Search Docker image to deploy.
func (o EnterpriseSearchSpecPatchOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecPatch) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on)
// for the Enterprise Search pods.
func (o EnterpriseSearchSpecPatchOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecPatch) map[string]interface{} { return v.PodTemplate }).(pulumi.MapOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o EnterpriseSearchSpecPatchOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecPatch) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// Version of Enterprise Search.
func (o EnterpriseSearchSpecPatchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecPatch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecPatch)(nil)).Elem()
}

func (o EnterpriseSearchSpecPatchPtrOutput) ToEnterpriseSearchSpecPatchPtrOutput() EnterpriseSearchSpecPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecPatchPtrOutput) ToEnterpriseSearchSpecPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPatchPtrOutput {
	return o
}

func (o EnterpriseSearchSpecPatchPtrOutput) Elem() EnterpriseSearchSpecPatchOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecPatch) EnterpriseSearchSpecPatch {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecPatch
		return ret
	}).(EnterpriseSearchSpecPatchOutput)
}

// Config holds the Enterprise Search configuration.
func (o EnterpriseSearchSpecPatchPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

func (o EnterpriseSearchSpecPatchPtrOutput) ConfigRef() EnterpriseSearchSpecConfigRefPatchPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecPatch) *EnterpriseSearchSpecConfigRefPatch {
		if v == nil {
			return nil
		}
		return v.ConfigRef
	}).(EnterpriseSearchSpecConfigRefPatchPtrOutput)
}

// Count of Enterprise Search instances to deploy.
func (o EnterpriseSearchSpecPatchPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

func (o EnterpriseSearchSpecPatchPtrOutput) ElasticsearchRef() EnterpriseSearchSpecElasticsearchRefPatchPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecPatch) *EnterpriseSearchSpecElasticsearchRefPatch {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRef
	}).(EnterpriseSearchSpecElasticsearchRefPatchPtrOutput)
}

func (o EnterpriseSearchSpecPatchPtrOutput) Http() EnterpriseSearchSpecHttpPatchPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecPatch) *EnterpriseSearchSpecHttpPatch {
		if v == nil {
			return nil
		}
		return v.Http
	}).(EnterpriseSearchSpecHttpPatchPtrOutput)
}

// Image is the Enterprise Search Docker image to deploy.
func (o EnterpriseSearchSpecPatchPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on)
// for the Enterprise Search pods.
func (o EnterpriseSearchSpecPatchPtrOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.MapOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o EnterpriseSearchSpecPatchPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Version of Enterprise Search.
func (o EnterpriseSearchSpecPatchPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
type EnterpriseSearchStatus struct {
	// Association is the status of any auto-linking to Elasticsearch clusters.
	AssociationStatus *string `pulumi:"associationStatus"`
	// AvailableNodes is the number of available replicas in the deployment.
	AvailableNodes *int `pulumi:"availableNodes"`
	// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
	Count *int `pulumi:"count"`
	// Health of the deployment.
	Health *string `pulumi:"health"`
	// Selector is the label selector used to find all pods.
	Selector *string `pulumi:"selector"`
	// ExternalService is the name of the service associated to the Enterprise Search Pods.
	Service *string `pulumi:"service"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version *string `pulumi:"version"`
}

// EnterpriseSearchStatusInput is an input type that accepts EnterpriseSearchStatusArgs and EnterpriseSearchStatusOutput values.
// You can construct a concrete instance of `EnterpriseSearchStatusInput` via:
//
//	EnterpriseSearchStatusArgs{...}
type EnterpriseSearchStatusInput interface {
	pulumi.Input

	ToEnterpriseSearchStatusOutput() EnterpriseSearchStatusOutput
	ToEnterpriseSearchStatusOutputWithContext(context.Context) EnterpriseSearchStatusOutput
}

// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
type EnterpriseSearchStatusArgs struct {
	// Association is the status of any auto-linking to Elasticsearch clusters.
	AssociationStatus pulumi.StringPtrInput `pulumi:"associationStatus"`
	// AvailableNodes is the number of available replicas in the deployment.
	AvailableNodes pulumi.IntPtrInput `pulumi:"availableNodes"`
	// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Health of the deployment.
	Health pulumi.StringPtrInput `pulumi:"health"`
	// Selector is the label selector used to find all pods.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// ExternalService is the name of the service associated to the Enterprise Search Pods.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (EnterpriseSearchStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchStatus)(nil)).Elem()
}

func (i EnterpriseSearchStatusArgs) ToEnterpriseSearchStatusOutput() EnterpriseSearchStatusOutput {
	return i.ToEnterpriseSearchStatusOutputWithContext(context.Background())
}

func (i EnterpriseSearchStatusArgs) ToEnterpriseSearchStatusOutputWithContext(ctx context.Context) EnterpriseSearchStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchStatusOutput)
}

func (i EnterpriseSearchStatusArgs) ToEnterpriseSearchStatusPtrOutput() EnterpriseSearchStatusPtrOutput {
	return i.ToEnterpriseSearchStatusPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchStatusArgs) ToEnterpriseSearchStatusPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchStatusOutput).ToEnterpriseSearchStatusPtrOutputWithContext(ctx)
}

// EnterpriseSearchStatusPtrInput is an input type that accepts EnterpriseSearchStatusArgs, EnterpriseSearchStatusPtr and EnterpriseSearchStatusPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchStatusPtrInput` via:
//
//	        EnterpriseSearchStatusArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchStatusPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchStatusPtrOutput() EnterpriseSearchStatusPtrOutput
	ToEnterpriseSearchStatusPtrOutputWithContext(context.Context) EnterpriseSearchStatusPtrOutput
}

type enterpriseSearchStatusPtrType EnterpriseSearchStatusArgs

func EnterpriseSearchStatusPtr(v *EnterpriseSearchStatusArgs) EnterpriseSearchStatusPtrInput {
	return (*enterpriseSearchStatusPtrType)(v)
}

func (*enterpriseSearchStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchStatus)(nil)).Elem()
}

func (i *enterpriseSearchStatusPtrType) ToEnterpriseSearchStatusPtrOutput() EnterpriseSearchStatusPtrOutput {
	return i.ToEnterpriseSearchStatusPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchStatusPtrType) ToEnterpriseSearchStatusPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchStatusPtrOutput)
}

// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
type EnterpriseSearchStatusOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchStatus)(nil)).Elem()
}

func (o EnterpriseSearchStatusOutput) ToEnterpriseSearchStatusOutput() EnterpriseSearchStatusOutput {
	return o
}

func (o EnterpriseSearchStatusOutput) ToEnterpriseSearchStatusOutputWithContext(ctx context.Context) EnterpriseSearchStatusOutput {
	return o
}

func (o EnterpriseSearchStatusOutput) ToEnterpriseSearchStatusPtrOutput() EnterpriseSearchStatusPtrOutput {
	return o.ToEnterpriseSearchStatusPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchStatusOutput) ToEnterpriseSearchStatusPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchStatus) *EnterpriseSearchStatus {
		return &v
	}).(EnterpriseSearchStatusPtrOutput)
}

// Association is the status of any auto-linking to Elasticsearch clusters.
func (o EnterpriseSearchStatusOutput) AssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *string { return v.AssociationStatus }).(pulumi.StringPtrOutput)
}

// AvailableNodes is the number of available replicas in the deployment.
func (o EnterpriseSearchStatusOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *int { return v.AvailableNodes }).(pulumi.IntPtrOutput)
}

// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
func (o EnterpriseSearchStatusOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Health of the deployment.
func (o EnterpriseSearchStatusOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *string { return v.Health }).(pulumi.StringPtrOutput)
}

// Selector is the label selector used to find all pods.
func (o EnterpriseSearchStatusOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// ExternalService is the name of the service associated to the Enterprise Search Pods.
func (o EnterpriseSearchStatusOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o EnterpriseSearchStatusOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchStatusPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchStatus)(nil)).Elem()
}

func (o EnterpriseSearchStatusPtrOutput) ToEnterpriseSearchStatusPtrOutput() EnterpriseSearchStatusPtrOutput {
	return o
}

func (o EnterpriseSearchStatusPtrOutput) ToEnterpriseSearchStatusPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPtrOutput {
	return o
}

func (o EnterpriseSearchStatusPtrOutput) Elem() EnterpriseSearchStatusOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) EnterpriseSearchStatus {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchStatus
		return ret
	}).(EnterpriseSearchStatusOutput)
}

// Association is the status of any auto-linking to Elasticsearch clusters.
func (o EnterpriseSearchStatusPtrOutput) AssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.AssociationStatus
	}).(pulumi.StringPtrOutput)
}

// AvailableNodes is the number of available replicas in the deployment.
func (o EnterpriseSearchStatusPtrOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableNodes
	}).(pulumi.IntPtrOutput)
}

// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
func (o EnterpriseSearchStatusPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Health of the deployment.
func (o EnterpriseSearchStatusPtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Health
	}).(pulumi.StringPtrOutput)
}

// Selector is the label selector used to find all pods.
func (o EnterpriseSearchStatusPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

// ExternalService is the name of the service associated to the Enterprise Search Pods.
func (o EnterpriseSearchStatusPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o EnterpriseSearchStatusPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
type EnterpriseSearchStatusPatch struct {
	// Association is the status of any auto-linking to Elasticsearch clusters.
	AssociationStatus *string `pulumi:"associationStatus"`
	// AvailableNodes is the number of available replicas in the deployment.
	AvailableNodes *int `pulumi:"availableNodes"`
	// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
	Count *int `pulumi:"count"`
	// Health of the deployment.
	Health *string `pulumi:"health"`
	// Selector is the label selector used to find all pods.
	Selector *string `pulumi:"selector"`
	// ExternalService is the name of the service associated to the Enterprise Search Pods.
	Service *string `pulumi:"service"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version *string `pulumi:"version"`
}

// EnterpriseSearchStatusPatchInput is an input type that accepts EnterpriseSearchStatusPatchArgs and EnterpriseSearchStatusPatchOutput values.
// You can construct a concrete instance of `EnterpriseSearchStatusPatchInput` via:
//
//	EnterpriseSearchStatusPatchArgs{...}
type EnterpriseSearchStatusPatchInput interface {
	pulumi.Input

	ToEnterpriseSearchStatusPatchOutput() EnterpriseSearchStatusPatchOutput
	ToEnterpriseSearchStatusPatchOutputWithContext(context.Context) EnterpriseSearchStatusPatchOutput
}

// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
type EnterpriseSearchStatusPatchArgs struct {
	// Association is the status of any auto-linking to Elasticsearch clusters.
	AssociationStatus pulumi.StringPtrInput `pulumi:"associationStatus"`
	// AvailableNodes is the number of available replicas in the deployment.
	AvailableNodes pulumi.IntPtrInput `pulumi:"availableNodes"`
	// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Health of the deployment.
	Health pulumi.StringPtrInput `pulumi:"health"`
	// Selector is the label selector used to find all pods.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// ExternalService is the name of the service associated to the Enterprise Search Pods.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (EnterpriseSearchStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchStatusPatch)(nil)).Elem()
}

func (i EnterpriseSearchStatusPatchArgs) ToEnterpriseSearchStatusPatchOutput() EnterpriseSearchStatusPatchOutput {
	return i.ToEnterpriseSearchStatusPatchOutputWithContext(context.Background())
}

func (i EnterpriseSearchStatusPatchArgs) ToEnterpriseSearchStatusPatchOutputWithContext(ctx context.Context) EnterpriseSearchStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchStatusPatchOutput)
}

func (i EnterpriseSearchStatusPatchArgs) ToEnterpriseSearchStatusPatchPtrOutput() EnterpriseSearchStatusPatchPtrOutput {
	return i.ToEnterpriseSearchStatusPatchPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchStatusPatchArgs) ToEnterpriseSearchStatusPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchStatusPatchOutput).ToEnterpriseSearchStatusPatchPtrOutputWithContext(ctx)
}

// EnterpriseSearchStatusPatchPtrInput is an input type that accepts EnterpriseSearchStatusPatchArgs, EnterpriseSearchStatusPatchPtr and EnterpriseSearchStatusPatchPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchStatusPatchPtrInput` via:
//
//	        EnterpriseSearchStatusPatchArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchStatusPatchPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchStatusPatchPtrOutput() EnterpriseSearchStatusPatchPtrOutput
	ToEnterpriseSearchStatusPatchPtrOutputWithContext(context.Context) EnterpriseSearchStatusPatchPtrOutput
}

type enterpriseSearchStatusPatchPtrType EnterpriseSearchStatusPatchArgs

func EnterpriseSearchStatusPatchPtr(v *EnterpriseSearchStatusPatchArgs) EnterpriseSearchStatusPatchPtrInput {
	return (*enterpriseSearchStatusPatchPtrType)(v)
}

func (*enterpriseSearchStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchStatusPatch)(nil)).Elem()
}

func (i *enterpriseSearchStatusPatchPtrType) ToEnterpriseSearchStatusPatchPtrOutput() EnterpriseSearchStatusPatchPtrOutput {
	return i.ToEnterpriseSearchStatusPatchPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchStatusPatchPtrType) ToEnterpriseSearchStatusPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchStatusPatchPtrOutput)
}

// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
type EnterpriseSearchStatusPatchOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchStatusPatch)(nil)).Elem()
}

func (o EnterpriseSearchStatusPatchOutput) ToEnterpriseSearchStatusPatchOutput() EnterpriseSearchStatusPatchOutput {
	return o
}

func (o EnterpriseSearchStatusPatchOutput) ToEnterpriseSearchStatusPatchOutputWithContext(ctx context.Context) EnterpriseSearchStatusPatchOutput {
	return o
}

func (o EnterpriseSearchStatusPatchOutput) ToEnterpriseSearchStatusPatchPtrOutput() EnterpriseSearchStatusPatchPtrOutput {
	return o.ToEnterpriseSearchStatusPatchPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchStatusPatchOutput) ToEnterpriseSearchStatusPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchStatusPatch) *EnterpriseSearchStatusPatch {
		return &v
	}).(EnterpriseSearchStatusPatchPtrOutput)
}

// Association is the status of any auto-linking to Elasticsearch clusters.
func (o EnterpriseSearchStatusPatchOutput) AssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatusPatch) *string { return v.AssociationStatus }).(pulumi.StringPtrOutput)
}

// AvailableNodes is the number of available replicas in the deployment.
func (o EnterpriseSearchStatusPatchOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatusPatch) *int { return v.AvailableNodes }).(pulumi.IntPtrOutput)
}

// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
func (o EnterpriseSearchStatusPatchOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatusPatch) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Health of the deployment.
func (o EnterpriseSearchStatusPatchOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatusPatch) *string { return v.Health }).(pulumi.StringPtrOutput)
}

// Selector is the label selector used to find all pods.
func (o EnterpriseSearchStatusPatchOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatusPatch) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// ExternalService is the name of the service associated to the Enterprise Search Pods.
func (o EnterpriseSearchStatusPatchOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatusPatch) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o EnterpriseSearchStatusPatchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatusPatch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchStatusPatch)(nil)).Elem()
}

func (o EnterpriseSearchStatusPatchPtrOutput) ToEnterpriseSearchStatusPatchPtrOutput() EnterpriseSearchStatusPatchPtrOutput {
	return o
}

func (o EnterpriseSearchStatusPatchPtrOutput) ToEnterpriseSearchStatusPatchPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPatchPtrOutput {
	return o
}

func (o EnterpriseSearchStatusPatchPtrOutput) Elem() EnterpriseSearchStatusPatchOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatusPatch) EnterpriseSearchStatusPatch {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchStatusPatch
		return ret
	}).(EnterpriseSearchStatusPatchOutput)
}

// Association is the status of any auto-linking to Elasticsearch clusters.
func (o EnterpriseSearchStatusPatchPtrOutput) AssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.AssociationStatus
	}).(pulumi.StringPtrOutput)
}

// AvailableNodes is the number of available replicas in the deployment.
func (o EnterpriseSearchStatusPatchPtrOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.AvailableNodes
	}).(pulumi.IntPtrOutput)
}

// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
func (o EnterpriseSearchStatusPatchPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Health of the deployment.
func (o EnterpriseSearchStatusPatchPtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Health
	}).(pulumi.StringPtrOutput)
}

// Selector is the label selector used to find all pods.
func (o EnterpriseSearchStatusPatchPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

// ExternalService is the name of the service associated to the Enterprise Search Pods.
func (o EnterpriseSearchStatusPatchPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o EnterpriseSearchStatusPatchPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchTypeInput)(nil)).Elem(), EnterpriseSearchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchTypeArrayInput)(nil)).Elem(), EnterpriseSearchTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchListTypeInput)(nil)).Elem(), EnterpriseSearchListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchPatchTypeInput)(nil)).Elem(), EnterpriseSearchPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecInput)(nil)).Elem(), EnterpriseSearchSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecPtrInput)(nil)).Elem(), EnterpriseSearchSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecConfigRefInput)(nil)).Elem(), EnterpriseSearchSpecConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecConfigRefPtrInput)(nil)).Elem(), EnterpriseSearchSpecConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecConfigRefPatchInput)(nil)).Elem(), EnterpriseSearchSpecConfigRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecConfigRefPatchPtrInput)(nil)).Elem(), EnterpriseSearchSpecConfigRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecElasticsearchRefInput)(nil)).Elem(), EnterpriseSearchSpecElasticsearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecElasticsearchRefPtrInput)(nil)).Elem(), EnterpriseSearchSpecElasticsearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecElasticsearchRefPatchInput)(nil)).Elem(), EnterpriseSearchSpecElasticsearchRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecElasticsearchRefPatchPtrInput)(nil)).Elem(), EnterpriseSearchSpecElasticsearchRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpInput)(nil)).Elem(), EnterpriseSearchSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpPatchInput)(nil)).Elem(), EnterpriseSearchSpecHttpPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpPatchPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServicePtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceMetadataInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceMetadataPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceMetadataPatchInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceMetadataPatchPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServicePatchInput)(nil)).Elem(), EnterpriseSearchSpecHttpServicePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServicePatchPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpServicePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPatchInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPatchPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPortsInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPortsArrayInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPortsPatchInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecPortsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecPortsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsCertificateInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsCertificatePtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsCertificatePatchInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsCertificatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsCertificatePatchPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsCertificatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsPatchInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsPatchPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecPatchInput)(nil)).Elem(), EnterpriseSearchSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecPatchPtrInput)(nil)).Elem(), EnterpriseSearchSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchStatusInput)(nil)).Elem(), EnterpriseSearchStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchStatusPtrInput)(nil)).Elem(), EnterpriseSearchStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchStatusPatchInput)(nil)).Elem(), EnterpriseSearchStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchStatusPatchPtrInput)(nil)).Elem(), EnterpriseSearchStatusPatchArgs{})
	pulumi.RegisterOutputType(EnterpriseSearchTypeOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchTypeArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchListTypeOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchPatchTypeOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecConfigRefOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecConfigRefPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecConfigRefPatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecConfigRefPatchPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecElasticsearchRefOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecElasticsearchRefPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecElasticsearchRefPatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecElasticsearchRefPatchPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpPatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpPatchPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServicePtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceMetadataOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceMetadataPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceMetadataPatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceMetadataPatchPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServicePatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServicePatchPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecPatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecPortsOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecPortsPatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecPortsPatchArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPatchPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPatchPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsCertificateOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsCertificatePtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsCertificatePatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsCertificatePatchPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsPatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsPatchPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePatchPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesPatchArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecPatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchStatusOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchStatusPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchStatusPatchOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchStatusPatchPtrOutput{})
}
