// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// EnterpriseSearchList is a list of EnterpriseSearch
type EnterpriseSearchList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of enterprisesearches. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items EnterpriseSearchTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewEnterpriseSearchList registers a new resource with the given unique name, arguments, and options.
func NewEnterpriseSearchList(ctx *pulumi.Context,
	name string, args *EnterpriseSearchListArgs, opts ...pulumi.ResourceOption) (*EnterpriseSearchList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("enterprisesearch.k8s.elastic.co/v1beta1")
	args.Kind = pulumi.StringPtr("EnterpriseSearchList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EnterpriseSearchList
	err := ctx.RegisterResource("kubernetes:enterprisesearch.k8s.elastic.co/v1beta1:EnterpriseSearchList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnterpriseSearchList gets an existing EnterpriseSearchList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnterpriseSearchList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnterpriseSearchListState, opts ...pulumi.ResourceOption) (*EnterpriseSearchList, error) {
	var resource EnterpriseSearchList
	err := ctx.ReadResource("kubernetes:enterprisesearch.k8s.elastic.co/v1beta1:EnterpriseSearchList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnterpriseSearchList resources.
type enterpriseSearchListState struct {
}

type EnterpriseSearchListState struct {
}

func (EnterpriseSearchListState) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseSearchListState)(nil)).Elem()
}

type enterpriseSearchListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of enterprisesearches. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []EnterpriseSearchType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a EnterpriseSearchList resource.
type EnterpriseSearchListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of enterprisesearches. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items EnterpriseSearchTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (EnterpriseSearchListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseSearchListArgs)(nil)).Elem()
}

type EnterpriseSearchListInput interface {
	pulumi.Input

	ToEnterpriseSearchListOutput() EnterpriseSearchListOutput
	ToEnterpriseSearchListOutputWithContext(ctx context.Context) EnterpriseSearchListOutput
}

func (*EnterpriseSearchList) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchList)(nil)).Elem()
}

func (i *EnterpriseSearchList) ToEnterpriseSearchListOutput() EnterpriseSearchListOutput {
	return i.ToEnterpriseSearchListOutputWithContext(context.Background())
}

func (i *EnterpriseSearchList) ToEnterpriseSearchListOutputWithContext(ctx context.Context) EnterpriseSearchListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchListOutput)
}

// EnterpriseSearchListArrayInput is an input type that accepts EnterpriseSearchListArray and EnterpriseSearchListArrayOutput values.
// You can construct a concrete instance of `EnterpriseSearchListArrayInput` via:
//
//	EnterpriseSearchListArray{ EnterpriseSearchListArgs{...} }
type EnterpriseSearchListArrayInput interface {
	pulumi.Input

	ToEnterpriseSearchListArrayOutput() EnterpriseSearchListArrayOutput
	ToEnterpriseSearchListArrayOutputWithContext(context.Context) EnterpriseSearchListArrayOutput
}

type EnterpriseSearchListArray []EnterpriseSearchListInput

func (EnterpriseSearchListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseSearchList)(nil)).Elem()
}

func (i EnterpriseSearchListArray) ToEnterpriseSearchListArrayOutput() EnterpriseSearchListArrayOutput {
	return i.ToEnterpriseSearchListArrayOutputWithContext(context.Background())
}

func (i EnterpriseSearchListArray) ToEnterpriseSearchListArrayOutputWithContext(ctx context.Context) EnterpriseSearchListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchListArrayOutput)
}

// EnterpriseSearchListMapInput is an input type that accepts EnterpriseSearchListMap and EnterpriseSearchListMapOutput values.
// You can construct a concrete instance of `EnterpriseSearchListMapInput` via:
//
//	EnterpriseSearchListMap{ "key": EnterpriseSearchListArgs{...} }
type EnterpriseSearchListMapInput interface {
	pulumi.Input

	ToEnterpriseSearchListMapOutput() EnterpriseSearchListMapOutput
	ToEnterpriseSearchListMapOutputWithContext(context.Context) EnterpriseSearchListMapOutput
}

type EnterpriseSearchListMap map[string]EnterpriseSearchListInput

func (EnterpriseSearchListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseSearchList)(nil)).Elem()
}

func (i EnterpriseSearchListMap) ToEnterpriseSearchListMapOutput() EnterpriseSearchListMapOutput {
	return i.ToEnterpriseSearchListMapOutputWithContext(context.Background())
}

func (i EnterpriseSearchListMap) ToEnterpriseSearchListMapOutputWithContext(ctx context.Context) EnterpriseSearchListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchListMapOutput)
}

type EnterpriseSearchListOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchList)(nil)).Elem()
}

func (o EnterpriseSearchListOutput) ToEnterpriseSearchListOutput() EnterpriseSearchListOutput {
	return o
}

func (o EnterpriseSearchListOutput) ToEnterpriseSearchListOutputWithContext(ctx context.Context) EnterpriseSearchListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EnterpriseSearchListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseSearchList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of enterprisesearches. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o EnterpriseSearchListOutput) Items() EnterpriseSearchTypeArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchList) EnterpriseSearchTypeArrayOutput { return v.Items }).(EnterpriseSearchTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EnterpriseSearchListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseSearchList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EnterpriseSearchListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *EnterpriseSearchList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type EnterpriseSearchListArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseSearchList)(nil)).Elem()
}

func (o EnterpriseSearchListArrayOutput) ToEnterpriseSearchListArrayOutput() EnterpriseSearchListArrayOutput {
	return o
}

func (o EnterpriseSearchListArrayOutput) ToEnterpriseSearchListArrayOutputWithContext(ctx context.Context) EnterpriseSearchListArrayOutput {
	return o
}

func (o EnterpriseSearchListArrayOutput) Index(i pulumi.IntInput) EnterpriseSearchListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnterpriseSearchList {
		return vs[0].([]*EnterpriseSearchList)[vs[1].(int)]
	}).(EnterpriseSearchListOutput)
}

type EnterpriseSearchListMapOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseSearchList)(nil)).Elem()
}

func (o EnterpriseSearchListMapOutput) ToEnterpriseSearchListMapOutput() EnterpriseSearchListMapOutput {
	return o
}

func (o EnterpriseSearchListMapOutput) ToEnterpriseSearchListMapOutputWithContext(ctx context.Context) EnterpriseSearchListMapOutput {
	return o
}

func (o EnterpriseSearchListMapOutput) MapIndex(k pulumi.StringInput) EnterpriseSearchListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnterpriseSearchList {
		return vs[0].(map[string]*EnterpriseSearchList)[vs[1].(string)]
	}).(EnterpriseSearchListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchListInput)(nil)).Elem(), &EnterpriseSearchList{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchListArrayInput)(nil)).Elem(), EnterpriseSearchListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchListMapInput)(nil)).Elem(), EnterpriseSearchListMap{})
	pulumi.RegisterOutputType(EnterpriseSearchListOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchListArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchListMapOutput{})
}
