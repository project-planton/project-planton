// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PostgresTeamList is a list of PostgresTeam
type PostgresTeamList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of postgresteams. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PostgresTeamTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewPostgresTeamList registers a new resource with the given unique name, arguments, and options.
func NewPostgresTeamList(ctx *pulumi.Context,
	name string, args *PostgresTeamListArgs, opts ...pulumi.ResourceOption) (*PostgresTeamList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("acid.zalan.do/v1")
	args.Kind = pulumi.StringPtr("PostgresTeamList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PostgresTeamList
	err := ctx.RegisterResource("kubernetes:acid.zalan.do/v1:PostgresTeamList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresTeamList gets an existing PostgresTeamList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresTeamList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresTeamListState, opts ...pulumi.ResourceOption) (*PostgresTeamList, error) {
	var resource PostgresTeamList
	err := ctx.ReadResource("kubernetes:acid.zalan.do/v1:PostgresTeamList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresTeamList resources.
type postgresTeamListState struct {
}

type PostgresTeamListState struct {
}

func (PostgresTeamListState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresTeamListState)(nil)).Elem()
}

type postgresTeamListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of postgresteams. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []PostgresTeamType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a PostgresTeamList resource.
type PostgresTeamListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of postgresteams. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PostgresTeamTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (PostgresTeamListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresTeamListArgs)(nil)).Elem()
}

type PostgresTeamListInput interface {
	pulumi.Input

	ToPostgresTeamListOutput() PostgresTeamListOutput
	ToPostgresTeamListOutputWithContext(ctx context.Context) PostgresTeamListOutput
}

func (*PostgresTeamList) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresTeamList)(nil)).Elem()
}

func (i *PostgresTeamList) ToPostgresTeamListOutput() PostgresTeamListOutput {
	return i.ToPostgresTeamListOutputWithContext(context.Background())
}

func (i *PostgresTeamList) ToPostgresTeamListOutputWithContext(ctx context.Context) PostgresTeamListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresTeamListOutput)
}

// PostgresTeamListArrayInput is an input type that accepts PostgresTeamListArray and PostgresTeamListArrayOutput values.
// You can construct a concrete instance of `PostgresTeamListArrayInput` via:
//
//	PostgresTeamListArray{ PostgresTeamListArgs{...} }
type PostgresTeamListArrayInput interface {
	pulumi.Input

	ToPostgresTeamListArrayOutput() PostgresTeamListArrayOutput
	ToPostgresTeamListArrayOutputWithContext(context.Context) PostgresTeamListArrayOutput
}

type PostgresTeamListArray []PostgresTeamListInput

func (PostgresTeamListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresTeamList)(nil)).Elem()
}

func (i PostgresTeamListArray) ToPostgresTeamListArrayOutput() PostgresTeamListArrayOutput {
	return i.ToPostgresTeamListArrayOutputWithContext(context.Background())
}

func (i PostgresTeamListArray) ToPostgresTeamListArrayOutputWithContext(ctx context.Context) PostgresTeamListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresTeamListArrayOutput)
}

// PostgresTeamListMapInput is an input type that accepts PostgresTeamListMap and PostgresTeamListMapOutput values.
// You can construct a concrete instance of `PostgresTeamListMapInput` via:
//
//	PostgresTeamListMap{ "key": PostgresTeamListArgs{...} }
type PostgresTeamListMapInput interface {
	pulumi.Input

	ToPostgresTeamListMapOutput() PostgresTeamListMapOutput
	ToPostgresTeamListMapOutputWithContext(context.Context) PostgresTeamListMapOutput
}

type PostgresTeamListMap map[string]PostgresTeamListInput

func (PostgresTeamListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresTeamList)(nil)).Elem()
}

func (i PostgresTeamListMap) ToPostgresTeamListMapOutput() PostgresTeamListMapOutput {
	return i.ToPostgresTeamListMapOutputWithContext(context.Background())
}

func (i PostgresTeamListMap) ToPostgresTeamListMapOutputWithContext(ctx context.Context) PostgresTeamListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresTeamListMapOutput)
}

type PostgresTeamListOutput struct{ *pulumi.OutputState }

func (PostgresTeamListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresTeamList)(nil)).Elem()
}

func (o PostgresTeamListOutput) ToPostgresTeamListOutput() PostgresTeamListOutput {
	return o
}

func (o PostgresTeamListOutput) ToPostgresTeamListOutputWithContext(ctx context.Context) PostgresTeamListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PostgresTeamListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresTeamList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of postgresteams. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o PostgresTeamListOutput) Items() PostgresTeamTypeArrayOutput {
	return o.ApplyT(func(v *PostgresTeamList) PostgresTeamTypeArrayOutput { return v.Items }).(PostgresTeamTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgresTeamListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresTeamList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgresTeamListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *PostgresTeamList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type PostgresTeamListArrayOutput struct{ *pulumi.OutputState }

func (PostgresTeamListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresTeamList)(nil)).Elem()
}

func (o PostgresTeamListArrayOutput) ToPostgresTeamListArrayOutput() PostgresTeamListArrayOutput {
	return o
}

func (o PostgresTeamListArrayOutput) ToPostgresTeamListArrayOutputWithContext(ctx context.Context) PostgresTeamListArrayOutput {
	return o
}

func (o PostgresTeamListArrayOutput) Index(i pulumi.IntInput) PostgresTeamListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostgresTeamList {
		return vs[0].([]*PostgresTeamList)[vs[1].(int)]
	}).(PostgresTeamListOutput)
}

type PostgresTeamListMapOutput struct{ *pulumi.OutputState }

func (PostgresTeamListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresTeamList)(nil)).Elem()
}

func (o PostgresTeamListMapOutput) ToPostgresTeamListMapOutput() PostgresTeamListMapOutput {
	return o
}

func (o PostgresTeamListMapOutput) ToPostgresTeamListMapOutputWithContext(ctx context.Context) PostgresTeamListMapOutput {
	return o
}

func (o PostgresTeamListMapOutput) MapIndex(k pulumi.StringInput) PostgresTeamListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostgresTeamList {
		return vs[0].(map[string]*PostgresTeamList)[vs[1].(string)]
	}).(PostgresTeamListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresTeamListInput)(nil)).Elem(), &PostgresTeamList{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresTeamListArrayInput)(nil)).Elem(), PostgresTeamListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresTeamListMapInput)(nil)).Elem(), PostgresTeamListMap{})
	pulumi.RegisterOutputType(PostgresTeamListOutput{})
	pulumi.RegisterOutputType(PostgresTeamListArrayOutput{})
	pulumi.RegisterOutputType(PostgresTeamListMapOutput{})
}
