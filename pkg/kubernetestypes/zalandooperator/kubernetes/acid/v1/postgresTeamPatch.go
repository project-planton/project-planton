// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type PostgresTeamPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     PostgresTeamSpecPatchPtrOutput  `pulumi:"spec"`
}

// NewPostgresTeamPatch registers a new resource with the given unique name, arguments, and options.
func NewPostgresTeamPatch(ctx *pulumi.Context,
	name string, args *PostgresTeamPatchArgs, opts ...pulumi.ResourceOption) (*PostgresTeamPatch, error) {
	if args == nil {
		args = &PostgresTeamPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("acid.zalan.do/v1")
	args.Kind = pulumi.StringPtr("PostgresTeam")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PostgresTeamPatch
	err := ctx.RegisterResource("kubernetes:acid.zalan.do/v1:PostgresTeamPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresTeamPatch gets an existing PostgresTeamPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresTeamPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresTeamPatchState, opts ...pulumi.ResourceOption) (*PostgresTeamPatch, error) {
	var resource PostgresTeamPatch
	err := ctx.ReadResource("kubernetes:acid.zalan.do/v1:PostgresTeamPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresTeamPatch resources.
type postgresTeamPatchState struct {
}

type PostgresTeamPatchState struct {
}

func (PostgresTeamPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresTeamPatchState)(nil)).Elem()
}

type postgresTeamPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *PostgresTeamSpecPatch  `pulumi:"spec"`
}

// The set of arguments for constructing a PostgresTeamPatch resource.
type PostgresTeamPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     PostgresTeamSpecPatchPtrInput
}

func (PostgresTeamPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresTeamPatchArgs)(nil)).Elem()
}

type PostgresTeamPatchInput interface {
	pulumi.Input

	ToPostgresTeamPatchOutput() PostgresTeamPatchOutput
	ToPostgresTeamPatchOutputWithContext(ctx context.Context) PostgresTeamPatchOutput
}

func (*PostgresTeamPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresTeamPatch)(nil)).Elem()
}

func (i *PostgresTeamPatch) ToPostgresTeamPatchOutput() PostgresTeamPatchOutput {
	return i.ToPostgresTeamPatchOutputWithContext(context.Background())
}

func (i *PostgresTeamPatch) ToPostgresTeamPatchOutputWithContext(ctx context.Context) PostgresTeamPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresTeamPatchOutput)
}

// PostgresTeamPatchArrayInput is an input type that accepts PostgresTeamPatchArray and PostgresTeamPatchArrayOutput values.
// You can construct a concrete instance of `PostgresTeamPatchArrayInput` via:
//
//	PostgresTeamPatchArray{ PostgresTeamPatchArgs{...} }
type PostgresTeamPatchArrayInput interface {
	pulumi.Input

	ToPostgresTeamPatchArrayOutput() PostgresTeamPatchArrayOutput
	ToPostgresTeamPatchArrayOutputWithContext(context.Context) PostgresTeamPatchArrayOutput
}

type PostgresTeamPatchArray []PostgresTeamPatchInput

func (PostgresTeamPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresTeamPatch)(nil)).Elem()
}

func (i PostgresTeamPatchArray) ToPostgresTeamPatchArrayOutput() PostgresTeamPatchArrayOutput {
	return i.ToPostgresTeamPatchArrayOutputWithContext(context.Background())
}

func (i PostgresTeamPatchArray) ToPostgresTeamPatchArrayOutputWithContext(ctx context.Context) PostgresTeamPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresTeamPatchArrayOutput)
}

// PostgresTeamPatchMapInput is an input type that accepts PostgresTeamPatchMap and PostgresTeamPatchMapOutput values.
// You can construct a concrete instance of `PostgresTeamPatchMapInput` via:
//
//	PostgresTeamPatchMap{ "key": PostgresTeamPatchArgs{...} }
type PostgresTeamPatchMapInput interface {
	pulumi.Input

	ToPostgresTeamPatchMapOutput() PostgresTeamPatchMapOutput
	ToPostgresTeamPatchMapOutputWithContext(context.Context) PostgresTeamPatchMapOutput
}

type PostgresTeamPatchMap map[string]PostgresTeamPatchInput

func (PostgresTeamPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresTeamPatch)(nil)).Elem()
}

func (i PostgresTeamPatchMap) ToPostgresTeamPatchMapOutput() PostgresTeamPatchMapOutput {
	return i.ToPostgresTeamPatchMapOutputWithContext(context.Background())
}

func (i PostgresTeamPatchMap) ToPostgresTeamPatchMapOutputWithContext(ctx context.Context) PostgresTeamPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresTeamPatchMapOutput)
}

type PostgresTeamPatchOutput struct{ *pulumi.OutputState }

func (PostgresTeamPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresTeamPatch)(nil)).Elem()
}

func (o PostgresTeamPatchOutput) ToPostgresTeamPatchOutput() PostgresTeamPatchOutput {
	return o
}

func (o PostgresTeamPatchOutput) ToPostgresTeamPatchOutputWithContext(ctx context.Context) PostgresTeamPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PostgresTeamPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresTeamPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgresTeamPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresTeamPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PostgresTeamPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PostgresTeamPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PostgresTeamPatchOutput) Spec() PostgresTeamSpecPatchPtrOutput {
	return o.ApplyT(func(v *PostgresTeamPatch) PostgresTeamSpecPatchPtrOutput { return v.Spec }).(PostgresTeamSpecPatchPtrOutput)
}

type PostgresTeamPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresTeamPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresTeamPatch)(nil)).Elem()
}

func (o PostgresTeamPatchArrayOutput) ToPostgresTeamPatchArrayOutput() PostgresTeamPatchArrayOutput {
	return o
}

func (o PostgresTeamPatchArrayOutput) ToPostgresTeamPatchArrayOutputWithContext(ctx context.Context) PostgresTeamPatchArrayOutput {
	return o
}

func (o PostgresTeamPatchArrayOutput) Index(i pulumi.IntInput) PostgresTeamPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostgresTeamPatch {
		return vs[0].([]*PostgresTeamPatch)[vs[1].(int)]
	}).(PostgresTeamPatchOutput)
}

type PostgresTeamPatchMapOutput struct{ *pulumi.OutputState }

func (PostgresTeamPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresTeamPatch)(nil)).Elem()
}

func (o PostgresTeamPatchMapOutput) ToPostgresTeamPatchMapOutput() PostgresTeamPatchMapOutput {
	return o
}

func (o PostgresTeamPatchMapOutput) ToPostgresTeamPatchMapOutputWithContext(ctx context.Context) PostgresTeamPatchMapOutput {
	return o
}

func (o PostgresTeamPatchMapOutput) MapIndex(k pulumi.StringInput) PostgresTeamPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostgresTeamPatch {
		return vs[0].(map[string]*PostgresTeamPatch)[vs[1].(string)]
	}).(PostgresTeamPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresTeamPatchInput)(nil)).Elem(), &PostgresTeamPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresTeamPatchArrayInput)(nil)).Elem(), PostgresTeamPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresTeamPatchMapInput)(nil)).Elem(), PostgresTeamPatchMap{})
	pulumi.RegisterOutputType(PostgresTeamPatchOutput{})
	pulumi.RegisterOutputType(PostgresTeamPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresTeamPatchMapOutput{})
}
