// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OperatorConfiguration struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion    pulumi.StringOutput                      `pulumi:"apiVersion"`
	Configuration OperatorConfigurationConfigurationOutput `pulumi:"configuration"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Status   pulumi.StringMapOutput  `pulumi:"status"`
}

// NewOperatorConfiguration registers a new resource with the given unique name, arguments, and options.
func NewOperatorConfiguration(ctx *pulumi.Context,
	name string, args *OperatorConfigurationArgs, opts ...pulumi.ResourceOption) (*OperatorConfiguration, error) {
	if args == nil {
		args = &OperatorConfigurationArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("acid.zalan.do/v1")
	args.Kind = pulumi.StringPtr("OperatorConfiguration")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource OperatorConfiguration
	err := ctx.RegisterResource("kubernetes:acid.zalan.do/v1:OperatorConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOperatorConfiguration gets an existing OperatorConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOperatorConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OperatorConfigurationState, opts ...pulumi.ResourceOption) (*OperatorConfiguration, error) {
	var resource OperatorConfiguration
	err := ctx.ReadResource("kubernetes:acid.zalan.do/v1:OperatorConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OperatorConfiguration resources.
type operatorConfigurationState struct {
}

type OperatorConfigurationState struct {
}

func (OperatorConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*operatorConfigurationState)(nil)).Elem()
}

type operatorConfigurationArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion    *string                             `pulumi:"apiVersion"`
	Configuration *OperatorConfigurationConfiguration `pulumi:"configuration"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a OperatorConfiguration resource.
type OperatorConfigurationArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion    pulumi.StringPtrInput
	Configuration OperatorConfigurationConfigurationPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
}

func (OperatorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*operatorConfigurationArgs)(nil)).Elem()
}

type OperatorConfigurationInput interface {
	pulumi.Input

	ToOperatorConfigurationOutput() OperatorConfigurationOutput
	ToOperatorConfigurationOutputWithContext(ctx context.Context) OperatorConfigurationOutput
}

func (*OperatorConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorConfiguration)(nil)).Elem()
}

func (i *OperatorConfiguration) ToOperatorConfigurationOutput() OperatorConfigurationOutput {
	return i.ToOperatorConfigurationOutputWithContext(context.Background())
}

func (i *OperatorConfiguration) ToOperatorConfigurationOutputWithContext(ctx context.Context) OperatorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorConfigurationOutput)
}

// OperatorConfigurationArrayInput is an input type that accepts OperatorConfigurationArray and OperatorConfigurationArrayOutput values.
// You can construct a concrete instance of `OperatorConfigurationArrayInput` via:
//
//	OperatorConfigurationArray{ OperatorConfigurationArgs{...} }
type OperatorConfigurationArrayInput interface {
	pulumi.Input

	ToOperatorConfigurationArrayOutput() OperatorConfigurationArrayOutput
	ToOperatorConfigurationArrayOutputWithContext(context.Context) OperatorConfigurationArrayOutput
}

type OperatorConfigurationArray []OperatorConfigurationInput

func (OperatorConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OperatorConfiguration)(nil)).Elem()
}

func (i OperatorConfigurationArray) ToOperatorConfigurationArrayOutput() OperatorConfigurationArrayOutput {
	return i.ToOperatorConfigurationArrayOutputWithContext(context.Background())
}

func (i OperatorConfigurationArray) ToOperatorConfigurationArrayOutputWithContext(ctx context.Context) OperatorConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorConfigurationArrayOutput)
}

// OperatorConfigurationMapInput is an input type that accepts OperatorConfigurationMap and OperatorConfigurationMapOutput values.
// You can construct a concrete instance of `OperatorConfigurationMapInput` via:
//
//	OperatorConfigurationMap{ "key": OperatorConfigurationArgs{...} }
type OperatorConfigurationMapInput interface {
	pulumi.Input

	ToOperatorConfigurationMapOutput() OperatorConfigurationMapOutput
	ToOperatorConfigurationMapOutputWithContext(context.Context) OperatorConfigurationMapOutput
}

type OperatorConfigurationMap map[string]OperatorConfigurationInput

func (OperatorConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OperatorConfiguration)(nil)).Elem()
}

func (i OperatorConfigurationMap) ToOperatorConfigurationMapOutput() OperatorConfigurationMapOutput {
	return i.ToOperatorConfigurationMapOutputWithContext(context.Background())
}

func (i OperatorConfigurationMap) ToOperatorConfigurationMapOutputWithContext(ctx context.Context) OperatorConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorConfigurationMapOutput)
}

type OperatorConfigurationOutput struct{ *pulumi.OutputState }

func (OperatorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorConfiguration)(nil)).Elem()
}

func (o OperatorConfigurationOutput) ToOperatorConfigurationOutput() OperatorConfigurationOutput {
	return o
}

func (o OperatorConfigurationOutput) ToOperatorConfigurationOutputWithContext(ctx context.Context) OperatorConfigurationOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o OperatorConfigurationOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *OperatorConfiguration) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o OperatorConfigurationOutput) Configuration() OperatorConfigurationConfigurationOutput {
	return o.ApplyT(func(v *OperatorConfiguration) OperatorConfigurationConfigurationOutput { return v.Configuration }).(OperatorConfigurationConfigurationOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OperatorConfigurationOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *OperatorConfiguration) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o OperatorConfigurationOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *OperatorConfiguration) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o OperatorConfigurationOutput) Status() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OperatorConfiguration) pulumi.StringMapOutput { return v.Status }).(pulumi.StringMapOutput)
}

type OperatorConfigurationArrayOutput struct{ *pulumi.OutputState }

func (OperatorConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OperatorConfiguration)(nil)).Elem()
}

func (o OperatorConfigurationArrayOutput) ToOperatorConfigurationArrayOutput() OperatorConfigurationArrayOutput {
	return o
}

func (o OperatorConfigurationArrayOutput) ToOperatorConfigurationArrayOutputWithContext(ctx context.Context) OperatorConfigurationArrayOutput {
	return o
}

func (o OperatorConfigurationArrayOutput) Index(i pulumi.IntInput) OperatorConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OperatorConfiguration {
		return vs[0].([]*OperatorConfiguration)[vs[1].(int)]
	}).(OperatorConfigurationOutput)
}

type OperatorConfigurationMapOutput struct{ *pulumi.OutputState }

func (OperatorConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OperatorConfiguration)(nil)).Elem()
}

func (o OperatorConfigurationMapOutput) ToOperatorConfigurationMapOutput() OperatorConfigurationMapOutput {
	return o
}

func (o OperatorConfigurationMapOutput) ToOperatorConfigurationMapOutputWithContext(ctx context.Context) OperatorConfigurationMapOutput {
	return o
}

func (o OperatorConfigurationMapOutput) MapIndex(k pulumi.StringInput) OperatorConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OperatorConfiguration {
		return vs[0].(map[string]*OperatorConfiguration)[vs[1].(string)]
	}).(OperatorConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorConfigurationInput)(nil)).Elem(), &OperatorConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorConfigurationArrayInput)(nil)).Elem(), OperatorConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorConfigurationMapInput)(nil)).Elem(), OperatorConfigurationMap{})
	pulumi.RegisterOutputType(OperatorConfigurationOutput{})
	pulumi.RegisterOutputType(OperatorConfigurationArrayOutput{})
	pulumi.RegisterOutputType(OperatorConfigurationMapOutput{})
}
