// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type PostgresqlPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     PostgresqlSpecPatchPtrOutput    `pulumi:"spec"`
	Status   pulumi.StringMapOutput          `pulumi:"status"`
}

// NewPostgresqlPatch registers a new resource with the given unique name, arguments, and options.
func NewPostgresqlPatch(ctx *pulumi.Context,
	name string, args *PostgresqlPatchArgs, opts ...pulumi.ResourceOption) (*PostgresqlPatch, error) {
	if args == nil {
		args = &PostgresqlPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("acid.zalan.do/v1")
	args.Kind = pulumi.StringPtr("postgresql")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PostgresqlPatch
	err := ctx.RegisterResource("kubernetes:acid.zalan.do/v1:postgresqlPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresqlPatch gets an existing PostgresqlPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresqlPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresqlPatchState, opts ...pulumi.ResourceOption) (*PostgresqlPatch, error) {
	var resource PostgresqlPatch
	err := ctx.ReadResource("kubernetes:acid.zalan.do/v1:postgresqlPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresqlPatch resources.
type postgresqlPatchState struct {
}

type PostgresqlPatchState struct {
}

func (PostgresqlPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresqlPatchState)(nil)).Elem()
}

type postgresqlPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *PostgresqlSpecPatch    `pulumi:"spec"`
}

// The set of arguments for constructing a PostgresqlPatch resource.
type PostgresqlPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     PostgresqlSpecPatchPtrInput
}

func (PostgresqlPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresqlPatchArgs)(nil)).Elem()
}

type PostgresqlPatchInput interface {
	pulumi.Input

	ToPostgresqlPatchOutput() PostgresqlPatchOutput
	ToPostgresqlPatchOutputWithContext(ctx context.Context) PostgresqlPatchOutput
}

func (*PostgresqlPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlPatch)(nil)).Elem()
}

func (i *PostgresqlPatch) ToPostgresqlPatchOutput() PostgresqlPatchOutput {
	return i.ToPostgresqlPatchOutputWithContext(context.Background())
}

func (i *PostgresqlPatch) ToPostgresqlPatchOutputWithContext(ctx context.Context) PostgresqlPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlPatchOutput)
}

// PostgresqlPatchArrayInput is an input type that accepts PostgresqlPatchArray and PostgresqlPatchArrayOutput values.
// You can construct a concrete instance of `PostgresqlPatchArrayInput` via:
//
//	PostgresqlPatchArray{ PostgresqlPatchArgs{...} }
type PostgresqlPatchArrayInput interface {
	pulumi.Input

	ToPostgresqlPatchArrayOutput() PostgresqlPatchArrayOutput
	ToPostgresqlPatchArrayOutputWithContext(context.Context) PostgresqlPatchArrayOutput
}

type PostgresqlPatchArray []PostgresqlPatchInput

func (PostgresqlPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresqlPatch)(nil)).Elem()
}

func (i PostgresqlPatchArray) ToPostgresqlPatchArrayOutput() PostgresqlPatchArrayOutput {
	return i.ToPostgresqlPatchArrayOutputWithContext(context.Background())
}

func (i PostgresqlPatchArray) ToPostgresqlPatchArrayOutputWithContext(ctx context.Context) PostgresqlPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlPatchArrayOutput)
}

// PostgresqlPatchMapInput is an input type that accepts PostgresqlPatchMap and PostgresqlPatchMapOutput values.
// You can construct a concrete instance of `PostgresqlPatchMapInput` via:
//
//	PostgresqlPatchMap{ "key": PostgresqlPatchArgs{...} }
type PostgresqlPatchMapInput interface {
	pulumi.Input

	ToPostgresqlPatchMapOutput() PostgresqlPatchMapOutput
	ToPostgresqlPatchMapOutputWithContext(context.Context) PostgresqlPatchMapOutput
}

type PostgresqlPatchMap map[string]PostgresqlPatchInput

func (PostgresqlPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresqlPatch)(nil)).Elem()
}

func (i PostgresqlPatchMap) ToPostgresqlPatchMapOutput() PostgresqlPatchMapOutput {
	return i.ToPostgresqlPatchMapOutputWithContext(context.Background())
}

func (i PostgresqlPatchMap) ToPostgresqlPatchMapOutputWithContext(ctx context.Context) PostgresqlPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlPatchMapOutput)
}

type PostgresqlPatchOutput struct{ *pulumi.OutputState }

func (PostgresqlPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlPatch)(nil)).Elem()
}

func (o PostgresqlPatchOutput) ToPostgresqlPatchOutput() PostgresqlPatchOutput {
	return o
}

func (o PostgresqlPatchOutput) ToPostgresqlPatchOutputWithContext(ctx context.Context) PostgresqlPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PostgresqlPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresqlPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgresqlPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresqlPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PostgresqlPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PostgresqlPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PostgresqlPatchOutput) Spec() PostgresqlSpecPatchPtrOutput {
	return o.ApplyT(func(v *PostgresqlPatch) PostgresqlSpecPatchPtrOutput { return v.Spec }).(PostgresqlSpecPatchPtrOutput)
}

func (o PostgresqlPatchOutput) Status() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresqlPatch) pulumi.StringMapOutput { return v.Status }).(pulumi.StringMapOutput)
}

type PostgresqlPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresqlPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresqlPatch)(nil)).Elem()
}

func (o PostgresqlPatchArrayOutput) ToPostgresqlPatchArrayOutput() PostgresqlPatchArrayOutput {
	return o
}

func (o PostgresqlPatchArrayOutput) ToPostgresqlPatchArrayOutputWithContext(ctx context.Context) PostgresqlPatchArrayOutput {
	return o
}

func (o PostgresqlPatchArrayOutput) Index(i pulumi.IntInput) PostgresqlPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostgresqlPatch {
		return vs[0].([]*PostgresqlPatch)[vs[1].(int)]
	}).(PostgresqlPatchOutput)
}

type PostgresqlPatchMapOutput struct{ *pulumi.OutputState }

func (PostgresqlPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresqlPatch)(nil)).Elem()
}

func (o PostgresqlPatchMapOutput) ToPostgresqlPatchMapOutput() PostgresqlPatchMapOutput {
	return o
}

func (o PostgresqlPatchMapOutput) ToPostgresqlPatchMapOutputWithContext(ctx context.Context) PostgresqlPatchMapOutput {
	return o
}

func (o PostgresqlPatchMapOutput) MapIndex(k pulumi.StringInput) PostgresqlPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostgresqlPatch {
		return vs[0].(map[string]*PostgresqlPatch)[vs[1].(string)]
	}).(PostgresqlPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlPatchInput)(nil)).Elem(), &PostgresqlPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlPatchArrayInput)(nil)).Elem(), PostgresqlPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlPatchMapInput)(nil)).Elem(), PostgresqlPatchMap{})
	pulumi.RegisterOutputType(PostgresqlPatchOutput{})
	pulumi.RegisterOutputType(PostgresqlPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresqlPatchMapOutput{})
}
