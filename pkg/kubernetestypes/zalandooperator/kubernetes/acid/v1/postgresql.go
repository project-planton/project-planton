// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Postgresql struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     PostgresqlSpecOutput    `pulumi:"spec"`
	Status   pulumi.StringMapOutput  `pulumi:"status"`
}

// NewPostgresql registers a new resource with the given unique name, arguments, and options.
func NewPostgresql(ctx *pulumi.Context,
	name string, args *PostgresqlArgs, opts ...pulumi.ResourceOption) (*Postgresql, error) {
	if args == nil {
		args = &PostgresqlArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("acid.zalan.do/v1")
	args.Kind = pulumi.StringPtr("postgresql")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Postgresql
	err := ctx.RegisterResource("kubernetes:acid.zalan.do/v1:postgresql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresql gets an existing Postgresql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresqlState, opts ...pulumi.ResourceOption) (*Postgresql, error) {
	var resource Postgresql
	err := ctx.ReadResource("kubernetes:acid.zalan.do/v1:postgresql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Postgresql resources.
type postgresqlState struct {
}

type PostgresqlState struct {
}

func (PostgresqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresqlState)(nil)).Elem()
}

type postgresqlArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *PostgresqlSpec    `pulumi:"spec"`
}

// The set of arguments for constructing a Postgresql resource.
type PostgresqlArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     PostgresqlSpecPtrInput
}

func (PostgresqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresqlArgs)(nil)).Elem()
}

type PostgresqlInput interface {
	pulumi.Input

	ToPostgresqlOutput() PostgresqlOutput
	ToPostgresqlOutputWithContext(ctx context.Context) PostgresqlOutput
}

func (*Postgresql) ElementType() reflect.Type {
	return reflect.TypeOf((**Postgresql)(nil)).Elem()
}

func (i *Postgresql) ToPostgresqlOutput() PostgresqlOutput {
	return i.ToPostgresqlOutputWithContext(context.Background())
}

func (i *Postgresql) ToPostgresqlOutputWithContext(ctx context.Context) PostgresqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlOutput)
}

// PostgresqlArrayInput is an input type that accepts PostgresqlArray and PostgresqlArrayOutput values.
// You can construct a concrete instance of `PostgresqlArrayInput` via:
//
//	PostgresqlArray{ PostgresqlArgs{...} }
type PostgresqlArrayInput interface {
	pulumi.Input

	ToPostgresqlArrayOutput() PostgresqlArrayOutput
	ToPostgresqlArrayOutputWithContext(context.Context) PostgresqlArrayOutput
}

type PostgresqlArray []PostgresqlInput

func (PostgresqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Postgresql)(nil)).Elem()
}

func (i PostgresqlArray) ToPostgresqlArrayOutput() PostgresqlArrayOutput {
	return i.ToPostgresqlArrayOutputWithContext(context.Background())
}

func (i PostgresqlArray) ToPostgresqlArrayOutputWithContext(ctx context.Context) PostgresqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlArrayOutput)
}

// PostgresqlMapInput is an input type that accepts PostgresqlMap and PostgresqlMapOutput values.
// You can construct a concrete instance of `PostgresqlMapInput` via:
//
//	PostgresqlMap{ "key": PostgresqlArgs{...} }
type PostgresqlMapInput interface {
	pulumi.Input

	ToPostgresqlMapOutput() PostgresqlMapOutput
	ToPostgresqlMapOutputWithContext(context.Context) PostgresqlMapOutput
}

type PostgresqlMap map[string]PostgresqlInput

func (PostgresqlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Postgresql)(nil)).Elem()
}

func (i PostgresqlMap) ToPostgresqlMapOutput() PostgresqlMapOutput {
	return i.ToPostgresqlMapOutputWithContext(context.Background())
}

func (i PostgresqlMap) ToPostgresqlMapOutputWithContext(ctx context.Context) PostgresqlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlMapOutput)
}

type PostgresqlOutput struct{ *pulumi.OutputState }

func (PostgresqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Postgresql)(nil)).Elem()
}

func (o PostgresqlOutput) ToPostgresqlOutput() PostgresqlOutput {
	return o
}

func (o PostgresqlOutput) ToPostgresqlOutputWithContext(ctx context.Context) PostgresqlOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PostgresqlOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Postgresql) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgresqlOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Postgresql) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PostgresqlOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Postgresql) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o PostgresqlOutput) Spec() PostgresqlSpecOutput {
	return o.ApplyT(func(v *Postgresql) PostgresqlSpecOutput { return v.Spec }).(PostgresqlSpecOutput)
}

func (o PostgresqlOutput) Status() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Postgresql) pulumi.StringMapOutput { return v.Status }).(pulumi.StringMapOutput)
}

type PostgresqlArrayOutput struct{ *pulumi.OutputState }

func (PostgresqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Postgresql)(nil)).Elem()
}

func (o PostgresqlArrayOutput) ToPostgresqlArrayOutput() PostgresqlArrayOutput {
	return o
}

func (o PostgresqlArrayOutput) ToPostgresqlArrayOutputWithContext(ctx context.Context) PostgresqlArrayOutput {
	return o
}

func (o PostgresqlArrayOutput) Index(i pulumi.IntInput) PostgresqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Postgresql {
		return vs[0].([]*Postgresql)[vs[1].(int)]
	}).(PostgresqlOutput)
}

type PostgresqlMapOutput struct{ *pulumi.OutputState }

func (PostgresqlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Postgresql)(nil)).Elem()
}

func (o PostgresqlMapOutput) ToPostgresqlMapOutput() PostgresqlMapOutput {
	return o
}

func (o PostgresqlMapOutput) ToPostgresqlMapOutputWithContext(ctx context.Context) PostgresqlMapOutput {
	return o
}

func (o PostgresqlMapOutput) MapIndex(k pulumi.StringInput) PostgresqlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Postgresql {
		return vs[0].(map[string]*Postgresql)[vs[1].(string)]
	}).(PostgresqlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlInput)(nil)).Elem(), &Postgresql{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlArrayInput)(nil)).Elem(), PostgresqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlMapInput)(nil)).Elem(), PostgresqlMap{})
	pulumi.RegisterOutputType(PostgresqlOutput{})
	pulumi.RegisterOutputType(PostgresqlArrayOutput{})
	pulumi.RegisterOutputType(PostgresqlMapOutput{})
}
