// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type OperatorConfigurationPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion    pulumi.StringPtrOutput                           `pulumi:"apiVersion"`
	Configuration OperatorConfigurationConfigurationPatchPtrOutput `pulumi:"configuration"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Status   pulumi.StringMapOutput          `pulumi:"status"`
}

// NewOperatorConfigurationPatch registers a new resource with the given unique name, arguments, and options.
func NewOperatorConfigurationPatch(ctx *pulumi.Context,
	name string, args *OperatorConfigurationPatchArgs, opts ...pulumi.ResourceOption) (*OperatorConfigurationPatch, error) {
	if args == nil {
		args = &OperatorConfigurationPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("acid.zalan.do/v1")
	args.Kind = pulumi.StringPtr("OperatorConfiguration")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource OperatorConfigurationPatch
	err := ctx.RegisterResource("kubernetes:acid.zalan.do/v1:OperatorConfigurationPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOperatorConfigurationPatch gets an existing OperatorConfigurationPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOperatorConfigurationPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OperatorConfigurationPatchState, opts ...pulumi.ResourceOption) (*OperatorConfigurationPatch, error) {
	var resource OperatorConfigurationPatch
	err := ctx.ReadResource("kubernetes:acid.zalan.do/v1:OperatorConfigurationPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OperatorConfigurationPatch resources.
type operatorConfigurationPatchState struct {
}

type OperatorConfigurationPatchState struct {
}

func (OperatorConfigurationPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*operatorConfigurationPatchState)(nil)).Elem()
}

type operatorConfigurationPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion    *string                                  `pulumi:"apiVersion"`
	Configuration *OperatorConfigurationConfigurationPatch `pulumi:"configuration"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
}

// The set of arguments for constructing a OperatorConfigurationPatch resource.
type OperatorConfigurationPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion    pulumi.StringPtrInput
	Configuration OperatorConfigurationConfigurationPatchPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
}

func (OperatorConfigurationPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*operatorConfigurationPatchArgs)(nil)).Elem()
}

type OperatorConfigurationPatchInput interface {
	pulumi.Input

	ToOperatorConfigurationPatchOutput() OperatorConfigurationPatchOutput
	ToOperatorConfigurationPatchOutputWithContext(ctx context.Context) OperatorConfigurationPatchOutput
}

func (*OperatorConfigurationPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorConfigurationPatch)(nil)).Elem()
}

func (i *OperatorConfigurationPatch) ToOperatorConfigurationPatchOutput() OperatorConfigurationPatchOutput {
	return i.ToOperatorConfigurationPatchOutputWithContext(context.Background())
}

func (i *OperatorConfigurationPatch) ToOperatorConfigurationPatchOutputWithContext(ctx context.Context) OperatorConfigurationPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorConfigurationPatchOutput)
}

// OperatorConfigurationPatchArrayInput is an input type that accepts OperatorConfigurationPatchArray and OperatorConfigurationPatchArrayOutput values.
// You can construct a concrete instance of `OperatorConfigurationPatchArrayInput` via:
//
//	OperatorConfigurationPatchArray{ OperatorConfigurationPatchArgs{...} }
type OperatorConfigurationPatchArrayInput interface {
	pulumi.Input

	ToOperatorConfigurationPatchArrayOutput() OperatorConfigurationPatchArrayOutput
	ToOperatorConfigurationPatchArrayOutputWithContext(context.Context) OperatorConfigurationPatchArrayOutput
}

type OperatorConfigurationPatchArray []OperatorConfigurationPatchInput

func (OperatorConfigurationPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OperatorConfigurationPatch)(nil)).Elem()
}

func (i OperatorConfigurationPatchArray) ToOperatorConfigurationPatchArrayOutput() OperatorConfigurationPatchArrayOutput {
	return i.ToOperatorConfigurationPatchArrayOutputWithContext(context.Background())
}

func (i OperatorConfigurationPatchArray) ToOperatorConfigurationPatchArrayOutputWithContext(ctx context.Context) OperatorConfigurationPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorConfigurationPatchArrayOutput)
}

// OperatorConfigurationPatchMapInput is an input type that accepts OperatorConfigurationPatchMap and OperatorConfigurationPatchMapOutput values.
// You can construct a concrete instance of `OperatorConfigurationPatchMapInput` via:
//
//	OperatorConfigurationPatchMap{ "key": OperatorConfigurationPatchArgs{...} }
type OperatorConfigurationPatchMapInput interface {
	pulumi.Input

	ToOperatorConfigurationPatchMapOutput() OperatorConfigurationPatchMapOutput
	ToOperatorConfigurationPatchMapOutputWithContext(context.Context) OperatorConfigurationPatchMapOutput
}

type OperatorConfigurationPatchMap map[string]OperatorConfigurationPatchInput

func (OperatorConfigurationPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OperatorConfigurationPatch)(nil)).Elem()
}

func (i OperatorConfigurationPatchMap) ToOperatorConfigurationPatchMapOutput() OperatorConfigurationPatchMapOutput {
	return i.ToOperatorConfigurationPatchMapOutputWithContext(context.Background())
}

func (i OperatorConfigurationPatchMap) ToOperatorConfigurationPatchMapOutputWithContext(ctx context.Context) OperatorConfigurationPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorConfigurationPatchMapOutput)
}

type OperatorConfigurationPatchOutput struct{ *pulumi.OutputState }

func (OperatorConfigurationPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorConfigurationPatch)(nil)).Elem()
}

func (o OperatorConfigurationPatchOutput) ToOperatorConfigurationPatchOutput() OperatorConfigurationPatchOutput {
	return o
}

func (o OperatorConfigurationPatchOutput) ToOperatorConfigurationPatchOutputWithContext(ctx context.Context) OperatorConfigurationPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o OperatorConfigurationPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorConfigurationPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o OperatorConfigurationPatchOutput) Configuration() OperatorConfigurationConfigurationPatchPtrOutput {
	return o.ApplyT(func(v *OperatorConfigurationPatch) OperatorConfigurationConfigurationPatchPtrOutput {
		return v.Configuration
	}).(OperatorConfigurationConfigurationPatchPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OperatorConfigurationPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorConfigurationPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o OperatorConfigurationPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *OperatorConfigurationPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o OperatorConfigurationPatchOutput) Status() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OperatorConfigurationPatch) pulumi.StringMapOutput { return v.Status }).(pulumi.StringMapOutput)
}

type OperatorConfigurationPatchArrayOutput struct{ *pulumi.OutputState }

func (OperatorConfigurationPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OperatorConfigurationPatch)(nil)).Elem()
}

func (o OperatorConfigurationPatchArrayOutput) ToOperatorConfigurationPatchArrayOutput() OperatorConfigurationPatchArrayOutput {
	return o
}

func (o OperatorConfigurationPatchArrayOutput) ToOperatorConfigurationPatchArrayOutputWithContext(ctx context.Context) OperatorConfigurationPatchArrayOutput {
	return o
}

func (o OperatorConfigurationPatchArrayOutput) Index(i pulumi.IntInput) OperatorConfigurationPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OperatorConfigurationPatch {
		return vs[0].([]*OperatorConfigurationPatch)[vs[1].(int)]
	}).(OperatorConfigurationPatchOutput)
}

type OperatorConfigurationPatchMapOutput struct{ *pulumi.OutputState }

func (OperatorConfigurationPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OperatorConfigurationPatch)(nil)).Elem()
}

func (o OperatorConfigurationPatchMapOutput) ToOperatorConfigurationPatchMapOutput() OperatorConfigurationPatchMapOutput {
	return o
}

func (o OperatorConfigurationPatchMapOutput) ToOperatorConfigurationPatchMapOutputWithContext(ctx context.Context) OperatorConfigurationPatchMapOutput {
	return o
}

func (o OperatorConfigurationPatchMapOutput) MapIndex(k pulumi.StringInput) OperatorConfigurationPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OperatorConfigurationPatch {
		return vs[0].(map[string]*OperatorConfigurationPatch)[vs[1].(string)]
	}).(OperatorConfigurationPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorConfigurationPatchInput)(nil)).Elem(), &OperatorConfigurationPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorConfigurationPatchArrayInput)(nil)).Elem(), OperatorConfigurationPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorConfigurationPatchMapInput)(nil)).Elem(), OperatorConfigurationPatchMap{})
	pulumi.RegisterOutputType(OperatorConfigurationPatchOutput{})
	pulumi.RegisterOutputType(OperatorConfigurationPatchArrayOutput{})
	pulumi.RegisterOutputType(OperatorConfigurationPatchMapOutput{})
}
