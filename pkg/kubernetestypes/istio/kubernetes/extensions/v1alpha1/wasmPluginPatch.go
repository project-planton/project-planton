// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type WasmPluginPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     WasmPluginSpecPatchPtrOutput    `pulumi:"spec"`
	Status   pulumi.MapOutput                `pulumi:"status"`
}

// NewWasmPluginPatch registers a new resource with the given unique name, arguments, and options.
func NewWasmPluginPatch(ctx *pulumi.Context,
	name string, args *WasmPluginPatchArgs, opts ...pulumi.ResourceOption) (*WasmPluginPatch, error) {
	if args == nil {
		args = &WasmPluginPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("extensions.istio.io/v1alpha1")
	args.Kind = pulumi.StringPtr("WasmPlugin")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource WasmPluginPatch
	err := ctx.RegisterResource("kubernetes:extensions.istio.io/v1alpha1:WasmPluginPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWasmPluginPatch gets an existing WasmPluginPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWasmPluginPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WasmPluginPatchState, opts ...pulumi.ResourceOption) (*WasmPluginPatch, error) {
	var resource WasmPluginPatch
	err := ctx.ReadResource("kubernetes:extensions.istio.io/v1alpha1:WasmPluginPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WasmPluginPatch resources.
type wasmPluginPatchState struct {
}

type WasmPluginPatchState struct {
}

func (WasmPluginPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*wasmPluginPatchState)(nil)).Elem()
}

type wasmPluginPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *WasmPluginSpecPatch    `pulumi:"spec"`
}

// The set of arguments for constructing a WasmPluginPatch resource.
type WasmPluginPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     WasmPluginSpecPatchPtrInput
}

func (WasmPluginPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wasmPluginPatchArgs)(nil)).Elem()
}

type WasmPluginPatchInput interface {
	pulumi.Input

	ToWasmPluginPatchOutput() WasmPluginPatchOutput
	ToWasmPluginPatchOutputWithContext(ctx context.Context) WasmPluginPatchOutput
}

func (*WasmPluginPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginPatch)(nil)).Elem()
}

func (i *WasmPluginPatch) ToWasmPluginPatchOutput() WasmPluginPatchOutput {
	return i.ToWasmPluginPatchOutputWithContext(context.Background())
}

func (i *WasmPluginPatch) ToWasmPluginPatchOutputWithContext(ctx context.Context) WasmPluginPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginPatchOutput)
}

// WasmPluginPatchArrayInput is an input type that accepts WasmPluginPatchArray and WasmPluginPatchArrayOutput values.
// You can construct a concrete instance of `WasmPluginPatchArrayInput` via:
//
//	WasmPluginPatchArray{ WasmPluginPatchArgs{...} }
type WasmPluginPatchArrayInput interface {
	pulumi.Input

	ToWasmPluginPatchArrayOutput() WasmPluginPatchArrayOutput
	ToWasmPluginPatchArrayOutputWithContext(context.Context) WasmPluginPatchArrayOutput
}

type WasmPluginPatchArray []WasmPluginPatchInput

func (WasmPluginPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WasmPluginPatch)(nil)).Elem()
}

func (i WasmPluginPatchArray) ToWasmPluginPatchArrayOutput() WasmPluginPatchArrayOutput {
	return i.ToWasmPluginPatchArrayOutputWithContext(context.Background())
}

func (i WasmPluginPatchArray) ToWasmPluginPatchArrayOutputWithContext(ctx context.Context) WasmPluginPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginPatchArrayOutput)
}

// WasmPluginPatchMapInput is an input type that accepts WasmPluginPatchMap and WasmPluginPatchMapOutput values.
// You can construct a concrete instance of `WasmPluginPatchMapInput` via:
//
//	WasmPluginPatchMap{ "key": WasmPluginPatchArgs{...} }
type WasmPluginPatchMapInput interface {
	pulumi.Input

	ToWasmPluginPatchMapOutput() WasmPluginPatchMapOutput
	ToWasmPluginPatchMapOutputWithContext(context.Context) WasmPluginPatchMapOutput
}

type WasmPluginPatchMap map[string]WasmPluginPatchInput

func (WasmPluginPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WasmPluginPatch)(nil)).Elem()
}

func (i WasmPluginPatchMap) ToWasmPluginPatchMapOutput() WasmPluginPatchMapOutput {
	return i.ToWasmPluginPatchMapOutputWithContext(context.Background())
}

func (i WasmPluginPatchMap) ToWasmPluginPatchMapOutputWithContext(ctx context.Context) WasmPluginPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginPatchMapOutput)
}

type WasmPluginPatchOutput struct{ *pulumi.OutputState }

func (WasmPluginPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginPatch)(nil)).Elem()
}

func (o WasmPluginPatchOutput) ToWasmPluginPatchOutput() WasmPluginPatchOutput {
	return o
}

func (o WasmPluginPatchOutput) ToWasmPluginPatchOutputWithContext(ctx context.Context) WasmPluginPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o WasmPluginPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o WasmPluginPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o WasmPluginPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *WasmPluginPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o WasmPluginPatchOutput) Spec() WasmPluginSpecPatchPtrOutput {
	return o.ApplyT(func(v *WasmPluginPatch) WasmPluginSpecPatchPtrOutput { return v.Spec }).(WasmPluginSpecPatchPtrOutput)
}

func (o WasmPluginPatchOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *WasmPluginPatch) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type WasmPluginPatchArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WasmPluginPatch)(nil)).Elem()
}

func (o WasmPluginPatchArrayOutput) ToWasmPluginPatchArrayOutput() WasmPluginPatchArrayOutput {
	return o
}

func (o WasmPluginPatchArrayOutput) ToWasmPluginPatchArrayOutputWithContext(ctx context.Context) WasmPluginPatchArrayOutput {
	return o
}

func (o WasmPluginPatchArrayOutput) Index(i pulumi.IntInput) WasmPluginPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WasmPluginPatch {
		return vs[0].([]*WasmPluginPatch)[vs[1].(int)]
	}).(WasmPluginPatchOutput)
}

type WasmPluginPatchMapOutput struct{ *pulumi.OutputState }

func (WasmPluginPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WasmPluginPatch)(nil)).Elem()
}

func (o WasmPluginPatchMapOutput) ToWasmPluginPatchMapOutput() WasmPluginPatchMapOutput {
	return o
}

func (o WasmPluginPatchMapOutput) ToWasmPluginPatchMapOutputWithContext(ctx context.Context) WasmPluginPatchMapOutput {
	return o
}

func (o WasmPluginPatchMapOutput) MapIndex(k pulumi.StringInput) WasmPluginPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WasmPluginPatch {
		return vs[0].(map[string]*WasmPluginPatch)[vs[1].(string)]
	}).(WasmPluginPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginPatchInput)(nil)).Elem(), &WasmPluginPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginPatchArrayInput)(nil)).Elem(), WasmPluginPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginPatchMapInput)(nil)).Elem(), WasmPluginPatchMap{})
	pulumi.RegisterOutputType(WasmPluginPatchOutput{})
	pulumi.RegisterOutputType(WasmPluginPatchArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginPatchMapOutput{})
}
