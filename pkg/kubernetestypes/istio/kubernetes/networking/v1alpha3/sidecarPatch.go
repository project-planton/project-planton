// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha3

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type SidecarPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     SidecarSpecPatchPtrOutput       `pulumi:"spec"`
	Status   pulumi.MapOutput                `pulumi:"status"`
}

// NewSidecarPatch registers a new resource with the given unique name, arguments, and options.
func NewSidecarPatch(ctx *pulumi.Context,
	name string, args *SidecarPatchArgs, opts ...pulumi.ResourceOption) (*SidecarPatch, error) {
	if args == nil {
		args = &SidecarPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("networking.istio.io/v1alpha3")
	args.Kind = pulumi.StringPtr("Sidecar")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:networking.istio.io/v1:SidecarPatch"),
		},
		{
			Type: pulumi.String("kubernetes:networking.istio.io/v1beta1:SidecarPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SidecarPatch
	err := ctx.RegisterResource("kubernetes:networking.istio.io/v1alpha3:SidecarPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSidecarPatch gets an existing SidecarPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSidecarPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SidecarPatchState, opts ...pulumi.ResourceOption) (*SidecarPatch, error) {
	var resource SidecarPatch
	err := ctx.ReadResource("kubernetes:networking.istio.io/v1alpha3:SidecarPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SidecarPatch resources.
type sidecarPatchState struct {
}

type SidecarPatchState struct {
}

func (SidecarPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*sidecarPatchState)(nil)).Elem()
}

type sidecarPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *SidecarSpecPatch       `pulumi:"spec"`
}

// The set of arguments for constructing a SidecarPatch resource.
type SidecarPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     SidecarSpecPatchPtrInput
}

func (SidecarPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sidecarPatchArgs)(nil)).Elem()
}

type SidecarPatchInput interface {
	pulumi.Input

	ToSidecarPatchOutput() SidecarPatchOutput
	ToSidecarPatchOutputWithContext(ctx context.Context) SidecarPatchOutput
}

func (*SidecarPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarPatch)(nil)).Elem()
}

func (i *SidecarPatch) ToSidecarPatchOutput() SidecarPatchOutput {
	return i.ToSidecarPatchOutputWithContext(context.Background())
}

func (i *SidecarPatch) ToSidecarPatchOutputWithContext(ctx context.Context) SidecarPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarPatchOutput)
}

// SidecarPatchArrayInput is an input type that accepts SidecarPatchArray and SidecarPatchArrayOutput values.
// You can construct a concrete instance of `SidecarPatchArrayInput` via:
//
//	SidecarPatchArray{ SidecarPatchArgs{...} }
type SidecarPatchArrayInput interface {
	pulumi.Input

	ToSidecarPatchArrayOutput() SidecarPatchArrayOutput
	ToSidecarPatchArrayOutputWithContext(context.Context) SidecarPatchArrayOutput
}

type SidecarPatchArray []SidecarPatchInput

func (SidecarPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SidecarPatch)(nil)).Elem()
}

func (i SidecarPatchArray) ToSidecarPatchArrayOutput() SidecarPatchArrayOutput {
	return i.ToSidecarPatchArrayOutputWithContext(context.Background())
}

func (i SidecarPatchArray) ToSidecarPatchArrayOutputWithContext(ctx context.Context) SidecarPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarPatchArrayOutput)
}

// SidecarPatchMapInput is an input type that accepts SidecarPatchMap and SidecarPatchMapOutput values.
// You can construct a concrete instance of `SidecarPatchMapInput` via:
//
//	SidecarPatchMap{ "key": SidecarPatchArgs{...} }
type SidecarPatchMapInput interface {
	pulumi.Input

	ToSidecarPatchMapOutput() SidecarPatchMapOutput
	ToSidecarPatchMapOutputWithContext(context.Context) SidecarPatchMapOutput
}

type SidecarPatchMap map[string]SidecarPatchInput

func (SidecarPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SidecarPatch)(nil)).Elem()
}

func (i SidecarPatchMap) ToSidecarPatchMapOutput() SidecarPatchMapOutput {
	return i.ToSidecarPatchMapOutputWithContext(context.Background())
}

func (i SidecarPatchMap) ToSidecarPatchMapOutputWithContext(ctx context.Context) SidecarPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarPatchMapOutput)
}

type SidecarPatchOutput struct{ *pulumi.OutputState }

func (SidecarPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarPatch)(nil)).Elem()
}

func (o SidecarPatchOutput) ToSidecarPatchOutput() SidecarPatchOutput {
	return o
}

func (o SidecarPatchOutput) ToSidecarPatchOutputWithContext(ctx context.Context) SidecarPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SidecarPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SidecarPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SidecarPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *SidecarPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o SidecarPatchOutput) Spec() SidecarSpecPatchPtrOutput {
	return o.ApplyT(func(v *SidecarPatch) SidecarSpecPatchPtrOutput { return v.Spec }).(SidecarSpecPatchPtrOutput)
}

func (o SidecarPatchOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *SidecarPatch) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type SidecarPatchArrayOutput struct{ *pulumi.OutputState }

func (SidecarPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SidecarPatch)(nil)).Elem()
}

func (o SidecarPatchArrayOutput) ToSidecarPatchArrayOutput() SidecarPatchArrayOutput {
	return o
}

func (o SidecarPatchArrayOutput) ToSidecarPatchArrayOutputWithContext(ctx context.Context) SidecarPatchArrayOutput {
	return o
}

func (o SidecarPatchArrayOutput) Index(i pulumi.IntInput) SidecarPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SidecarPatch {
		return vs[0].([]*SidecarPatch)[vs[1].(int)]
	}).(SidecarPatchOutput)
}

type SidecarPatchMapOutput struct{ *pulumi.OutputState }

func (SidecarPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SidecarPatch)(nil)).Elem()
}

func (o SidecarPatchMapOutput) ToSidecarPatchMapOutput() SidecarPatchMapOutput {
	return o
}

func (o SidecarPatchMapOutput) ToSidecarPatchMapOutputWithContext(ctx context.Context) SidecarPatchMapOutput {
	return o
}

func (o SidecarPatchMapOutput) MapIndex(k pulumi.StringInput) SidecarPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SidecarPatch {
		return vs[0].(map[string]*SidecarPatch)[vs[1].(string)]
	}).(SidecarPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarPatchInput)(nil)).Elem(), &SidecarPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarPatchArrayInput)(nil)).Elem(), SidecarPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarPatchMapInput)(nil)).Elem(), SidecarPatchMap{})
	pulumi.RegisterOutputType(SidecarPatchOutput{})
	pulumi.RegisterOutputType(SidecarPatchArrayOutput{})
	pulumi.RegisterOutputType(SidecarPatchMapOutput{})
}
