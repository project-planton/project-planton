// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha3

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EnvoyFilter struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     EnvoyFilterSpecOutput   `pulumi:"spec"`
	Status   pulumi.MapOutput        `pulumi:"status"`
}

// NewEnvoyFilter registers a new resource with the given unique name, arguments, and options.
func NewEnvoyFilter(ctx *pulumi.Context,
	name string, args *EnvoyFilterArgs, opts ...pulumi.ResourceOption) (*EnvoyFilter, error) {
	if args == nil {
		args = &EnvoyFilterArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("networking.istio.io/v1alpha3")
	args.Kind = pulumi.StringPtr("EnvoyFilter")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EnvoyFilter
	err := ctx.RegisterResource("kubernetes:networking.istio.io/v1alpha3:EnvoyFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvoyFilter gets an existing EnvoyFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvoyFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvoyFilterState, opts ...pulumi.ResourceOption) (*EnvoyFilter, error) {
	var resource EnvoyFilter
	err := ctx.ReadResource("kubernetes:networking.istio.io/v1alpha3:EnvoyFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvoyFilter resources.
type envoyFilterState struct {
}

type EnvoyFilterState struct {
}

func (EnvoyFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*envoyFilterState)(nil)).Elem()
}

type envoyFilterArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *EnvoyFilterSpec   `pulumi:"spec"`
}

// The set of arguments for constructing a EnvoyFilter resource.
type EnvoyFilterArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     EnvoyFilterSpecPtrInput
}

func (EnvoyFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*envoyFilterArgs)(nil)).Elem()
}

type EnvoyFilterInput interface {
	pulumi.Input

	ToEnvoyFilterOutput() EnvoyFilterOutput
	ToEnvoyFilterOutputWithContext(ctx context.Context) EnvoyFilterOutput
}

func (*EnvoyFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvoyFilter)(nil)).Elem()
}

func (i *EnvoyFilter) ToEnvoyFilterOutput() EnvoyFilterOutput {
	return i.ToEnvoyFilterOutputWithContext(context.Background())
}

func (i *EnvoyFilter) ToEnvoyFilterOutputWithContext(ctx context.Context) EnvoyFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvoyFilterOutput)
}

// EnvoyFilterArrayInput is an input type that accepts EnvoyFilterArray and EnvoyFilterArrayOutput values.
// You can construct a concrete instance of `EnvoyFilterArrayInput` via:
//
//	EnvoyFilterArray{ EnvoyFilterArgs{...} }
type EnvoyFilterArrayInput interface {
	pulumi.Input

	ToEnvoyFilterArrayOutput() EnvoyFilterArrayOutput
	ToEnvoyFilterArrayOutputWithContext(context.Context) EnvoyFilterArrayOutput
}

type EnvoyFilterArray []EnvoyFilterInput

func (EnvoyFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvoyFilter)(nil)).Elem()
}

func (i EnvoyFilterArray) ToEnvoyFilterArrayOutput() EnvoyFilterArrayOutput {
	return i.ToEnvoyFilterArrayOutputWithContext(context.Background())
}

func (i EnvoyFilterArray) ToEnvoyFilterArrayOutputWithContext(ctx context.Context) EnvoyFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvoyFilterArrayOutput)
}

// EnvoyFilterMapInput is an input type that accepts EnvoyFilterMap and EnvoyFilterMapOutput values.
// You can construct a concrete instance of `EnvoyFilterMapInput` via:
//
//	EnvoyFilterMap{ "key": EnvoyFilterArgs{...} }
type EnvoyFilterMapInput interface {
	pulumi.Input

	ToEnvoyFilterMapOutput() EnvoyFilterMapOutput
	ToEnvoyFilterMapOutputWithContext(context.Context) EnvoyFilterMapOutput
}

type EnvoyFilterMap map[string]EnvoyFilterInput

func (EnvoyFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvoyFilter)(nil)).Elem()
}

func (i EnvoyFilterMap) ToEnvoyFilterMapOutput() EnvoyFilterMapOutput {
	return i.ToEnvoyFilterMapOutputWithContext(context.Background())
}

func (i EnvoyFilterMap) ToEnvoyFilterMapOutputWithContext(ctx context.Context) EnvoyFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvoyFilterMapOutput)
}

type EnvoyFilterOutput struct{ *pulumi.OutputState }

func (EnvoyFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvoyFilter)(nil)).Elem()
}

func (o EnvoyFilterOutput) ToEnvoyFilterOutput() EnvoyFilterOutput {
	return o
}

func (o EnvoyFilterOutput) ToEnvoyFilterOutputWithContext(ctx context.Context) EnvoyFilterOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EnvoyFilterOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvoyFilter) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EnvoyFilterOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvoyFilter) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o EnvoyFilterOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *EnvoyFilter) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o EnvoyFilterOutput) Spec() EnvoyFilterSpecOutput {
	return o.ApplyT(func(v *EnvoyFilter) EnvoyFilterSpecOutput { return v.Spec }).(EnvoyFilterSpecOutput)
}

func (o EnvoyFilterOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *EnvoyFilter) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type EnvoyFilterArrayOutput struct{ *pulumi.OutputState }

func (EnvoyFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvoyFilter)(nil)).Elem()
}

func (o EnvoyFilterArrayOutput) ToEnvoyFilterArrayOutput() EnvoyFilterArrayOutput {
	return o
}

func (o EnvoyFilterArrayOutput) ToEnvoyFilterArrayOutputWithContext(ctx context.Context) EnvoyFilterArrayOutput {
	return o
}

func (o EnvoyFilterArrayOutput) Index(i pulumi.IntInput) EnvoyFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnvoyFilter {
		return vs[0].([]*EnvoyFilter)[vs[1].(int)]
	}).(EnvoyFilterOutput)
}

type EnvoyFilterMapOutput struct{ *pulumi.OutputState }

func (EnvoyFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvoyFilter)(nil)).Elem()
}

func (o EnvoyFilterMapOutput) ToEnvoyFilterMapOutput() EnvoyFilterMapOutput {
	return o
}

func (o EnvoyFilterMapOutput) ToEnvoyFilterMapOutputWithContext(ctx context.Context) EnvoyFilterMapOutput {
	return o
}

func (o EnvoyFilterMapOutput) MapIndex(k pulumi.StringInput) EnvoyFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnvoyFilter {
		return vs[0].(map[string]*EnvoyFilter)[vs[1].(string)]
	}).(EnvoyFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvoyFilterInput)(nil)).Elem(), &EnvoyFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvoyFilterArrayInput)(nil)).Elem(), EnvoyFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvoyFilterMapInput)(nil)).Elem(), EnvoyFilterMap{})
	pulumi.RegisterOutputType(EnvoyFilterOutput{})
	pulumi.RegisterOutputType(EnvoyFilterArrayOutput{})
	pulumi.RegisterOutputType(EnvoyFilterMapOutput{})
}
