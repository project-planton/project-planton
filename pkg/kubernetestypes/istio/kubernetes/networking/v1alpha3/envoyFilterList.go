// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha3

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// EnvoyFilterList is a list of EnvoyFilter
type EnvoyFilterList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of envoyfilters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items EnvoyFilterTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewEnvoyFilterList registers a new resource with the given unique name, arguments, and options.
func NewEnvoyFilterList(ctx *pulumi.Context,
	name string, args *EnvoyFilterListArgs, opts ...pulumi.ResourceOption) (*EnvoyFilterList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("networking.istio.io/v1alpha3")
	args.Kind = pulumi.StringPtr("EnvoyFilterList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EnvoyFilterList
	err := ctx.RegisterResource("kubernetes:networking.istio.io/v1alpha3:EnvoyFilterList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvoyFilterList gets an existing EnvoyFilterList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvoyFilterList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvoyFilterListState, opts ...pulumi.ResourceOption) (*EnvoyFilterList, error) {
	var resource EnvoyFilterList
	err := ctx.ReadResource("kubernetes:networking.istio.io/v1alpha3:EnvoyFilterList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvoyFilterList resources.
type envoyFilterListState struct {
}

type EnvoyFilterListState struct {
}

func (EnvoyFilterListState) ElementType() reflect.Type {
	return reflect.TypeOf((*envoyFilterListState)(nil)).Elem()
}

type envoyFilterListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of envoyfilters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []EnvoyFilterType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a EnvoyFilterList resource.
type EnvoyFilterListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of envoyfilters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items EnvoyFilterTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (EnvoyFilterListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*envoyFilterListArgs)(nil)).Elem()
}

type EnvoyFilterListInput interface {
	pulumi.Input

	ToEnvoyFilterListOutput() EnvoyFilterListOutput
	ToEnvoyFilterListOutputWithContext(ctx context.Context) EnvoyFilterListOutput
}

func (*EnvoyFilterList) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvoyFilterList)(nil)).Elem()
}

func (i *EnvoyFilterList) ToEnvoyFilterListOutput() EnvoyFilterListOutput {
	return i.ToEnvoyFilterListOutputWithContext(context.Background())
}

func (i *EnvoyFilterList) ToEnvoyFilterListOutputWithContext(ctx context.Context) EnvoyFilterListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvoyFilterListOutput)
}

// EnvoyFilterListArrayInput is an input type that accepts EnvoyFilterListArray and EnvoyFilterListArrayOutput values.
// You can construct a concrete instance of `EnvoyFilterListArrayInput` via:
//
//	EnvoyFilterListArray{ EnvoyFilterListArgs{...} }
type EnvoyFilterListArrayInput interface {
	pulumi.Input

	ToEnvoyFilterListArrayOutput() EnvoyFilterListArrayOutput
	ToEnvoyFilterListArrayOutputWithContext(context.Context) EnvoyFilterListArrayOutput
}

type EnvoyFilterListArray []EnvoyFilterListInput

func (EnvoyFilterListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvoyFilterList)(nil)).Elem()
}

func (i EnvoyFilterListArray) ToEnvoyFilterListArrayOutput() EnvoyFilterListArrayOutput {
	return i.ToEnvoyFilterListArrayOutputWithContext(context.Background())
}

func (i EnvoyFilterListArray) ToEnvoyFilterListArrayOutputWithContext(ctx context.Context) EnvoyFilterListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvoyFilterListArrayOutput)
}

// EnvoyFilterListMapInput is an input type that accepts EnvoyFilterListMap and EnvoyFilterListMapOutput values.
// You can construct a concrete instance of `EnvoyFilterListMapInput` via:
//
//	EnvoyFilterListMap{ "key": EnvoyFilterListArgs{...} }
type EnvoyFilterListMapInput interface {
	pulumi.Input

	ToEnvoyFilterListMapOutput() EnvoyFilterListMapOutput
	ToEnvoyFilterListMapOutputWithContext(context.Context) EnvoyFilterListMapOutput
}

type EnvoyFilterListMap map[string]EnvoyFilterListInput

func (EnvoyFilterListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvoyFilterList)(nil)).Elem()
}

func (i EnvoyFilterListMap) ToEnvoyFilterListMapOutput() EnvoyFilterListMapOutput {
	return i.ToEnvoyFilterListMapOutputWithContext(context.Background())
}

func (i EnvoyFilterListMap) ToEnvoyFilterListMapOutputWithContext(ctx context.Context) EnvoyFilterListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvoyFilterListMapOutput)
}

type EnvoyFilterListOutput struct{ *pulumi.OutputState }

func (EnvoyFilterListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvoyFilterList)(nil)).Elem()
}

func (o EnvoyFilterListOutput) ToEnvoyFilterListOutput() EnvoyFilterListOutput {
	return o
}

func (o EnvoyFilterListOutput) ToEnvoyFilterListOutputWithContext(ctx context.Context) EnvoyFilterListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EnvoyFilterListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvoyFilterList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of envoyfilters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o EnvoyFilterListOutput) Items() EnvoyFilterTypeArrayOutput {
	return o.ApplyT(func(v *EnvoyFilterList) EnvoyFilterTypeArrayOutput { return v.Items }).(EnvoyFilterTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EnvoyFilterListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvoyFilterList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EnvoyFilterListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *EnvoyFilterList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type EnvoyFilterListArrayOutput struct{ *pulumi.OutputState }

func (EnvoyFilterListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvoyFilterList)(nil)).Elem()
}

func (o EnvoyFilterListArrayOutput) ToEnvoyFilterListArrayOutput() EnvoyFilterListArrayOutput {
	return o
}

func (o EnvoyFilterListArrayOutput) ToEnvoyFilterListArrayOutputWithContext(ctx context.Context) EnvoyFilterListArrayOutput {
	return o
}

func (o EnvoyFilterListArrayOutput) Index(i pulumi.IntInput) EnvoyFilterListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnvoyFilterList {
		return vs[0].([]*EnvoyFilterList)[vs[1].(int)]
	}).(EnvoyFilterListOutput)
}

type EnvoyFilterListMapOutput struct{ *pulumi.OutputState }

func (EnvoyFilterListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvoyFilterList)(nil)).Elem()
}

func (o EnvoyFilterListMapOutput) ToEnvoyFilterListMapOutput() EnvoyFilterListMapOutput {
	return o
}

func (o EnvoyFilterListMapOutput) ToEnvoyFilterListMapOutputWithContext(ctx context.Context) EnvoyFilterListMapOutput {
	return o
}

func (o EnvoyFilterListMapOutput) MapIndex(k pulumi.StringInput) EnvoyFilterListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnvoyFilterList {
		return vs[0].(map[string]*EnvoyFilterList)[vs[1].(string)]
	}).(EnvoyFilterListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvoyFilterListInput)(nil)).Elem(), &EnvoyFilterList{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvoyFilterListArrayInput)(nil)).Elem(), EnvoyFilterListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvoyFilterListMapInput)(nil)).Elem(), EnvoyFilterListMap{})
	pulumi.RegisterOutputType(EnvoyFilterListOutput{})
	pulumi.RegisterOutputType(EnvoyFilterListArrayOutput{})
	pulumi.RegisterOutputType(EnvoyFilterListMapOutput{})
}
