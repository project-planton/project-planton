// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type GatewayPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     GatewaySpecPatchPtrOutput       `pulumi:"spec"`
	Status   pulumi.MapOutput                `pulumi:"status"`
}

// NewGatewayPatch registers a new resource with the given unique name, arguments, and options.
func NewGatewayPatch(ctx *pulumi.Context,
	name string, args *GatewayPatchArgs, opts ...pulumi.ResourceOption) (*GatewayPatch, error) {
	if args == nil {
		args = &GatewayPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("networking.istio.io/v1beta1")
	args.Kind = pulumi.StringPtr("Gateway")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:networking.istio.io/v1:GatewayPatch"),
		},
		{
			Type: pulumi.String("kubernetes:networking.istio.io/v1alpha3:GatewayPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GatewayPatch
	err := ctx.RegisterResource("kubernetes:networking.istio.io/v1beta1:GatewayPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPatch gets an existing GatewayPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPatchState, opts ...pulumi.ResourceOption) (*GatewayPatch, error) {
	var resource GatewayPatch
	err := ctx.ReadResource("kubernetes:networking.istio.io/v1beta1:GatewayPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPatch resources.
type gatewayPatchState struct {
}

type GatewayPatchState struct {
}

func (GatewayPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPatchState)(nil)).Elem()
}

type gatewayPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *GatewaySpecPatch       `pulumi:"spec"`
}

// The set of arguments for constructing a GatewayPatch resource.
type GatewayPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     GatewaySpecPatchPtrInput
}

func (GatewayPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPatchArgs)(nil)).Elem()
}

type GatewayPatchInput interface {
	pulumi.Input

	ToGatewayPatchOutput() GatewayPatchOutput
	ToGatewayPatchOutputWithContext(ctx context.Context) GatewayPatchOutput
}

func (*GatewayPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPatch)(nil)).Elem()
}

func (i *GatewayPatch) ToGatewayPatchOutput() GatewayPatchOutput {
	return i.ToGatewayPatchOutputWithContext(context.Background())
}

func (i *GatewayPatch) ToGatewayPatchOutputWithContext(ctx context.Context) GatewayPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPatchOutput)
}

// GatewayPatchArrayInput is an input type that accepts GatewayPatchArray and GatewayPatchArrayOutput values.
// You can construct a concrete instance of `GatewayPatchArrayInput` via:
//
//	GatewayPatchArray{ GatewayPatchArgs{...} }
type GatewayPatchArrayInput interface {
	pulumi.Input

	ToGatewayPatchArrayOutput() GatewayPatchArrayOutput
	ToGatewayPatchArrayOutputWithContext(context.Context) GatewayPatchArrayOutput
}

type GatewayPatchArray []GatewayPatchInput

func (GatewayPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPatch)(nil)).Elem()
}

func (i GatewayPatchArray) ToGatewayPatchArrayOutput() GatewayPatchArrayOutput {
	return i.ToGatewayPatchArrayOutputWithContext(context.Background())
}

func (i GatewayPatchArray) ToGatewayPatchArrayOutputWithContext(ctx context.Context) GatewayPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPatchArrayOutput)
}

// GatewayPatchMapInput is an input type that accepts GatewayPatchMap and GatewayPatchMapOutput values.
// You can construct a concrete instance of `GatewayPatchMapInput` via:
//
//	GatewayPatchMap{ "key": GatewayPatchArgs{...} }
type GatewayPatchMapInput interface {
	pulumi.Input

	ToGatewayPatchMapOutput() GatewayPatchMapOutput
	ToGatewayPatchMapOutputWithContext(context.Context) GatewayPatchMapOutput
}

type GatewayPatchMap map[string]GatewayPatchInput

func (GatewayPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPatch)(nil)).Elem()
}

func (i GatewayPatchMap) ToGatewayPatchMapOutput() GatewayPatchMapOutput {
	return i.ToGatewayPatchMapOutputWithContext(context.Background())
}

func (i GatewayPatchMap) ToGatewayPatchMapOutputWithContext(ctx context.Context) GatewayPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPatchMapOutput)
}

type GatewayPatchOutput struct{ *pulumi.OutputState }

func (GatewayPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPatch)(nil)).Elem()
}

func (o GatewayPatchOutput) ToGatewayPatchOutput() GatewayPatchOutput {
	return o
}

func (o GatewayPatchOutput) ToGatewayPatchOutputWithContext(ctx context.Context) GatewayPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GatewayPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GatewayPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GatewayPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *GatewayPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o GatewayPatchOutput) Spec() GatewaySpecPatchPtrOutput {
	return o.ApplyT(func(v *GatewayPatch) GatewaySpecPatchPtrOutput { return v.Spec }).(GatewaySpecPatchPtrOutput)
}

func (o GatewayPatchOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *GatewayPatch) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type GatewayPatchArrayOutput struct{ *pulumi.OutputState }

func (GatewayPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPatch)(nil)).Elem()
}

func (o GatewayPatchArrayOutput) ToGatewayPatchArrayOutput() GatewayPatchArrayOutput {
	return o
}

func (o GatewayPatchArrayOutput) ToGatewayPatchArrayOutputWithContext(ctx context.Context) GatewayPatchArrayOutput {
	return o
}

func (o GatewayPatchArrayOutput) Index(i pulumi.IntInput) GatewayPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPatch {
		return vs[0].([]*GatewayPatch)[vs[1].(int)]
	}).(GatewayPatchOutput)
}

type GatewayPatchMapOutput struct{ *pulumi.OutputState }

func (GatewayPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPatch)(nil)).Elem()
}

func (o GatewayPatchMapOutput) ToGatewayPatchMapOutput() GatewayPatchMapOutput {
	return o
}

func (o GatewayPatchMapOutput) ToGatewayPatchMapOutputWithContext(ctx context.Context) GatewayPatchMapOutput {
	return o
}

func (o GatewayPatchMapOutput) MapIndex(k pulumi.StringInput) GatewayPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPatch {
		return vs[0].(map[string]*GatewayPatch)[vs[1].(string)]
	}).(GatewayPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPatchInput)(nil)).Elem(), &GatewayPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPatchArrayInput)(nil)).Elem(), GatewayPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPatchMapInput)(nil)).Elem(), GatewayPatchMap{})
	pulumi.RegisterOutputType(GatewayPatchOutput{})
	pulumi.RegisterOutputType(GatewayPatchArrayOutput{})
	pulumi.RegisterOutputType(GatewayPatchMapOutput{})
}
