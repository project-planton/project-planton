// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Sidecar struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     SidecarSpecOutput       `pulumi:"spec"`
	Status   pulumi.MapOutput        `pulumi:"status"`
}

// NewSidecar registers a new resource with the given unique name, arguments, and options.
func NewSidecar(ctx *pulumi.Context,
	name string, args *SidecarArgs, opts ...pulumi.ResourceOption) (*Sidecar, error) {
	if args == nil {
		args = &SidecarArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("networking.istio.io/v1beta1")
	args.Kind = pulumi.StringPtr("Sidecar")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:networking.istio.io/v1:Sidecar"),
		},
		{
			Type: pulumi.String("kubernetes:networking.istio.io/v1alpha3:Sidecar"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Sidecar
	err := ctx.RegisterResource("kubernetes:networking.istio.io/v1beta1:Sidecar", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSidecar gets an existing Sidecar resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSidecar(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SidecarState, opts ...pulumi.ResourceOption) (*Sidecar, error) {
	var resource Sidecar
	err := ctx.ReadResource("kubernetes:networking.istio.io/v1beta1:Sidecar", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sidecar resources.
type sidecarState struct {
}

type SidecarState struct {
}

func (SidecarState) ElementType() reflect.Type {
	return reflect.TypeOf((*sidecarState)(nil)).Elem()
}

type sidecarArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *SidecarSpec       `pulumi:"spec"`
}

// The set of arguments for constructing a Sidecar resource.
type SidecarArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     SidecarSpecPtrInput
}

func (SidecarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sidecarArgs)(nil)).Elem()
}

type SidecarInput interface {
	pulumi.Input

	ToSidecarOutput() SidecarOutput
	ToSidecarOutputWithContext(ctx context.Context) SidecarOutput
}

func (*Sidecar) ElementType() reflect.Type {
	return reflect.TypeOf((**Sidecar)(nil)).Elem()
}

func (i *Sidecar) ToSidecarOutput() SidecarOutput {
	return i.ToSidecarOutputWithContext(context.Background())
}

func (i *Sidecar) ToSidecarOutputWithContext(ctx context.Context) SidecarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarOutput)
}

// SidecarArrayInput is an input type that accepts SidecarArray and SidecarArrayOutput values.
// You can construct a concrete instance of `SidecarArrayInput` via:
//
//	SidecarArray{ SidecarArgs{...} }
type SidecarArrayInput interface {
	pulumi.Input

	ToSidecarArrayOutput() SidecarArrayOutput
	ToSidecarArrayOutputWithContext(context.Context) SidecarArrayOutput
}

type SidecarArray []SidecarInput

func (SidecarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sidecar)(nil)).Elem()
}

func (i SidecarArray) ToSidecarArrayOutput() SidecarArrayOutput {
	return i.ToSidecarArrayOutputWithContext(context.Background())
}

func (i SidecarArray) ToSidecarArrayOutputWithContext(ctx context.Context) SidecarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarArrayOutput)
}

// SidecarMapInput is an input type that accepts SidecarMap and SidecarMapOutput values.
// You can construct a concrete instance of `SidecarMapInput` via:
//
//	SidecarMap{ "key": SidecarArgs{...} }
type SidecarMapInput interface {
	pulumi.Input

	ToSidecarMapOutput() SidecarMapOutput
	ToSidecarMapOutputWithContext(context.Context) SidecarMapOutput
}

type SidecarMap map[string]SidecarInput

func (SidecarMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sidecar)(nil)).Elem()
}

func (i SidecarMap) ToSidecarMapOutput() SidecarMapOutput {
	return i.ToSidecarMapOutputWithContext(context.Background())
}

func (i SidecarMap) ToSidecarMapOutputWithContext(ctx context.Context) SidecarMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarMapOutput)
}

type SidecarOutput struct{ *pulumi.OutputState }

func (SidecarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sidecar)(nil)).Elem()
}

func (o SidecarOutput) ToSidecarOutput() SidecarOutput {
	return o
}

func (o SidecarOutput) ToSidecarOutputWithContext(ctx context.Context) SidecarOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SidecarOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Sidecar) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SidecarOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Sidecar) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SidecarOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Sidecar) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o SidecarOutput) Spec() SidecarSpecOutput {
	return o.ApplyT(func(v *Sidecar) SidecarSpecOutput { return v.Spec }).(SidecarSpecOutput)
}

func (o SidecarOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *Sidecar) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type SidecarArrayOutput struct{ *pulumi.OutputState }

func (SidecarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sidecar)(nil)).Elem()
}

func (o SidecarArrayOutput) ToSidecarArrayOutput() SidecarArrayOutput {
	return o
}

func (o SidecarArrayOutput) ToSidecarArrayOutputWithContext(ctx context.Context) SidecarArrayOutput {
	return o
}

func (o SidecarArrayOutput) Index(i pulumi.IntInput) SidecarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sidecar {
		return vs[0].([]*Sidecar)[vs[1].(int)]
	}).(SidecarOutput)
}

type SidecarMapOutput struct{ *pulumi.OutputState }

func (SidecarMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sidecar)(nil)).Elem()
}

func (o SidecarMapOutput) ToSidecarMapOutput() SidecarMapOutput {
	return o
}

func (o SidecarMapOutput) ToSidecarMapOutputWithContext(ctx context.Context) SidecarMapOutput {
	return o
}

func (o SidecarMapOutput) MapIndex(k pulumi.StringInput) SidecarOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sidecar {
		return vs[0].(map[string]*Sidecar)[vs[1].(string)]
	}).(SidecarOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarInput)(nil)).Elem(), &Sidecar{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarArrayInput)(nil)).Elem(), SidecarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarMapInput)(nil)).Elem(), SidecarMap{})
	pulumi.RegisterOutputType(SidecarOutput{})
	pulumi.RegisterOutputType(SidecarArrayOutput{})
	pulumi.RegisterOutputType(SidecarMapOutput{})
}
