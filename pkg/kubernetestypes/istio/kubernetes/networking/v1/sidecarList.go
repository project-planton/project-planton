// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SidecarList is a list of Sidecar
type SidecarList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of sidecars. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SidecarTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewSidecarList registers a new resource with the given unique name, arguments, and options.
func NewSidecarList(ctx *pulumi.Context,
	name string, args *SidecarListArgs, opts ...pulumi.ResourceOption) (*SidecarList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("networking.istio.io/v1")
	args.Kind = pulumi.StringPtr("SidecarList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SidecarList
	err := ctx.RegisterResource("kubernetes:networking.istio.io/v1:SidecarList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSidecarList gets an existing SidecarList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSidecarList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SidecarListState, opts ...pulumi.ResourceOption) (*SidecarList, error) {
	var resource SidecarList
	err := ctx.ReadResource("kubernetes:networking.istio.io/v1:SidecarList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SidecarList resources.
type sidecarListState struct {
}

type SidecarListState struct {
}

func (SidecarListState) ElementType() reflect.Type {
	return reflect.TypeOf((*sidecarListState)(nil)).Elem()
}

type sidecarListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of sidecars. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []SidecarType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a SidecarList resource.
type SidecarListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of sidecars. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SidecarTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (SidecarListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sidecarListArgs)(nil)).Elem()
}

type SidecarListInput interface {
	pulumi.Input

	ToSidecarListOutput() SidecarListOutput
	ToSidecarListOutputWithContext(ctx context.Context) SidecarListOutput
}

func (*SidecarList) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarList)(nil)).Elem()
}

func (i *SidecarList) ToSidecarListOutput() SidecarListOutput {
	return i.ToSidecarListOutputWithContext(context.Background())
}

func (i *SidecarList) ToSidecarListOutputWithContext(ctx context.Context) SidecarListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarListOutput)
}

// SidecarListArrayInput is an input type that accepts SidecarListArray and SidecarListArrayOutput values.
// You can construct a concrete instance of `SidecarListArrayInput` via:
//
//	SidecarListArray{ SidecarListArgs{...} }
type SidecarListArrayInput interface {
	pulumi.Input

	ToSidecarListArrayOutput() SidecarListArrayOutput
	ToSidecarListArrayOutputWithContext(context.Context) SidecarListArrayOutput
}

type SidecarListArray []SidecarListInput

func (SidecarListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SidecarList)(nil)).Elem()
}

func (i SidecarListArray) ToSidecarListArrayOutput() SidecarListArrayOutput {
	return i.ToSidecarListArrayOutputWithContext(context.Background())
}

func (i SidecarListArray) ToSidecarListArrayOutputWithContext(ctx context.Context) SidecarListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarListArrayOutput)
}

// SidecarListMapInput is an input type that accepts SidecarListMap and SidecarListMapOutput values.
// You can construct a concrete instance of `SidecarListMapInput` via:
//
//	SidecarListMap{ "key": SidecarListArgs{...} }
type SidecarListMapInput interface {
	pulumi.Input

	ToSidecarListMapOutput() SidecarListMapOutput
	ToSidecarListMapOutputWithContext(context.Context) SidecarListMapOutput
}

type SidecarListMap map[string]SidecarListInput

func (SidecarListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SidecarList)(nil)).Elem()
}

func (i SidecarListMap) ToSidecarListMapOutput() SidecarListMapOutput {
	return i.ToSidecarListMapOutputWithContext(context.Background())
}

func (i SidecarListMap) ToSidecarListMapOutputWithContext(ctx context.Context) SidecarListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarListMapOutput)
}

type SidecarListOutput struct{ *pulumi.OutputState }

func (SidecarListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarList)(nil)).Elem()
}

func (o SidecarListOutput) ToSidecarListOutput() SidecarListOutput {
	return o
}

func (o SidecarListOutput) ToSidecarListOutputWithContext(ctx context.Context) SidecarListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SidecarListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SidecarList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of sidecars. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o SidecarListOutput) Items() SidecarTypeArrayOutput {
	return o.ApplyT(func(v *SidecarList) SidecarTypeArrayOutput { return v.Items }).(SidecarTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SidecarListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SidecarList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SidecarListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *SidecarList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type SidecarListArrayOutput struct{ *pulumi.OutputState }

func (SidecarListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SidecarList)(nil)).Elem()
}

func (o SidecarListArrayOutput) ToSidecarListArrayOutput() SidecarListArrayOutput {
	return o
}

func (o SidecarListArrayOutput) ToSidecarListArrayOutputWithContext(ctx context.Context) SidecarListArrayOutput {
	return o
}

func (o SidecarListArrayOutput) Index(i pulumi.IntInput) SidecarListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SidecarList {
		return vs[0].([]*SidecarList)[vs[1].(int)]
	}).(SidecarListOutput)
}

type SidecarListMapOutput struct{ *pulumi.OutputState }

func (SidecarListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SidecarList)(nil)).Elem()
}

func (o SidecarListMapOutput) ToSidecarListMapOutput() SidecarListMapOutput {
	return o
}

func (o SidecarListMapOutput) ToSidecarListMapOutputWithContext(ctx context.Context) SidecarListMapOutput {
	return o
}

func (o SidecarListMapOutput) MapIndex(k pulumi.StringInput) SidecarListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SidecarList {
		return vs[0].(map[string]*SidecarList)[vs[1].(string)]
	}).(SidecarListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarListInput)(nil)).Elem(), &SidecarList{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarListArrayInput)(nil)).Elem(), SidecarListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarListMapInput)(nil)).Elem(), SidecarListMap{})
	pulumi.RegisterOutputType(SidecarListOutput{})
	pulumi.RegisterOutputType(SidecarListArrayOutput{})
	pulumi.RegisterOutputType(SidecarListMapOutput{})
}
