// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type TelemetryPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     TelemetrySpecPatchPtrOutput     `pulumi:"spec"`
	Status   pulumi.MapOutput                `pulumi:"status"`
}

// NewTelemetryPatch registers a new resource with the given unique name, arguments, and options.
func NewTelemetryPatch(ctx *pulumi.Context,
	name string, args *TelemetryPatchArgs, opts ...pulumi.ResourceOption) (*TelemetryPatch, error) {
	if args == nil {
		args = &TelemetryPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("telemetry.istio.io/v1")
	args.Kind = pulumi.StringPtr("Telemetry")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:telemetry.istio.io/v1alpha1:TelemetryPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource TelemetryPatch
	err := ctx.RegisterResource("kubernetes:telemetry.istio.io/v1:TelemetryPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTelemetryPatch gets an existing TelemetryPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTelemetryPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TelemetryPatchState, opts ...pulumi.ResourceOption) (*TelemetryPatch, error) {
	var resource TelemetryPatch
	err := ctx.ReadResource("kubernetes:telemetry.istio.io/v1:TelemetryPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TelemetryPatch resources.
type telemetryPatchState struct {
}

type TelemetryPatchState struct {
}

func (TelemetryPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*telemetryPatchState)(nil)).Elem()
}

type telemetryPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *TelemetrySpecPatch     `pulumi:"spec"`
}

// The set of arguments for constructing a TelemetryPatch resource.
type TelemetryPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     TelemetrySpecPatchPtrInput
}

func (TelemetryPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*telemetryPatchArgs)(nil)).Elem()
}

type TelemetryPatchInput interface {
	pulumi.Input

	ToTelemetryPatchOutput() TelemetryPatchOutput
	ToTelemetryPatchOutputWithContext(ctx context.Context) TelemetryPatchOutput
}

func (*TelemetryPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetryPatch)(nil)).Elem()
}

func (i *TelemetryPatch) ToTelemetryPatchOutput() TelemetryPatchOutput {
	return i.ToTelemetryPatchOutputWithContext(context.Background())
}

func (i *TelemetryPatch) ToTelemetryPatchOutputWithContext(ctx context.Context) TelemetryPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryPatchOutput)
}

// TelemetryPatchArrayInput is an input type that accepts TelemetryPatchArray and TelemetryPatchArrayOutput values.
// You can construct a concrete instance of `TelemetryPatchArrayInput` via:
//
//	TelemetryPatchArray{ TelemetryPatchArgs{...} }
type TelemetryPatchArrayInput interface {
	pulumi.Input

	ToTelemetryPatchArrayOutput() TelemetryPatchArrayOutput
	ToTelemetryPatchArrayOutputWithContext(context.Context) TelemetryPatchArrayOutput
}

type TelemetryPatchArray []TelemetryPatchInput

func (TelemetryPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TelemetryPatch)(nil)).Elem()
}

func (i TelemetryPatchArray) ToTelemetryPatchArrayOutput() TelemetryPatchArrayOutput {
	return i.ToTelemetryPatchArrayOutputWithContext(context.Background())
}

func (i TelemetryPatchArray) ToTelemetryPatchArrayOutputWithContext(ctx context.Context) TelemetryPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryPatchArrayOutput)
}

// TelemetryPatchMapInput is an input type that accepts TelemetryPatchMap and TelemetryPatchMapOutput values.
// You can construct a concrete instance of `TelemetryPatchMapInput` via:
//
//	TelemetryPatchMap{ "key": TelemetryPatchArgs{...} }
type TelemetryPatchMapInput interface {
	pulumi.Input

	ToTelemetryPatchMapOutput() TelemetryPatchMapOutput
	ToTelemetryPatchMapOutputWithContext(context.Context) TelemetryPatchMapOutput
}

type TelemetryPatchMap map[string]TelemetryPatchInput

func (TelemetryPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TelemetryPatch)(nil)).Elem()
}

func (i TelemetryPatchMap) ToTelemetryPatchMapOutput() TelemetryPatchMapOutput {
	return i.ToTelemetryPatchMapOutputWithContext(context.Background())
}

func (i TelemetryPatchMap) ToTelemetryPatchMapOutputWithContext(ctx context.Context) TelemetryPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryPatchMapOutput)
}

type TelemetryPatchOutput struct{ *pulumi.OutputState }

func (TelemetryPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetryPatch)(nil)).Elem()
}

func (o TelemetryPatchOutput) ToTelemetryPatchOutput() TelemetryPatchOutput {
	return o
}

func (o TelemetryPatchOutput) ToTelemetryPatchOutputWithContext(ctx context.Context) TelemetryPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TelemetryPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetryPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TelemetryPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetryPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o TelemetryPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *TelemetryPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o TelemetryPatchOutput) Spec() TelemetrySpecPatchPtrOutput {
	return o.ApplyT(func(v *TelemetryPatch) TelemetrySpecPatchPtrOutput { return v.Spec }).(TelemetrySpecPatchPtrOutput)
}

func (o TelemetryPatchOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *TelemetryPatch) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type TelemetryPatchArrayOutput struct{ *pulumi.OutputState }

func (TelemetryPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TelemetryPatch)(nil)).Elem()
}

func (o TelemetryPatchArrayOutput) ToTelemetryPatchArrayOutput() TelemetryPatchArrayOutput {
	return o
}

func (o TelemetryPatchArrayOutput) ToTelemetryPatchArrayOutputWithContext(ctx context.Context) TelemetryPatchArrayOutput {
	return o
}

func (o TelemetryPatchArrayOutput) Index(i pulumi.IntInput) TelemetryPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TelemetryPatch {
		return vs[0].([]*TelemetryPatch)[vs[1].(int)]
	}).(TelemetryPatchOutput)
}

type TelemetryPatchMapOutput struct{ *pulumi.OutputState }

func (TelemetryPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TelemetryPatch)(nil)).Elem()
}

func (o TelemetryPatchMapOutput) ToTelemetryPatchMapOutput() TelemetryPatchMapOutput {
	return o
}

func (o TelemetryPatchMapOutput) ToTelemetryPatchMapOutputWithContext(ctx context.Context) TelemetryPatchMapOutput {
	return o
}

func (o TelemetryPatchMapOutput) MapIndex(k pulumi.StringInput) TelemetryPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TelemetryPatch {
		return vs[0].(map[string]*TelemetryPatch)[vs[1].(string)]
	}).(TelemetryPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryPatchInput)(nil)).Elem(), &TelemetryPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryPatchArrayInput)(nil)).Elem(), TelemetryPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryPatchMapInput)(nil)).Elem(), TelemetryPatchMap{})
	pulumi.RegisterOutputType(TelemetryPatchOutput{})
	pulumi.RegisterOutputType(TelemetryPatchArrayOutput{})
	pulumi.RegisterOutputType(TelemetryPatchMapOutput{})
}
