// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Telemetry struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     TelemetrySpecOutput     `pulumi:"spec"`
	Status   pulumi.MapOutput        `pulumi:"status"`
}

// NewTelemetry registers a new resource with the given unique name, arguments, and options.
func NewTelemetry(ctx *pulumi.Context,
	name string, args *TelemetryArgs, opts ...pulumi.ResourceOption) (*Telemetry, error) {
	if args == nil {
		args = &TelemetryArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("telemetry.istio.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Telemetry")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:telemetry.istio.io/v1:Telemetry"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Telemetry
	err := ctx.RegisterResource("kubernetes:telemetry.istio.io/v1alpha1:Telemetry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTelemetry gets an existing Telemetry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTelemetry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TelemetryState, opts ...pulumi.ResourceOption) (*Telemetry, error) {
	var resource Telemetry
	err := ctx.ReadResource("kubernetes:telemetry.istio.io/v1alpha1:Telemetry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Telemetry resources.
type telemetryState struct {
}

type TelemetryState struct {
}

func (TelemetryState) ElementType() reflect.Type {
	return reflect.TypeOf((*telemetryState)(nil)).Elem()
}

type telemetryArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *TelemetrySpec     `pulumi:"spec"`
}

// The set of arguments for constructing a Telemetry resource.
type TelemetryArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     TelemetrySpecPtrInput
}

func (TelemetryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*telemetryArgs)(nil)).Elem()
}

type TelemetryInput interface {
	pulumi.Input

	ToTelemetryOutput() TelemetryOutput
	ToTelemetryOutputWithContext(ctx context.Context) TelemetryOutput
}

func (*Telemetry) ElementType() reflect.Type {
	return reflect.TypeOf((**Telemetry)(nil)).Elem()
}

func (i *Telemetry) ToTelemetryOutput() TelemetryOutput {
	return i.ToTelemetryOutputWithContext(context.Background())
}

func (i *Telemetry) ToTelemetryOutputWithContext(ctx context.Context) TelemetryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryOutput)
}

// TelemetryArrayInput is an input type that accepts TelemetryArray and TelemetryArrayOutput values.
// You can construct a concrete instance of `TelemetryArrayInput` via:
//
//	TelemetryArray{ TelemetryArgs{...} }
type TelemetryArrayInput interface {
	pulumi.Input

	ToTelemetryArrayOutput() TelemetryArrayOutput
	ToTelemetryArrayOutputWithContext(context.Context) TelemetryArrayOutput
}

type TelemetryArray []TelemetryInput

func (TelemetryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Telemetry)(nil)).Elem()
}

func (i TelemetryArray) ToTelemetryArrayOutput() TelemetryArrayOutput {
	return i.ToTelemetryArrayOutputWithContext(context.Background())
}

func (i TelemetryArray) ToTelemetryArrayOutputWithContext(ctx context.Context) TelemetryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryArrayOutput)
}

// TelemetryMapInput is an input type that accepts TelemetryMap and TelemetryMapOutput values.
// You can construct a concrete instance of `TelemetryMapInput` via:
//
//	TelemetryMap{ "key": TelemetryArgs{...} }
type TelemetryMapInput interface {
	pulumi.Input

	ToTelemetryMapOutput() TelemetryMapOutput
	ToTelemetryMapOutputWithContext(context.Context) TelemetryMapOutput
}

type TelemetryMap map[string]TelemetryInput

func (TelemetryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Telemetry)(nil)).Elem()
}

func (i TelemetryMap) ToTelemetryMapOutput() TelemetryMapOutput {
	return i.ToTelemetryMapOutputWithContext(context.Background())
}

func (i TelemetryMap) ToTelemetryMapOutputWithContext(ctx context.Context) TelemetryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryMapOutput)
}

type TelemetryOutput struct{ *pulumi.OutputState }

func (TelemetryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Telemetry)(nil)).Elem()
}

func (o TelemetryOutput) ToTelemetryOutput() TelemetryOutput {
	return o
}

func (o TelemetryOutput) ToTelemetryOutputWithContext(ctx context.Context) TelemetryOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TelemetryOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Telemetry) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TelemetryOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Telemetry) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o TelemetryOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Telemetry) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o TelemetryOutput) Spec() TelemetrySpecOutput {
	return o.ApplyT(func(v *Telemetry) TelemetrySpecOutput { return v.Spec }).(TelemetrySpecOutput)
}

func (o TelemetryOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *Telemetry) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type TelemetryArrayOutput struct{ *pulumi.OutputState }

func (TelemetryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Telemetry)(nil)).Elem()
}

func (o TelemetryArrayOutput) ToTelemetryArrayOutput() TelemetryArrayOutput {
	return o
}

func (o TelemetryArrayOutput) ToTelemetryArrayOutputWithContext(ctx context.Context) TelemetryArrayOutput {
	return o
}

func (o TelemetryArrayOutput) Index(i pulumi.IntInput) TelemetryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Telemetry {
		return vs[0].([]*Telemetry)[vs[1].(int)]
	}).(TelemetryOutput)
}

type TelemetryMapOutput struct{ *pulumi.OutputState }

func (TelemetryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Telemetry)(nil)).Elem()
}

func (o TelemetryMapOutput) ToTelemetryMapOutput() TelemetryMapOutput {
	return o
}

func (o TelemetryMapOutput) ToTelemetryMapOutputWithContext(ctx context.Context) TelemetryMapOutput {
	return o
}

func (o TelemetryMapOutput) MapIndex(k pulumi.StringInput) TelemetryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Telemetry {
		return vs[0].(map[string]*Telemetry)[vs[1].(string)]
	}).(TelemetryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryInput)(nil)).Elem(), &Telemetry{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryArrayInput)(nil)).Elem(), TelemetryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryMapInput)(nil)).Elem(), TelemetryMap{})
	pulumi.RegisterOutputType(TelemetryOutput{})
	pulumi.RegisterOutputType(TelemetryArrayOutput{})
	pulumi.RegisterOutputType(TelemetryMapOutput{})
}
