// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AuthorizationPolicy struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput       `pulumi:"metadata"`
	Spec     AuthorizationPolicySpecOutput `pulumi:"spec"`
	Status   pulumi.MapOutput              `pulumi:"status"`
}

// NewAuthorizationPolicy registers a new resource with the given unique name, arguments, and options.
func NewAuthorizationPolicy(ctx *pulumi.Context,
	name string, args *AuthorizationPolicyArgs, opts ...pulumi.ResourceOption) (*AuthorizationPolicy, error) {
	if args == nil {
		args = &AuthorizationPolicyArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("security.istio.io/v1beta1")
	args.Kind = pulumi.StringPtr("AuthorizationPolicy")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:security.istio.io/v1:AuthorizationPolicy"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AuthorizationPolicy
	err := ctx.RegisterResource("kubernetes:security.istio.io/v1beta1:AuthorizationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizationPolicy gets an existing AuthorizationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizationPolicyState, opts ...pulumi.ResourceOption) (*AuthorizationPolicy, error) {
	var resource AuthorizationPolicy
	err := ctx.ReadResource("kubernetes:security.istio.io/v1beta1:AuthorizationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizationPolicy resources.
type authorizationPolicyState struct {
}

type AuthorizationPolicyState struct {
}

func (AuthorizationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationPolicyState)(nil)).Elem()
}

type authorizationPolicyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta       `pulumi:"metadata"`
	Spec     *AuthorizationPolicySpec `pulumi:"spec"`
}

// The set of arguments for constructing a AuthorizationPolicy resource.
type AuthorizationPolicyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     AuthorizationPolicySpecPtrInput
}

func (AuthorizationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationPolicyArgs)(nil)).Elem()
}

type AuthorizationPolicyInput interface {
	pulumi.Input

	ToAuthorizationPolicyOutput() AuthorizationPolicyOutput
	ToAuthorizationPolicyOutputWithContext(ctx context.Context) AuthorizationPolicyOutput
}

func (*AuthorizationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationPolicy)(nil)).Elem()
}

func (i *AuthorizationPolicy) ToAuthorizationPolicyOutput() AuthorizationPolicyOutput {
	return i.ToAuthorizationPolicyOutputWithContext(context.Background())
}

func (i *AuthorizationPolicy) ToAuthorizationPolicyOutputWithContext(ctx context.Context) AuthorizationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyOutput)
}

// AuthorizationPolicyArrayInput is an input type that accepts AuthorizationPolicyArray and AuthorizationPolicyArrayOutput values.
// You can construct a concrete instance of `AuthorizationPolicyArrayInput` via:
//
//	AuthorizationPolicyArray{ AuthorizationPolicyArgs{...} }
type AuthorizationPolicyArrayInput interface {
	pulumi.Input

	ToAuthorizationPolicyArrayOutput() AuthorizationPolicyArrayOutput
	ToAuthorizationPolicyArrayOutputWithContext(context.Context) AuthorizationPolicyArrayOutput
}

type AuthorizationPolicyArray []AuthorizationPolicyInput

func (AuthorizationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationPolicy)(nil)).Elem()
}

func (i AuthorizationPolicyArray) ToAuthorizationPolicyArrayOutput() AuthorizationPolicyArrayOutput {
	return i.ToAuthorizationPolicyArrayOutputWithContext(context.Background())
}

func (i AuthorizationPolicyArray) ToAuthorizationPolicyArrayOutputWithContext(ctx context.Context) AuthorizationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyArrayOutput)
}

// AuthorizationPolicyMapInput is an input type that accepts AuthorizationPolicyMap and AuthorizationPolicyMapOutput values.
// You can construct a concrete instance of `AuthorizationPolicyMapInput` via:
//
//	AuthorizationPolicyMap{ "key": AuthorizationPolicyArgs{...} }
type AuthorizationPolicyMapInput interface {
	pulumi.Input

	ToAuthorizationPolicyMapOutput() AuthorizationPolicyMapOutput
	ToAuthorizationPolicyMapOutputWithContext(context.Context) AuthorizationPolicyMapOutput
}

type AuthorizationPolicyMap map[string]AuthorizationPolicyInput

func (AuthorizationPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationPolicy)(nil)).Elem()
}

func (i AuthorizationPolicyMap) ToAuthorizationPolicyMapOutput() AuthorizationPolicyMapOutput {
	return i.ToAuthorizationPolicyMapOutputWithContext(context.Background())
}

func (i AuthorizationPolicyMap) ToAuthorizationPolicyMapOutputWithContext(ctx context.Context) AuthorizationPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyMapOutput)
}

type AuthorizationPolicyOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationPolicy)(nil)).Elem()
}

func (o AuthorizationPolicyOutput) ToAuthorizationPolicyOutput() AuthorizationPolicyOutput {
	return o
}

func (o AuthorizationPolicyOutput) ToAuthorizationPolicyOutputWithContext(ctx context.Context) AuthorizationPolicyOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AuthorizationPolicyOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AuthorizationPolicyOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o AuthorizationPolicyOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o AuthorizationPolicyOutput) Spec() AuthorizationPolicySpecOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) AuthorizationPolicySpecOutput { return v.Spec }).(AuthorizationPolicySpecOutput)
}

func (o AuthorizationPolicyOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type AuthorizationPolicyArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationPolicy)(nil)).Elem()
}

func (o AuthorizationPolicyArrayOutput) ToAuthorizationPolicyArrayOutput() AuthorizationPolicyArrayOutput {
	return o
}

func (o AuthorizationPolicyArrayOutput) ToAuthorizationPolicyArrayOutputWithContext(ctx context.Context) AuthorizationPolicyArrayOutput {
	return o
}

func (o AuthorizationPolicyArrayOutput) Index(i pulumi.IntInput) AuthorizationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthorizationPolicy {
		return vs[0].([]*AuthorizationPolicy)[vs[1].(int)]
	}).(AuthorizationPolicyOutput)
}

type AuthorizationPolicyMapOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationPolicy)(nil)).Elem()
}

func (o AuthorizationPolicyMapOutput) ToAuthorizationPolicyMapOutput() AuthorizationPolicyMapOutput {
	return o
}

func (o AuthorizationPolicyMapOutput) ToAuthorizationPolicyMapOutputWithContext(ctx context.Context) AuthorizationPolicyMapOutput {
	return o
}

func (o AuthorizationPolicyMapOutput) MapIndex(k pulumi.StringInput) AuthorizationPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthorizationPolicy {
		return vs[0].(map[string]*AuthorizationPolicy)[vs[1].(string)]
	}).(AuthorizationPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyInput)(nil)).Elem(), &AuthorizationPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyArrayInput)(nil)).Elem(), AuthorizationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyMapInput)(nil)).Elem(), AuthorizationPolicyMap{})
	pulumi.RegisterOutputType(AuthorizationPolicyOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyMapOutput{})
}
