// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PeerAuthentication struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput      `pulumi:"metadata"`
	Spec     PeerAuthenticationSpecOutput `pulumi:"spec"`
	Status   pulumi.MapOutput             `pulumi:"status"`
}

// NewPeerAuthentication registers a new resource with the given unique name, arguments, and options.
func NewPeerAuthentication(ctx *pulumi.Context,
	name string, args *PeerAuthenticationArgs, opts ...pulumi.ResourceOption) (*PeerAuthentication, error) {
	if args == nil {
		args = &PeerAuthenticationArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("security.istio.io/v1")
	args.Kind = pulumi.StringPtr("PeerAuthentication")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:security.istio.io/v1beta1:PeerAuthentication"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PeerAuthentication
	err := ctx.RegisterResource("kubernetes:security.istio.io/v1:PeerAuthentication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeerAuthentication gets an existing PeerAuthentication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeerAuthentication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeerAuthenticationState, opts ...pulumi.ResourceOption) (*PeerAuthentication, error) {
	var resource PeerAuthentication
	err := ctx.ReadResource("kubernetes:security.istio.io/v1:PeerAuthentication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PeerAuthentication resources.
type peerAuthenticationState struct {
}

type PeerAuthenticationState struct {
}

func (PeerAuthenticationState) ElementType() reflect.Type {
	return reflect.TypeOf((*peerAuthenticationState)(nil)).Elem()
}

type peerAuthenticationArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta      `pulumi:"metadata"`
	Spec     *PeerAuthenticationSpec `pulumi:"spec"`
}

// The set of arguments for constructing a PeerAuthentication resource.
type PeerAuthenticationArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     PeerAuthenticationSpecPtrInput
}

func (PeerAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peerAuthenticationArgs)(nil)).Elem()
}

type PeerAuthenticationInput interface {
	pulumi.Input

	ToPeerAuthenticationOutput() PeerAuthenticationOutput
	ToPeerAuthenticationOutputWithContext(ctx context.Context) PeerAuthenticationOutput
}

func (*PeerAuthentication) ElementType() reflect.Type {
	return reflect.TypeOf((**PeerAuthentication)(nil)).Elem()
}

func (i *PeerAuthentication) ToPeerAuthenticationOutput() PeerAuthenticationOutput {
	return i.ToPeerAuthenticationOutputWithContext(context.Background())
}

func (i *PeerAuthentication) ToPeerAuthenticationOutputWithContext(ctx context.Context) PeerAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerAuthenticationOutput)
}

// PeerAuthenticationArrayInput is an input type that accepts PeerAuthenticationArray and PeerAuthenticationArrayOutput values.
// You can construct a concrete instance of `PeerAuthenticationArrayInput` via:
//
//	PeerAuthenticationArray{ PeerAuthenticationArgs{...} }
type PeerAuthenticationArrayInput interface {
	pulumi.Input

	ToPeerAuthenticationArrayOutput() PeerAuthenticationArrayOutput
	ToPeerAuthenticationArrayOutputWithContext(context.Context) PeerAuthenticationArrayOutput
}

type PeerAuthenticationArray []PeerAuthenticationInput

func (PeerAuthenticationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeerAuthentication)(nil)).Elem()
}

func (i PeerAuthenticationArray) ToPeerAuthenticationArrayOutput() PeerAuthenticationArrayOutput {
	return i.ToPeerAuthenticationArrayOutputWithContext(context.Background())
}

func (i PeerAuthenticationArray) ToPeerAuthenticationArrayOutputWithContext(ctx context.Context) PeerAuthenticationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerAuthenticationArrayOutput)
}

// PeerAuthenticationMapInput is an input type that accepts PeerAuthenticationMap and PeerAuthenticationMapOutput values.
// You can construct a concrete instance of `PeerAuthenticationMapInput` via:
//
//	PeerAuthenticationMap{ "key": PeerAuthenticationArgs{...} }
type PeerAuthenticationMapInput interface {
	pulumi.Input

	ToPeerAuthenticationMapOutput() PeerAuthenticationMapOutput
	ToPeerAuthenticationMapOutputWithContext(context.Context) PeerAuthenticationMapOutput
}

type PeerAuthenticationMap map[string]PeerAuthenticationInput

func (PeerAuthenticationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeerAuthentication)(nil)).Elem()
}

func (i PeerAuthenticationMap) ToPeerAuthenticationMapOutput() PeerAuthenticationMapOutput {
	return i.ToPeerAuthenticationMapOutputWithContext(context.Background())
}

func (i PeerAuthenticationMap) ToPeerAuthenticationMapOutputWithContext(ctx context.Context) PeerAuthenticationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerAuthenticationMapOutput)
}

type PeerAuthenticationOutput struct{ *pulumi.OutputState }

func (PeerAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeerAuthentication)(nil)).Elem()
}

func (o PeerAuthenticationOutput) ToPeerAuthenticationOutput() PeerAuthenticationOutput {
	return o
}

func (o PeerAuthenticationOutput) ToPeerAuthenticationOutputWithContext(ctx context.Context) PeerAuthenticationOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PeerAuthenticationOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PeerAuthentication) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PeerAuthenticationOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PeerAuthentication) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PeerAuthenticationOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *PeerAuthentication) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o PeerAuthenticationOutput) Spec() PeerAuthenticationSpecOutput {
	return o.ApplyT(func(v *PeerAuthentication) PeerAuthenticationSpecOutput { return v.Spec }).(PeerAuthenticationSpecOutput)
}

func (o PeerAuthenticationOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *PeerAuthentication) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type PeerAuthenticationArrayOutput struct{ *pulumi.OutputState }

func (PeerAuthenticationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeerAuthentication)(nil)).Elem()
}

func (o PeerAuthenticationArrayOutput) ToPeerAuthenticationArrayOutput() PeerAuthenticationArrayOutput {
	return o
}

func (o PeerAuthenticationArrayOutput) ToPeerAuthenticationArrayOutputWithContext(ctx context.Context) PeerAuthenticationArrayOutput {
	return o
}

func (o PeerAuthenticationArrayOutput) Index(i pulumi.IntInput) PeerAuthenticationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PeerAuthentication {
		return vs[0].([]*PeerAuthentication)[vs[1].(int)]
	}).(PeerAuthenticationOutput)
}

type PeerAuthenticationMapOutput struct{ *pulumi.OutputState }

func (PeerAuthenticationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeerAuthentication)(nil)).Elem()
}

func (o PeerAuthenticationMapOutput) ToPeerAuthenticationMapOutput() PeerAuthenticationMapOutput {
	return o
}

func (o PeerAuthenticationMapOutput) ToPeerAuthenticationMapOutputWithContext(ctx context.Context) PeerAuthenticationMapOutput {
	return o
}

func (o PeerAuthenticationMapOutput) MapIndex(k pulumi.StringInput) PeerAuthenticationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PeerAuthentication {
		return vs[0].(map[string]*PeerAuthentication)[vs[1].(string)]
	}).(PeerAuthenticationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PeerAuthenticationInput)(nil)).Elem(), &PeerAuthentication{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeerAuthenticationArrayInput)(nil)).Elem(), PeerAuthenticationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeerAuthenticationMapInput)(nil)).Elem(), PeerAuthenticationMap{})
	pulumi.RegisterOutputType(PeerAuthenticationOutput{})
	pulumi.RegisterOutputType(PeerAuthenticationArrayOutput{})
	pulumi.RegisterOutputType(PeerAuthenticationMapOutput{})
}
