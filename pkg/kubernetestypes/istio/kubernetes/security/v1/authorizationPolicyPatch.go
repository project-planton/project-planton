// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type AuthorizationPolicyPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput       `pulumi:"metadata"`
	Spec     AuthorizationPolicySpecPatchPtrOutput `pulumi:"spec"`
	Status   pulumi.MapOutput                      `pulumi:"status"`
}

// NewAuthorizationPolicyPatch registers a new resource with the given unique name, arguments, and options.
func NewAuthorizationPolicyPatch(ctx *pulumi.Context,
	name string, args *AuthorizationPolicyPatchArgs, opts ...pulumi.ResourceOption) (*AuthorizationPolicyPatch, error) {
	if args == nil {
		args = &AuthorizationPolicyPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("security.istio.io/v1")
	args.Kind = pulumi.StringPtr("AuthorizationPolicy")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:security.istio.io/v1beta1:AuthorizationPolicyPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AuthorizationPolicyPatch
	err := ctx.RegisterResource("kubernetes:security.istio.io/v1:AuthorizationPolicyPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizationPolicyPatch gets an existing AuthorizationPolicyPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizationPolicyPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizationPolicyPatchState, opts ...pulumi.ResourceOption) (*AuthorizationPolicyPatch, error) {
	var resource AuthorizationPolicyPatch
	err := ctx.ReadResource("kubernetes:security.istio.io/v1:AuthorizationPolicyPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizationPolicyPatch resources.
type authorizationPolicyPatchState struct {
}

type AuthorizationPolicyPatchState struct {
}

func (AuthorizationPolicyPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationPolicyPatchState)(nil)).Elem()
}

type authorizationPolicyPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch       `pulumi:"metadata"`
	Spec     *AuthorizationPolicySpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a AuthorizationPolicyPatch resource.
type AuthorizationPolicyPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     AuthorizationPolicySpecPatchPtrInput
}

func (AuthorizationPolicyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationPolicyPatchArgs)(nil)).Elem()
}

type AuthorizationPolicyPatchInput interface {
	pulumi.Input

	ToAuthorizationPolicyPatchOutput() AuthorizationPolicyPatchOutput
	ToAuthorizationPolicyPatchOutputWithContext(ctx context.Context) AuthorizationPolicyPatchOutput
}

func (*AuthorizationPolicyPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationPolicyPatch)(nil)).Elem()
}

func (i *AuthorizationPolicyPatch) ToAuthorizationPolicyPatchOutput() AuthorizationPolicyPatchOutput {
	return i.ToAuthorizationPolicyPatchOutputWithContext(context.Background())
}

func (i *AuthorizationPolicyPatch) ToAuthorizationPolicyPatchOutputWithContext(ctx context.Context) AuthorizationPolicyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyPatchOutput)
}

// AuthorizationPolicyPatchArrayInput is an input type that accepts AuthorizationPolicyPatchArray and AuthorizationPolicyPatchArrayOutput values.
// You can construct a concrete instance of `AuthorizationPolicyPatchArrayInput` via:
//
//	AuthorizationPolicyPatchArray{ AuthorizationPolicyPatchArgs{...} }
type AuthorizationPolicyPatchArrayInput interface {
	pulumi.Input

	ToAuthorizationPolicyPatchArrayOutput() AuthorizationPolicyPatchArrayOutput
	ToAuthorizationPolicyPatchArrayOutputWithContext(context.Context) AuthorizationPolicyPatchArrayOutput
}

type AuthorizationPolicyPatchArray []AuthorizationPolicyPatchInput

func (AuthorizationPolicyPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationPolicyPatch)(nil)).Elem()
}

func (i AuthorizationPolicyPatchArray) ToAuthorizationPolicyPatchArrayOutput() AuthorizationPolicyPatchArrayOutput {
	return i.ToAuthorizationPolicyPatchArrayOutputWithContext(context.Background())
}

func (i AuthorizationPolicyPatchArray) ToAuthorizationPolicyPatchArrayOutputWithContext(ctx context.Context) AuthorizationPolicyPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyPatchArrayOutput)
}

// AuthorizationPolicyPatchMapInput is an input type that accepts AuthorizationPolicyPatchMap and AuthorizationPolicyPatchMapOutput values.
// You can construct a concrete instance of `AuthorizationPolicyPatchMapInput` via:
//
//	AuthorizationPolicyPatchMap{ "key": AuthorizationPolicyPatchArgs{...} }
type AuthorizationPolicyPatchMapInput interface {
	pulumi.Input

	ToAuthorizationPolicyPatchMapOutput() AuthorizationPolicyPatchMapOutput
	ToAuthorizationPolicyPatchMapOutputWithContext(context.Context) AuthorizationPolicyPatchMapOutput
}

type AuthorizationPolicyPatchMap map[string]AuthorizationPolicyPatchInput

func (AuthorizationPolicyPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationPolicyPatch)(nil)).Elem()
}

func (i AuthorizationPolicyPatchMap) ToAuthorizationPolicyPatchMapOutput() AuthorizationPolicyPatchMapOutput {
	return i.ToAuthorizationPolicyPatchMapOutputWithContext(context.Background())
}

func (i AuthorizationPolicyPatchMap) ToAuthorizationPolicyPatchMapOutputWithContext(ctx context.Context) AuthorizationPolicyPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyPatchMapOutput)
}

type AuthorizationPolicyPatchOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationPolicyPatch)(nil)).Elem()
}

func (o AuthorizationPolicyPatchOutput) ToAuthorizationPolicyPatchOutput() AuthorizationPolicyPatchOutput {
	return o
}

func (o AuthorizationPolicyPatchOutput) ToAuthorizationPolicyPatchOutputWithContext(ctx context.Context) AuthorizationPolicyPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AuthorizationPolicyPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationPolicyPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AuthorizationPolicyPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationPolicyPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o AuthorizationPolicyPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *AuthorizationPolicyPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o AuthorizationPolicyPatchOutput) Spec() AuthorizationPolicySpecPatchPtrOutput {
	return o.ApplyT(func(v *AuthorizationPolicyPatch) AuthorizationPolicySpecPatchPtrOutput { return v.Spec }).(AuthorizationPolicySpecPatchPtrOutput)
}

func (o AuthorizationPolicyPatchOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *AuthorizationPolicyPatch) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type AuthorizationPolicyPatchArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationPolicyPatch)(nil)).Elem()
}

func (o AuthorizationPolicyPatchArrayOutput) ToAuthorizationPolicyPatchArrayOutput() AuthorizationPolicyPatchArrayOutput {
	return o
}

func (o AuthorizationPolicyPatchArrayOutput) ToAuthorizationPolicyPatchArrayOutputWithContext(ctx context.Context) AuthorizationPolicyPatchArrayOutput {
	return o
}

func (o AuthorizationPolicyPatchArrayOutput) Index(i pulumi.IntInput) AuthorizationPolicyPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthorizationPolicyPatch {
		return vs[0].([]*AuthorizationPolicyPatch)[vs[1].(int)]
	}).(AuthorizationPolicyPatchOutput)
}

type AuthorizationPolicyPatchMapOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationPolicyPatch)(nil)).Elem()
}

func (o AuthorizationPolicyPatchMapOutput) ToAuthorizationPolicyPatchMapOutput() AuthorizationPolicyPatchMapOutput {
	return o
}

func (o AuthorizationPolicyPatchMapOutput) ToAuthorizationPolicyPatchMapOutputWithContext(ctx context.Context) AuthorizationPolicyPatchMapOutput {
	return o
}

func (o AuthorizationPolicyPatchMapOutput) MapIndex(k pulumi.StringInput) AuthorizationPolicyPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthorizationPolicyPatch {
		return vs[0].(map[string]*AuthorizationPolicyPatch)[vs[1].(string)]
	}).(AuthorizationPolicyPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyPatchInput)(nil)).Elem(), &AuthorizationPolicyPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyPatchArrayInput)(nil)).Elem(), AuthorizationPolicyPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyPatchMapInput)(nil)).Elem(), AuthorizationPolicyPatchMap{})
	pulumi.RegisterOutputType(AuthorizationPolicyPatchOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyPatchArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationPolicyPatchMapOutput{})
}
