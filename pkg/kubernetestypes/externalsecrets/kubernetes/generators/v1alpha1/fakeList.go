// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// FakeList is a list of Fake
type FakeList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of fakes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items FakeTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewFakeList registers a new resource with the given unique name, arguments, and options.
func NewFakeList(ctx *pulumi.Context,
	name string, args *FakeListArgs, opts ...pulumi.ResourceOption) (*FakeList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("generators.external-secrets.io/v1alpha1")
	args.Kind = pulumi.StringPtr("FakeList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource FakeList
	err := ctx.RegisterResource("kubernetes:generators.external-secrets.io/v1alpha1:FakeList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFakeList gets an existing FakeList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFakeList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FakeListState, opts ...pulumi.ResourceOption) (*FakeList, error) {
	var resource FakeList
	err := ctx.ReadResource("kubernetes:generators.external-secrets.io/v1alpha1:FakeList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FakeList resources.
type fakeListState struct {
}

type FakeListState struct {
}

func (FakeListState) ElementType() reflect.Type {
	return reflect.TypeOf((*fakeListState)(nil)).Elem()
}

type fakeListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of fakes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []FakeType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a FakeList resource.
type FakeListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of fakes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items FakeTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (FakeListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fakeListArgs)(nil)).Elem()
}

type FakeListInput interface {
	pulumi.Input

	ToFakeListOutput() FakeListOutput
	ToFakeListOutputWithContext(ctx context.Context) FakeListOutput
}

func (*FakeList) ElementType() reflect.Type {
	return reflect.TypeOf((**FakeList)(nil)).Elem()
}

func (i *FakeList) ToFakeListOutput() FakeListOutput {
	return i.ToFakeListOutputWithContext(context.Background())
}

func (i *FakeList) ToFakeListOutputWithContext(ctx context.Context) FakeListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeListOutput)
}

// FakeListArrayInput is an input type that accepts FakeListArray and FakeListArrayOutput values.
// You can construct a concrete instance of `FakeListArrayInput` via:
//
//	FakeListArray{ FakeListArgs{...} }
type FakeListArrayInput interface {
	pulumi.Input

	ToFakeListArrayOutput() FakeListArrayOutput
	ToFakeListArrayOutputWithContext(context.Context) FakeListArrayOutput
}

type FakeListArray []FakeListInput

func (FakeListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FakeList)(nil)).Elem()
}

func (i FakeListArray) ToFakeListArrayOutput() FakeListArrayOutput {
	return i.ToFakeListArrayOutputWithContext(context.Background())
}

func (i FakeListArray) ToFakeListArrayOutputWithContext(ctx context.Context) FakeListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeListArrayOutput)
}

// FakeListMapInput is an input type that accepts FakeListMap and FakeListMapOutput values.
// You can construct a concrete instance of `FakeListMapInput` via:
//
//	FakeListMap{ "key": FakeListArgs{...} }
type FakeListMapInput interface {
	pulumi.Input

	ToFakeListMapOutput() FakeListMapOutput
	ToFakeListMapOutputWithContext(context.Context) FakeListMapOutput
}

type FakeListMap map[string]FakeListInput

func (FakeListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FakeList)(nil)).Elem()
}

func (i FakeListMap) ToFakeListMapOutput() FakeListMapOutput {
	return i.ToFakeListMapOutputWithContext(context.Background())
}

func (i FakeListMap) ToFakeListMapOutputWithContext(ctx context.Context) FakeListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeListMapOutput)
}

type FakeListOutput struct{ *pulumi.OutputState }

func (FakeListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FakeList)(nil)).Elem()
}

func (o FakeListOutput) ToFakeListOutput() FakeListOutput {
	return o
}

func (o FakeListOutput) ToFakeListOutputWithContext(ctx context.Context) FakeListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o FakeListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *FakeList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of fakes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o FakeListOutput) Items() FakeTypeArrayOutput {
	return o.ApplyT(func(v *FakeList) FakeTypeArrayOutput { return v.Items }).(FakeTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FakeListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *FakeList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FakeListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *FakeList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type FakeListArrayOutput struct{ *pulumi.OutputState }

func (FakeListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FakeList)(nil)).Elem()
}

func (o FakeListArrayOutput) ToFakeListArrayOutput() FakeListArrayOutput {
	return o
}

func (o FakeListArrayOutput) ToFakeListArrayOutputWithContext(ctx context.Context) FakeListArrayOutput {
	return o
}

func (o FakeListArrayOutput) Index(i pulumi.IntInput) FakeListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FakeList {
		return vs[0].([]*FakeList)[vs[1].(int)]
	}).(FakeListOutput)
}

type FakeListMapOutput struct{ *pulumi.OutputState }

func (FakeListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FakeList)(nil)).Elem()
}

func (o FakeListMapOutput) ToFakeListMapOutput() FakeListMapOutput {
	return o
}

func (o FakeListMapOutput) ToFakeListMapOutputWithContext(ctx context.Context) FakeListMapOutput {
	return o
}

func (o FakeListMapOutput) MapIndex(k pulumi.StringInput) FakeListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FakeList {
		return vs[0].(map[string]*FakeList)[vs[1].(string)]
	}).(FakeListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FakeListInput)(nil)).Elem(), &FakeList{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakeListArrayInput)(nil)).Elem(), FakeListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakeListMapInput)(nil)).Elem(), FakeListMap{})
	pulumi.RegisterOutputType(FakeListOutput{})
	pulumi.RegisterOutputType(FakeListArrayOutput{})
	pulumi.RegisterOutputType(FakeListMapOutput{})
}
