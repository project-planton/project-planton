// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GithubAccessTokenList is a list of GithubAccessToken
type GithubAccessTokenList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of githubaccesstokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items GithubAccessTokenTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewGithubAccessTokenList registers a new resource with the given unique name, arguments, and options.
func NewGithubAccessTokenList(ctx *pulumi.Context,
	name string, args *GithubAccessTokenListArgs, opts ...pulumi.ResourceOption) (*GithubAccessTokenList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("generators.external-secrets.io/v1alpha1")
	args.Kind = pulumi.StringPtr("GithubAccessTokenList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GithubAccessTokenList
	err := ctx.RegisterResource("kubernetes:generators.external-secrets.io/v1alpha1:GithubAccessTokenList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGithubAccessTokenList gets an existing GithubAccessTokenList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGithubAccessTokenList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GithubAccessTokenListState, opts ...pulumi.ResourceOption) (*GithubAccessTokenList, error) {
	var resource GithubAccessTokenList
	err := ctx.ReadResource("kubernetes:generators.external-secrets.io/v1alpha1:GithubAccessTokenList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GithubAccessTokenList resources.
type githubAccessTokenListState struct {
}

type GithubAccessTokenListState struct {
}

func (GithubAccessTokenListState) ElementType() reflect.Type {
	return reflect.TypeOf((*githubAccessTokenListState)(nil)).Elem()
}

type githubAccessTokenListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of githubaccesstokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []GithubAccessTokenType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a GithubAccessTokenList resource.
type GithubAccessTokenListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of githubaccesstokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items GithubAccessTokenTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (GithubAccessTokenListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*githubAccessTokenListArgs)(nil)).Elem()
}

type GithubAccessTokenListInput interface {
	pulumi.Input

	ToGithubAccessTokenListOutput() GithubAccessTokenListOutput
	ToGithubAccessTokenListOutputWithContext(ctx context.Context) GithubAccessTokenListOutput
}

func (*GithubAccessTokenList) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenList)(nil)).Elem()
}

func (i *GithubAccessTokenList) ToGithubAccessTokenListOutput() GithubAccessTokenListOutput {
	return i.ToGithubAccessTokenListOutputWithContext(context.Background())
}

func (i *GithubAccessTokenList) ToGithubAccessTokenListOutputWithContext(ctx context.Context) GithubAccessTokenListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenListOutput)
}

// GithubAccessTokenListArrayInput is an input type that accepts GithubAccessTokenListArray and GithubAccessTokenListArrayOutput values.
// You can construct a concrete instance of `GithubAccessTokenListArrayInput` via:
//
//	GithubAccessTokenListArray{ GithubAccessTokenListArgs{...} }
type GithubAccessTokenListArrayInput interface {
	pulumi.Input

	ToGithubAccessTokenListArrayOutput() GithubAccessTokenListArrayOutput
	ToGithubAccessTokenListArrayOutputWithContext(context.Context) GithubAccessTokenListArrayOutput
}

type GithubAccessTokenListArray []GithubAccessTokenListInput

func (GithubAccessTokenListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GithubAccessTokenList)(nil)).Elem()
}

func (i GithubAccessTokenListArray) ToGithubAccessTokenListArrayOutput() GithubAccessTokenListArrayOutput {
	return i.ToGithubAccessTokenListArrayOutputWithContext(context.Background())
}

func (i GithubAccessTokenListArray) ToGithubAccessTokenListArrayOutputWithContext(ctx context.Context) GithubAccessTokenListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenListArrayOutput)
}

// GithubAccessTokenListMapInput is an input type that accepts GithubAccessTokenListMap and GithubAccessTokenListMapOutput values.
// You can construct a concrete instance of `GithubAccessTokenListMapInput` via:
//
//	GithubAccessTokenListMap{ "key": GithubAccessTokenListArgs{...} }
type GithubAccessTokenListMapInput interface {
	pulumi.Input

	ToGithubAccessTokenListMapOutput() GithubAccessTokenListMapOutput
	ToGithubAccessTokenListMapOutputWithContext(context.Context) GithubAccessTokenListMapOutput
}

type GithubAccessTokenListMap map[string]GithubAccessTokenListInput

func (GithubAccessTokenListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GithubAccessTokenList)(nil)).Elem()
}

func (i GithubAccessTokenListMap) ToGithubAccessTokenListMapOutput() GithubAccessTokenListMapOutput {
	return i.ToGithubAccessTokenListMapOutputWithContext(context.Background())
}

func (i GithubAccessTokenListMap) ToGithubAccessTokenListMapOutputWithContext(ctx context.Context) GithubAccessTokenListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenListMapOutput)
}

type GithubAccessTokenListOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenList)(nil)).Elem()
}

func (o GithubAccessTokenListOutput) ToGithubAccessTokenListOutput() GithubAccessTokenListOutput {
	return o
}

func (o GithubAccessTokenListOutput) ToGithubAccessTokenListOutputWithContext(ctx context.Context) GithubAccessTokenListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GithubAccessTokenListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubAccessTokenList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of githubaccesstokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o GithubAccessTokenListOutput) Items() GithubAccessTokenTypeArrayOutput {
	return o.ApplyT(func(v *GithubAccessTokenList) GithubAccessTokenTypeArrayOutput { return v.Items }).(GithubAccessTokenTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GithubAccessTokenListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubAccessTokenList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GithubAccessTokenListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *GithubAccessTokenList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type GithubAccessTokenListArrayOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GithubAccessTokenList)(nil)).Elem()
}

func (o GithubAccessTokenListArrayOutput) ToGithubAccessTokenListArrayOutput() GithubAccessTokenListArrayOutput {
	return o
}

func (o GithubAccessTokenListArrayOutput) ToGithubAccessTokenListArrayOutputWithContext(ctx context.Context) GithubAccessTokenListArrayOutput {
	return o
}

func (o GithubAccessTokenListArrayOutput) Index(i pulumi.IntInput) GithubAccessTokenListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GithubAccessTokenList {
		return vs[0].([]*GithubAccessTokenList)[vs[1].(int)]
	}).(GithubAccessTokenListOutput)
}

type GithubAccessTokenListMapOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GithubAccessTokenList)(nil)).Elem()
}

func (o GithubAccessTokenListMapOutput) ToGithubAccessTokenListMapOutput() GithubAccessTokenListMapOutput {
	return o
}

func (o GithubAccessTokenListMapOutput) ToGithubAccessTokenListMapOutputWithContext(ctx context.Context) GithubAccessTokenListMapOutput {
	return o
}

func (o GithubAccessTokenListMapOutput) MapIndex(k pulumi.StringInput) GithubAccessTokenListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GithubAccessTokenList {
		return vs[0].(map[string]*GithubAccessTokenList)[vs[1].(string)]
	}).(GithubAccessTokenListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenListInput)(nil)).Elem(), &GithubAccessTokenList{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenListArrayInput)(nil)).Elem(), GithubAccessTokenListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenListMapInput)(nil)).Elem(), GithubAccessTokenListMap{})
	pulumi.RegisterOutputType(GithubAccessTokenListOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenListArrayOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenListMapOutput{})
}
