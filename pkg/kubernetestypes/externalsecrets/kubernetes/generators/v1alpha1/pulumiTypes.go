// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// ACRAccessToken returns a Azure Container Registry token
// that can be used for pushing/pulling images.
// Note: by default it will return an ACR Refresh Token with full access
// (depending on the identity).
// This can be scoped down to the repository level using .spec.scope.
// In case scope is defined it will return an ACR Access Token.
//
// See docs: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md
type ACRAccessTokenType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec     *ACRAccessTokenSpec `pulumi:"spec"`
}

// ACRAccessTokenTypeInput is an input type that accepts ACRAccessTokenTypeArgs and ACRAccessTokenTypeOutput values.
// You can construct a concrete instance of `ACRAccessTokenTypeInput` via:
//
//	ACRAccessTokenTypeArgs{...}
type ACRAccessTokenTypeInput interface {
	pulumi.Input

	ToACRAccessTokenTypeOutput() ACRAccessTokenTypeOutput
	ToACRAccessTokenTypeOutputWithContext(context.Context) ACRAccessTokenTypeOutput
}

// ACRAccessToken returns a Azure Container Registry token
// that can be used for pushing/pulling images.
// Note: by default it will return an ACR Refresh Token with full access
// (depending on the identity).
// This can be scoped down to the repository level using .spec.scope.
// In case scope is defined it will return an ACR Access Token.
//
// See docs: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md
type ACRAccessTokenTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput  `pulumi:"metadata"`
	Spec     ACRAccessTokenSpecPtrInput `pulumi:"spec"`
}

func (ACRAccessTokenTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenType)(nil)).Elem()
}

func (i ACRAccessTokenTypeArgs) ToACRAccessTokenTypeOutput() ACRAccessTokenTypeOutput {
	return i.ToACRAccessTokenTypeOutputWithContext(context.Background())
}

func (i ACRAccessTokenTypeArgs) ToACRAccessTokenTypeOutputWithContext(ctx context.Context) ACRAccessTokenTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenTypeOutput)
}

// ACRAccessTokenTypeArrayInput is an input type that accepts ACRAccessTokenTypeArray and ACRAccessTokenTypeArrayOutput values.
// You can construct a concrete instance of `ACRAccessTokenTypeArrayInput` via:
//
//	ACRAccessTokenTypeArray{ ACRAccessTokenTypeArgs{...} }
type ACRAccessTokenTypeArrayInput interface {
	pulumi.Input

	ToACRAccessTokenTypeArrayOutput() ACRAccessTokenTypeArrayOutput
	ToACRAccessTokenTypeArrayOutputWithContext(context.Context) ACRAccessTokenTypeArrayOutput
}

type ACRAccessTokenTypeArray []ACRAccessTokenTypeInput

func (ACRAccessTokenTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ACRAccessTokenType)(nil)).Elem()
}

func (i ACRAccessTokenTypeArray) ToACRAccessTokenTypeArrayOutput() ACRAccessTokenTypeArrayOutput {
	return i.ToACRAccessTokenTypeArrayOutputWithContext(context.Background())
}

func (i ACRAccessTokenTypeArray) ToACRAccessTokenTypeArrayOutputWithContext(ctx context.Context) ACRAccessTokenTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenTypeArrayOutput)
}

// ACRAccessToken returns a Azure Container Registry token
// that can be used for pushing/pulling images.
// Note: by default it will return an ACR Refresh Token with full access
// (depending on the identity).
// This can be scoped down to the repository level using .spec.scope.
// In case scope is defined it will return an ACR Access Token.
//
// See docs: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md
type ACRAccessTokenTypeOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenType)(nil)).Elem()
}

func (o ACRAccessTokenTypeOutput) ToACRAccessTokenTypeOutput() ACRAccessTokenTypeOutput {
	return o
}

func (o ACRAccessTokenTypeOutput) ToACRAccessTokenTypeOutputWithContext(ctx context.Context) ACRAccessTokenTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ACRAccessTokenTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ACRAccessTokenTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ACRAccessTokenTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o ACRAccessTokenTypeOutput) Spec() ACRAccessTokenSpecPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenType) *ACRAccessTokenSpec { return v.Spec }).(ACRAccessTokenSpecPtrOutput)
}

type ACRAccessTokenTypeArrayOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ACRAccessTokenType)(nil)).Elem()
}

func (o ACRAccessTokenTypeArrayOutput) ToACRAccessTokenTypeArrayOutput() ACRAccessTokenTypeArrayOutput {
	return o
}

func (o ACRAccessTokenTypeArrayOutput) ToACRAccessTokenTypeArrayOutputWithContext(ctx context.Context) ACRAccessTokenTypeArrayOutput {
	return o
}

func (o ACRAccessTokenTypeArrayOutput) Index(i pulumi.IntInput) ACRAccessTokenTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ACRAccessTokenType {
		return vs[0].([]ACRAccessTokenType)[vs[1].(int)]
	}).(ACRAccessTokenTypeOutput)
}

// ACRAccessTokenList is a list of ACRAccessToken
type ACRAccessTokenListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of acraccesstokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ACRAccessTokenType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ACRAccessTokenListTypeInput is an input type that accepts ACRAccessTokenListTypeArgs and ACRAccessTokenListTypeOutput values.
// You can construct a concrete instance of `ACRAccessTokenListTypeInput` via:
//
//	ACRAccessTokenListTypeArgs{...}
type ACRAccessTokenListTypeInput interface {
	pulumi.Input

	ToACRAccessTokenListTypeOutput() ACRAccessTokenListTypeOutput
	ToACRAccessTokenListTypeOutputWithContext(context.Context) ACRAccessTokenListTypeOutput
}

// ACRAccessTokenList is a list of ACRAccessToken
type ACRAccessTokenListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of acraccesstokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ACRAccessTokenTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ACRAccessTokenListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenListType)(nil)).Elem()
}

func (i ACRAccessTokenListTypeArgs) ToACRAccessTokenListTypeOutput() ACRAccessTokenListTypeOutput {
	return i.ToACRAccessTokenListTypeOutputWithContext(context.Background())
}

func (i ACRAccessTokenListTypeArgs) ToACRAccessTokenListTypeOutputWithContext(ctx context.Context) ACRAccessTokenListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenListTypeOutput)
}

// ACRAccessTokenList is a list of ACRAccessToken
type ACRAccessTokenListTypeOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenListType)(nil)).Elem()
}

func (o ACRAccessTokenListTypeOutput) ToACRAccessTokenListTypeOutput() ACRAccessTokenListTypeOutput {
	return o
}

func (o ACRAccessTokenListTypeOutput) ToACRAccessTokenListTypeOutputWithContext(ctx context.Context) ACRAccessTokenListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ACRAccessTokenListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of acraccesstokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ACRAccessTokenListTypeOutput) Items() ACRAccessTokenTypeArrayOutput {
	return o.ApplyT(func(v ACRAccessTokenListType) []ACRAccessTokenType { return v.Items }).(ACRAccessTokenTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ACRAccessTokenListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ACRAccessTokenListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ACRAccessToken returns a Azure Container Registry token
// that can be used for pushing/pulling images.
// Note: by default it will return an ACR Refresh Token with full access
// (depending on the identity).
// This can be scoped down to the repository level using .spec.scope.
// In case scope is defined it will return an ACR Access Token.
//
// See docs: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md
type ACRAccessTokenPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch  `pulumi:"metadata"`
	Spec     *ACRAccessTokenSpecPatch `pulumi:"spec"`
}

// ACRAccessTokenPatchTypeInput is an input type that accepts ACRAccessTokenPatchTypeArgs and ACRAccessTokenPatchTypeOutput values.
// You can construct a concrete instance of `ACRAccessTokenPatchTypeInput` via:
//
//	ACRAccessTokenPatchTypeArgs{...}
type ACRAccessTokenPatchTypeInput interface {
	pulumi.Input

	ToACRAccessTokenPatchTypeOutput() ACRAccessTokenPatchTypeOutput
	ToACRAccessTokenPatchTypeOutputWithContext(context.Context) ACRAccessTokenPatchTypeOutput
}

// ACRAccessToken returns a Azure Container Registry token
// that can be used for pushing/pulling images.
// Note: by default it will return an ACR Refresh Token with full access
// (depending on the identity).
// This can be scoped down to the repository level using .spec.scope.
// In case scope is defined it will return an ACR Access Token.
//
// See docs: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md
type ACRAccessTokenPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput  `pulumi:"metadata"`
	Spec     ACRAccessTokenSpecPatchPtrInput `pulumi:"spec"`
}

func (ACRAccessTokenPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenPatchType)(nil)).Elem()
}

func (i ACRAccessTokenPatchTypeArgs) ToACRAccessTokenPatchTypeOutput() ACRAccessTokenPatchTypeOutput {
	return i.ToACRAccessTokenPatchTypeOutputWithContext(context.Background())
}

func (i ACRAccessTokenPatchTypeArgs) ToACRAccessTokenPatchTypeOutputWithContext(ctx context.Context) ACRAccessTokenPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenPatchTypeOutput)
}

// ACRAccessToken returns a Azure Container Registry token
// that can be used for pushing/pulling images.
// Note: by default it will return an ACR Refresh Token with full access
// (depending on the identity).
// This can be scoped down to the repository level using .spec.scope.
// In case scope is defined it will return an ACR Access Token.
//
// See docs: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md
type ACRAccessTokenPatchTypeOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenPatchType)(nil)).Elem()
}

func (o ACRAccessTokenPatchTypeOutput) ToACRAccessTokenPatchTypeOutput() ACRAccessTokenPatchTypeOutput {
	return o
}

func (o ACRAccessTokenPatchTypeOutput) ToACRAccessTokenPatchTypeOutputWithContext(ctx context.Context) ACRAccessTokenPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ACRAccessTokenPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ACRAccessTokenPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ACRAccessTokenPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ACRAccessTokenPatchTypeOutput) Spec() ACRAccessTokenSpecPatchPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenPatchType) *ACRAccessTokenSpecPatch { return v.Spec }).(ACRAccessTokenSpecPatchPtrOutput)
}

// ACRAccessTokenSpec defines how to generate the access token
// e.g. how to authenticate and which registry to use.
// see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview
type ACRAccessTokenSpec struct {
	Auth *ACRAccessTokenSpecAuth `pulumi:"auth"`
	// EnvironmentType specifies the Azure cloud environment endpoints to use for
	// connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint.
	// The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
	// PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
	EnvironmentType *string `pulumi:"environmentType"`
	// the domain name of the ACR registry
	// e.g. foobarexample.azurecr.io
	Registry *string `pulumi:"registry"`
	// Define the scope for the access token, e.g. pull/push access for a repository.
	// if not provided it will return a refresh token that has full scope.
	// Note: you need to pin it down to the repository level, there is no wildcard available.
	//
	// examples:
	// repository:my-repository:pull,push
	// repository:my-repository:pull
	//
	// see docs for details: https://docs.docker.com/registry/spec/auth/scope/
	Scope *string `pulumi:"scope"`
	// TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.
	TenantId *string `pulumi:"tenantId"`
}

// ACRAccessTokenSpecInput is an input type that accepts ACRAccessTokenSpecArgs and ACRAccessTokenSpecOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecInput` via:
//
//	ACRAccessTokenSpecArgs{...}
type ACRAccessTokenSpecInput interface {
	pulumi.Input

	ToACRAccessTokenSpecOutput() ACRAccessTokenSpecOutput
	ToACRAccessTokenSpecOutputWithContext(context.Context) ACRAccessTokenSpecOutput
}

// ACRAccessTokenSpec defines how to generate the access token
// e.g. how to authenticate and which registry to use.
// see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview
type ACRAccessTokenSpecArgs struct {
	Auth ACRAccessTokenSpecAuthPtrInput `pulumi:"auth"`
	// EnvironmentType specifies the Azure cloud environment endpoints to use for
	// connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint.
	// The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
	// PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
	EnvironmentType pulumi.StringPtrInput `pulumi:"environmentType"`
	// the domain name of the ACR registry
	// e.g. foobarexample.azurecr.io
	Registry pulumi.StringPtrInput `pulumi:"registry"`
	// Define the scope for the access token, e.g. pull/push access for a repository.
	// if not provided it will return a refresh token that has full scope.
	// Note: you need to pin it down to the repository level, there is no wildcard available.
	//
	// examples:
	// repository:my-repository:pull,push
	// repository:my-repository:pull
	//
	// see docs for details: https://docs.docker.com/registry/spec/auth/scope/
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (ACRAccessTokenSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpec)(nil)).Elem()
}

func (i ACRAccessTokenSpecArgs) ToACRAccessTokenSpecOutput() ACRAccessTokenSpecOutput {
	return i.ToACRAccessTokenSpecOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecArgs) ToACRAccessTokenSpecOutputWithContext(ctx context.Context) ACRAccessTokenSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecOutput)
}

func (i ACRAccessTokenSpecArgs) ToACRAccessTokenSpecPtrOutput() ACRAccessTokenSpecPtrOutput {
	return i.ToACRAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecArgs) ToACRAccessTokenSpecPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecOutput).ToACRAccessTokenSpecPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecPtrInput is an input type that accepts ACRAccessTokenSpecArgs, ACRAccessTokenSpecPtr and ACRAccessTokenSpecPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecPtrInput` via:
//
//	        ACRAccessTokenSpecArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecPtrOutput() ACRAccessTokenSpecPtrOutput
	ToACRAccessTokenSpecPtrOutputWithContext(context.Context) ACRAccessTokenSpecPtrOutput
}

type acraccessTokenSpecPtrType ACRAccessTokenSpecArgs

func ACRAccessTokenSpecPtr(v *ACRAccessTokenSpecArgs) ACRAccessTokenSpecPtrInput {
	return (*acraccessTokenSpecPtrType)(v)
}

func (*acraccessTokenSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpec)(nil)).Elem()
}

func (i *acraccessTokenSpecPtrType) ToACRAccessTokenSpecPtrOutput() ACRAccessTokenSpecPtrOutput {
	return i.ToACRAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecPtrType) ToACRAccessTokenSpecPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecPtrOutput)
}

// ACRAccessTokenSpec defines how to generate the access token
// e.g. how to authenticate and which registry to use.
// see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview
type ACRAccessTokenSpecOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpec)(nil)).Elem()
}

func (o ACRAccessTokenSpecOutput) ToACRAccessTokenSpecOutput() ACRAccessTokenSpecOutput {
	return o
}

func (o ACRAccessTokenSpecOutput) ToACRAccessTokenSpecOutputWithContext(ctx context.Context) ACRAccessTokenSpecOutput {
	return o
}

func (o ACRAccessTokenSpecOutput) ToACRAccessTokenSpecPtrOutput() ACRAccessTokenSpecPtrOutput {
	return o.ToACRAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecOutput) ToACRAccessTokenSpecPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpec) *ACRAccessTokenSpec {
		return &v
	}).(ACRAccessTokenSpecPtrOutput)
}

func (o ACRAccessTokenSpecOutput) Auth() ACRAccessTokenSpecAuthPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpec) *ACRAccessTokenSpecAuth { return v.Auth }).(ACRAccessTokenSpecAuthPtrOutput)
}

// EnvironmentType specifies the Azure cloud environment endpoints to use for
// connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint.
// The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
// PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
func (o ACRAccessTokenSpecOutput) EnvironmentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpec) *string { return v.EnvironmentType }).(pulumi.StringPtrOutput)
}

// the domain name of the ACR registry
// e.g. foobarexample.azurecr.io
func (o ACRAccessTokenSpecOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpec) *string { return v.Registry }).(pulumi.StringPtrOutput)
}

// Define the scope for the access token, e.g. pull/push access for a repository.
// if not provided it will return a refresh token that has full scope.
// Note: you need to pin it down to the repository level, there is no wildcard available.
//
// examples:
// repository:my-repository:pull,push
// repository:my-repository:pull
//
// see docs for details: https://docs.docker.com/registry/spec/auth/scope/
func (o ACRAccessTokenSpecOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpec) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.
func (o ACRAccessTokenSpecOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpec) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpec)(nil)).Elem()
}

func (o ACRAccessTokenSpecPtrOutput) ToACRAccessTokenSpecPtrOutput() ACRAccessTokenSpecPtrOutput {
	return o
}

func (o ACRAccessTokenSpecPtrOutput) ToACRAccessTokenSpecPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecPtrOutput {
	return o
}

func (o ACRAccessTokenSpecPtrOutput) Elem() ACRAccessTokenSpecOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpec) ACRAccessTokenSpec {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpec
		return ret
	}).(ACRAccessTokenSpecOutput)
}

func (o ACRAccessTokenSpecPtrOutput) Auth() ACRAccessTokenSpecAuthPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpec) *ACRAccessTokenSpecAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ACRAccessTokenSpecAuthPtrOutput)
}

// EnvironmentType specifies the Azure cloud environment endpoints to use for
// connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint.
// The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
// PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
func (o ACRAccessTokenSpecPtrOutput) EnvironmentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return v.EnvironmentType
	}).(pulumi.StringPtrOutput)
}

// the domain name of the ACR registry
// e.g. foobarexample.azurecr.io
func (o ACRAccessTokenSpecPtrOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return v.Registry
	}).(pulumi.StringPtrOutput)
}

// Define the scope for the access token, e.g. pull/push access for a repository.
// if not provided it will return a refresh token that has full scope.
// Note: you need to pin it down to the repository level, there is no wildcard available.
//
// examples:
// repository:my-repository:pull,push
// repository:my-repository:pull
//
// see docs for details: https://docs.docker.com/registry/spec/auth/scope/
func (o ACRAccessTokenSpecPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.
func (o ACRAccessTokenSpecPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecAuth struct {
	ManagedIdentity  *ACRAccessTokenSpecAuthManagedIdentity  `pulumi:"managedIdentity"`
	ServicePrincipal *ACRAccessTokenSpecAuthServicePrincipal `pulumi:"servicePrincipal"`
	WorkloadIdentity *ACRAccessTokenSpecAuthWorkloadIdentity `pulumi:"workloadIdentity"`
}

// ACRAccessTokenSpecAuthInput is an input type that accepts ACRAccessTokenSpecAuthArgs and ACRAccessTokenSpecAuthOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthInput` via:
//
//	ACRAccessTokenSpecAuthArgs{...}
type ACRAccessTokenSpecAuthInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthOutput() ACRAccessTokenSpecAuthOutput
	ToACRAccessTokenSpecAuthOutputWithContext(context.Context) ACRAccessTokenSpecAuthOutput
}

type ACRAccessTokenSpecAuthArgs struct {
	ManagedIdentity  ACRAccessTokenSpecAuthManagedIdentityPtrInput  `pulumi:"managedIdentity"`
	ServicePrincipal ACRAccessTokenSpecAuthServicePrincipalPtrInput `pulumi:"servicePrincipal"`
	WorkloadIdentity ACRAccessTokenSpecAuthWorkloadIdentityPtrInput `pulumi:"workloadIdentity"`
}

func (ACRAccessTokenSpecAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuth)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthArgs) ToACRAccessTokenSpecAuthOutput() ACRAccessTokenSpecAuthOutput {
	return i.ToACRAccessTokenSpecAuthOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthArgs) ToACRAccessTokenSpecAuthOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthOutput)
}

func (i ACRAccessTokenSpecAuthArgs) ToACRAccessTokenSpecAuthPtrOutput() ACRAccessTokenSpecAuthPtrOutput {
	return i.ToACRAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthArgs) ToACRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthOutput).ToACRAccessTokenSpecAuthPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthPtrInput is an input type that accepts ACRAccessTokenSpecAuthArgs, ACRAccessTokenSpecAuthPtr and ACRAccessTokenSpecAuthPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthPtrInput` via:
//
//	        ACRAccessTokenSpecAuthArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthPtrOutput() ACRAccessTokenSpecAuthPtrOutput
	ToACRAccessTokenSpecAuthPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthPtrOutput
}

type acraccessTokenSpecAuthPtrType ACRAccessTokenSpecAuthArgs

func ACRAccessTokenSpecAuthPtr(v *ACRAccessTokenSpecAuthArgs) ACRAccessTokenSpecAuthPtrInput {
	return (*acraccessTokenSpecAuthPtrType)(v)
}

func (*acraccessTokenSpecAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuth)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthPtrType) ToACRAccessTokenSpecAuthPtrOutput() ACRAccessTokenSpecAuthPtrOutput {
	return i.ToACRAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthPtrType) ToACRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthPtrOutput)
}

type ACRAccessTokenSpecAuthOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuth)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthOutput) ToACRAccessTokenSpecAuthOutput() ACRAccessTokenSpecAuthOutput {
	return o
}

func (o ACRAccessTokenSpecAuthOutput) ToACRAccessTokenSpecAuthOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthOutput {
	return o
}

func (o ACRAccessTokenSpecAuthOutput) ToACRAccessTokenSpecAuthPtrOutput() ACRAccessTokenSpecAuthPtrOutput {
	return o.ToACRAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthOutput) ToACRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuth) *ACRAccessTokenSpecAuth {
		return &v
	}).(ACRAccessTokenSpecAuthPtrOutput)
}

func (o ACRAccessTokenSpecAuthOutput) ManagedIdentity() ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuth) *ACRAccessTokenSpecAuthManagedIdentity { return v.ManagedIdentity }).(ACRAccessTokenSpecAuthManagedIdentityPtrOutput)
}

func (o ACRAccessTokenSpecAuthOutput) ServicePrincipal() ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuth) *ACRAccessTokenSpecAuthServicePrincipal { return v.ServicePrincipal }).(ACRAccessTokenSpecAuthServicePrincipalPtrOutput)
}

func (o ACRAccessTokenSpecAuthOutput) WorkloadIdentity() ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuth) *ACRAccessTokenSpecAuthWorkloadIdentity { return v.WorkloadIdentity }).(ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

type ACRAccessTokenSpecAuthPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuth)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthPtrOutput) ToACRAccessTokenSpecAuthPtrOutput() ACRAccessTokenSpecAuthPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthPtrOutput) ToACRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthPtrOutput) Elem() ACRAccessTokenSpecAuthOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuth) ACRAccessTokenSpecAuth {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuth
		return ret
	}).(ACRAccessTokenSpecAuthOutput)
}

func (o ACRAccessTokenSpecAuthPtrOutput) ManagedIdentity() ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuth) *ACRAccessTokenSpecAuthManagedIdentity {
		if v == nil {
			return nil
		}
		return v.ManagedIdentity
	}).(ACRAccessTokenSpecAuthManagedIdentityPtrOutput)
}

func (o ACRAccessTokenSpecAuthPtrOutput) ServicePrincipal() ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuth) *ACRAccessTokenSpecAuthServicePrincipal {
		if v == nil {
			return nil
		}
		return v.ServicePrincipal
	}).(ACRAccessTokenSpecAuthServicePrincipalPtrOutput)
}

func (o ACRAccessTokenSpecAuthPtrOutput) WorkloadIdentity() ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuth) *ACRAccessTokenSpecAuthWorkloadIdentity {
		if v == nil {
			return nil
		}
		return v.WorkloadIdentity
	}).(ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

// ManagedIdentity uses Azure Managed Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthManagedIdentity struct {
	// If multiple Managed Identity is assigned to the pod, you can select the one to be used
	IdentityId *string `pulumi:"identityId"`
}

// ACRAccessTokenSpecAuthManagedIdentityInput is an input type that accepts ACRAccessTokenSpecAuthManagedIdentityArgs and ACRAccessTokenSpecAuthManagedIdentityOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthManagedIdentityInput` via:
//
//	ACRAccessTokenSpecAuthManagedIdentityArgs{...}
type ACRAccessTokenSpecAuthManagedIdentityInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthManagedIdentityOutput() ACRAccessTokenSpecAuthManagedIdentityOutput
	ToACRAccessTokenSpecAuthManagedIdentityOutputWithContext(context.Context) ACRAccessTokenSpecAuthManagedIdentityOutput
}

// ManagedIdentity uses Azure Managed Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthManagedIdentityArgs struct {
	// If multiple Managed Identity is assigned to the pod, you can select the one to be used
	IdentityId pulumi.StringPtrInput `pulumi:"identityId"`
}

func (ACRAccessTokenSpecAuthManagedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthManagedIdentity)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthManagedIdentityArgs) ToACRAccessTokenSpecAuthManagedIdentityOutput() ACRAccessTokenSpecAuthManagedIdentityOutput {
	return i.ToACRAccessTokenSpecAuthManagedIdentityOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthManagedIdentityArgs) ToACRAccessTokenSpecAuthManagedIdentityOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthManagedIdentityOutput)
}

func (i ACRAccessTokenSpecAuthManagedIdentityArgs) ToACRAccessTokenSpecAuthManagedIdentityPtrOutput() ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return i.ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthManagedIdentityArgs) ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthManagedIdentityOutput).ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthManagedIdentityPtrInput is an input type that accepts ACRAccessTokenSpecAuthManagedIdentityArgs, ACRAccessTokenSpecAuthManagedIdentityPtr and ACRAccessTokenSpecAuthManagedIdentityPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthManagedIdentityPtrInput` via:
//
//	        ACRAccessTokenSpecAuthManagedIdentityArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthManagedIdentityPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthManagedIdentityPtrOutput() ACRAccessTokenSpecAuthManagedIdentityPtrOutput
	ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthManagedIdentityPtrOutput
}

type acraccessTokenSpecAuthManagedIdentityPtrType ACRAccessTokenSpecAuthManagedIdentityArgs

func ACRAccessTokenSpecAuthManagedIdentityPtr(v *ACRAccessTokenSpecAuthManagedIdentityArgs) ACRAccessTokenSpecAuthManagedIdentityPtrInput {
	return (*acraccessTokenSpecAuthManagedIdentityPtrType)(v)
}

func (*acraccessTokenSpecAuthManagedIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthManagedIdentity)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthManagedIdentityPtrType) ToACRAccessTokenSpecAuthManagedIdentityPtrOutput() ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return i.ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthManagedIdentityPtrType) ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthManagedIdentityPtrOutput)
}

// ManagedIdentity uses Azure Managed Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthManagedIdentityOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthManagedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthManagedIdentity)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthManagedIdentityOutput) ToACRAccessTokenSpecAuthManagedIdentityOutput() ACRAccessTokenSpecAuthManagedIdentityOutput {
	return o
}

func (o ACRAccessTokenSpecAuthManagedIdentityOutput) ToACRAccessTokenSpecAuthManagedIdentityOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityOutput {
	return o
}

func (o ACRAccessTokenSpecAuthManagedIdentityOutput) ToACRAccessTokenSpecAuthManagedIdentityPtrOutput() ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return o.ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthManagedIdentityOutput) ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthManagedIdentity) *ACRAccessTokenSpecAuthManagedIdentity {
		return &v
	}).(ACRAccessTokenSpecAuthManagedIdentityPtrOutput)
}

// If multiple Managed Identity is assigned to the pod, you can select the one to be used
func (o ACRAccessTokenSpecAuthManagedIdentityOutput) IdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthManagedIdentity) *string { return v.IdentityId }).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecAuthManagedIdentityPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthManagedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthManagedIdentity)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthManagedIdentityPtrOutput) ToACRAccessTokenSpecAuthManagedIdentityPtrOutput() ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthManagedIdentityPtrOutput) ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthManagedIdentityPtrOutput) Elem() ACRAccessTokenSpecAuthManagedIdentityOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthManagedIdentity) ACRAccessTokenSpecAuthManagedIdentity {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthManagedIdentity
		return ret
	}).(ACRAccessTokenSpecAuthManagedIdentityOutput)
}

// If multiple Managed Identity is assigned to the pod, you can select the one to be used
func (o ACRAccessTokenSpecAuthManagedIdentityPtrOutput) IdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.IdentityId
	}).(pulumi.StringPtrOutput)
}

// ManagedIdentity uses Azure Managed Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthManagedIdentityPatch struct {
	// If multiple Managed Identity is assigned to the pod, you can select the one to be used
	IdentityId *string `pulumi:"identityId"`
}

// ACRAccessTokenSpecAuthManagedIdentityPatchInput is an input type that accepts ACRAccessTokenSpecAuthManagedIdentityPatchArgs and ACRAccessTokenSpecAuthManagedIdentityPatchOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthManagedIdentityPatchInput` via:
//
//	ACRAccessTokenSpecAuthManagedIdentityPatchArgs{...}
type ACRAccessTokenSpecAuthManagedIdentityPatchInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthManagedIdentityPatchOutput() ACRAccessTokenSpecAuthManagedIdentityPatchOutput
	ToACRAccessTokenSpecAuthManagedIdentityPatchOutputWithContext(context.Context) ACRAccessTokenSpecAuthManagedIdentityPatchOutput
}

// ManagedIdentity uses Azure Managed Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthManagedIdentityPatchArgs struct {
	// If multiple Managed Identity is assigned to the pod, you can select the one to be used
	IdentityId pulumi.StringPtrInput `pulumi:"identityId"`
}

func (ACRAccessTokenSpecAuthManagedIdentityPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthManagedIdentityPatch)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthManagedIdentityPatchArgs) ToACRAccessTokenSpecAuthManagedIdentityPatchOutput() ACRAccessTokenSpecAuthManagedIdentityPatchOutput {
	return i.ToACRAccessTokenSpecAuthManagedIdentityPatchOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthManagedIdentityPatchArgs) ToACRAccessTokenSpecAuthManagedIdentityPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthManagedIdentityPatchOutput)
}

func (i ACRAccessTokenSpecAuthManagedIdentityPatchArgs) ToACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput() ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthManagedIdentityPatchPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthManagedIdentityPatchArgs) ToACRAccessTokenSpecAuthManagedIdentityPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthManagedIdentityPatchOutput).ToACRAccessTokenSpecAuthManagedIdentityPatchPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthManagedIdentityPatchPtrInput is an input type that accepts ACRAccessTokenSpecAuthManagedIdentityPatchArgs, ACRAccessTokenSpecAuthManagedIdentityPatchPtr and ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthManagedIdentityPatchPtrInput` via:
//
//	        ACRAccessTokenSpecAuthManagedIdentityPatchArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthManagedIdentityPatchPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput() ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput
	ToACRAccessTokenSpecAuthManagedIdentityPatchPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput
}

type acraccessTokenSpecAuthManagedIdentityPatchPtrType ACRAccessTokenSpecAuthManagedIdentityPatchArgs

func ACRAccessTokenSpecAuthManagedIdentityPatchPtr(v *ACRAccessTokenSpecAuthManagedIdentityPatchArgs) ACRAccessTokenSpecAuthManagedIdentityPatchPtrInput {
	return (*acraccessTokenSpecAuthManagedIdentityPatchPtrType)(v)
}

func (*acraccessTokenSpecAuthManagedIdentityPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthManagedIdentityPatch)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthManagedIdentityPatchPtrType) ToACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput() ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthManagedIdentityPatchPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthManagedIdentityPatchPtrType) ToACRAccessTokenSpecAuthManagedIdentityPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput)
}

// ManagedIdentity uses Azure Managed Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthManagedIdentityPatchOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthManagedIdentityPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthManagedIdentityPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthManagedIdentityPatchOutput) ToACRAccessTokenSpecAuthManagedIdentityPatchOutput() ACRAccessTokenSpecAuthManagedIdentityPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthManagedIdentityPatchOutput) ToACRAccessTokenSpecAuthManagedIdentityPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthManagedIdentityPatchOutput) ToACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput() ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput {
	return o.ToACRAccessTokenSpecAuthManagedIdentityPatchPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthManagedIdentityPatchOutput) ToACRAccessTokenSpecAuthManagedIdentityPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthManagedIdentityPatch) *ACRAccessTokenSpecAuthManagedIdentityPatch {
		return &v
	}).(ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput)
}

// If multiple Managed Identity is assigned to the pod, you can select the one to be used
func (o ACRAccessTokenSpecAuthManagedIdentityPatchOutput) IdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthManagedIdentityPatch) *string { return v.IdentityId }).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthManagedIdentityPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput) ToACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput() ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput) ToACRAccessTokenSpecAuthManagedIdentityPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput) Elem() ACRAccessTokenSpecAuthManagedIdentityPatchOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthManagedIdentityPatch) ACRAccessTokenSpecAuthManagedIdentityPatch {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthManagedIdentityPatch
		return ret
	}).(ACRAccessTokenSpecAuthManagedIdentityPatchOutput)
}

// If multiple Managed Identity is assigned to the pod, you can select the one to be used
func (o ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput) IdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthManagedIdentityPatch) *string {
		if v == nil {
			return nil
		}
		return v.IdentityId
	}).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecAuthPatch struct {
	ManagedIdentity  *ACRAccessTokenSpecAuthManagedIdentityPatch  `pulumi:"managedIdentity"`
	ServicePrincipal *ACRAccessTokenSpecAuthServicePrincipalPatch `pulumi:"servicePrincipal"`
	WorkloadIdentity *ACRAccessTokenSpecAuthWorkloadIdentityPatch `pulumi:"workloadIdentity"`
}

// ACRAccessTokenSpecAuthPatchInput is an input type that accepts ACRAccessTokenSpecAuthPatchArgs and ACRAccessTokenSpecAuthPatchOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthPatchInput` via:
//
//	ACRAccessTokenSpecAuthPatchArgs{...}
type ACRAccessTokenSpecAuthPatchInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthPatchOutput() ACRAccessTokenSpecAuthPatchOutput
	ToACRAccessTokenSpecAuthPatchOutputWithContext(context.Context) ACRAccessTokenSpecAuthPatchOutput
}

type ACRAccessTokenSpecAuthPatchArgs struct {
	ManagedIdentity  ACRAccessTokenSpecAuthManagedIdentityPatchPtrInput  `pulumi:"managedIdentity"`
	ServicePrincipal ACRAccessTokenSpecAuthServicePrincipalPatchPtrInput `pulumi:"servicePrincipal"`
	WorkloadIdentity ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrInput `pulumi:"workloadIdentity"`
}

func (ACRAccessTokenSpecAuthPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthPatch)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthPatchArgs) ToACRAccessTokenSpecAuthPatchOutput() ACRAccessTokenSpecAuthPatchOutput {
	return i.ToACRAccessTokenSpecAuthPatchOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthPatchArgs) ToACRAccessTokenSpecAuthPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthPatchOutput)
}

func (i ACRAccessTokenSpecAuthPatchArgs) ToACRAccessTokenSpecAuthPatchPtrOutput() ACRAccessTokenSpecAuthPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthPatchPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthPatchArgs) ToACRAccessTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthPatchOutput).ToACRAccessTokenSpecAuthPatchPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthPatchPtrInput is an input type that accepts ACRAccessTokenSpecAuthPatchArgs, ACRAccessTokenSpecAuthPatchPtr and ACRAccessTokenSpecAuthPatchPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthPatchPtrInput` via:
//
//	        ACRAccessTokenSpecAuthPatchArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthPatchPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthPatchPtrOutput() ACRAccessTokenSpecAuthPatchPtrOutput
	ToACRAccessTokenSpecAuthPatchPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthPatchPtrOutput
}

type acraccessTokenSpecAuthPatchPtrType ACRAccessTokenSpecAuthPatchArgs

func ACRAccessTokenSpecAuthPatchPtr(v *ACRAccessTokenSpecAuthPatchArgs) ACRAccessTokenSpecAuthPatchPtrInput {
	return (*acraccessTokenSpecAuthPatchPtrType)(v)
}

func (*acraccessTokenSpecAuthPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthPatch)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthPatchPtrType) ToACRAccessTokenSpecAuthPatchPtrOutput() ACRAccessTokenSpecAuthPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthPatchPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthPatchPtrType) ToACRAccessTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthPatchPtrOutput)
}

type ACRAccessTokenSpecAuthPatchOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthPatchOutput) ToACRAccessTokenSpecAuthPatchOutput() ACRAccessTokenSpecAuthPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthPatchOutput) ToACRAccessTokenSpecAuthPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthPatchOutput) ToACRAccessTokenSpecAuthPatchPtrOutput() ACRAccessTokenSpecAuthPatchPtrOutput {
	return o.ToACRAccessTokenSpecAuthPatchPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthPatchOutput) ToACRAccessTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthPatch) *ACRAccessTokenSpecAuthPatch {
		return &v
	}).(ACRAccessTokenSpecAuthPatchPtrOutput)
}

func (o ACRAccessTokenSpecAuthPatchOutput) ManagedIdentity() ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthPatch) *ACRAccessTokenSpecAuthManagedIdentityPatch {
		return v.ManagedIdentity
	}).(ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput)
}

func (o ACRAccessTokenSpecAuthPatchOutput) ServicePrincipal() ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthPatch) *ACRAccessTokenSpecAuthServicePrincipalPatch {
		return v.ServicePrincipal
	}).(ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput)
}

func (o ACRAccessTokenSpecAuthPatchOutput) WorkloadIdentity() ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthPatch) *ACRAccessTokenSpecAuthWorkloadIdentityPatch {
		return v.WorkloadIdentity
	}).(ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput)
}

type ACRAccessTokenSpecAuthPatchPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthPatchPtrOutput) ToACRAccessTokenSpecAuthPatchPtrOutput() ACRAccessTokenSpecAuthPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthPatchPtrOutput) ToACRAccessTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthPatchPtrOutput) Elem() ACRAccessTokenSpecAuthPatchOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthPatch) ACRAccessTokenSpecAuthPatch {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthPatch
		return ret
	}).(ACRAccessTokenSpecAuthPatchOutput)
}

func (o ACRAccessTokenSpecAuthPatchPtrOutput) ManagedIdentity() ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthPatch) *ACRAccessTokenSpecAuthManagedIdentityPatch {
		if v == nil {
			return nil
		}
		return v.ManagedIdentity
	}).(ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput)
}

func (o ACRAccessTokenSpecAuthPatchPtrOutput) ServicePrincipal() ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthPatch) *ACRAccessTokenSpecAuthServicePrincipalPatch {
		if v == nil {
			return nil
		}
		return v.ServicePrincipal
	}).(ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput)
}

func (o ACRAccessTokenSpecAuthPatchPtrOutput) WorkloadIdentity() ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthPatch) *ACRAccessTokenSpecAuthWorkloadIdentityPatch {
		if v == nil {
			return nil
		}
		return v.WorkloadIdentity
	}).(ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput)
}

// ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.
type ACRAccessTokenSpecAuthServicePrincipal struct {
	SecretRef *ACRAccessTokenSpecAuthServicePrincipalSecretRef `pulumi:"secretRef"`
}

// ACRAccessTokenSpecAuthServicePrincipalInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalArgs and ACRAccessTokenSpecAuthServicePrincipalOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalInput` via:
//
//	ACRAccessTokenSpecAuthServicePrincipalArgs{...}
type ACRAccessTokenSpecAuthServicePrincipalInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalOutput() ACRAccessTokenSpecAuthServicePrincipalOutput
	ToACRAccessTokenSpecAuthServicePrincipalOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalOutput
}

// ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.
type ACRAccessTokenSpecAuthServicePrincipalArgs struct {
	SecretRef ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrInput `pulumi:"secretRef"`
}

func (ACRAccessTokenSpecAuthServicePrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipal)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthServicePrincipalArgs) ToACRAccessTokenSpecAuthServicePrincipalOutput() ACRAccessTokenSpecAuthServicePrincipalOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalArgs) ToACRAccessTokenSpecAuthServicePrincipalOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalOutput)
}

func (i ACRAccessTokenSpecAuthServicePrincipalArgs) ToACRAccessTokenSpecAuthServicePrincipalPtrOutput() ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalArgs) ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalOutput).ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthServicePrincipalPtrInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalArgs, ACRAccessTokenSpecAuthServicePrincipalPtr and ACRAccessTokenSpecAuthServicePrincipalPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalPtrInput` via:
//
//	        ACRAccessTokenSpecAuthServicePrincipalArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthServicePrincipalPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalPtrOutput() ACRAccessTokenSpecAuthServicePrincipalPtrOutput
	ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalPtrOutput
}

type acraccessTokenSpecAuthServicePrincipalPtrType ACRAccessTokenSpecAuthServicePrincipalArgs

func ACRAccessTokenSpecAuthServicePrincipalPtr(v *ACRAccessTokenSpecAuthServicePrincipalArgs) ACRAccessTokenSpecAuthServicePrincipalPtrInput {
	return (*acraccessTokenSpecAuthServicePrincipalPtrType)(v)
}

func (*acraccessTokenSpecAuthServicePrincipalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipal)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthServicePrincipalPtrType) ToACRAccessTokenSpecAuthServicePrincipalPtrOutput() ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthServicePrincipalPtrType) ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalPtrOutput)
}

// ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.
type ACRAccessTokenSpecAuthServicePrincipalOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipal)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalOutput) ToACRAccessTokenSpecAuthServicePrincipalOutput() ACRAccessTokenSpecAuthServicePrincipalOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalOutput) ToACRAccessTokenSpecAuthServicePrincipalOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalOutput) ToACRAccessTokenSpecAuthServicePrincipalPtrOutput() ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return o.ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthServicePrincipalOutput) ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthServicePrincipal) *ACRAccessTokenSpecAuthServicePrincipal {
		return &v
	}).(ACRAccessTokenSpecAuthServicePrincipalPtrOutput)
}

func (o ACRAccessTokenSpecAuthServicePrincipalOutput) SecretRef() ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipal) *ACRAccessTokenSpecAuthServicePrincipalSecretRef {
		return v.SecretRef
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput)
}

type ACRAccessTokenSpecAuthServicePrincipalPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipal)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalPtrOutput() ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalPtrOutput) Elem() ACRAccessTokenSpecAuthServicePrincipalOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipal) ACRAccessTokenSpecAuthServicePrincipal {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthServicePrincipal
		return ret
	}).(ACRAccessTokenSpecAuthServicePrincipalOutput)
}

func (o ACRAccessTokenSpecAuthServicePrincipalPtrOutput) SecretRef() ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipal) *ACRAccessTokenSpecAuthServicePrincipalSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput)
}

// ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.
type ACRAccessTokenSpecAuthServicePrincipalPatch struct {
	SecretRef *ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch `pulumi:"secretRef"`
}

// ACRAccessTokenSpecAuthServicePrincipalPatchInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalPatchArgs and ACRAccessTokenSpecAuthServicePrincipalPatchOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalPatchInput` via:
//
//	ACRAccessTokenSpecAuthServicePrincipalPatchArgs{...}
type ACRAccessTokenSpecAuthServicePrincipalPatchInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalPatchOutput() ACRAccessTokenSpecAuthServicePrincipalPatchOutput
	ToACRAccessTokenSpecAuthServicePrincipalPatchOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalPatchOutput
}

// ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.
type ACRAccessTokenSpecAuthServicePrincipalPatchArgs struct {
	SecretRef ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrInput `pulumi:"secretRef"`
}

func (ACRAccessTokenSpecAuthServicePrincipalPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalPatch)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthServicePrincipalPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalPatchOutput() ACRAccessTokenSpecAuthServicePrincipalPatchOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalPatchOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalPatchOutput)
}

func (i ACRAccessTokenSpecAuthServicePrincipalPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalPatchPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalPatchOutput).ToACRAccessTokenSpecAuthServicePrincipalPatchPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthServicePrincipalPatchPtrInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalPatchArgs, ACRAccessTokenSpecAuthServicePrincipalPatchPtr and ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalPatchPtrInput` via:
//
//	        ACRAccessTokenSpecAuthServicePrincipalPatchArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthServicePrincipalPatchPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput
	ToACRAccessTokenSpecAuthServicePrincipalPatchPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput
}

type acraccessTokenSpecAuthServicePrincipalPatchPtrType ACRAccessTokenSpecAuthServicePrincipalPatchArgs

func ACRAccessTokenSpecAuthServicePrincipalPatchPtr(v *ACRAccessTokenSpecAuthServicePrincipalPatchArgs) ACRAccessTokenSpecAuthServicePrincipalPatchPtrInput {
	return (*acraccessTokenSpecAuthServicePrincipalPatchPtrType)(v)
}

func (*acraccessTokenSpecAuthServicePrincipalPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalPatch)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthServicePrincipalPatchPtrType) ToACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalPatchPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthServicePrincipalPatchPtrType) ToACRAccessTokenSpecAuthServicePrincipalPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput)
}

// ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.
type ACRAccessTokenSpecAuthServicePrincipalPatchOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalPatchOutput() ACRAccessTokenSpecAuthServicePrincipalPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput {
	return o.ToACRAccessTokenSpecAuthServicePrincipalPatchPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthServicePrincipalPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthServicePrincipalPatch) *ACRAccessTokenSpecAuthServicePrincipalPatch {
		return &v
	}).(ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput)
}

func (o ACRAccessTokenSpecAuthServicePrincipalPatchOutput) SecretRef() ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalPatch) *ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch {
		return v.SecretRef
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput)
}

type ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput) Elem() ACRAccessTokenSpecAuthServicePrincipalPatchOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalPatch) ACRAccessTokenSpecAuthServicePrincipalPatch {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthServicePrincipalPatch
		return ret
	}).(ACRAccessTokenSpecAuthServicePrincipalPatchOutput)
}

func (o ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput) SecretRef() ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalPatch) *ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput)
}

// Configuration used to authenticate with Azure using static
// credentials stored in a Kind=Secret.
type ACRAccessTokenSpecAuthServicePrincipalSecretRef struct {
	ClientId     *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId     `pulumi:"clientId"`
	ClientSecret *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret `pulumi:"clientSecret"`
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs and ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefInput` via:
//
//	ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs{...}
type ACRAccessTokenSpecAuthServicePrincipalSecretRefInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput
}

// Configuration used to authenticate with Azure using static
// credentials stored in a Kind=Secret.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs struct {
	ClientId     ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrInput     `pulumi:"clientId"`
	ClientSecret ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrInput `pulumi:"clientSecret"`
}

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRef)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput)
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput).ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs, ACRAccessTokenSpecAuthServicePrincipalSecretRefPtr and ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrInput` via:
//
//	        ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput
}

type acraccessTokenSpecAuthServicePrincipalSecretRefPtrType ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs

func ACRAccessTokenSpecAuthServicePrincipalSecretRefPtr(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs) ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrInput {
	return (*acraccessTokenSpecAuthServicePrincipalSecretRefPtrType)(v)
}

func (*acraccessTokenSpecAuthServicePrincipalSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRef)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput)
}

// Configuration used to authenticate with Azure using static
// credentials stored in a Kind=Secret.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRef)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return o.ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthServicePrincipalSecretRef) *ACRAccessTokenSpecAuthServicePrincipalSecretRef {
		return &v
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput)
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput) ClientId() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRef) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId {
		return v.ClientId
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput)
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput) ClientSecret() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRef) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret {
		return v.ClientSecret
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput)
}

type ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRef)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput) Elem() ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRef) ACRAccessTokenSpecAuthServicePrincipalSecretRef {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthServicePrincipalSecretRef
		return ret
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput)
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput) ClientId() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRef) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput)
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput) ClientSecret() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRef) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput)
}

// The Azure clientId of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs and ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdInput` via:
//
//	ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs{...}
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput
}

// The Azure clientId of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput)
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput).ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs, ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtr and ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrInput` via:
//
//	        ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput
}

type acraccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrType ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs

func ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtr(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrInput {
	return (*acraccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrType)(v)
}

func (*acraccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput)
}

// The Azure clientId of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return o.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId {
		return &v
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput) Elem() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId
		return ret
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The Azure clientId of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchArgs and ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchInput` via:
//
//	ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchArgs{...}
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput
}

// The Azure clientId of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput)
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput).ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchArgs, ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtr and ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrInput` via:
//
//	        ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput
}

type acraccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrType ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchArgs

func ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtr(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchArgs) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrInput {
	return (*acraccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrType)(v)
}

func (*acraccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput)
}

// The Azure clientId of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput {
	return o.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch {
		return &v
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput) Elem() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch
		return ret
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The Azure ClientSecret of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs and ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretInput` via:
//
//	ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs{...}
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput
}

// The Azure ClientSecret of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput)
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput).ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs, ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtr and ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrInput` via:
//
//	        ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput
}

type acraccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrType ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs

func ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtr(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrInput {
	return (*acraccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrType)(v)
}

func (*acraccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput)
}

// The Azure ClientSecret of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return o.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret {
		return &v
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput) Elem() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret
		return ret
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The Azure ClientSecret of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchArgs and ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchInput` via:
//
//	ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchArgs{...}
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput
}

// The Azure ClientSecret of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput)
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput).ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchArgs, ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtr and ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrInput` via:
//
//	        ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput
}

type acraccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrType ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchArgs

func ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtr(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchArgs) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrInput {
	return (*acraccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrType)(v)
}

func (*acraccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput)
}

// The Azure ClientSecret of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput {
	return o.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch {
		return &v
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput) Elem() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch
		return ret
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Configuration used to authenticate with Azure using static
// credentials stored in a Kind=Secret.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch struct {
	ClientId     *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch     `pulumi:"clientId"`
	ClientSecret *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch `pulumi:"clientSecret"`
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchArgs and ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchInput` via:
//
//	ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchArgs{...}
type ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput
}

// Configuration used to authenticate with Azure using static
// credentials stored in a Kind=Secret.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchArgs struct {
	ClientId     ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrInput     `pulumi:"clientId"`
	ClientSecret ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrInput `pulumi:"clientSecret"`
}

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput)
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput).ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchArgs, ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtr and ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrInput` via:
//
//	        ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput
}

type acraccessTokenSpecAuthServicePrincipalSecretRefPatchPtrType ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchArgs

func ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtr(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchArgs) ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrInput {
	return (*acraccessTokenSpecAuthServicePrincipalSecretRefPatchPtrType)(v)
}

func (*acraccessTokenSpecAuthServicePrincipalSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefPatchPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefPatchPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput)
}

// Configuration used to authenticate with Azure using static
// credentials stored in a Kind=Secret.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput {
	return o.ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch) *ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch {
		return &v
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput)
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput) ClientId() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch {
		return v.ClientId
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput)
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput) ClientSecret() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch {
		return v.ClientSecret
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput)
}

type ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput) Elem() ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch) ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch
		return ret
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput)
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput) ClientId() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatch {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput)
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput) ClientSecret() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefPatch) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatch {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput)
}

// WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthWorkloadIdentity struct {
	ServiceAccountRef *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef `pulumi:"serviceAccountRef"`
}

// ACRAccessTokenSpecAuthWorkloadIdentityInput is an input type that accepts ACRAccessTokenSpecAuthWorkloadIdentityArgs and ACRAccessTokenSpecAuthWorkloadIdentityOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthWorkloadIdentityInput` via:
//
//	ACRAccessTokenSpecAuthWorkloadIdentityArgs{...}
type ACRAccessTokenSpecAuthWorkloadIdentityInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthWorkloadIdentityOutput() ACRAccessTokenSpecAuthWorkloadIdentityOutput
	ToACRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(context.Context) ACRAccessTokenSpecAuthWorkloadIdentityOutput
}

// WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthWorkloadIdentityArgs struct {
	ServiceAccountRef ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput `pulumi:"serviceAccountRef"`
}

func (ACRAccessTokenSpecAuthWorkloadIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityArgs) ToACRAccessTokenSpecAuthWorkloadIdentityOutput() ACRAccessTokenSpecAuthWorkloadIdentityOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityArgs) ToACRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityOutput)
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityArgs) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityArgs) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityOutput).ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthWorkloadIdentityPtrInput is an input type that accepts ACRAccessTokenSpecAuthWorkloadIdentityArgs, ACRAccessTokenSpecAuthWorkloadIdentityPtr and ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthWorkloadIdentityPtrInput` via:
//
//	        ACRAccessTokenSpecAuthWorkloadIdentityArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthWorkloadIdentityPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput
	ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput
}

type acraccessTokenSpecAuthWorkloadIdentityPtrType ACRAccessTokenSpecAuthWorkloadIdentityArgs

func ACRAccessTokenSpecAuthWorkloadIdentityPtr(v *ACRAccessTokenSpecAuthWorkloadIdentityArgs) ACRAccessTokenSpecAuthWorkloadIdentityPtrInput {
	return (*acraccessTokenSpecAuthWorkloadIdentityPtrType)(v)
}

func (*acraccessTokenSpecAuthWorkloadIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthWorkloadIdentityPtrType) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthWorkloadIdentityPtrType) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

// WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthWorkloadIdentityOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthWorkloadIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityOutput) ToACRAccessTokenSpecAuthWorkloadIdentityOutput() ACRAccessTokenSpecAuthWorkloadIdentityOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityOutput) ToACRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityOutput) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityOutput) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthWorkloadIdentity) *ACRAccessTokenSpecAuthWorkloadIdentity {
		return &v
	}).(ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityOutput) ServiceAccountRef() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthWorkloadIdentity) *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		return v.ServiceAccountRef
	}).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput)
}

type ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput) Elem() ACRAccessTokenSpecAuthWorkloadIdentityOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentity) ACRAccessTokenSpecAuthWorkloadIdentity {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthWorkloadIdentity
		return ret
	}).(ACRAccessTokenSpecAuthWorkloadIdentityOutput)
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ServiceAccountRef() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentity) *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput)
}

// WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthWorkloadIdentityPatch struct {
	ServiceAccountRef *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch `pulumi:"serviceAccountRef"`
}

// ACRAccessTokenSpecAuthWorkloadIdentityPatchInput is an input type that accepts ACRAccessTokenSpecAuthWorkloadIdentityPatchArgs and ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthWorkloadIdentityPatchInput` via:
//
//	ACRAccessTokenSpecAuthWorkloadIdentityPatchArgs{...}
type ACRAccessTokenSpecAuthWorkloadIdentityPatchInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthWorkloadIdentityPatchOutput() ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput
	ToACRAccessTokenSpecAuthWorkloadIdentityPatchOutputWithContext(context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput
}

// WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthWorkloadIdentityPatchArgs struct {
	ServiceAccountRef ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrInput `pulumi:"serviceAccountRef"`
}

func (ACRAccessTokenSpecAuthWorkloadIdentityPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityPatch)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityPatchArgs) ToACRAccessTokenSpecAuthWorkloadIdentityPatchOutput() ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityPatchOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityPatchArgs) ToACRAccessTokenSpecAuthWorkloadIdentityPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput)
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityPatchArgs) ToACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityPatchArgs) ToACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput).ToACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrInput is an input type that accepts ACRAccessTokenSpecAuthWorkloadIdentityPatchArgs, ACRAccessTokenSpecAuthWorkloadIdentityPatchPtr and ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrInput` via:
//
//	        ACRAccessTokenSpecAuthWorkloadIdentityPatchArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput
	ToACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput
}

type acraccessTokenSpecAuthWorkloadIdentityPatchPtrType ACRAccessTokenSpecAuthWorkloadIdentityPatchArgs

func ACRAccessTokenSpecAuthWorkloadIdentityPatchPtr(v *ACRAccessTokenSpecAuthWorkloadIdentityPatchArgs) ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrInput {
	return (*acraccessTokenSpecAuthWorkloadIdentityPatchPtrType)(v)
}

func (*acraccessTokenSpecAuthWorkloadIdentityPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthWorkloadIdentityPatch)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthWorkloadIdentityPatchPtrType) ToACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthWorkloadIdentityPatchPtrType) ToACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput)
}

// WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput) ToACRAccessTokenSpecAuthWorkloadIdentityPatchOutput() ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput) ToACRAccessTokenSpecAuthWorkloadIdentityPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput) ToACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return o.ToACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput) ToACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthWorkloadIdentityPatch) *ACRAccessTokenSpecAuthWorkloadIdentityPatch {
		return &v
	}).(ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput)
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput) ServiceAccountRef() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthWorkloadIdentityPatch) *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch {
		return v.ServiceAccountRef
	}).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput)
}

type ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthWorkloadIdentityPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput) ToACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput) ToACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput) Elem() ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentityPatch) ACRAccessTokenSpecAuthWorkloadIdentityPatch {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthWorkloadIdentityPatch
		return ret
	}).(ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput)
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput) ServiceAccountRef() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentityPatch) *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput)
}

// ServiceAccountRef specified the service account
// that should be used when authenticating with WorkloadIdentity.
type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput is an input type that accepts ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs and ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput` via:
//
//	ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{...}
type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput
	ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput
}

// ServiceAccountRef specified the service account
// that should be used when authenticating with WorkloadIdentity.
type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput)
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput).ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput is an input type that accepts ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs, ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtr and ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput` via:
//
//	        ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput
	ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput
}

type acraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs

func ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtr(v *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput {
	return (*acraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType)(v)
}

func (*acraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput)
}

// ServiceAccountRef specified the service account
// that should be used when authenticating with WorkloadIdentity.
type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o.ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		return &v
	}).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Elem() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef
		return ret
	}).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ServiceAccountRef specified the service account
// that should be used when authenticating with WorkloadIdentity.
type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchInput is an input type that accepts ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs and ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchInput` via:
//
//	ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs{...}
type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput
	ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutputWithContext(context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput
}

// ServiceAccountRef specified the service account
// that should be used when authenticating with WorkloadIdentity.
type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput)
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput).ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrInput is an input type that accepts ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs, ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtr and ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrInput` via:
//
//	        ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput
	ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput
}

type acraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrType ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs

func ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtr(v *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrInput {
	return (*acraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrType)(v)
}

func (*acraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrType) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrType) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput)
}

// ServiceAccountRef specified the service account
// that should be used when authenticating with WorkloadIdentity.
type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return o.ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch {
		return &v
	}).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput) Elem() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch
		return ret
	}).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ACRAccessTokenSpec defines how to generate the access token
// e.g. how to authenticate and which registry to use.
// see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview
type ACRAccessTokenSpecPatch struct {
	Auth *ACRAccessTokenSpecAuthPatch `pulumi:"auth"`
	// EnvironmentType specifies the Azure cloud environment endpoints to use for
	// connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint.
	// The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
	// PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
	EnvironmentType *string `pulumi:"environmentType"`
	// the domain name of the ACR registry
	// e.g. foobarexample.azurecr.io
	Registry *string `pulumi:"registry"`
	// Define the scope for the access token, e.g. pull/push access for a repository.
	// if not provided it will return a refresh token that has full scope.
	// Note: you need to pin it down to the repository level, there is no wildcard available.
	//
	// examples:
	// repository:my-repository:pull,push
	// repository:my-repository:pull
	//
	// see docs for details: https://docs.docker.com/registry/spec/auth/scope/
	Scope *string `pulumi:"scope"`
	// TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.
	TenantId *string `pulumi:"tenantId"`
}

// ACRAccessTokenSpecPatchInput is an input type that accepts ACRAccessTokenSpecPatchArgs and ACRAccessTokenSpecPatchOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecPatchInput` via:
//
//	ACRAccessTokenSpecPatchArgs{...}
type ACRAccessTokenSpecPatchInput interface {
	pulumi.Input

	ToACRAccessTokenSpecPatchOutput() ACRAccessTokenSpecPatchOutput
	ToACRAccessTokenSpecPatchOutputWithContext(context.Context) ACRAccessTokenSpecPatchOutput
}

// ACRAccessTokenSpec defines how to generate the access token
// e.g. how to authenticate and which registry to use.
// see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview
type ACRAccessTokenSpecPatchArgs struct {
	Auth ACRAccessTokenSpecAuthPatchPtrInput `pulumi:"auth"`
	// EnvironmentType specifies the Azure cloud environment endpoints to use for
	// connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint.
	// The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
	// PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
	EnvironmentType pulumi.StringPtrInput `pulumi:"environmentType"`
	// the domain name of the ACR registry
	// e.g. foobarexample.azurecr.io
	Registry pulumi.StringPtrInput `pulumi:"registry"`
	// Define the scope for the access token, e.g. pull/push access for a repository.
	// if not provided it will return a refresh token that has full scope.
	// Note: you need to pin it down to the repository level, there is no wildcard available.
	//
	// examples:
	// repository:my-repository:pull,push
	// repository:my-repository:pull
	//
	// see docs for details: https://docs.docker.com/registry/spec/auth/scope/
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (ACRAccessTokenSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecPatch)(nil)).Elem()
}

func (i ACRAccessTokenSpecPatchArgs) ToACRAccessTokenSpecPatchOutput() ACRAccessTokenSpecPatchOutput {
	return i.ToACRAccessTokenSpecPatchOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecPatchArgs) ToACRAccessTokenSpecPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecPatchOutput)
}

func (i ACRAccessTokenSpecPatchArgs) ToACRAccessTokenSpecPatchPtrOutput() ACRAccessTokenSpecPatchPtrOutput {
	return i.ToACRAccessTokenSpecPatchPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecPatchArgs) ToACRAccessTokenSpecPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecPatchOutput).ToACRAccessTokenSpecPatchPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecPatchPtrInput is an input type that accepts ACRAccessTokenSpecPatchArgs, ACRAccessTokenSpecPatchPtr and ACRAccessTokenSpecPatchPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecPatchPtrInput` via:
//
//	        ACRAccessTokenSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecPatchPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecPatchPtrOutput() ACRAccessTokenSpecPatchPtrOutput
	ToACRAccessTokenSpecPatchPtrOutputWithContext(context.Context) ACRAccessTokenSpecPatchPtrOutput
}

type acraccessTokenSpecPatchPtrType ACRAccessTokenSpecPatchArgs

func ACRAccessTokenSpecPatchPtr(v *ACRAccessTokenSpecPatchArgs) ACRAccessTokenSpecPatchPtrInput {
	return (*acraccessTokenSpecPatchPtrType)(v)
}

func (*acraccessTokenSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecPatch)(nil)).Elem()
}

func (i *acraccessTokenSpecPatchPtrType) ToACRAccessTokenSpecPatchPtrOutput() ACRAccessTokenSpecPatchPtrOutput {
	return i.ToACRAccessTokenSpecPatchPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecPatchPtrType) ToACRAccessTokenSpecPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecPatchPtrOutput)
}

// ACRAccessTokenSpec defines how to generate the access token
// e.g. how to authenticate and which registry to use.
// see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview
type ACRAccessTokenSpecPatchOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecPatchOutput) ToACRAccessTokenSpecPatchOutput() ACRAccessTokenSpecPatchOutput {
	return o
}

func (o ACRAccessTokenSpecPatchOutput) ToACRAccessTokenSpecPatchOutputWithContext(ctx context.Context) ACRAccessTokenSpecPatchOutput {
	return o
}

func (o ACRAccessTokenSpecPatchOutput) ToACRAccessTokenSpecPatchPtrOutput() ACRAccessTokenSpecPatchPtrOutput {
	return o.ToACRAccessTokenSpecPatchPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecPatchOutput) ToACRAccessTokenSpecPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecPatch) *ACRAccessTokenSpecPatch {
		return &v
	}).(ACRAccessTokenSpecPatchPtrOutput)
}

func (o ACRAccessTokenSpecPatchOutput) Auth() ACRAccessTokenSpecAuthPatchPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecPatch) *ACRAccessTokenSpecAuthPatch { return v.Auth }).(ACRAccessTokenSpecAuthPatchPtrOutput)
}

// EnvironmentType specifies the Azure cloud environment endpoints to use for
// connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint.
// The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
// PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
func (o ACRAccessTokenSpecPatchOutput) EnvironmentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecPatch) *string { return v.EnvironmentType }).(pulumi.StringPtrOutput)
}

// the domain name of the ACR registry
// e.g. foobarexample.azurecr.io
func (o ACRAccessTokenSpecPatchOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecPatch) *string { return v.Registry }).(pulumi.StringPtrOutput)
}

// Define the scope for the access token, e.g. pull/push access for a repository.
// if not provided it will return a refresh token that has full scope.
// Note: you need to pin it down to the repository level, there is no wildcard available.
//
// examples:
// repository:my-repository:pull,push
// repository:my-repository:pull
//
// see docs for details: https://docs.docker.com/registry/spec/auth/scope/
func (o ACRAccessTokenSpecPatchOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecPatch) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.
func (o ACRAccessTokenSpecPatchOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecPatch) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecPatch)(nil)).Elem()
}

func (o ACRAccessTokenSpecPatchPtrOutput) ToACRAccessTokenSpecPatchPtrOutput() ACRAccessTokenSpecPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecPatchPtrOutput) ToACRAccessTokenSpecPatchPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecPatchPtrOutput {
	return o
}

func (o ACRAccessTokenSpecPatchPtrOutput) Elem() ACRAccessTokenSpecPatchOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecPatch) ACRAccessTokenSpecPatch {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecPatch
		return ret
	}).(ACRAccessTokenSpecPatchOutput)
}

func (o ACRAccessTokenSpecPatchPtrOutput) Auth() ACRAccessTokenSpecAuthPatchPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecPatch) *ACRAccessTokenSpecAuthPatch {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ACRAccessTokenSpecAuthPatchPtrOutput)
}

// EnvironmentType specifies the Azure cloud environment endpoints to use for
// connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint.
// The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
// PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
func (o ACRAccessTokenSpecPatchPtrOutput) EnvironmentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.EnvironmentType
	}).(pulumi.StringPtrOutput)
}

// the domain name of the ACR registry
// e.g. foobarexample.azurecr.io
func (o ACRAccessTokenSpecPatchPtrOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Registry
	}).(pulumi.StringPtrOutput)
}

// Define the scope for the access token, e.g. pull/push access for a repository.
// if not provided it will return a refresh token that has full scope.
// Note: you need to pin it down to the repository level, there is no wildcard available.
//
// examples:
// repository:my-repository:pull,push
// repository:my-repository:pull
//
// see docs for details: https://docs.docker.com/registry/spec/auth/scope/
func (o ACRAccessTokenSpecPatchPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.
func (o ACRAccessTokenSpecPatchPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// ECRAuthorizationTokenSpec uses the GetAuthorizationToken API to retrieve an
// authorization token.
// The authorization token is valid for 12 hours.
// The authorizationToken returned is a base64 encoded string that can be decoded
// and used in a docker login command to authenticate to a registry.
// For more information, see Registry authentication (https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth) in the Amazon Elastic Container Registry User Guide.
type ECRAuthorizationTokenType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta         `pulumi:"metadata"`
	Spec     *ECRAuthorizationTokenSpec `pulumi:"spec"`
}

// ECRAuthorizationTokenTypeInput is an input type that accepts ECRAuthorizationTokenTypeArgs and ECRAuthorizationTokenTypeOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenTypeInput` via:
//
//	ECRAuthorizationTokenTypeArgs{...}
type ECRAuthorizationTokenTypeInput interface {
	pulumi.Input

	ToECRAuthorizationTokenTypeOutput() ECRAuthorizationTokenTypeOutput
	ToECRAuthorizationTokenTypeOutputWithContext(context.Context) ECRAuthorizationTokenTypeOutput
}

// ECRAuthorizationTokenSpec uses the GetAuthorizationToken API to retrieve an
// authorization token.
// The authorization token is valid for 12 hours.
// The authorizationToken returned is a base64 encoded string that can be decoded
// and used in a docker login command to authenticate to a registry.
// For more information, see Registry authentication (https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth) in the Amazon Elastic Container Registry User Guide.
type ECRAuthorizationTokenTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput         `pulumi:"metadata"`
	Spec     ECRAuthorizationTokenSpecPtrInput `pulumi:"spec"`
}

func (ECRAuthorizationTokenTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenType)(nil)).Elem()
}

func (i ECRAuthorizationTokenTypeArgs) ToECRAuthorizationTokenTypeOutput() ECRAuthorizationTokenTypeOutput {
	return i.ToECRAuthorizationTokenTypeOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenTypeArgs) ToECRAuthorizationTokenTypeOutputWithContext(ctx context.Context) ECRAuthorizationTokenTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenTypeOutput)
}

// ECRAuthorizationTokenTypeArrayInput is an input type that accepts ECRAuthorizationTokenTypeArray and ECRAuthorizationTokenTypeArrayOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenTypeArrayInput` via:
//
//	ECRAuthorizationTokenTypeArray{ ECRAuthorizationTokenTypeArgs{...} }
type ECRAuthorizationTokenTypeArrayInput interface {
	pulumi.Input

	ToECRAuthorizationTokenTypeArrayOutput() ECRAuthorizationTokenTypeArrayOutput
	ToECRAuthorizationTokenTypeArrayOutputWithContext(context.Context) ECRAuthorizationTokenTypeArrayOutput
}

type ECRAuthorizationTokenTypeArray []ECRAuthorizationTokenTypeInput

func (ECRAuthorizationTokenTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECRAuthorizationTokenType)(nil)).Elem()
}

func (i ECRAuthorizationTokenTypeArray) ToECRAuthorizationTokenTypeArrayOutput() ECRAuthorizationTokenTypeArrayOutput {
	return i.ToECRAuthorizationTokenTypeArrayOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenTypeArray) ToECRAuthorizationTokenTypeArrayOutputWithContext(ctx context.Context) ECRAuthorizationTokenTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenTypeArrayOutput)
}

// ECRAuthorizationTokenSpec uses the GetAuthorizationToken API to retrieve an
// authorization token.
// The authorization token is valid for 12 hours.
// The authorizationToken returned is a base64 encoded string that can be decoded
// and used in a docker login command to authenticate to a registry.
// For more information, see Registry authentication (https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth) in the Amazon Elastic Container Registry User Guide.
type ECRAuthorizationTokenTypeOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenType)(nil)).Elem()
}

func (o ECRAuthorizationTokenTypeOutput) ToECRAuthorizationTokenTypeOutput() ECRAuthorizationTokenTypeOutput {
	return o
}

func (o ECRAuthorizationTokenTypeOutput) ToECRAuthorizationTokenTypeOutputWithContext(ctx context.Context) ECRAuthorizationTokenTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ECRAuthorizationTokenTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ECRAuthorizationTokenTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ECRAuthorizationTokenTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o ECRAuthorizationTokenTypeOutput) Spec() ECRAuthorizationTokenSpecPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenType) *ECRAuthorizationTokenSpec { return v.Spec }).(ECRAuthorizationTokenSpecPtrOutput)
}

type ECRAuthorizationTokenTypeArrayOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECRAuthorizationTokenType)(nil)).Elem()
}

func (o ECRAuthorizationTokenTypeArrayOutput) ToECRAuthorizationTokenTypeArrayOutput() ECRAuthorizationTokenTypeArrayOutput {
	return o
}

func (o ECRAuthorizationTokenTypeArrayOutput) ToECRAuthorizationTokenTypeArrayOutputWithContext(ctx context.Context) ECRAuthorizationTokenTypeArrayOutput {
	return o
}

func (o ECRAuthorizationTokenTypeArrayOutput) Index(i pulumi.IntInput) ECRAuthorizationTokenTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ECRAuthorizationTokenType {
		return vs[0].([]ECRAuthorizationTokenType)[vs[1].(int)]
	}).(ECRAuthorizationTokenTypeOutput)
}

// ECRAuthorizationTokenList is a list of ECRAuthorizationToken
type ECRAuthorizationTokenListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of ecrauthorizationtokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ECRAuthorizationTokenType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ECRAuthorizationTokenListTypeInput is an input type that accepts ECRAuthorizationTokenListTypeArgs and ECRAuthorizationTokenListTypeOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenListTypeInput` via:
//
//	ECRAuthorizationTokenListTypeArgs{...}
type ECRAuthorizationTokenListTypeInput interface {
	pulumi.Input

	ToECRAuthorizationTokenListTypeOutput() ECRAuthorizationTokenListTypeOutput
	ToECRAuthorizationTokenListTypeOutputWithContext(context.Context) ECRAuthorizationTokenListTypeOutput
}

// ECRAuthorizationTokenList is a list of ECRAuthorizationToken
type ECRAuthorizationTokenListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of ecrauthorizationtokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ECRAuthorizationTokenTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ECRAuthorizationTokenListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenListType)(nil)).Elem()
}

func (i ECRAuthorizationTokenListTypeArgs) ToECRAuthorizationTokenListTypeOutput() ECRAuthorizationTokenListTypeOutput {
	return i.ToECRAuthorizationTokenListTypeOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenListTypeArgs) ToECRAuthorizationTokenListTypeOutputWithContext(ctx context.Context) ECRAuthorizationTokenListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenListTypeOutput)
}

// ECRAuthorizationTokenList is a list of ECRAuthorizationToken
type ECRAuthorizationTokenListTypeOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenListType)(nil)).Elem()
}

func (o ECRAuthorizationTokenListTypeOutput) ToECRAuthorizationTokenListTypeOutput() ECRAuthorizationTokenListTypeOutput {
	return o
}

func (o ECRAuthorizationTokenListTypeOutput) ToECRAuthorizationTokenListTypeOutputWithContext(ctx context.Context) ECRAuthorizationTokenListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ECRAuthorizationTokenListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of ecrauthorizationtokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ECRAuthorizationTokenListTypeOutput) Items() ECRAuthorizationTokenTypeArrayOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenListType) []ECRAuthorizationTokenType { return v.Items }).(ECRAuthorizationTokenTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ECRAuthorizationTokenListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ECRAuthorizationTokenListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ECRAuthorizationTokenSpec uses the GetAuthorizationToken API to retrieve an
// authorization token.
// The authorization token is valid for 12 hours.
// The authorizationToken returned is a base64 encoded string that can be decoded
// and used in a docker login command to authenticate to a registry.
// For more information, see Registry authentication (https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth) in the Amazon Elastic Container Registry User Guide.
type ECRAuthorizationTokenPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch         `pulumi:"metadata"`
	Spec     *ECRAuthorizationTokenSpecPatch `pulumi:"spec"`
}

// ECRAuthorizationTokenPatchTypeInput is an input type that accepts ECRAuthorizationTokenPatchTypeArgs and ECRAuthorizationTokenPatchTypeOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenPatchTypeInput` via:
//
//	ECRAuthorizationTokenPatchTypeArgs{...}
type ECRAuthorizationTokenPatchTypeInput interface {
	pulumi.Input

	ToECRAuthorizationTokenPatchTypeOutput() ECRAuthorizationTokenPatchTypeOutput
	ToECRAuthorizationTokenPatchTypeOutputWithContext(context.Context) ECRAuthorizationTokenPatchTypeOutput
}

// ECRAuthorizationTokenSpec uses the GetAuthorizationToken API to retrieve an
// authorization token.
// The authorization token is valid for 12 hours.
// The authorizationToken returned is a base64 encoded string that can be decoded
// and used in a docker login command to authenticate to a registry.
// For more information, see Registry authentication (https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth) in the Amazon Elastic Container Registry User Guide.
type ECRAuthorizationTokenPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput         `pulumi:"metadata"`
	Spec     ECRAuthorizationTokenSpecPatchPtrInput `pulumi:"spec"`
}

func (ECRAuthorizationTokenPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenPatchType)(nil)).Elem()
}

func (i ECRAuthorizationTokenPatchTypeArgs) ToECRAuthorizationTokenPatchTypeOutput() ECRAuthorizationTokenPatchTypeOutput {
	return i.ToECRAuthorizationTokenPatchTypeOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenPatchTypeArgs) ToECRAuthorizationTokenPatchTypeOutputWithContext(ctx context.Context) ECRAuthorizationTokenPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenPatchTypeOutput)
}

// ECRAuthorizationTokenSpec uses the GetAuthorizationToken API to retrieve an
// authorization token.
// The authorization token is valid for 12 hours.
// The authorizationToken returned is a base64 encoded string that can be decoded
// and used in a docker login command to authenticate to a registry.
// For more information, see Registry authentication (https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth) in the Amazon Elastic Container Registry User Guide.
type ECRAuthorizationTokenPatchTypeOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenPatchType)(nil)).Elem()
}

func (o ECRAuthorizationTokenPatchTypeOutput) ToECRAuthorizationTokenPatchTypeOutput() ECRAuthorizationTokenPatchTypeOutput {
	return o
}

func (o ECRAuthorizationTokenPatchTypeOutput) ToECRAuthorizationTokenPatchTypeOutputWithContext(ctx context.Context) ECRAuthorizationTokenPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ECRAuthorizationTokenPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ECRAuthorizationTokenPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ECRAuthorizationTokenPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ECRAuthorizationTokenPatchTypeOutput) Spec() ECRAuthorizationTokenSpecPatchPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenPatchType) *ECRAuthorizationTokenSpecPatch { return v.Spec }).(ECRAuthorizationTokenSpecPatchPtrOutput)
}

type ECRAuthorizationTokenSpec struct {
	Auth *ECRAuthorizationTokenSpecAuth `pulumi:"auth"`
	// Region specifies the region to operate in.
	Region *string `pulumi:"region"`
	// You can assume a role before making calls to the
	// desired AWS service.
	Role *string `pulumi:"role"`
}

// ECRAuthorizationTokenSpecInput is an input type that accepts ECRAuthorizationTokenSpecArgs and ECRAuthorizationTokenSpecOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecInput` via:
//
//	ECRAuthorizationTokenSpecArgs{...}
type ECRAuthorizationTokenSpecInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecOutput() ECRAuthorizationTokenSpecOutput
	ToECRAuthorizationTokenSpecOutputWithContext(context.Context) ECRAuthorizationTokenSpecOutput
}

type ECRAuthorizationTokenSpecArgs struct {
	Auth ECRAuthorizationTokenSpecAuthPtrInput `pulumi:"auth"`
	// Region specifies the region to operate in.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// You can assume a role before making calls to the
	// desired AWS service.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (ECRAuthorizationTokenSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpec)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecArgs) ToECRAuthorizationTokenSpecOutput() ECRAuthorizationTokenSpecOutput {
	return i.ToECRAuthorizationTokenSpecOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecArgs) ToECRAuthorizationTokenSpecOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecOutput)
}

func (i ECRAuthorizationTokenSpecArgs) ToECRAuthorizationTokenSpecPtrOutput() ECRAuthorizationTokenSpecPtrOutput {
	return i.ToECRAuthorizationTokenSpecPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecArgs) ToECRAuthorizationTokenSpecPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecOutput).ToECRAuthorizationTokenSpecPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecPtrInput is an input type that accepts ECRAuthorizationTokenSpecArgs, ECRAuthorizationTokenSpecPtr and ECRAuthorizationTokenSpecPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecPtrInput` via:
//
//	        ECRAuthorizationTokenSpecArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecPtrOutput() ECRAuthorizationTokenSpecPtrOutput
	ToECRAuthorizationTokenSpecPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecPtrOutput
}

type ecrauthorizationTokenSpecPtrType ECRAuthorizationTokenSpecArgs

func ECRAuthorizationTokenSpecPtr(v *ECRAuthorizationTokenSpecArgs) ECRAuthorizationTokenSpecPtrInput {
	return (*ecrauthorizationTokenSpecPtrType)(v)
}

func (*ecrauthorizationTokenSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpec)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecPtrType) ToECRAuthorizationTokenSpecPtrOutput() ECRAuthorizationTokenSpecPtrOutput {
	return i.ToECRAuthorizationTokenSpecPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecPtrType) ToECRAuthorizationTokenSpecPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecPtrOutput)
}

type ECRAuthorizationTokenSpecOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpec)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecOutput) ToECRAuthorizationTokenSpecOutput() ECRAuthorizationTokenSpecOutput {
	return o
}

func (o ECRAuthorizationTokenSpecOutput) ToECRAuthorizationTokenSpecOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecOutput {
	return o
}

func (o ECRAuthorizationTokenSpecOutput) ToECRAuthorizationTokenSpecPtrOutput() ECRAuthorizationTokenSpecPtrOutput {
	return o.ToECRAuthorizationTokenSpecPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecOutput) ToECRAuthorizationTokenSpecPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpec) *ECRAuthorizationTokenSpec {
		return &v
	}).(ECRAuthorizationTokenSpecPtrOutput)
}

func (o ECRAuthorizationTokenSpecOutput) Auth() ECRAuthorizationTokenSpecAuthPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpec) *ECRAuthorizationTokenSpecAuth { return v.Auth }).(ECRAuthorizationTokenSpecAuthPtrOutput)
}

// Region specifies the region to operate in.
func (o ECRAuthorizationTokenSpecOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpec) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// You can assume a role before making calls to the
// desired AWS service.
func (o ECRAuthorizationTokenSpecOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpec) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpec)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecPtrOutput) ToECRAuthorizationTokenSpecPtrOutput() ECRAuthorizationTokenSpecPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecPtrOutput) ToECRAuthorizationTokenSpecPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecPtrOutput) Elem() ECRAuthorizationTokenSpecOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpec) ECRAuthorizationTokenSpec {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpec
		return ret
	}).(ECRAuthorizationTokenSpecOutput)
}

func (o ECRAuthorizationTokenSpecPtrOutput) Auth() ECRAuthorizationTokenSpecAuthPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpec) *ECRAuthorizationTokenSpecAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ECRAuthorizationTokenSpecAuthPtrOutput)
}

// Region specifies the region to operate in.
func (o ECRAuthorizationTokenSpecPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpec) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// You can assume a role before making calls to the
// desired AWS service.
func (o ECRAuthorizationTokenSpecPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpec) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Auth defines how to authenticate with AWS
type ECRAuthorizationTokenSpecAuth struct {
	Jwt       *ECRAuthorizationTokenSpecAuthJwt       `pulumi:"jwt"`
	SecretRef *ECRAuthorizationTokenSpecAuthSecretRef `pulumi:"secretRef"`
}

// ECRAuthorizationTokenSpecAuthInput is an input type that accepts ECRAuthorizationTokenSpecAuthArgs and ECRAuthorizationTokenSpecAuthOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthInput` via:
//
//	ECRAuthorizationTokenSpecAuthArgs{...}
type ECRAuthorizationTokenSpecAuthInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthOutput() ECRAuthorizationTokenSpecAuthOutput
	ToECRAuthorizationTokenSpecAuthOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthOutput
}

// Auth defines how to authenticate with AWS
type ECRAuthorizationTokenSpecAuthArgs struct {
	Jwt       ECRAuthorizationTokenSpecAuthJwtPtrInput       `pulumi:"jwt"`
	SecretRef ECRAuthorizationTokenSpecAuthSecretRefPtrInput `pulumi:"secretRef"`
}

func (ECRAuthorizationTokenSpecAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuth)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthArgs) ToECRAuthorizationTokenSpecAuthOutput() ECRAuthorizationTokenSpecAuthOutput {
	return i.ToECRAuthorizationTokenSpecAuthOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthArgs) ToECRAuthorizationTokenSpecAuthOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthOutput)
}

func (i ECRAuthorizationTokenSpecAuthArgs) ToECRAuthorizationTokenSpecAuthPtrOutput() ECRAuthorizationTokenSpecAuthPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthArgs) ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthOutput).ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthArgs, ECRAuthorizationTokenSpecAuthPtr and ECRAuthorizationTokenSpecAuthPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthPtrOutput() ECRAuthorizationTokenSpecAuthPtrOutput
	ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthPtrOutput
}

type ecrauthorizationTokenSpecAuthPtrType ECRAuthorizationTokenSpecAuthArgs

func ECRAuthorizationTokenSpecAuthPtr(v *ECRAuthorizationTokenSpecAuthArgs) ECRAuthorizationTokenSpecAuthPtrInput {
	return (*ecrauthorizationTokenSpecAuthPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuth)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthPtrType) ToECRAuthorizationTokenSpecAuthPtrOutput() ECRAuthorizationTokenSpecAuthPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthPtrType) ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthPtrOutput)
}

// Auth defines how to authenticate with AWS
type ECRAuthorizationTokenSpecAuthOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuth)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthOutput) ToECRAuthorizationTokenSpecAuthOutput() ECRAuthorizationTokenSpecAuthOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthOutput) ToECRAuthorizationTokenSpecAuthOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthOutput) ToECRAuthorizationTokenSpecAuthPtrOutput() ECRAuthorizationTokenSpecAuthPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthOutput) ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuth) *ECRAuthorizationTokenSpecAuth {
		return &v
	}).(ECRAuthorizationTokenSpecAuthPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthOutput) Jwt() ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuth) *ECRAuthorizationTokenSpecAuthJwt { return v.Jwt }).(ECRAuthorizationTokenSpecAuthJwtPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthOutput) SecretRef() ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuth) *ECRAuthorizationTokenSpecAuthSecretRef { return v.SecretRef }).(ECRAuthorizationTokenSpecAuthSecretRefPtrOutput)
}

type ECRAuthorizationTokenSpecAuthPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuth)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthPtrOutput) ToECRAuthorizationTokenSpecAuthPtrOutput() ECRAuthorizationTokenSpecAuthPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthPtrOutput) ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthPtrOutput) Elem() ECRAuthorizationTokenSpecAuthOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuth) ECRAuthorizationTokenSpecAuth {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuth
		return ret
	}).(ECRAuthorizationTokenSpecAuthOutput)
}

func (o ECRAuthorizationTokenSpecAuthPtrOutput) Jwt() ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuth) *ECRAuthorizationTokenSpecAuthJwt {
		if v == nil {
			return nil
		}
		return v.Jwt
	}).(ECRAuthorizationTokenSpecAuthJwtPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthPtrOutput) SecretRef() ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuth) *ECRAuthorizationTokenSpecAuthSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefPtrOutput)
}

// Authenticate against AWS using service account tokens.
type ECRAuthorizationTokenSpecAuthJwt struct {
	ServiceAccountRef *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef `pulumi:"serviceAccountRef"`
}

// ECRAuthorizationTokenSpecAuthJwtInput is an input type that accepts ECRAuthorizationTokenSpecAuthJwtArgs and ECRAuthorizationTokenSpecAuthJwtOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthJwtInput` via:
//
//	ECRAuthorizationTokenSpecAuthJwtArgs{...}
type ECRAuthorizationTokenSpecAuthJwtInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthJwtOutput() ECRAuthorizationTokenSpecAuthJwtOutput
	ToECRAuthorizationTokenSpecAuthJwtOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthJwtOutput
}

// Authenticate against AWS using service account tokens.
type ECRAuthorizationTokenSpecAuthJwtArgs struct {
	ServiceAccountRef ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrInput `pulumi:"serviceAccountRef"`
}

func (ECRAuthorizationTokenSpecAuthJwtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwt)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthJwtArgs) ToECRAuthorizationTokenSpecAuthJwtOutput() ECRAuthorizationTokenSpecAuthJwtOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthJwtArgs) ToECRAuthorizationTokenSpecAuthJwtOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtOutput)
}

func (i ECRAuthorizationTokenSpecAuthJwtArgs) ToECRAuthorizationTokenSpecAuthJwtPtrOutput() ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthJwtArgs) ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtOutput).ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthJwtPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthJwtArgs, ECRAuthorizationTokenSpecAuthJwtPtr and ECRAuthorizationTokenSpecAuthJwtPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthJwtPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthJwtArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthJwtPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthJwtPtrOutput() ECRAuthorizationTokenSpecAuthJwtPtrOutput
	ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthJwtPtrOutput
}

type ecrauthorizationTokenSpecAuthJwtPtrType ECRAuthorizationTokenSpecAuthJwtArgs

func ECRAuthorizationTokenSpecAuthJwtPtr(v *ECRAuthorizationTokenSpecAuthJwtArgs) ECRAuthorizationTokenSpecAuthJwtPtrInput {
	return (*ecrauthorizationTokenSpecAuthJwtPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthJwtPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthJwt)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthJwtPtrType) ToECRAuthorizationTokenSpecAuthJwtPtrOutput() ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthJwtPtrType) ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtPtrOutput)
}

// Authenticate against AWS using service account tokens.
type ECRAuthorizationTokenSpecAuthJwtOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthJwtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwt)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthJwtOutput) ToECRAuthorizationTokenSpecAuthJwtOutput() ECRAuthorizationTokenSpecAuthJwtOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtOutput) ToECRAuthorizationTokenSpecAuthJwtOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtOutput) ToECRAuthorizationTokenSpecAuthJwtPtrOutput() ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthJwtOutput) ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthJwt) *ECRAuthorizationTokenSpecAuthJwt {
		return &v
	}).(ECRAuthorizationTokenSpecAuthJwtPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthJwtOutput) ServiceAccountRef() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthJwt) *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef {
		return v.ServiceAccountRef
	}).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput)
}

type ECRAuthorizationTokenSpecAuthJwtPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthJwtPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthJwt)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthJwtPtrOutput) ToECRAuthorizationTokenSpecAuthJwtPtrOutput() ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtPtrOutput) ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtPtrOutput) Elem() ECRAuthorizationTokenSpecAuthJwtOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwt) ECRAuthorizationTokenSpecAuthJwt {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthJwt
		return ret
	}).(ECRAuthorizationTokenSpecAuthJwtOutput)
}

func (o ECRAuthorizationTokenSpecAuthJwtPtrOutput) ServiceAccountRef() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwt) *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput)
}

// Authenticate against AWS using service account tokens.
type ECRAuthorizationTokenSpecAuthJwtPatch struct {
	ServiceAccountRef *ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch `pulumi:"serviceAccountRef"`
}

// ECRAuthorizationTokenSpecAuthJwtPatchInput is an input type that accepts ECRAuthorizationTokenSpecAuthJwtPatchArgs and ECRAuthorizationTokenSpecAuthJwtPatchOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthJwtPatchInput` via:
//
//	ECRAuthorizationTokenSpecAuthJwtPatchArgs{...}
type ECRAuthorizationTokenSpecAuthJwtPatchInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthJwtPatchOutput() ECRAuthorizationTokenSpecAuthJwtPatchOutput
	ToECRAuthorizationTokenSpecAuthJwtPatchOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthJwtPatchOutput
}

// Authenticate against AWS using service account tokens.
type ECRAuthorizationTokenSpecAuthJwtPatchArgs struct {
	ServiceAccountRef ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrInput `pulumi:"serviceAccountRef"`
}

func (ECRAuthorizationTokenSpecAuthJwtPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtPatch)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthJwtPatchArgs) ToECRAuthorizationTokenSpecAuthJwtPatchOutput() ECRAuthorizationTokenSpecAuthJwtPatchOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtPatchOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthJwtPatchArgs) ToECRAuthorizationTokenSpecAuthJwtPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtPatchOutput)
}

func (i ECRAuthorizationTokenSpecAuthJwtPatchArgs) ToECRAuthorizationTokenSpecAuthJwtPatchPtrOutput() ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtPatchPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthJwtPatchArgs) ToECRAuthorizationTokenSpecAuthJwtPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtPatchOutput).ToECRAuthorizationTokenSpecAuthJwtPatchPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthJwtPatchPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthJwtPatchArgs, ECRAuthorizationTokenSpecAuthJwtPatchPtr and ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthJwtPatchPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthJwtPatchArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthJwtPatchPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthJwtPatchPtrOutput() ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput
	ToECRAuthorizationTokenSpecAuthJwtPatchPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput
}

type ecrauthorizationTokenSpecAuthJwtPatchPtrType ECRAuthorizationTokenSpecAuthJwtPatchArgs

func ECRAuthorizationTokenSpecAuthJwtPatchPtr(v *ECRAuthorizationTokenSpecAuthJwtPatchArgs) ECRAuthorizationTokenSpecAuthJwtPatchPtrInput {
	return (*ecrauthorizationTokenSpecAuthJwtPatchPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthJwtPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthJwtPatch)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthJwtPatchPtrType) ToECRAuthorizationTokenSpecAuthJwtPatchPtrOutput() ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtPatchPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthJwtPatchPtrType) ToECRAuthorizationTokenSpecAuthJwtPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput)
}

// Authenticate against AWS using service account tokens.
type ECRAuthorizationTokenSpecAuthJwtPatchOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthJwtPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthJwtPatchOutput) ToECRAuthorizationTokenSpecAuthJwtPatchOutput() ECRAuthorizationTokenSpecAuthJwtPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtPatchOutput) ToECRAuthorizationTokenSpecAuthJwtPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtPatchOutput) ToECRAuthorizationTokenSpecAuthJwtPatchPtrOutput() ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthJwtPatchPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthJwtPatchOutput) ToECRAuthorizationTokenSpecAuthJwtPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthJwtPatch) *ECRAuthorizationTokenSpecAuthJwtPatch {
		return &v
	}).(ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthJwtPatchOutput) ServiceAccountRef() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthJwtPatch) *ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch {
		return v.ServiceAccountRef
	}).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput)
}

type ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthJwtPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput) ToECRAuthorizationTokenSpecAuthJwtPatchPtrOutput() ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput) ToECRAuthorizationTokenSpecAuthJwtPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput) Elem() ECRAuthorizationTokenSpecAuthJwtPatchOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwtPatch) ECRAuthorizationTokenSpecAuthJwtPatch {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthJwtPatch
		return ret
	}).(ECRAuthorizationTokenSpecAuthJwtPatchOutput)
}

func (o ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput) ServiceAccountRef() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwtPatch) *ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput)
}

// A reference to a ServiceAccount resource.
type ECRAuthorizationTokenSpecAuthJwtServiceAccountRef struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ECRAuthorizationTokenSpecAuthJwtServiceAccountRefInput is an input type that accepts ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs and ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthJwtServiceAccountRefInput` via:
//
//	ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs{...}
type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput
	ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput
}

// A reference to a ServiceAccount resource.
type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtServiceAccountRef)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput)
}

func (i ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput).ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs, ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtr and ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput
	ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput
}

type ecrauthorizationTokenSpecAuthJwtServiceAccountRefPtrType ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs

func ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtr(v *ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrInput {
	return (*ecrauthorizationTokenSpecAuthJwtServiceAccountRefPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthJwtServiceAccountRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthJwtServiceAccountRef)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthJwtServiceAccountRefPtrType) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthJwtServiceAccountRefPtrType) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput)
}

// A reference to a ServiceAccount resource.
type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtServiceAccountRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef {
		return &v
	}).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthJwtServiceAccountRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput) Elem() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) ECRAuthorizationTokenSpecAuthJwtServiceAccountRef {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthJwtServiceAccountRef
		return ret
	}).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// A reference to a ServiceAccount resource.
type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchInput is an input type that accepts ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchArgs and ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchInput` via:
//
//	ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchArgs{...}
type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput
	ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput
}

// A reference to a ServiceAccount resource.
type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchArgs) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchArgs) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput)
}

func (i ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchArgs) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchArgs) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput).ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchArgs, ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtr and ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput
	ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput
}

type ecrauthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrType ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchArgs

func ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtr(v *ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchArgs) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrInput {
	return (*ecrauthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrType) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrType) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput)
}

// A reference to a ServiceAccount resource.
type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch) *ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch {
		return &v
	}).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput) Elem() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch
		return ret
	}).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Auth defines how to authenticate with AWS
type ECRAuthorizationTokenSpecAuthPatch struct {
	Jwt       *ECRAuthorizationTokenSpecAuthJwtPatch       `pulumi:"jwt"`
	SecretRef *ECRAuthorizationTokenSpecAuthSecretRefPatch `pulumi:"secretRef"`
}

// ECRAuthorizationTokenSpecAuthPatchInput is an input type that accepts ECRAuthorizationTokenSpecAuthPatchArgs and ECRAuthorizationTokenSpecAuthPatchOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthPatchInput` via:
//
//	ECRAuthorizationTokenSpecAuthPatchArgs{...}
type ECRAuthorizationTokenSpecAuthPatchInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthPatchOutput() ECRAuthorizationTokenSpecAuthPatchOutput
	ToECRAuthorizationTokenSpecAuthPatchOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthPatchOutput
}

// Auth defines how to authenticate with AWS
type ECRAuthorizationTokenSpecAuthPatchArgs struct {
	Jwt       ECRAuthorizationTokenSpecAuthJwtPatchPtrInput       `pulumi:"jwt"`
	SecretRef ECRAuthorizationTokenSpecAuthSecretRefPatchPtrInput `pulumi:"secretRef"`
}

func (ECRAuthorizationTokenSpecAuthPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthPatch)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthPatchArgs) ToECRAuthorizationTokenSpecAuthPatchOutput() ECRAuthorizationTokenSpecAuthPatchOutput {
	return i.ToECRAuthorizationTokenSpecAuthPatchOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthPatchArgs) ToECRAuthorizationTokenSpecAuthPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthPatchOutput)
}

func (i ECRAuthorizationTokenSpecAuthPatchArgs) ToECRAuthorizationTokenSpecAuthPatchPtrOutput() ECRAuthorizationTokenSpecAuthPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthPatchPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthPatchArgs) ToECRAuthorizationTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthPatchOutput).ToECRAuthorizationTokenSpecAuthPatchPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthPatchPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthPatchArgs, ECRAuthorizationTokenSpecAuthPatchPtr and ECRAuthorizationTokenSpecAuthPatchPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthPatchPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthPatchArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthPatchPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthPatchPtrOutput() ECRAuthorizationTokenSpecAuthPatchPtrOutput
	ToECRAuthorizationTokenSpecAuthPatchPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthPatchPtrOutput
}

type ecrauthorizationTokenSpecAuthPatchPtrType ECRAuthorizationTokenSpecAuthPatchArgs

func ECRAuthorizationTokenSpecAuthPatchPtr(v *ECRAuthorizationTokenSpecAuthPatchArgs) ECRAuthorizationTokenSpecAuthPatchPtrInput {
	return (*ecrauthorizationTokenSpecAuthPatchPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthPatch)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthPatchPtrType) ToECRAuthorizationTokenSpecAuthPatchPtrOutput() ECRAuthorizationTokenSpecAuthPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthPatchPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthPatchPtrType) ToECRAuthorizationTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthPatchPtrOutput)
}

// Auth defines how to authenticate with AWS
type ECRAuthorizationTokenSpecAuthPatchOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthPatchOutput) ToECRAuthorizationTokenSpecAuthPatchOutput() ECRAuthorizationTokenSpecAuthPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthPatchOutput) ToECRAuthorizationTokenSpecAuthPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthPatchOutput) ToECRAuthorizationTokenSpecAuthPatchPtrOutput() ECRAuthorizationTokenSpecAuthPatchPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthPatchPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthPatchOutput) ToECRAuthorizationTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthPatch) *ECRAuthorizationTokenSpecAuthPatch {
		return &v
	}).(ECRAuthorizationTokenSpecAuthPatchPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthPatchOutput) Jwt() ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthPatch) *ECRAuthorizationTokenSpecAuthJwtPatch { return v.Jwt }).(ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthPatchOutput) SecretRef() ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthPatch) *ECRAuthorizationTokenSpecAuthSecretRefPatch {
		return v.SecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput)
}

type ECRAuthorizationTokenSpecAuthPatchPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthPatchPtrOutput) ToECRAuthorizationTokenSpecAuthPatchPtrOutput() ECRAuthorizationTokenSpecAuthPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthPatchPtrOutput) ToECRAuthorizationTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthPatchPtrOutput) Elem() ECRAuthorizationTokenSpecAuthPatchOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthPatch) ECRAuthorizationTokenSpecAuthPatch {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthPatch
		return ret
	}).(ECRAuthorizationTokenSpecAuthPatchOutput)
}

func (o ECRAuthorizationTokenSpecAuthPatchPtrOutput) Jwt() ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthPatch) *ECRAuthorizationTokenSpecAuthJwtPatch {
		if v == nil {
			return nil
		}
		return v.Jwt
	}).(ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthPatchPtrOutput) SecretRef() ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthPatch) *ECRAuthorizationTokenSpecAuthSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput)
}

// AWSAuthSecretRef holds secret references for AWS credentials
// both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.
type ECRAuthorizationTokenSpecAuthSecretRef struct {
	AccessKeyIDSecretRef     *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef     `pulumi:"accessKeyIDSecretRef"`
	SecretAccessKeySecretRef *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef `pulumi:"secretAccessKeySecretRef"`
	SessionTokenSecretRef    *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef    `pulumi:"sessionTokenSecretRef"`
}

// ECRAuthorizationTokenSpecAuthSecretRefInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefArgs and ECRAuthorizationTokenSpecAuthSecretRefOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefInput` via:
//
//	ECRAuthorizationTokenSpecAuthSecretRefArgs{...}
type ECRAuthorizationTokenSpecAuthSecretRefInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefOutput
	ToECRAuthorizationTokenSpecAuthSecretRefOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefOutput
}

// AWSAuthSecretRef holds secret references for AWS credentials
// both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.
type ECRAuthorizationTokenSpecAuthSecretRefArgs struct {
	AccessKeyIDSecretRef     ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrInput     `pulumi:"accessKeyIDSecretRef"`
	SecretAccessKeySecretRef ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput `pulumi:"secretAccessKeySecretRef"`
	SessionTokenSecretRef    ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrInput    `pulumi:"sessionTokenSecretRef"`
}

func (ECRAuthorizationTokenSpecAuthSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRef)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefOutput)
}

func (i ECRAuthorizationTokenSpecAuthSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefOutput).ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthSecretRefPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefArgs, ECRAuthorizationTokenSpecAuthSecretRefPtr and ECRAuthorizationTokenSpecAuthSecretRefPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthSecretRefArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthSecretRefPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefPtrOutput
	ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefPtrOutput
}

type ecrauthorizationTokenSpecAuthSecretRefPtrType ECRAuthorizationTokenSpecAuthSecretRefArgs

func ECRAuthorizationTokenSpecAuthSecretRefPtr(v *ECRAuthorizationTokenSpecAuthSecretRefArgs) ECRAuthorizationTokenSpecAuthSecretRefPtrInput {
	return (*ecrauthorizationTokenSpecAuthSecretRefPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRef)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthSecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthSecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefPtrOutput)
}

// AWSAuthSecretRef holds secret references for AWS credentials
// both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.
type ECRAuthorizationTokenSpecAuthSecretRefOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthSecretRef) *ECRAuthorizationTokenSpecAuthSecretRef {
		return &v
	}).(ECRAuthorizationTokenSpecAuthSecretRefPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthSecretRefOutput) AccessKeyIDSecretRef() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRef) *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef {
		return v.AccessKeyIDSecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthSecretRefOutput) SecretAccessKeySecretRef() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRef) *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		return v.SecretAccessKeySecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthSecretRefOutput) SessionTokenSecretRef() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRef) *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef {
		return v.SessionTokenSecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput)
}

type ECRAuthorizationTokenSpecAuthSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPtrOutput) Elem() ECRAuthorizationTokenSpecAuthSecretRefOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRef) ECRAuthorizationTokenSpecAuthSecretRef {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthSecretRef
		return ret
	}).(ECRAuthorizationTokenSpecAuthSecretRefOutput)
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPtrOutput) AccessKeyIDSecretRef() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRef) *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef {
		if v == nil {
			return nil
		}
		return v.AccessKeyIDSecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPtrOutput) SecretAccessKeySecretRef() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRef) *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		if v == nil {
			return nil
		}
		return v.SecretAccessKeySecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPtrOutput) SessionTokenSecretRef() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRef) *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef {
		if v == nil {
			return nil
		}
		return v.SessionTokenSecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput)
}

// The AccessKeyID is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefArgs and ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefInput` via:
//
//	ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefArgs{...}
type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput
	ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput
}

// The AccessKeyID is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput)
}

func (i ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput).ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefArgs, ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtr and ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput
	ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput
}

type ecrauthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrType ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefArgs

func ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtr(v *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefArgs) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrInput {
	return (*ecrauthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput)
}

// The AccessKeyID is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef) *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef {
		return &v
	}).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput) Elem() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef
		return ret
	}).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The AccessKeyID is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchArgs and ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchInput` via:
//
//	ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchArgs{...}
type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput
	ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput
}

// The AccessKeyID is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput)
}

func (i ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput).ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchArgs, ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtr and ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput
	ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput
}

type ecrauthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrType ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchArgs

func ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtr(v *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchArgs) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrInput {
	return (*ecrauthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrType) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrType) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput)
}

// The AccessKeyID is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch) *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch {
		return &v
	}).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput) Elem() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch
		return ret
	}).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// AWSAuthSecretRef holds secret references for AWS credentials
// both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.
type ECRAuthorizationTokenSpecAuthSecretRefPatch struct {
	AccessKeyIDSecretRef     *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch     `pulumi:"accessKeyIDSecretRef"`
	SecretAccessKeySecretRef *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch `pulumi:"secretAccessKeySecretRef"`
	SessionTokenSecretRef    *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch    `pulumi:"sessionTokenSecretRef"`
}

// ECRAuthorizationTokenSpecAuthSecretRefPatchInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefPatchArgs and ECRAuthorizationTokenSpecAuthSecretRefPatchOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefPatchInput` via:
//
//	ECRAuthorizationTokenSpecAuthSecretRefPatchArgs{...}
type ECRAuthorizationTokenSpecAuthSecretRefPatchInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefPatchOutput() ECRAuthorizationTokenSpecAuthSecretRefPatchOutput
	ToECRAuthorizationTokenSpecAuthSecretRefPatchOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefPatchOutput
}

// AWSAuthSecretRef holds secret references for AWS credentials
// both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.
type ECRAuthorizationTokenSpecAuthSecretRefPatchArgs struct {
	AccessKeyIDSecretRef     ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrInput     `pulumi:"accessKeyIDSecretRef"`
	SecretAccessKeySecretRef ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrInput `pulumi:"secretAccessKeySecretRef"`
	SessionTokenSecretRef    ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrInput    `pulumi:"sessionTokenSecretRef"`
}

func (ECRAuthorizationTokenSpecAuthSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefPatch)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthSecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefPatchOutput() ECRAuthorizationTokenSpecAuthSecretRefPatchOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefPatchOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefPatchOutput)
}

func (i ECRAuthorizationTokenSpecAuthSecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefPatchOutput).ToECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthSecretRefPatchPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefPatchArgs, ECRAuthorizationTokenSpecAuthSecretRefPatchPtr and ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefPatchPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthSecretRefPatchPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput
	ToECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput
}

type ecrauthorizationTokenSpecAuthSecretRefPatchPtrType ECRAuthorizationTokenSpecAuthSecretRefPatchArgs

func ECRAuthorizationTokenSpecAuthSecretRefPatchPtr(v *ECRAuthorizationTokenSpecAuthSecretRefPatchArgs) ECRAuthorizationTokenSpecAuthSecretRefPatchPtrInput {
	return (*ecrauthorizationTokenSpecAuthSecretRefPatchPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefPatch)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthSecretRefPatchPtrType) ToECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthSecretRefPatchPtrType) ToECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput)
}

// AWSAuthSecretRef holds secret references for AWS credentials
// both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.
type ECRAuthorizationTokenSpecAuthSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefPatchOutput() ECRAuthorizationTokenSpecAuthSecretRefPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthSecretRefPatch) *ECRAuthorizationTokenSpecAuthSecretRefPatch {
		return &v
	}).(ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPatchOutput) AccessKeyIDSecretRef() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefPatch) *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch {
		return v.AccessKeyIDSecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPatchOutput) SecretAccessKeySecretRef() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefPatch) *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch {
		return v.SecretAccessKeySecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPatchOutput) SessionTokenSecretRef() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefPatch) *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch {
		return v.SessionTokenSecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput)
}

type ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput) Elem() ECRAuthorizationTokenSpecAuthSecretRefPatchOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefPatch) ECRAuthorizationTokenSpecAuthSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthSecretRefPatch
		return ret
	}).(ECRAuthorizationTokenSpecAuthSecretRefPatchOutput)
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput) AccessKeyIDSecretRef() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefPatch) *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.AccessKeyIDSecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput) SecretAccessKeySecretRef() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefPatch) *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretAccessKeySecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput)
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput) SessionTokenSecretRef() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefPatch) *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SessionTokenSecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput)
}

// The SecretAccessKey is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs and ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefInput` via:
//
//	ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{...}
type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput
	ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput
}

// The SecretAccessKey is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput)
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput).ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs, ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtr and ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput
	ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput
}

type ecrauthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs

func ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtr(v *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput {
	return (*ecrauthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The SecretAccessKey is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		return &v
	}).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Elem() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef
		return ret
	}).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The SecretAccessKey is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs and ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchInput` via:
//
//	ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs{...}
type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput
	ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput
}

// The SecretAccessKey is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput)
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput).ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs, ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtr and ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput
	ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput
}

type ecrauthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrType ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs

func ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtr(v *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrInput {
	return (*ecrauthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrType) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrType) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput)
}

// The SecretAccessKey is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch {
		return &v
	}).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput) Elem() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch
		return ret
	}).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs and ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefInput` via:
//
//	ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs{...}
type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput
	ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput)
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput).ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs, ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtr and ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput
	ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput
}

type ecrauthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrType ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs

func ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtr(v *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrInput {
	return (*ecrauthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef {
		return &v
	}).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput) Elem() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef
		return ret
	}).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchArgs and ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchInput` via:
//
//	ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchArgs{...}
type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput
	ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput)
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchArgs) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput).ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchArgs, ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtr and ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput
	ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput
}

type ecrauthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrType ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchArgs

func ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtr(v *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchArgs) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrInput {
	return (*ecrauthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrType) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrType) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch) *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch {
		return &v
	}).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput) Elem() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch
		return ret
	}).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecPatch struct {
	Auth *ECRAuthorizationTokenSpecAuthPatch `pulumi:"auth"`
	// Region specifies the region to operate in.
	Region *string `pulumi:"region"`
	// You can assume a role before making calls to the
	// desired AWS service.
	Role *string `pulumi:"role"`
}

// ECRAuthorizationTokenSpecPatchInput is an input type that accepts ECRAuthorizationTokenSpecPatchArgs and ECRAuthorizationTokenSpecPatchOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecPatchInput` via:
//
//	ECRAuthorizationTokenSpecPatchArgs{...}
type ECRAuthorizationTokenSpecPatchInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecPatchOutput() ECRAuthorizationTokenSpecPatchOutput
	ToECRAuthorizationTokenSpecPatchOutputWithContext(context.Context) ECRAuthorizationTokenSpecPatchOutput
}

type ECRAuthorizationTokenSpecPatchArgs struct {
	Auth ECRAuthorizationTokenSpecAuthPatchPtrInput `pulumi:"auth"`
	// Region specifies the region to operate in.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// You can assume a role before making calls to the
	// desired AWS service.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (ECRAuthorizationTokenSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecPatch)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecPatchArgs) ToECRAuthorizationTokenSpecPatchOutput() ECRAuthorizationTokenSpecPatchOutput {
	return i.ToECRAuthorizationTokenSpecPatchOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecPatchArgs) ToECRAuthorizationTokenSpecPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecPatchOutput)
}

func (i ECRAuthorizationTokenSpecPatchArgs) ToECRAuthorizationTokenSpecPatchPtrOutput() ECRAuthorizationTokenSpecPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecPatchPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecPatchArgs) ToECRAuthorizationTokenSpecPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecPatchOutput).ToECRAuthorizationTokenSpecPatchPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecPatchPtrInput is an input type that accepts ECRAuthorizationTokenSpecPatchArgs, ECRAuthorizationTokenSpecPatchPtr and ECRAuthorizationTokenSpecPatchPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecPatchPtrInput` via:
//
//	        ECRAuthorizationTokenSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecPatchPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecPatchPtrOutput() ECRAuthorizationTokenSpecPatchPtrOutput
	ToECRAuthorizationTokenSpecPatchPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecPatchPtrOutput
}

type ecrauthorizationTokenSpecPatchPtrType ECRAuthorizationTokenSpecPatchArgs

func ECRAuthorizationTokenSpecPatchPtr(v *ECRAuthorizationTokenSpecPatchArgs) ECRAuthorizationTokenSpecPatchPtrInput {
	return (*ecrauthorizationTokenSpecPatchPtrType)(v)
}

func (*ecrauthorizationTokenSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecPatch)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecPatchPtrType) ToECRAuthorizationTokenSpecPatchPtrOutput() ECRAuthorizationTokenSpecPatchPtrOutput {
	return i.ToECRAuthorizationTokenSpecPatchPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecPatchPtrType) ToECRAuthorizationTokenSpecPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecPatchPtrOutput)
}

type ECRAuthorizationTokenSpecPatchOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecPatchOutput) ToECRAuthorizationTokenSpecPatchOutput() ECRAuthorizationTokenSpecPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecPatchOutput) ToECRAuthorizationTokenSpecPatchOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecPatchOutput {
	return o
}

func (o ECRAuthorizationTokenSpecPatchOutput) ToECRAuthorizationTokenSpecPatchPtrOutput() ECRAuthorizationTokenSpecPatchPtrOutput {
	return o.ToECRAuthorizationTokenSpecPatchPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecPatchOutput) ToECRAuthorizationTokenSpecPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecPatch) *ECRAuthorizationTokenSpecPatch {
		return &v
	}).(ECRAuthorizationTokenSpecPatchPtrOutput)
}

func (o ECRAuthorizationTokenSpecPatchOutput) Auth() ECRAuthorizationTokenSpecAuthPatchPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecPatch) *ECRAuthorizationTokenSpecAuthPatch { return v.Auth }).(ECRAuthorizationTokenSpecAuthPatchPtrOutput)
}

// Region specifies the region to operate in.
func (o ECRAuthorizationTokenSpecPatchOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecPatch) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// You can assume a role before making calls to the
// desired AWS service.
func (o ECRAuthorizationTokenSpecPatchOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecPatch) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecPatch)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecPatchPtrOutput) ToECRAuthorizationTokenSpecPatchPtrOutput() ECRAuthorizationTokenSpecPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecPatchPtrOutput) ToECRAuthorizationTokenSpecPatchPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecPatchPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecPatchPtrOutput) Elem() ECRAuthorizationTokenSpecPatchOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecPatch) ECRAuthorizationTokenSpecPatch {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecPatch
		return ret
	}).(ECRAuthorizationTokenSpecPatchOutput)
}

func (o ECRAuthorizationTokenSpecPatchPtrOutput) Auth() ECRAuthorizationTokenSpecAuthPatchPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecPatch) *ECRAuthorizationTokenSpecAuthPatch {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ECRAuthorizationTokenSpecAuthPatchPtrOutput)
}

// Region specifies the region to operate in.
func (o ECRAuthorizationTokenSpecPatchPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// You can assume a role before making calls to the
// desired AWS service.
func (o ECRAuthorizationTokenSpecPatchPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Fake generator is used for testing. It lets you define
// a static set of credentials that is always returned.
type FakeType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *FakeSpec          `pulumi:"spec"`
}

// FakeTypeInput is an input type that accepts FakeTypeArgs and FakeTypeOutput values.
// You can construct a concrete instance of `FakeTypeInput` via:
//
//	FakeTypeArgs{...}
type FakeTypeInput interface {
	pulumi.Input

	ToFakeTypeOutput() FakeTypeOutput
	ToFakeTypeOutputWithContext(context.Context) FakeTypeOutput
}

// Fake generator is used for testing. It lets you define
// a static set of credentials that is always returned.
type FakeTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     FakeSpecPtrInput          `pulumi:"spec"`
}

func (FakeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FakeType)(nil)).Elem()
}

func (i FakeTypeArgs) ToFakeTypeOutput() FakeTypeOutput {
	return i.ToFakeTypeOutputWithContext(context.Background())
}

func (i FakeTypeArgs) ToFakeTypeOutputWithContext(ctx context.Context) FakeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeTypeOutput)
}

// FakeTypeArrayInput is an input type that accepts FakeTypeArray and FakeTypeArrayOutput values.
// You can construct a concrete instance of `FakeTypeArrayInput` via:
//
//	FakeTypeArray{ FakeTypeArgs{...} }
type FakeTypeArrayInput interface {
	pulumi.Input

	ToFakeTypeArrayOutput() FakeTypeArrayOutput
	ToFakeTypeArrayOutputWithContext(context.Context) FakeTypeArrayOutput
}

type FakeTypeArray []FakeTypeInput

func (FakeTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FakeType)(nil)).Elem()
}

func (i FakeTypeArray) ToFakeTypeArrayOutput() FakeTypeArrayOutput {
	return i.ToFakeTypeArrayOutputWithContext(context.Background())
}

func (i FakeTypeArray) ToFakeTypeArrayOutputWithContext(ctx context.Context) FakeTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeTypeArrayOutput)
}

// Fake generator is used for testing. It lets you define
// a static set of credentials that is always returned.
type FakeTypeOutput struct{ *pulumi.OutputState }

func (FakeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FakeType)(nil)).Elem()
}

func (o FakeTypeOutput) ToFakeTypeOutput() FakeTypeOutput {
	return o
}

func (o FakeTypeOutput) ToFakeTypeOutputWithContext(ctx context.Context) FakeTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o FakeTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FakeType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FakeTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FakeType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o FakeTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v FakeType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o FakeTypeOutput) Spec() FakeSpecPtrOutput {
	return o.ApplyT(func(v FakeType) *FakeSpec { return v.Spec }).(FakeSpecPtrOutput)
}

type FakeTypeArrayOutput struct{ *pulumi.OutputState }

func (FakeTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FakeType)(nil)).Elem()
}

func (o FakeTypeArrayOutput) ToFakeTypeArrayOutput() FakeTypeArrayOutput {
	return o
}

func (o FakeTypeArrayOutput) ToFakeTypeArrayOutputWithContext(ctx context.Context) FakeTypeArrayOutput {
	return o
}

func (o FakeTypeArrayOutput) Index(i pulumi.IntInput) FakeTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FakeType {
		return vs[0].([]FakeType)[vs[1].(int)]
	}).(FakeTypeOutput)
}

// FakeList is a list of Fake
type FakeListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of fakes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []FakeType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// FakeListTypeInput is an input type that accepts FakeListTypeArgs and FakeListTypeOutput values.
// You can construct a concrete instance of `FakeListTypeInput` via:
//
//	FakeListTypeArgs{...}
type FakeListTypeInput interface {
	pulumi.Input

	ToFakeListTypeOutput() FakeListTypeOutput
	ToFakeListTypeOutputWithContext(context.Context) FakeListTypeOutput
}

// FakeList is a list of Fake
type FakeListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of fakes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items FakeTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (FakeListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FakeListType)(nil)).Elem()
}

func (i FakeListTypeArgs) ToFakeListTypeOutput() FakeListTypeOutput {
	return i.ToFakeListTypeOutputWithContext(context.Background())
}

func (i FakeListTypeArgs) ToFakeListTypeOutputWithContext(ctx context.Context) FakeListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeListTypeOutput)
}

// FakeList is a list of Fake
type FakeListTypeOutput struct{ *pulumi.OutputState }

func (FakeListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FakeListType)(nil)).Elem()
}

func (o FakeListTypeOutput) ToFakeListTypeOutput() FakeListTypeOutput {
	return o
}

func (o FakeListTypeOutput) ToFakeListTypeOutputWithContext(ctx context.Context) FakeListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o FakeListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FakeListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of fakes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o FakeListTypeOutput) Items() FakeTypeArrayOutput {
	return o.ApplyT(func(v FakeListType) []FakeType { return v.Items }).(FakeTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FakeListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FakeListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FakeListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v FakeListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Fake generator is used for testing. It lets you define
// a static set of credentials that is always returned.
type FakePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *FakeSpecPatch          `pulumi:"spec"`
}

// FakePatchTypeInput is an input type that accepts FakePatchTypeArgs and FakePatchTypeOutput values.
// You can construct a concrete instance of `FakePatchTypeInput` via:
//
//	FakePatchTypeArgs{...}
type FakePatchTypeInput interface {
	pulumi.Input

	ToFakePatchTypeOutput() FakePatchTypeOutput
	ToFakePatchTypeOutputWithContext(context.Context) FakePatchTypeOutput
}

// Fake generator is used for testing. It lets you define
// a static set of credentials that is always returned.
type FakePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     FakeSpecPatchPtrInput          `pulumi:"spec"`
}

func (FakePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FakePatchType)(nil)).Elem()
}

func (i FakePatchTypeArgs) ToFakePatchTypeOutput() FakePatchTypeOutput {
	return i.ToFakePatchTypeOutputWithContext(context.Background())
}

func (i FakePatchTypeArgs) ToFakePatchTypeOutputWithContext(ctx context.Context) FakePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakePatchTypeOutput)
}

// Fake generator is used for testing. It lets you define
// a static set of credentials that is always returned.
type FakePatchTypeOutput struct{ *pulumi.OutputState }

func (FakePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FakePatchType)(nil)).Elem()
}

func (o FakePatchTypeOutput) ToFakePatchTypeOutput() FakePatchTypeOutput {
	return o
}

func (o FakePatchTypeOutput) ToFakePatchTypeOutputWithContext(ctx context.Context) FakePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o FakePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FakePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FakePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FakePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o FakePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v FakePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o FakePatchTypeOutput) Spec() FakeSpecPatchPtrOutput {
	return o.ApplyT(func(v FakePatchType) *FakeSpecPatch { return v.Spec }).(FakeSpecPatchPtrOutput)
}

// FakeSpec contains the static data.
type FakeSpec struct {
	// Used to select the correct ESO controller (think: ingress.ingressClassName)
	// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
	Controller *string `pulumi:"controller"`
	// Data defines the static data returned
	// by this generator.
	Data map[string]string `pulumi:"data"`
}

// FakeSpecInput is an input type that accepts FakeSpecArgs and FakeSpecOutput values.
// You can construct a concrete instance of `FakeSpecInput` via:
//
//	FakeSpecArgs{...}
type FakeSpecInput interface {
	pulumi.Input

	ToFakeSpecOutput() FakeSpecOutput
	ToFakeSpecOutputWithContext(context.Context) FakeSpecOutput
}

// FakeSpec contains the static data.
type FakeSpecArgs struct {
	// Used to select the correct ESO controller (think: ingress.ingressClassName)
	// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
	Controller pulumi.StringPtrInput `pulumi:"controller"`
	// Data defines the static data returned
	// by this generator.
	Data pulumi.StringMapInput `pulumi:"data"`
}

func (FakeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FakeSpec)(nil)).Elem()
}

func (i FakeSpecArgs) ToFakeSpecOutput() FakeSpecOutput {
	return i.ToFakeSpecOutputWithContext(context.Background())
}

func (i FakeSpecArgs) ToFakeSpecOutputWithContext(ctx context.Context) FakeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeSpecOutput)
}

func (i FakeSpecArgs) ToFakeSpecPtrOutput() FakeSpecPtrOutput {
	return i.ToFakeSpecPtrOutputWithContext(context.Background())
}

func (i FakeSpecArgs) ToFakeSpecPtrOutputWithContext(ctx context.Context) FakeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeSpecOutput).ToFakeSpecPtrOutputWithContext(ctx)
}

// FakeSpecPtrInput is an input type that accepts FakeSpecArgs, FakeSpecPtr and FakeSpecPtrOutput values.
// You can construct a concrete instance of `FakeSpecPtrInput` via:
//
//	        FakeSpecArgs{...}
//
//	or:
//
//	        nil
type FakeSpecPtrInput interface {
	pulumi.Input

	ToFakeSpecPtrOutput() FakeSpecPtrOutput
	ToFakeSpecPtrOutputWithContext(context.Context) FakeSpecPtrOutput
}

type fakeSpecPtrType FakeSpecArgs

func FakeSpecPtr(v *FakeSpecArgs) FakeSpecPtrInput {
	return (*fakeSpecPtrType)(v)
}

func (*fakeSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FakeSpec)(nil)).Elem()
}

func (i *fakeSpecPtrType) ToFakeSpecPtrOutput() FakeSpecPtrOutput {
	return i.ToFakeSpecPtrOutputWithContext(context.Background())
}

func (i *fakeSpecPtrType) ToFakeSpecPtrOutputWithContext(ctx context.Context) FakeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeSpecPtrOutput)
}

// FakeSpec contains the static data.
type FakeSpecOutput struct{ *pulumi.OutputState }

func (FakeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FakeSpec)(nil)).Elem()
}

func (o FakeSpecOutput) ToFakeSpecOutput() FakeSpecOutput {
	return o
}

func (o FakeSpecOutput) ToFakeSpecOutputWithContext(ctx context.Context) FakeSpecOutput {
	return o
}

func (o FakeSpecOutput) ToFakeSpecPtrOutput() FakeSpecPtrOutput {
	return o.ToFakeSpecPtrOutputWithContext(context.Background())
}

func (o FakeSpecOutput) ToFakeSpecPtrOutputWithContext(ctx context.Context) FakeSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FakeSpec) *FakeSpec {
		return &v
	}).(FakeSpecPtrOutput)
}

// Used to select the correct ESO controller (think: ingress.ingressClassName)
// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
func (o FakeSpecOutput) Controller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FakeSpec) *string { return v.Controller }).(pulumi.StringPtrOutput)
}

// Data defines the static data returned
// by this generator.
func (o FakeSpecOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v FakeSpec) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

type FakeSpecPtrOutput struct{ *pulumi.OutputState }

func (FakeSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FakeSpec)(nil)).Elem()
}

func (o FakeSpecPtrOutput) ToFakeSpecPtrOutput() FakeSpecPtrOutput {
	return o
}

func (o FakeSpecPtrOutput) ToFakeSpecPtrOutputWithContext(ctx context.Context) FakeSpecPtrOutput {
	return o
}

func (o FakeSpecPtrOutput) Elem() FakeSpecOutput {
	return o.ApplyT(func(v *FakeSpec) FakeSpec {
		if v != nil {
			return *v
		}
		var ret FakeSpec
		return ret
	}).(FakeSpecOutput)
}

// Used to select the correct ESO controller (think: ingress.ingressClassName)
// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
func (o FakeSpecPtrOutput) Controller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FakeSpec) *string {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(pulumi.StringPtrOutput)
}

// Data defines the static data returned
// by this generator.
func (o FakeSpecPtrOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FakeSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Data
	}).(pulumi.StringMapOutput)
}

// FakeSpec contains the static data.
type FakeSpecPatch struct {
	// Used to select the correct ESO controller (think: ingress.ingressClassName)
	// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
	Controller *string `pulumi:"controller"`
	// Data defines the static data returned
	// by this generator.
	Data map[string]string `pulumi:"data"`
}

// FakeSpecPatchInput is an input type that accepts FakeSpecPatchArgs and FakeSpecPatchOutput values.
// You can construct a concrete instance of `FakeSpecPatchInput` via:
//
//	FakeSpecPatchArgs{...}
type FakeSpecPatchInput interface {
	pulumi.Input

	ToFakeSpecPatchOutput() FakeSpecPatchOutput
	ToFakeSpecPatchOutputWithContext(context.Context) FakeSpecPatchOutput
}

// FakeSpec contains the static data.
type FakeSpecPatchArgs struct {
	// Used to select the correct ESO controller (think: ingress.ingressClassName)
	// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
	Controller pulumi.StringPtrInput `pulumi:"controller"`
	// Data defines the static data returned
	// by this generator.
	Data pulumi.StringMapInput `pulumi:"data"`
}

func (FakeSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FakeSpecPatch)(nil)).Elem()
}

func (i FakeSpecPatchArgs) ToFakeSpecPatchOutput() FakeSpecPatchOutput {
	return i.ToFakeSpecPatchOutputWithContext(context.Background())
}

func (i FakeSpecPatchArgs) ToFakeSpecPatchOutputWithContext(ctx context.Context) FakeSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeSpecPatchOutput)
}

func (i FakeSpecPatchArgs) ToFakeSpecPatchPtrOutput() FakeSpecPatchPtrOutput {
	return i.ToFakeSpecPatchPtrOutputWithContext(context.Background())
}

func (i FakeSpecPatchArgs) ToFakeSpecPatchPtrOutputWithContext(ctx context.Context) FakeSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeSpecPatchOutput).ToFakeSpecPatchPtrOutputWithContext(ctx)
}

// FakeSpecPatchPtrInput is an input type that accepts FakeSpecPatchArgs, FakeSpecPatchPtr and FakeSpecPatchPtrOutput values.
// You can construct a concrete instance of `FakeSpecPatchPtrInput` via:
//
//	        FakeSpecPatchArgs{...}
//
//	or:
//
//	        nil
type FakeSpecPatchPtrInput interface {
	pulumi.Input

	ToFakeSpecPatchPtrOutput() FakeSpecPatchPtrOutput
	ToFakeSpecPatchPtrOutputWithContext(context.Context) FakeSpecPatchPtrOutput
}

type fakeSpecPatchPtrType FakeSpecPatchArgs

func FakeSpecPatchPtr(v *FakeSpecPatchArgs) FakeSpecPatchPtrInput {
	return (*fakeSpecPatchPtrType)(v)
}

func (*fakeSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FakeSpecPatch)(nil)).Elem()
}

func (i *fakeSpecPatchPtrType) ToFakeSpecPatchPtrOutput() FakeSpecPatchPtrOutput {
	return i.ToFakeSpecPatchPtrOutputWithContext(context.Background())
}

func (i *fakeSpecPatchPtrType) ToFakeSpecPatchPtrOutputWithContext(ctx context.Context) FakeSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeSpecPatchPtrOutput)
}

// FakeSpec contains the static data.
type FakeSpecPatchOutput struct{ *pulumi.OutputState }

func (FakeSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FakeSpecPatch)(nil)).Elem()
}

func (o FakeSpecPatchOutput) ToFakeSpecPatchOutput() FakeSpecPatchOutput {
	return o
}

func (o FakeSpecPatchOutput) ToFakeSpecPatchOutputWithContext(ctx context.Context) FakeSpecPatchOutput {
	return o
}

func (o FakeSpecPatchOutput) ToFakeSpecPatchPtrOutput() FakeSpecPatchPtrOutput {
	return o.ToFakeSpecPatchPtrOutputWithContext(context.Background())
}

func (o FakeSpecPatchOutput) ToFakeSpecPatchPtrOutputWithContext(ctx context.Context) FakeSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FakeSpecPatch) *FakeSpecPatch {
		return &v
	}).(FakeSpecPatchPtrOutput)
}

// Used to select the correct ESO controller (think: ingress.ingressClassName)
// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
func (o FakeSpecPatchOutput) Controller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FakeSpecPatch) *string { return v.Controller }).(pulumi.StringPtrOutput)
}

// Data defines the static data returned
// by this generator.
func (o FakeSpecPatchOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v FakeSpecPatch) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

type FakeSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (FakeSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FakeSpecPatch)(nil)).Elem()
}

func (o FakeSpecPatchPtrOutput) ToFakeSpecPatchPtrOutput() FakeSpecPatchPtrOutput {
	return o
}

func (o FakeSpecPatchPtrOutput) ToFakeSpecPatchPtrOutputWithContext(ctx context.Context) FakeSpecPatchPtrOutput {
	return o
}

func (o FakeSpecPatchPtrOutput) Elem() FakeSpecPatchOutput {
	return o.ApplyT(func(v *FakeSpecPatch) FakeSpecPatch {
		if v != nil {
			return *v
		}
		var ret FakeSpecPatch
		return ret
	}).(FakeSpecPatchOutput)
}

// Used to select the correct ESO controller (think: ingress.ingressClassName)
// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
func (o FakeSpecPatchPtrOutput) Controller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FakeSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(pulumi.StringPtrOutput)
}

// Data defines the static data returned
// by this generator.
func (o FakeSpecPatchPtrOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FakeSpecPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Data
	}).(pulumi.StringMapOutput)
}

// GCRAccessToken generates an GCP access token
// that can be used to authenticate with GCR.
type GCRAccessTokenType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec     *GCRAccessTokenSpec `pulumi:"spec"`
}

// GCRAccessTokenTypeInput is an input type that accepts GCRAccessTokenTypeArgs and GCRAccessTokenTypeOutput values.
// You can construct a concrete instance of `GCRAccessTokenTypeInput` via:
//
//	GCRAccessTokenTypeArgs{...}
type GCRAccessTokenTypeInput interface {
	pulumi.Input

	ToGCRAccessTokenTypeOutput() GCRAccessTokenTypeOutput
	ToGCRAccessTokenTypeOutputWithContext(context.Context) GCRAccessTokenTypeOutput
}

// GCRAccessToken generates an GCP access token
// that can be used to authenticate with GCR.
type GCRAccessTokenTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput  `pulumi:"metadata"`
	Spec     GCRAccessTokenSpecPtrInput `pulumi:"spec"`
}

func (GCRAccessTokenTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenType)(nil)).Elem()
}

func (i GCRAccessTokenTypeArgs) ToGCRAccessTokenTypeOutput() GCRAccessTokenTypeOutput {
	return i.ToGCRAccessTokenTypeOutputWithContext(context.Background())
}

func (i GCRAccessTokenTypeArgs) ToGCRAccessTokenTypeOutputWithContext(ctx context.Context) GCRAccessTokenTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenTypeOutput)
}

// GCRAccessTokenTypeArrayInput is an input type that accepts GCRAccessTokenTypeArray and GCRAccessTokenTypeArrayOutput values.
// You can construct a concrete instance of `GCRAccessTokenTypeArrayInput` via:
//
//	GCRAccessTokenTypeArray{ GCRAccessTokenTypeArgs{...} }
type GCRAccessTokenTypeArrayInput interface {
	pulumi.Input

	ToGCRAccessTokenTypeArrayOutput() GCRAccessTokenTypeArrayOutput
	ToGCRAccessTokenTypeArrayOutputWithContext(context.Context) GCRAccessTokenTypeArrayOutput
}

type GCRAccessTokenTypeArray []GCRAccessTokenTypeInput

func (GCRAccessTokenTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GCRAccessTokenType)(nil)).Elem()
}

func (i GCRAccessTokenTypeArray) ToGCRAccessTokenTypeArrayOutput() GCRAccessTokenTypeArrayOutput {
	return i.ToGCRAccessTokenTypeArrayOutputWithContext(context.Background())
}

func (i GCRAccessTokenTypeArray) ToGCRAccessTokenTypeArrayOutputWithContext(ctx context.Context) GCRAccessTokenTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenTypeArrayOutput)
}

// GCRAccessToken generates an GCP access token
// that can be used to authenticate with GCR.
type GCRAccessTokenTypeOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenType)(nil)).Elem()
}

func (o GCRAccessTokenTypeOutput) ToGCRAccessTokenTypeOutput() GCRAccessTokenTypeOutput {
	return o
}

func (o GCRAccessTokenTypeOutput) ToGCRAccessTokenTypeOutputWithContext(ctx context.Context) GCRAccessTokenTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GCRAccessTokenTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GCRAccessTokenTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GCRAccessTokenTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o GCRAccessTokenTypeOutput) Spec() GCRAccessTokenSpecPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenType) *GCRAccessTokenSpec { return v.Spec }).(GCRAccessTokenSpecPtrOutput)
}

type GCRAccessTokenTypeArrayOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GCRAccessTokenType)(nil)).Elem()
}

func (o GCRAccessTokenTypeArrayOutput) ToGCRAccessTokenTypeArrayOutput() GCRAccessTokenTypeArrayOutput {
	return o
}

func (o GCRAccessTokenTypeArrayOutput) ToGCRAccessTokenTypeArrayOutputWithContext(ctx context.Context) GCRAccessTokenTypeArrayOutput {
	return o
}

func (o GCRAccessTokenTypeArrayOutput) Index(i pulumi.IntInput) GCRAccessTokenTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GCRAccessTokenType {
		return vs[0].([]GCRAccessTokenType)[vs[1].(int)]
	}).(GCRAccessTokenTypeOutput)
}

// GCRAccessTokenList is a list of GCRAccessToken
type GCRAccessTokenListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of gcraccesstokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []GCRAccessTokenType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// GCRAccessTokenListTypeInput is an input type that accepts GCRAccessTokenListTypeArgs and GCRAccessTokenListTypeOutput values.
// You can construct a concrete instance of `GCRAccessTokenListTypeInput` via:
//
//	GCRAccessTokenListTypeArgs{...}
type GCRAccessTokenListTypeInput interface {
	pulumi.Input

	ToGCRAccessTokenListTypeOutput() GCRAccessTokenListTypeOutput
	ToGCRAccessTokenListTypeOutputWithContext(context.Context) GCRAccessTokenListTypeOutput
}

// GCRAccessTokenList is a list of GCRAccessToken
type GCRAccessTokenListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of gcraccesstokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items GCRAccessTokenTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (GCRAccessTokenListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenListType)(nil)).Elem()
}

func (i GCRAccessTokenListTypeArgs) ToGCRAccessTokenListTypeOutput() GCRAccessTokenListTypeOutput {
	return i.ToGCRAccessTokenListTypeOutputWithContext(context.Background())
}

func (i GCRAccessTokenListTypeArgs) ToGCRAccessTokenListTypeOutputWithContext(ctx context.Context) GCRAccessTokenListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenListTypeOutput)
}

// GCRAccessTokenList is a list of GCRAccessToken
type GCRAccessTokenListTypeOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenListType)(nil)).Elem()
}

func (o GCRAccessTokenListTypeOutput) ToGCRAccessTokenListTypeOutput() GCRAccessTokenListTypeOutput {
	return o
}

func (o GCRAccessTokenListTypeOutput) ToGCRAccessTokenListTypeOutputWithContext(ctx context.Context) GCRAccessTokenListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GCRAccessTokenListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of gcraccesstokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o GCRAccessTokenListTypeOutput) Items() GCRAccessTokenTypeArrayOutput {
	return o.ApplyT(func(v GCRAccessTokenListType) []GCRAccessTokenType { return v.Items }).(GCRAccessTokenTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GCRAccessTokenListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GCRAccessTokenListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// GCRAccessToken generates an GCP access token
// that can be used to authenticate with GCR.
type GCRAccessTokenPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch  `pulumi:"metadata"`
	Spec     *GCRAccessTokenSpecPatch `pulumi:"spec"`
}

// GCRAccessTokenPatchTypeInput is an input type that accepts GCRAccessTokenPatchTypeArgs and GCRAccessTokenPatchTypeOutput values.
// You can construct a concrete instance of `GCRAccessTokenPatchTypeInput` via:
//
//	GCRAccessTokenPatchTypeArgs{...}
type GCRAccessTokenPatchTypeInput interface {
	pulumi.Input

	ToGCRAccessTokenPatchTypeOutput() GCRAccessTokenPatchTypeOutput
	ToGCRAccessTokenPatchTypeOutputWithContext(context.Context) GCRAccessTokenPatchTypeOutput
}

// GCRAccessToken generates an GCP access token
// that can be used to authenticate with GCR.
type GCRAccessTokenPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput  `pulumi:"metadata"`
	Spec     GCRAccessTokenSpecPatchPtrInput `pulumi:"spec"`
}

func (GCRAccessTokenPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenPatchType)(nil)).Elem()
}

func (i GCRAccessTokenPatchTypeArgs) ToGCRAccessTokenPatchTypeOutput() GCRAccessTokenPatchTypeOutput {
	return i.ToGCRAccessTokenPatchTypeOutputWithContext(context.Background())
}

func (i GCRAccessTokenPatchTypeArgs) ToGCRAccessTokenPatchTypeOutputWithContext(ctx context.Context) GCRAccessTokenPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenPatchTypeOutput)
}

// GCRAccessToken generates an GCP access token
// that can be used to authenticate with GCR.
type GCRAccessTokenPatchTypeOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenPatchType)(nil)).Elem()
}

func (o GCRAccessTokenPatchTypeOutput) ToGCRAccessTokenPatchTypeOutput() GCRAccessTokenPatchTypeOutput {
	return o
}

func (o GCRAccessTokenPatchTypeOutput) ToGCRAccessTokenPatchTypeOutputWithContext(ctx context.Context) GCRAccessTokenPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GCRAccessTokenPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GCRAccessTokenPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GCRAccessTokenPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o GCRAccessTokenPatchTypeOutput) Spec() GCRAccessTokenSpecPatchPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenPatchType) *GCRAccessTokenSpecPatch { return v.Spec }).(GCRAccessTokenSpecPatchPtrOutput)
}

type GCRAccessTokenSpec struct {
	Auth *GCRAccessTokenSpecAuth `pulumi:"auth"`
	// ProjectID defines which project to use to authenticate with
	ProjectID *string `pulumi:"projectID"`
}

// GCRAccessTokenSpecInput is an input type that accepts GCRAccessTokenSpecArgs and GCRAccessTokenSpecOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecInput` via:
//
//	GCRAccessTokenSpecArgs{...}
type GCRAccessTokenSpecInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecOutput() GCRAccessTokenSpecOutput
	ToGCRAccessTokenSpecOutputWithContext(context.Context) GCRAccessTokenSpecOutput
}

type GCRAccessTokenSpecArgs struct {
	Auth GCRAccessTokenSpecAuthPtrInput `pulumi:"auth"`
	// ProjectID defines which project to use to authenticate with
	ProjectID pulumi.StringPtrInput `pulumi:"projectID"`
}

func (GCRAccessTokenSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpec)(nil)).Elem()
}

func (i GCRAccessTokenSpecArgs) ToGCRAccessTokenSpecOutput() GCRAccessTokenSpecOutput {
	return i.ToGCRAccessTokenSpecOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecArgs) ToGCRAccessTokenSpecOutputWithContext(ctx context.Context) GCRAccessTokenSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecOutput)
}

func (i GCRAccessTokenSpecArgs) ToGCRAccessTokenSpecPtrOutput() GCRAccessTokenSpecPtrOutput {
	return i.ToGCRAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecArgs) ToGCRAccessTokenSpecPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecOutput).ToGCRAccessTokenSpecPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecPtrInput is an input type that accepts GCRAccessTokenSpecArgs, GCRAccessTokenSpecPtr and GCRAccessTokenSpecPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecPtrInput` via:
//
//	        GCRAccessTokenSpecArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecPtrOutput() GCRAccessTokenSpecPtrOutput
	ToGCRAccessTokenSpecPtrOutputWithContext(context.Context) GCRAccessTokenSpecPtrOutput
}

type gcraccessTokenSpecPtrType GCRAccessTokenSpecArgs

func GCRAccessTokenSpecPtr(v *GCRAccessTokenSpecArgs) GCRAccessTokenSpecPtrInput {
	return (*gcraccessTokenSpecPtrType)(v)
}

func (*gcraccessTokenSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpec)(nil)).Elem()
}

func (i *gcraccessTokenSpecPtrType) ToGCRAccessTokenSpecPtrOutput() GCRAccessTokenSpecPtrOutput {
	return i.ToGCRAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecPtrType) ToGCRAccessTokenSpecPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecPtrOutput)
}

type GCRAccessTokenSpecOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpec)(nil)).Elem()
}

func (o GCRAccessTokenSpecOutput) ToGCRAccessTokenSpecOutput() GCRAccessTokenSpecOutput {
	return o
}

func (o GCRAccessTokenSpecOutput) ToGCRAccessTokenSpecOutputWithContext(ctx context.Context) GCRAccessTokenSpecOutput {
	return o
}

func (o GCRAccessTokenSpecOutput) ToGCRAccessTokenSpecPtrOutput() GCRAccessTokenSpecPtrOutput {
	return o.ToGCRAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecOutput) ToGCRAccessTokenSpecPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpec) *GCRAccessTokenSpec {
		return &v
	}).(GCRAccessTokenSpecPtrOutput)
}

func (o GCRAccessTokenSpecOutput) Auth() GCRAccessTokenSpecAuthPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpec) *GCRAccessTokenSpecAuth { return v.Auth }).(GCRAccessTokenSpecAuthPtrOutput)
}

// ProjectID defines which project to use to authenticate with
func (o GCRAccessTokenSpecOutput) ProjectID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpec) *string { return v.ProjectID }).(pulumi.StringPtrOutput)
}

type GCRAccessTokenSpecPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpec)(nil)).Elem()
}

func (o GCRAccessTokenSpecPtrOutput) ToGCRAccessTokenSpecPtrOutput() GCRAccessTokenSpecPtrOutput {
	return o
}

func (o GCRAccessTokenSpecPtrOutput) ToGCRAccessTokenSpecPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecPtrOutput {
	return o
}

func (o GCRAccessTokenSpecPtrOutput) Elem() GCRAccessTokenSpecOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpec) GCRAccessTokenSpec {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpec
		return ret
	}).(GCRAccessTokenSpecOutput)
}

func (o GCRAccessTokenSpecPtrOutput) Auth() GCRAccessTokenSpecAuthPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpec) *GCRAccessTokenSpecAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(GCRAccessTokenSpecAuthPtrOutput)
}

// ProjectID defines which project to use to authenticate with
func (o GCRAccessTokenSpecPtrOutput) ProjectID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return v.ProjectID
	}).(pulumi.StringPtrOutput)
}

// Auth defines the means for authenticating with GCP
type GCRAccessTokenSpecAuth struct {
	SecretRef        *GCRAccessTokenSpecAuthSecretRef        `pulumi:"secretRef"`
	WorkloadIdentity *GCRAccessTokenSpecAuthWorkloadIdentity `pulumi:"workloadIdentity"`
}

// GCRAccessTokenSpecAuthInput is an input type that accepts GCRAccessTokenSpecAuthArgs and GCRAccessTokenSpecAuthOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthInput` via:
//
//	GCRAccessTokenSpecAuthArgs{...}
type GCRAccessTokenSpecAuthInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthOutput() GCRAccessTokenSpecAuthOutput
	ToGCRAccessTokenSpecAuthOutputWithContext(context.Context) GCRAccessTokenSpecAuthOutput
}

// Auth defines the means for authenticating with GCP
type GCRAccessTokenSpecAuthArgs struct {
	SecretRef        GCRAccessTokenSpecAuthSecretRefPtrInput        `pulumi:"secretRef"`
	WorkloadIdentity GCRAccessTokenSpecAuthWorkloadIdentityPtrInput `pulumi:"workloadIdentity"`
}

func (GCRAccessTokenSpecAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuth)(nil)).Elem()
}

func (i GCRAccessTokenSpecAuthArgs) ToGCRAccessTokenSpecAuthOutput() GCRAccessTokenSpecAuthOutput {
	return i.ToGCRAccessTokenSpecAuthOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthArgs) ToGCRAccessTokenSpecAuthOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthOutput)
}

func (i GCRAccessTokenSpecAuthArgs) ToGCRAccessTokenSpecAuthPtrOutput() GCRAccessTokenSpecAuthPtrOutput {
	return i.ToGCRAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthArgs) ToGCRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthOutput).ToGCRAccessTokenSpecAuthPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecAuthPtrInput is an input type that accepts GCRAccessTokenSpecAuthArgs, GCRAccessTokenSpecAuthPtr and GCRAccessTokenSpecAuthPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthPtrInput` via:
//
//	        GCRAccessTokenSpecAuthArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecAuthPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthPtrOutput() GCRAccessTokenSpecAuthPtrOutput
	ToGCRAccessTokenSpecAuthPtrOutputWithContext(context.Context) GCRAccessTokenSpecAuthPtrOutput
}

type gcraccessTokenSpecAuthPtrType GCRAccessTokenSpecAuthArgs

func GCRAccessTokenSpecAuthPtr(v *GCRAccessTokenSpecAuthArgs) GCRAccessTokenSpecAuthPtrInput {
	return (*gcraccessTokenSpecAuthPtrType)(v)
}

func (*gcraccessTokenSpecAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuth)(nil)).Elem()
}

func (i *gcraccessTokenSpecAuthPtrType) ToGCRAccessTokenSpecAuthPtrOutput() GCRAccessTokenSpecAuthPtrOutput {
	return i.ToGCRAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecAuthPtrType) ToGCRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthPtrOutput)
}

// Auth defines the means for authenticating with GCP
type GCRAccessTokenSpecAuthOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuth)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthOutput) ToGCRAccessTokenSpecAuthOutput() GCRAccessTokenSpecAuthOutput {
	return o
}

func (o GCRAccessTokenSpecAuthOutput) ToGCRAccessTokenSpecAuthOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthOutput {
	return o
}

func (o GCRAccessTokenSpecAuthOutput) ToGCRAccessTokenSpecAuthPtrOutput() GCRAccessTokenSpecAuthPtrOutput {
	return o.ToGCRAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecAuthOutput) ToGCRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecAuth) *GCRAccessTokenSpecAuth {
		return &v
	}).(GCRAccessTokenSpecAuthPtrOutput)
}

func (o GCRAccessTokenSpecAuthOutput) SecretRef() GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuth) *GCRAccessTokenSpecAuthSecretRef { return v.SecretRef }).(GCRAccessTokenSpecAuthSecretRefPtrOutput)
}

func (o GCRAccessTokenSpecAuthOutput) WorkloadIdentity() GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuth) *GCRAccessTokenSpecAuthWorkloadIdentity { return v.WorkloadIdentity }).(GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

type GCRAccessTokenSpecAuthPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuth)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthPtrOutput) ToGCRAccessTokenSpecAuthPtrOutput() GCRAccessTokenSpecAuthPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthPtrOutput) ToGCRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthPtrOutput) Elem() GCRAccessTokenSpecAuthOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuth) GCRAccessTokenSpecAuth {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecAuth
		return ret
	}).(GCRAccessTokenSpecAuthOutput)
}

func (o GCRAccessTokenSpecAuthPtrOutput) SecretRef() GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuth) *GCRAccessTokenSpecAuthSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(GCRAccessTokenSpecAuthSecretRefPtrOutput)
}

func (o GCRAccessTokenSpecAuthPtrOutput) WorkloadIdentity() GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuth) *GCRAccessTokenSpecAuthWorkloadIdentity {
		if v == nil {
			return nil
		}
		return v.WorkloadIdentity
	}).(GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

// Auth defines the means for authenticating with GCP
type GCRAccessTokenSpecAuthPatch struct {
	SecretRef        *GCRAccessTokenSpecAuthSecretRefPatch        `pulumi:"secretRef"`
	WorkloadIdentity *GCRAccessTokenSpecAuthWorkloadIdentityPatch `pulumi:"workloadIdentity"`
}

// GCRAccessTokenSpecAuthPatchInput is an input type that accepts GCRAccessTokenSpecAuthPatchArgs and GCRAccessTokenSpecAuthPatchOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthPatchInput` via:
//
//	GCRAccessTokenSpecAuthPatchArgs{...}
type GCRAccessTokenSpecAuthPatchInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthPatchOutput() GCRAccessTokenSpecAuthPatchOutput
	ToGCRAccessTokenSpecAuthPatchOutputWithContext(context.Context) GCRAccessTokenSpecAuthPatchOutput
}

// Auth defines the means for authenticating with GCP
type GCRAccessTokenSpecAuthPatchArgs struct {
	SecretRef        GCRAccessTokenSpecAuthSecretRefPatchPtrInput        `pulumi:"secretRef"`
	WorkloadIdentity GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrInput `pulumi:"workloadIdentity"`
}

func (GCRAccessTokenSpecAuthPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthPatch)(nil)).Elem()
}

func (i GCRAccessTokenSpecAuthPatchArgs) ToGCRAccessTokenSpecAuthPatchOutput() GCRAccessTokenSpecAuthPatchOutput {
	return i.ToGCRAccessTokenSpecAuthPatchOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthPatchArgs) ToGCRAccessTokenSpecAuthPatchOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthPatchOutput)
}

func (i GCRAccessTokenSpecAuthPatchArgs) ToGCRAccessTokenSpecAuthPatchPtrOutput() GCRAccessTokenSpecAuthPatchPtrOutput {
	return i.ToGCRAccessTokenSpecAuthPatchPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthPatchArgs) ToGCRAccessTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthPatchOutput).ToGCRAccessTokenSpecAuthPatchPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecAuthPatchPtrInput is an input type that accepts GCRAccessTokenSpecAuthPatchArgs, GCRAccessTokenSpecAuthPatchPtr and GCRAccessTokenSpecAuthPatchPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthPatchPtrInput` via:
//
//	        GCRAccessTokenSpecAuthPatchArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecAuthPatchPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthPatchPtrOutput() GCRAccessTokenSpecAuthPatchPtrOutput
	ToGCRAccessTokenSpecAuthPatchPtrOutputWithContext(context.Context) GCRAccessTokenSpecAuthPatchPtrOutput
}

type gcraccessTokenSpecAuthPatchPtrType GCRAccessTokenSpecAuthPatchArgs

func GCRAccessTokenSpecAuthPatchPtr(v *GCRAccessTokenSpecAuthPatchArgs) GCRAccessTokenSpecAuthPatchPtrInput {
	return (*gcraccessTokenSpecAuthPatchPtrType)(v)
}

func (*gcraccessTokenSpecAuthPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthPatch)(nil)).Elem()
}

func (i *gcraccessTokenSpecAuthPatchPtrType) ToGCRAccessTokenSpecAuthPatchPtrOutput() GCRAccessTokenSpecAuthPatchPtrOutput {
	return i.ToGCRAccessTokenSpecAuthPatchPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecAuthPatchPtrType) ToGCRAccessTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthPatchPtrOutput)
}

// Auth defines the means for authenticating with GCP
type GCRAccessTokenSpecAuthPatchOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthPatch)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthPatchOutput) ToGCRAccessTokenSpecAuthPatchOutput() GCRAccessTokenSpecAuthPatchOutput {
	return o
}

func (o GCRAccessTokenSpecAuthPatchOutput) ToGCRAccessTokenSpecAuthPatchOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthPatchOutput {
	return o
}

func (o GCRAccessTokenSpecAuthPatchOutput) ToGCRAccessTokenSpecAuthPatchPtrOutput() GCRAccessTokenSpecAuthPatchPtrOutput {
	return o.ToGCRAccessTokenSpecAuthPatchPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecAuthPatchOutput) ToGCRAccessTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecAuthPatch) *GCRAccessTokenSpecAuthPatch {
		return &v
	}).(GCRAccessTokenSpecAuthPatchPtrOutput)
}

func (o GCRAccessTokenSpecAuthPatchOutput) SecretRef() GCRAccessTokenSpecAuthSecretRefPatchPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthPatch) *GCRAccessTokenSpecAuthSecretRefPatch { return v.SecretRef }).(GCRAccessTokenSpecAuthSecretRefPatchPtrOutput)
}

func (o GCRAccessTokenSpecAuthPatchOutput) WorkloadIdentity() GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthPatch) *GCRAccessTokenSpecAuthWorkloadIdentityPatch {
		return v.WorkloadIdentity
	}).(GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput)
}

type GCRAccessTokenSpecAuthPatchPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthPatch)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthPatchPtrOutput) ToGCRAccessTokenSpecAuthPatchPtrOutput() GCRAccessTokenSpecAuthPatchPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthPatchPtrOutput) ToGCRAccessTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthPatchPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthPatchPtrOutput) Elem() GCRAccessTokenSpecAuthPatchOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthPatch) GCRAccessTokenSpecAuthPatch {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecAuthPatch
		return ret
	}).(GCRAccessTokenSpecAuthPatchOutput)
}

func (o GCRAccessTokenSpecAuthPatchPtrOutput) SecretRef() GCRAccessTokenSpecAuthSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthPatch) *GCRAccessTokenSpecAuthSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(GCRAccessTokenSpecAuthSecretRefPatchPtrOutput)
}

func (o GCRAccessTokenSpecAuthPatchPtrOutput) WorkloadIdentity() GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthPatch) *GCRAccessTokenSpecAuthWorkloadIdentityPatch {
		if v == nil {
			return nil
		}
		return v.WorkloadIdentity
	}).(GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput)
}

type GCRAccessTokenSpecAuthSecretRef struct {
	SecretAccessKeySecretRef *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef `pulumi:"secretAccessKeySecretRef"`
}

// GCRAccessTokenSpecAuthSecretRefInput is an input type that accepts GCRAccessTokenSpecAuthSecretRefArgs and GCRAccessTokenSpecAuthSecretRefOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthSecretRefInput` via:
//
//	GCRAccessTokenSpecAuthSecretRefArgs{...}
type GCRAccessTokenSpecAuthSecretRefInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthSecretRefOutput() GCRAccessTokenSpecAuthSecretRefOutput
	ToGCRAccessTokenSpecAuthSecretRefOutputWithContext(context.Context) GCRAccessTokenSpecAuthSecretRefOutput
}

type GCRAccessTokenSpecAuthSecretRefArgs struct {
	SecretAccessKeySecretRef GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput `pulumi:"secretAccessKeySecretRef"`
}

func (GCRAccessTokenSpecAuthSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRef)(nil)).Elem()
}

func (i GCRAccessTokenSpecAuthSecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefOutput() GCRAccessTokenSpecAuthSecretRefOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthSecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefOutput)
}

func (i GCRAccessTokenSpecAuthSecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthSecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefOutput).ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecAuthSecretRefPtrInput is an input type that accepts GCRAccessTokenSpecAuthSecretRefArgs, GCRAccessTokenSpecAuthSecretRefPtr and GCRAccessTokenSpecAuthSecretRefPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthSecretRefPtrInput` via:
//
//	        GCRAccessTokenSpecAuthSecretRefArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecAuthSecretRefPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthSecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefPtrOutput
	ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(context.Context) GCRAccessTokenSpecAuthSecretRefPtrOutput
}

type gcraccessTokenSpecAuthSecretRefPtrType GCRAccessTokenSpecAuthSecretRefArgs

func GCRAccessTokenSpecAuthSecretRefPtr(v *GCRAccessTokenSpecAuthSecretRefArgs) GCRAccessTokenSpecAuthSecretRefPtrInput {
	return (*gcraccessTokenSpecAuthSecretRefPtrType)(v)
}

func (*gcraccessTokenSpecAuthSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthSecretRef)(nil)).Elem()
}

func (i *gcraccessTokenSpecAuthSecretRefPtrType) ToGCRAccessTokenSpecAuthSecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecAuthSecretRefPtrType) ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefPtrOutput)
}

type GCRAccessTokenSpecAuthSecretRefOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRef)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthSecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefOutput() GCRAccessTokenSpecAuthSecretRefOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return o.ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecAuthSecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecAuthSecretRef) *GCRAccessTokenSpecAuthSecretRef {
		return &v
	}).(GCRAccessTokenSpecAuthSecretRefPtrOutput)
}

func (o GCRAccessTokenSpecAuthSecretRefOutput) SecretAccessKeySecretRef() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthSecretRef) *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		return v.SecretAccessKeySecretRef
	}).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

type GCRAccessTokenSpecAuthSecretRefPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthSecretRef)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthSecretRefPtrOutput) ToGCRAccessTokenSpecAuthSecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefPtrOutput) ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefPtrOutput) Elem() GCRAccessTokenSpecAuthSecretRefOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRef) GCRAccessTokenSpecAuthSecretRef {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecAuthSecretRef
		return ret
	}).(GCRAccessTokenSpecAuthSecretRefOutput)
}

func (o GCRAccessTokenSpecAuthSecretRefPtrOutput) SecretAccessKeySecretRef() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRef) *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		if v == nil {
			return nil
		}
		return v.SecretAccessKeySecretRef
	}).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

type GCRAccessTokenSpecAuthSecretRefPatch struct {
	SecretAccessKeySecretRef *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch `pulumi:"secretAccessKeySecretRef"`
}

// GCRAccessTokenSpecAuthSecretRefPatchInput is an input type that accepts GCRAccessTokenSpecAuthSecretRefPatchArgs and GCRAccessTokenSpecAuthSecretRefPatchOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthSecretRefPatchInput` via:
//
//	GCRAccessTokenSpecAuthSecretRefPatchArgs{...}
type GCRAccessTokenSpecAuthSecretRefPatchInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthSecretRefPatchOutput() GCRAccessTokenSpecAuthSecretRefPatchOutput
	ToGCRAccessTokenSpecAuthSecretRefPatchOutputWithContext(context.Context) GCRAccessTokenSpecAuthSecretRefPatchOutput
}

type GCRAccessTokenSpecAuthSecretRefPatchArgs struct {
	SecretAccessKeySecretRef GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrInput `pulumi:"secretAccessKeySecretRef"`
}

func (GCRAccessTokenSpecAuthSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefPatch)(nil)).Elem()
}

func (i GCRAccessTokenSpecAuthSecretRefPatchArgs) ToGCRAccessTokenSpecAuthSecretRefPatchOutput() GCRAccessTokenSpecAuthSecretRefPatchOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefPatchOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthSecretRefPatchArgs) ToGCRAccessTokenSpecAuthSecretRefPatchOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefPatchOutput)
}

func (i GCRAccessTokenSpecAuthSecretRefPatchArgs) ToGCRAccessTokenSpecAuthSecretRefPatchPtrOutput() GCRAccessTokenSpecAuthSecretRefPatchPtrOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthSecretRefPatchArgs) ToGCRAccessTokenSpecAuthSecretRefPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefPatchOutput).ToGCRAccessTokenSpecAuthSecretRefPatchPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecAuthSecretRefPatchPtrInput is an input type that accepts GCRAccessTokenSpecAuthSecretRefPatchArgs, GCRAccessTokenSpecAuthSecretRefPatchPtr and GCRAccessTokenSpecAuthSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthSecretRefPatchPtrInput` via:
//
//	        GCRAccessTokenSpecAuthSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecAuthSecretRefPatchPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthSecretRefPatchPtrOutput() GCRAccessTokenSpecAuthSecretRefPatchPtrOutput
	ToGCRAccessTokenSpecAuthSecretRefPatchPtrOutputWithContext(context.Context) GCRAccessTokenSpecAuthSecretRefPatchPtrOutput
}

type gcraccessTokenSpecAuthSecretRefPatchPtrType GCRAccessTokenSpecAuthSecretRefPatchArgs

func GCRAccessTokenSpecAuthSecretRefPatchPtr(v *GCRAccessTokenSpecAuthSecretRefPatchArgs) GCRAccessTokenSpecAuthSecretRefPatchPtrInput {
	return (*gcraccessTokenSpecAuthSecretRefPatchPtrType)(v)
}

func (*gcraccessTokenSpecAuthSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthSecretRefPatch)(nil)).Elem()
}

func (i *gcraccessTokenSpecAuthSecretRefPatchPtrType) ToGCRAccessTokenSpecAuthSecretRefPatchPtrOutput() GCRAccessTokenSpecAuthSecretRefPatchPtrOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecAuthSecretRefPatchPtrType) ToGCRAccessTokenSpecAuthSecretRefPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefPatchPtrOutput)
}

type GCRAccessTokenSpecAuthSecretRefPatchOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefPatch)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthSecretRefPatchOutput) ToGCRAccessTokenSpecAuthSecretRefPatchOutput() GCRAccessTokenSpecAuthSecretRefPatchOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefPatchOutput) ToGCRAccessTokenSpecAuthSecretRefPatchOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefPatchOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefPatchOutput) ToGCRAccessTokenSpecAuthSecretRefPatchPtrOutput() GCRAccessTokenSpecAuthSecretRefPatchPtrOutput {
	return o.ToGCRAccessTokenSpecAuthSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecAuthSecretRefPatchOutput) ToGCRAccessTokenSpecAuthSecretRefPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecAuthSecretRefPatch) *GCRAccessTokenSpecAuthSecretRefPatch {
		return &v
	}).(GCRAccessTokenSpecAuthSecretRefPatchPtrOutput)
}

func (o GCRAccessTokenSpecAuthSecretRefPatchOutput) SecretAccessKeySecretRef() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthSecretRefPatch) *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch {
		return v.SecretAccessKeySecretRef
	}).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput)
}

type GCRAccessTokenSpecAuthSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthSecretRefPatch)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthSecretRefPatchPtrOutput) ToGCRAccessTokenSpecAuthSecretRefPatchPtrOutput() GCRAccessTokenSpecAuthSecretRefPatchPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefPatchPtrOutput) ToGCRAccessTokenSpecAuthSecretRefPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefPatchPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefPatchPtrOutput) Elem() GCRAccessTokenSpecAuthSecretRefPatchOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRefPatch) GCRAccessTokenSpecAuthSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecAuthSecretRefPatch
		return ret
	}).(GCRAccessTokenSpecAuthSecretRefPatchOutput)
}

func (o GCRAccessTokenSpecAuthSecretRefPatchPtrOutput) SecretAccessKeySecretRef() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRefPatch) *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretAccessKeySecretRef
	}).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput)
}

// The SecretAccessKey is used for authentication
type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefInput is an input type that accepts GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs and GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefInput` via:
//
//	GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{...}
type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput
	ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput
}

// The SecretAccessKey is used for authentication
type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (i GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput)
}

func (i GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput).ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput is an input type that accepts GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs, GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtr and GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput` via:
//
//	        GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput
	ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput
}

type gcraccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs

func GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtr(v *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput {
	return (*gcraccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType)(v)
}

func (*gcraccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (i *gcraccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The SecretAccessKey is used for authentication
type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		return &v
	}).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Elem() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef
		return ret
	}).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The SecretAccessKey is used for authentication
type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchInput is an input type that accepts GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs and GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchInput` via:
//
//	GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs{...}
type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput
	ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutputWithContext(context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput
}

// The SecretAccessKey is used for authentication
type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch)(nil)).Elem()
}

func (i GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput)
}

func (i GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput).ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrInput is an input type that accepts GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs, GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtr and GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrInput` via:
//
//	        GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput
	ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput
}

type gcraccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrType GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs

func GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtr(v *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrInput {
	return (*gcraccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrType)(v)
}

func (*gcraccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch)(nil)).Elem()
}

func (i *gcraccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrType) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrType) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput)
}

// The SecretAccessKey is used for authentication
type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o.ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch {
		return &v
	}).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput) Elem() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch
		return ret
	}).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type GCRAccessTokenSpecAuthWorkloadIdentity struct {
	ClusterLocation   *string                                                  `pulumi:"clusterLocation"`
	ClusterName       *string                                                  `pulumi:"clusterName"`
	ClusterProjectID  *string                                                  `pulumi:"clusterProjectID"`
	ServiceAccountRef *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef `pulumi:"serviceAccountRef"`
}

// GCRAccessTokenSpecAuthWorkloadIdentityInput is an input type that accepts GCRAccessTokenSpecAuthWorkloadIdentityArgs and GCRAccessTokenSpecAuthWorkloadIdentityOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthWorkloadIdentityInput` via:
//
//	GCRAccessTokenSpecAuthWorkloadIdentityArgs{...}
type GCRAccessTokenSpecAuthWorkloadIdentityInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthWorkloadIdentityOutput() GCRAccessTokenSpecAuthWorkloadIdentityOutput
	ToGCRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(context.Context) GCRAccessTokenSpecAuthWorkloadIdentityOutput
}

type GCRAccessTokenSpecAuthWorkloadIdentityArgs struct {
	ClusterLocation   pulumi.StringPtrInput                                           `pulumi:"clusterLocation"`
	ClusterName       pulumi.StringPtrInput                                           `pulumi:"clusterName"`
	ClusterProjectID  pulumi.StringPtrInput                                           `pulumi:"clusterProjectID"`
	ServiceAccountRef GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput `pulumi:"serviceAccountRef"`
}

func (GCRAccessTokenSpecAuthWorkloadIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityOutput() GCRAccessTokenSpecAuthWorkloadIdentityOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityOutput)
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityOutput).ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecAuthWorkloadIdentityPtrInput is an input type that accepts GCRAccessTokenSpecAuthWorkloadIdentityArgs, GCRAccessTokenSpecAuthWorkloadIdentityPtr and GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthWorkloadIdentityPtrInput` via:
//
//	        GCRAccessTokenSpecAuthWorkloadIdentityArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecAuthWorkloadIdentityPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput
	ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput
}

type gcraccessTokenSpecAuthWorkloadIdentityPtrType GCRAccessTokenSpecAuthWorkloadIdentityArgs

func GCRAccessTokenSpecAuthWorkloadIdentityPtr(v *GCRAccessTokenSpecAuthWorkloadIdentityArgs) GCRAccessTokenSpecAuthWorkloadIdentityPtrInput {
	return (*gcraccessTokenSpecAuthWorkloadIdentityPtrType)(v)
}

func (*gcraccessTokenSpecAuthWorkloadIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (i *gcraccessTokenSpecAuthWorkloadIdentityPtrType) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecAuthWorkloadIdentityPtrType) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

type GCRAccessTokenSpecAuthWorkloadIdentityOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthWorkloadIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityOutput() GCRAccessTokenSpecAuthWorkloadIdentityOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecAuthWorkloadIdentity) *GCRAccessTokenSpecAuthWorkloadIdentity {
		return &v
	}).(GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ClusterLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentity) *string { return v.ClusterLocation }).(pulumi.StringPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentity) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ClusterProjectID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentity) *string { return v.ClusterProjectID }).(pulumi.StringPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ServiceAccountRef() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentity) *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		return v.ServiceAccountRef
	}).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput)
}

type GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) Elem() GCRAccessTokenSpecAuthWorkloadIdentityOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentity) GCRAccessTokenSpecAuthWorkloadIdentity {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecAuthWorkloadIdentity
		return ret
	}).(GCRAccessTokenSpecAuthWorkloadIdentityOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ClusterLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ClusterLocation
	}).(pulumi.StringPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ClusterName
	}).(pulumi.StringPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ClusterProjectID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ClusterProjectID
	}).(pulumi.StringPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ServiceAccountRef() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentity) *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput)
}

type GCRAccessTokenSpecAuthWorkloadIdentityPatch struct {
	ClusterLocation   *string                                                       `pulumi:"clusterLocation"`
	ClusterName       *string                                                       `pulumi:"clusterName"`
	ClusterProjectID  *string                                                       `pulumi:"clusterProjectID"`
	ServiceAccountRef *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch `pulumi:"serviceAccountRef"`
}

// GCRAccessTokenSpecAuthWorkloadIdentityPatchInput is an input type that accepts GCRAccessTokenSpecAuthWorkloadIdentityPatchArgs and GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthWorkloadIdentityPatchInput` via:
//
//	GCRAccessTokenSpecAuthWorkloadIdentityPatchArgs{...}
type GCRAccessTokenSpecAuthWorkloadIdentityPatchInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthWorkloadIdentityPatchOutput() GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput
	ToGCRAccessTokenSpecAuthWorkloadIdentityPatchOutputWithContext(context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput
}

type GCRAccessTokenSpecAuthWorkloadIdentityPatchArgs struct {
	ClusterLocation   pulumi.StringPtrInput                                                `pulumi:"clusterLocation"`
	ClusterName       pulumi.StringPtrInput                                                `pulumi:"clusterName"`
	ClusterProjectID  pulumi.StringPtrInput                                                `pulumi:"clusterProjectID"`
	ServiceAccountRef GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrInput `pulumi:"serviceAccountRef"`
}

func (GCRAccessTokenSpecAuthWorkloadIdentityPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityPatch)(nil)).Elem()
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityPatchArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityPatchOutput() GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityPatchOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityPatchArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityPatchOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput)
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityPatchArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityPatchArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput).ToGCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrInput is an input type that accepts GCRAccessTokenSpecAuthWorkloadIdentityPatchArgs, GCRAccessTokenSpecAuthWorkloadIdentityPatchPtr and GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrInput` via:
//
//	        GCRAccessTokenSpecAuthWorkloadIdentityPatchArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput
	ToGCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput
}

type gcraccessTokenSpecAuthWorkloadIdentityPatchPtrType GCRAccessTokenSpecAuthWorkloadIdentityPatchArgs

func GCRAccessTokenSpecAuthWorkloadIdentityPatchPtr(v *GCRAccessTokenSpecAuthWorkloadIdentityPatchArgs) GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrInput {
	return (*gcraccessTokenSpecAuthWorkloadIdentityPatchPtrType)(v)
}

func (*gcraccessTokenSpecAuthWorkloadIdentityPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthWorkloadIdentityPatch)(nil)).Elem()
}

func (i *gcraccessTokenSpecAuthWorkloadIdentityPatchPtrType) ToGCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecAuthWorkloadIdentityPatchPtrType) ToGCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput)
}

type GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityPatch)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityPatchOutput() GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityPatchOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return o.ToGCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecAuthWorkloadIdentityPatch) *GCRAccessTokenSpecAuthWorkloadIdentityPatch {
		return &v
	}).(GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput) ClusterLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentityPatch) *string { return v.ClusterLocation }).(pulumi.StringPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentityPatch) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput) ClusterProjectID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentityPatch) *string { return v.ClusterProjectID }).(pulumi.StringPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput) ServiceAccountRef() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentityPatch) *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch {
		return v.ServiceAccountRef
	}).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput)
}

type GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthWorkloadIdentityPatch)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput) Elem() GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityPatch) GCRAccessTokenSpecAuthWorkloadIdentityPatch {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecAuthWorkloadIdentityPatch
		return ret
	}).(GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput) ClusterLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityPatch) *string {
		if v == nil {
			return nil
		}
		return v.ClusterLocation
	}).(pulumi.StringPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityPatch) *string {
		if v == nil {
			return nil
		}
		return v.ClusterName
	}).(pulumi.StringPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput) ClusterProjectID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityPatch) *string {
		if v == nil {
			return nil
		}
		return v.ClusterProjectID
	}).(pulumi.StringPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput) ServiceAccountRef() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityPatch) *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput)
}

// A reference to a ServiceAccount resource.
type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput is an input type that accepts GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs and GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput` via:
//
//	GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{...}
type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput
	ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput
}

// A reference to a ServiceAccount resource.
type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput)
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput).ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput is an input type that accepts GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs, GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtr and GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput` via:
//
//	        GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput
	ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput
}

type gcraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs

func GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtr(v *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput {
	return (*gcraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType)(v)
}

func (*gcraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (i *gcraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput)
}

// A reference to a ServiceAccount resource.
type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o.ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		return &v
	}).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Elem() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef
		return ret
	}).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// A reference to a ServiceAccount resource.
type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchInput is an input type that accepts GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs and GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchInput` via:
//
//	GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs{...}
type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput
	ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutputWithContext(context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput
}

// A reference to a ServiceAccount resource.
type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch)(nil)).Elem()
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput)
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput).ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrInput is an input type that accepts GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs, GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtr and GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrInput` via:
//
//	        GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput
	ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput
}

type gcraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrType GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs

func GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtr(v *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrInput {
	return (*gcraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrType)(v)
}

func (*gcraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch)(nil)).Elem()
}

func (i *gcraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrType) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrType) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput)
}

// A reference to a ServiceAccount resource.
type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return o.ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch {
		return &v
	}).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput) Elem() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch
		return ret
	}).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type GCRAccessTokenSpecPatch struct {
	Auth *GCRAccessTokenSpecAuthPatch `pulumi:"auth"`
	// ProjectID defines which project to use to authenticate with
	ProjectID *string `pulumi:"projectID"`
}

// GCRAccessTokenSpecPatchInput is an input type that accepts GCRAccessTokenSpecPatchArgs and GCRAccessTokenSpecPatchOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecPatchInput` via:
//
//	GCRAccessTokenSpecPatchArgs{...}
type GCRAccessTokenSpecPatchInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecPatchOutput() GCRAccessTokenSpecPatchOutput
	ToGCRAccessTokenSpecPatchOutputWithContext(context.Context) GCRAccessTokenSpecPatchOutput
}

type GCRAccessTokenSpecPatchArgs struct {
	Auth GCRAccessTokenSpecAuthPatchPtrInput `pulumi:"auth"`
	// ProjectID defines which project to use to authenticate with
	ProjectID pulumi.StringPtrInput `pulumi:"projectID"`
}

func (GCRAccessTokenSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecPatch)(nil)).Elem()
}

func (i GCRAccessTokenSpecPatchArgs) ToGCRAccessTokenSpecPatchOutput() GCRAccessTokenSpecPatchOutput {
	return i.ToGCRAccessTokenSpecPatchOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecPatchArgs) ToGCRAccessTokenSpecPatchOutputWithContext(ctx context.Context) GCRAccessTokenSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecPatchOutput)
}

func (i GCRAccessTokenSpecPatchArgs) ToGCRAccessTokenSpecPatchPtrOutput() GCRAccessTokenSpecPatchPtrOutput {
	return i.ToGCRAccessTokenSpecPatchPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecPatchArgs) ToGCRAccessTokenSpecPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecPatchOutput).ToGCRAccessTokenSpecPatchPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecPatchPtrInput is an input type that accepts GCRAccessTokenSpecPatchArgs, GCRAccessTokenSpecPatchPtr and GCRAccessTokenSpecPatchPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecPatchPtrInput` via:
//
//	        GCRAccessTokenSpecPatchArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecPatchPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecPatchPtrOutput() GCRAccessTokenSpecPatchPtrOutput
	ToGCRAccessTokenSpecPatchPtrOutputWithContext(context.Context) GCRAccessTokenSpecPatchPtrOutput
}

type gcraccessTokenSpecPatchPtrType GCRAccessTokenSpecPatchArgs

func GCRAccessTokenSpecPatchPtr(v *GCRAccessTokenSpecPatchArgs) GCRAccessTokenSpecPatchPtrInput {
	return (*gcraccessTokenSpecPatchPtrType)(v)
}

func (*gcraccessTokenSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecPatch)(nil)).Elem()
}

func (i *gcraccessTokenSpecPatchPtrType) ToGCRAccessTokenSpecPatchPtrOutput() GCRAccessTokenSpecPatchPtrOutput {
	return i.ToGCRAccessTokenSpecPatchPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecPatchPtrType) ToGCRAccessTokenSpecPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecPatchPtrOutput)
}

type GCRAccessTokenSpecPatchOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecPatch)(nil)).Elem()
}

func (o GCRAccessTokenSpecPatchOutput) ToGCRAccessTokenSpecPatchOutput() GCRAccessTokenSpecPatchOutput {
	return o
}

func (o GCRAccessTokenSpecPatchOutput) ToGCRAccessTokenSpecPatchOutputWithContext(ctx context.Context) GCRAccessTokenSpecPatchOutput {
	return o
}

func (o GCRAccessTokenSpecPatchOutput) ToGCRAccessTokenSpecPatchPtrOutput() GCRAccessTokenSpecPatchPtrOutput {
	return o.ToGCRAccessTokenSpecPatchPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecPatchOutput) ToGCRAccessTokenSpecPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecPatch) *GCRAccessTokenSpecPatch {
		return &v
	}).(GCRAccessTokenSpecPatchPtrOutput)
}

func (o GCRAccessTokenSpecPatchOutput) Auth() GCRAccessTokenSpecAuthPatchPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecPatch) *GCRAccessTokenSpecAuthPatch { return v.Auth }).(GCRAccessTokenSpecAuthPatchPtrOutput)
}

// ProjectID defines which project to use to authenticate with
func (o GCRAccessTokenSpecPatchOutput) ProjectID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecPatch) *string { return v.ProjectID }).(pulumi.StringPtrOutput)
}

type GCRAccessTokenSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecPatch)(nil)).Elem()
}

func (o GCRAccessTokenSpecPatchPtrOutput) ToGCRAccessTokenSpecPatchPtrOutput() GCRAccessTokenSpecPatchPtrOutput {
	return o
}

func (o GCRAccessTokenSpecPatchPtrOutput) ToGCRAccessTokenSpecPatchPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecPatchPtrOutput {
	return o
}

func (o GCRAccessTokenSpecPatchPtrOutput) Elem() GCRAccessTokenSpecPatchOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecPatch) GCRAccessTokenSpecPatch {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecPatch
		return ret
	}).(GCRAccessTokenSpecPatchOutput)
}

func (o GCRAccessTokenSpecPatchPtrOutput) Auth() GCRAccessTokenSpecAuthPatchPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecPatch) *GCRAccessTokenSpecAuthPatch {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(GCRAccessTokenSpecAuthPatchPtrOutput)
}

// ProjectID defines which project to use to authenticate with
func (o GCRAccessTokenSpecPatchPtrOutput) ProjectID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ProjectID
	}).(pulumi.StringPtrOutput)
}

// GithubAccessToken generates ghs_ accessToken
type GithubAccessTokenType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     *GithubAccessTokenSpec `pulumi:"spec"`
}

// GithubAccessTokenTypeInput is an input type that accepts GithubAccessTokenTypeArgs and GithubAccessTokenTypeOutput values.
// You can construct a concrete instance of `GithubAccessTokenTypeInput` via:
//
//	GithubAccessTokenTypeArgs{...}
type GithubAccessTokenTypeInput interface {
	pulumi.Input

	ToGithubAccessTokenTypeOutput() GithubAccessTokenTypeOutput
	ToGithubAccessTokenTypeOutputWithContext(context.Context) GithubAccessTokenTypeOutput
}

// GithubAccessToken generates ghs_ accessToken
type GithubAccessTokenTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput     `pulumi:"metadata"`
	Spec     GithubAccessTokenSpecPtrInput `pulumi:"spec"`
}

func (GithubAccessTokenTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenType)(nil)).Elem()
}

func (i GithubAccessTokenTypeArgs) ToGithubAccessTokenTypeOutput() GithubAccessTokenTypeOutput {
	return i.ToGithubAccessTokenTypeOutputWithContext(context.Background())
}

func (i GithubAccessTokenTypeArgs) ToGithubAccessTokenTypeOutputWithContext(ctx context.Context) GithubAccessTokenTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenTypeOutput)
}

// GithubAccessTokenTypeArrayInput is an input type that accepts GithubAccessTokenTypeArray and GithubAccessTokenTypeArrayOutput values.
// You can construct a concrete instance of `GithubAccessTokenTypeArrayInput` via:
//
//	GithubAccessTokenTypeArray{ GithubAccessTokenTypeArgs{...} }
type GithubAccessTokenTypeArrayInput interface {
	pulumi.Input

	ToGithubAccessTokenTypeArrayOutput() GithubAccessTokenTypeArrayOutput
	ToGithubAccessTokenTypeArrayOutputWithContext(context.Context) GithubAccessTokenTypeArrayOutput
}

type GithubAccessTokenTypeArray []GithubAccessTokenTypeInput

func (GithubAccessTokenTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GithubAccessTokenType)(nil)).Elem()
}

func (i GithubAccessTokenTypeArray) ToGithubAccessTokenTypeArrayOutput() GithubAccessTokenTypeArrayOutput {
	return i.ToGithubAccessTokenTypeArrayOutputWithContext(context.Background())
}

func (i GithubAccessTokenTypeArray) ToGithubAccessTokenTypeArrayOutputWithContext(ctx context.Context) GithubAccessTokenTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenTypeArrayOutput)
}

// GithubAccessToken generates ghs_ accessToken
type GithubAccessTokenTypeOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenType)(nil)).Elem()
}

func (o GithubAccessTokenTypeOutput) ToGithubAccessTokenTypeOutput() GithubAccessTokenTypeOutput {
	return o
}

func (o GithubAccessTokenTypeOutput) ToGithubAccessTokenTypeOutputWithContext(ctx context.Context) GithubAccessTokenTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GithubAccessTokenTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GithubAccessTokenTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GithubAccessTokenTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o GithubAccessTokenTypeOutput) Spec() GithubAccessTokenSpecPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenType) *GithubAccessTokenSpec { return v.Spec }).(GithubAccessTokenSpecPtrOutput)
}

type GithubAccessTokenTypeArrayOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GithubAccessTokenType)(nil)).Elem()
}

func (o GithubAccessTokenTypeArrayOutput) ToGithubAccessTokenTypeArrayOutput() GithubAccessTokenTypeArrayOutput {
	return o
}

func (o GithubAccessTokenTypeArrayOutput) ToGithubAccessTokenTypeArrayOutputWithContext(ctx context.Context) GithubAccessTokenTypeArrayOutput {
	return o
}

func (o GithubAccessTokenTypeArrayOutput) Index(i pulumi.IntInput) GithubAccessTokenTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GithubAccessTokenType {
		return vs[0].([]GithubAccessTokenType)[vs[1].(int)]
	}).(GithubAccessTokenTypeOutput)
}

// GithubAccessTokenList is a list of GithubAccessToken
type GithubAccessTokenListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of githubaccesstokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []GithubAccessTokenType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// GithubAccessTokenListTypeInput is an input type that accepts GithubAccessTokenListTypeArgs and GithubAccessTokenListTypeOutput values.
// You can construct a concrete instance of `GithubAccessTokenListTypeInput` via:
//
//	GithubAccessTokenListTypeArgs{...}
type GithubAccessTokenListTypeInput interface {
	pulumi.Input

	ToGithubAccessTokenListTypeOutput() GithubAccessTokenListTypeOutput
	ToGithubAccessTokenListTypeOutputWithContext(context.Context) GithubAccessTokenListTypeOutput
}

// GithubAccessTokenList is a list of GithubAccessToken
type GithubAccessTokenListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of githubaccesstokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items GithubAccessTokenTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (GithubAccessTokenListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenListType)(nil)).Elem()
}

func (i GithubAccessTokenListTypeArgs) ToGithubAccessTokenListTypeOutput() GithubAccessTokenListTypeOutput {
	return i.ToGithubAccessTokenListTypeOutputWithContext(context.Background())
}

func (i GithubAccessTokenListTypeArgs) ToGithubAccessTokenListTypeOutputWithContext(ctx context.Context) GithubAccessTokenListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenListTypeOutput)
}

// GithubAccessTokenList is a list of GithubAccessToken
type GithubAccessTokenListTypeOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenListType)(nil)).Elem()
}

func (o GithubAccessTokenListTypeOutput) ToGithubAccessTokenListTypeOutput() GithubAccessTokenListTypeOutput {
	return o
}

func (o GithubAccessTokenListTypeOutput) ToGithubAccessTokenListTypeOutputWithContext(ctx context.Context) GithubAccessTokenListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GithubAccessTokenListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of githubaccesstokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o GithubAccessTokenListTypeOutput) Items() GithubAccessTokenTypeArrayOutput {
	return o.ApplyT(func(v GithubAccessTokenListType) []GithubAccessTokenType { return v.Items }).(GithubAccessTokenTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GithubAccessTokenListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GithubAccessTokenListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// GithubAccessToken generates ghs_ accessToken
type GithubAccessTokenPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch     `pulumi:"metadata"`
	Spec     *GithubAccessTokenSpecPatch `pulumi:"spec"`
}

// GithubAccessTokenPatchTypeInput is an input type that accepts GithubAccessTokenPatchTypeArgs and GithubAccessTokenPatchTypeOutput values.
// You can construct a concrete instance of `GithubAccessTokenPatchTypeInput` via:
//
//	GithubAccessTokenPatchTypeArgs{...}
type GithubAccessTokenPatchTypeInput interface {
	pulumi.Input

	ToGithubAccessTokenPatchTypeOutput() GithubAccessTokenPatchTypeOutput
	ToGithubAccessTokenPatchTypeOutputWithContext(context.Context) GithubAccessTokenPatchTypeOutput
}

// GithubAccessToken generates ghs_ accessToken
type GithubAccessTokenPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput     `pulumi:"metadata"`
	Spec     GithubAccessTokenSpecPatchPtrInput `pulumi:"spec"`
}

func (GithubAccessTokenPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenPatchType)(nil)).Elem()
}

func (i GithubAccessTokenPatchTypeArgs) ToGithubAccessTokenPatchTypeOutput() GithubAccessTokenPatchTypeOutput {
	return i.ToGithubAccessTokenPatchTypeOutputWithContext(context.Background())
}

func (i GithubAccessTokenPatchTypeArgs) ToGithubAccessTokenPatchTypeOutputWithContext(ctx context.Context) GithubAccessTokenPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenPatchTypeOutput)
}

// GithubAccessToken generates ghs_ accessToken
type GithubAccessTokenPatchTypeOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenPatchType)(nil)).Elem()
}

func (o GithubAccessTokenPatchTypeOutput) ToGithubAccessTokenPatchTypeOutput() GithubAccessTokenPatchTypeOutput {
	return o
}

func (o GithubAccessTokenPatchTypeOutput) ToGithubAccessTokenPatchTypeOutputWithContext(ctx context.Context) GithubAccessTokenPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GithubAccessTokenPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GithubAccessTokenPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GithubAccessTokenPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o GithubAccessTokenPatchTypeOutput) Spec() GithubAccessTokenSpecPatchPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenPatchType) *GithubAccessTokenSpecPatch { return v.Spec }).(GithubAccessTokenSpecPatchPtrOutput)
}

type GithubAccessTokenSpec struct {
	AppID     *string                    `pulumi:"appID"`
	Auth      *GithubAccessTokenSpecAuth `pulumi:"auth"`
	InstallID *string                    `pulumi:"installID"`
	// URL configures the Github instance URL. Defaults to https://github.com/.
	Url *string `pulumi:"url"`
}

// GithubAccessTokenSpecInput is an input type that accepts GithubAccessTokenSpecArgs and GithubAccessTokenSpecOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecInput` via:
//
//	GithubAccessTokenSpecArgs{...}
type GithubAccessTokenSpecInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecOutput() GithubAccessTokenSpecOutput
	ToGithubAccessTokenSpecOutputWithContext(context.Context) GithubAccessTokenSpecOutput
}

type GithubAccessTokenSpecArgs struct {
	AppID     pulumi.StringPtrInput             `pulumi:"appID"`
	Auth      GithubAccessTokenSpecAuthPtrInput `pulumi:"auth"`
	InstallID pulumi.StringPtrInput             `pulumi:"installID"`
	// URL configures the Github instance URL. Defaults to https://github.com/.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GithubAccessTokenSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpec)(nil)).Elem()
}

func (i GithubAccessTokenSpecArgs) ToGithubAccessTokenSpecOutput() GithubAccessTokenSpecOutput {
	return i.ToGithubAccessTokenSpecOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecArgs) ToGithubAccessTokenSpecOutputWithContext(ctx context.Context) GithubAccessTokenSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecOutput)
}

func (i GithubAccessTokenSpecArgs) ToGithubAccessTokenSpecPtrOutput() GithubAccessTokenSpecPtrOutput {
	return i.ToGithubAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecArgs) ToGithubAccessTokenSpecPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecOutput).ToGithubAccessTokenSpecPtrOutputWithContext(ctx)
}

// GithubAccessTokenSpecPtrInput is an input type that accepts GithubAccessTokenSpecArgs, GithubAccessTokenSpecPtr and GithubAccessTokenSpecPtrOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecPtrInput` via:
//
//	        GithubAccessTokenSpecArgs{...}
//
//	or:
//
//	        nil
type GithubAccessTokenSpecPtrInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecPtrOutput() GithubAccessTokenSpecPtrOutput
	ToGithubAccessTokenSpecPtrOutputWithContext(context.Context) GithubAccessTokenSpecPtrOutput
}

type githubAccessTokenSpecPtrType GithubAccessTokenSpecArgs

func GithubAccessTokenSpecPtr(v *GithubAccessTokenSpecArgs) GithubAccessTokenSpecPtrInput {
	return (*githubAccessTokenSpecPtrType)(v)
}

func (*githubAccessTokenSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpec)(nil)).Elem()
}

func (i *githubAccessTokenSpecPtrType) ToGithubAccessTokenSpecPtrOutput() GithubAccessTokenSpecPtrOutput {
	return i.ToGithubAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (i *githubAccessTokenSpecPtrType) ToGithubAccessTokenSpecPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecPtrOutput)
}

type GithubAccessTokenSpecOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpec)(nil)).Elem()
}

func (o GithubAccessTokenSpecOutput) ToGithubAccessTokenSpecOutput() GithubAccessTokenSpecOutput {
	return o
}

func (o GithubAccessTokenSpecOutput) ToGithubAccessTokenSpecOutputWithContext(ctx context.Context) GithubAccessTokenSpecOutput {
	return o
}

func (o GithubAccessTokenSpecOutput) ToGithubAccessTokenSpecPtrOutput() GithubAccessTokenSpecPtrOutput {
	return o.ToGithubAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (o GithubAccessTokenSpecOutput) ToGithubAccessTokenSpecPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GithubAccessTokenSpec) *GithubAccessTokenSpec {
		return &v
	}).(GithubAccessTokenSpecPtrOutput)
}

func (o GithubAccessTokenSpecOutput) AppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpec) *string { return v.AppID }).(pulumi.StringPtrOutput)
}

func (o GithubAccessTokenSpecOutput) Auth() GithubAccessTokenSpecAuthPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpec) *GithubAccessTokenSpecAuth { return v.Auth }).(GithubAccessTokenSpecAuthPtrOutput)
}

func (o GithubAccessTokenSpecOutput) InstallID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpec) *string { return v.InstallID }).(pulumi.StringPtrOutput)
}

// URL configures the Github instance URL. Defaults to https://github.com/.
func (o GithubAccessTokenSpecOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpec) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GithubAccessTokenSpecPtrOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpec)(nil)).Elem()
}

func (o GithubAccessTokenSpecPtrOutput) ToGithubAccessTokenSpecPtrOutput() GithubAccessTokenSpecPtrOutput {
	return o
}

func (o GithubAccessTokenSpecPtrOutput) ToGithubAccessTokenSpecPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecPtrOutput {
	return o
}

func (o GithubAccessTokenSpecPtrOutput) Elem() GithubAccessTokenSpecOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpec) GithubAccessTokenSpec {
		if v != nil {
			return *v
		}
		var ret GithubAccessTokenSpec
		return ret
	}).(GithubAccessTokenSpecOutput)
}

func (o GithubAccessTokenSpecPtrOutput) AppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return v.AppID
	}).(pulumi.StringPtrOutput)
}

func (o GithubAccessTokenSpecPtrOutput) Auth() GithubAccessTokenSpecAuthPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpec) *GithubAccessTokenSpecAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(GithubAccessTokenSpecAuthPtrOutput)
}

func (o GithubAccessTokenSpecPtrOutput) InstallID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return v.InstallID
	}).(pulumi.StringPtrOutput)
}

// URL configures the Github instance URL. Defaults to https://github.com/.
func (o GithubAccessTokenSpecPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Auth configures how ESO authenticates with a Github instance.
type GithubAccessTokenSpecAuth struct {
	PrivateKey *GithubAccessTokenSpecAuthPrivateKey `pulumi:"privateKey"`
}

// GithubAccessTokenSpecAuthInput is an input type that accepts GithubAccessTokenSpecAuthArgs and GithubAccessTokenSpecAuthOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthInput` via:
//
//	GithubAccessTokenSpecAuthArgs{...}
type GithubAccessTokenSpecAuthInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthOutput() GithubAccessTokenSpecAuthOutput
	ToGithubAccessTokenSpecAuthOutputWithContext(context.Context) GithubAccessTokenSpecAuthOutput
}

// Auth configures how ESO authenticates with a Github instance.
type GithubAccessTokenSpecAuthArgs struct {
	PrivateKey GithubAccessTokenSpecAuthPrivateKeyPtrInput `pulumi:"privateKey"`
}

func (GithubAccessTokenSpecAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuth)(nil)).Elem()
}

func (i GithubAccessTokenSpecAuthArgs) ToGithubAccessTokenSpecAuthOutput() GithubAccessTokenSpecAuthOutput {
	return i.ToGithubAccessTokenSpecAuthOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthArgs) ToGithubAccessTokenSpecAuthOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthOutput)
}

func (i GithubAccessTokenSpecAuthArgs) ToGithubAccessTokenSpecAuthPtrOutput() GithubAccessTokenSpecAuthPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthArgs) ToGithubAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthOutput).ToGithubAccessTokenSpecAuthPtrOutputWithContext(ctx)
}

// GithubAccessTokenSpecAuthPtrInput is an input type that accepts GithubAccessTokenSpecAuthArgs, GithubAccessTokenSpecAuthPtr and GithubAccessTokenSpecAuthPtrOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPtrInput` via:
//
//	        GithubAccessTokenSpecAuthArgs{...}
//
//	or:
//
//	        nil
type GithubAccessTokenSpecAuthPtrInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPtrOutput() GithubAccessTokenSpecAuthPtrOutput
	ToGithubAccessTokenSpecAuthPtrOutputWithContext(context.Context) GithubAccessTokenSpecAuthPtrOutput
}

type githubAccessTokenSpecAuthPtrType GithubAccessTokenSpecAuthArgs

func GithubAccessTokenSpecAuthPtr(v *GithubAccessTokenSpecAuthArgs) GithubAccessTokenSpecAuthPtrInput {
	return (*githubAccessTokenSpecAuthPtrType)(v)
}

func (*githubAccessTokenSpecAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuth)(nil)).Elem()
}

func (i *githubAccessTokenSpecAuthPtrType) ToGithubAccessTokenSpecAuthPtrOutput() GithubAccessTokenSpecAuthPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i *githubAccessTokenSpecAuthPtrType) ToGithubAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPtrOutput)
}

// Auth configures how ESO authenticates with a Github instance.
type GithubAccessTokenSpecAuthOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuth)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthOutput) ToGithubAccessTokenSpecAuthOutput() GithubAccessTokenSpecAuthOutput {
	return o
}

func (o GithubAccessTokenSpecAuthOutput) ToGithubAccessTokenSpecAuthOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthOutput {
	return o
}

func (o GithubAccessTokenSpecAuthOutput) ToGithubAccessTokenSpecAuthPtrOutput() GithubAccessTokenSpecAuthPtrOutput {
	return o.ToGithubAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (o GithubAccessTokenSpecAuthOutput) ToGithubAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GithubAccessTokenSpecAuth) *GithubAccessTokenSpecAuth {
		return &v
	}).(GithubAccessTokenSpecAuthPtrOutput)
}

func (o GithubAccessTokenSpecAuthOutput) PrivateKey() GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecAuth) *GithubAccessTokenSpecAuthPrivateKey { return v.PrivateKey }).(GithubAccessTokenSpecAuthPrivateKeyPtrOutput)
}

type GithubAccessTokenSpecAuthPtrOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuth)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPtrOutput) ToGithubAccessTokenSpecAuthPtrOutput() GithubAccessTokenSpecAuthPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPtrOutput) ToGithubAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPtrOutput) Elem() GithubAccessTokenSpecAuthOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuth) GithubAccessTokenSpecAuth {
		if v != nil {
			return *v
		}
		var ret GithubAccessTokenSpecAuth
		return ret
	}).(GithubAccessTokenSpecAuthOutput)
}

func (o GithubAccessTokenSpecAuthPtrOutput) PrivateKey() GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuth) *GithubAccessTokenSpecAuthPrivateKey {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(GithubAccessTokenSpecAuthPrivateKeyPtrOutput)
}

// Auth configures how ESO authenticates with a Github instance.
type GithubAccessTokenSpecAuthPatch struct {
	PrivateKey *GithubAccessTokenSpecAuthPrivateKeyPatch `pulumi:"privateKey"`
}

// GithubAccessTokenSpecAuthPatchInput is an input type that accepts GithubAccessTokenSpecAuthPatchArgs and GithubAccessTokenSpecAuthPatchOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPatchInput` via:
//
//	GithubAccessTokenSpecAuthPatchArgs{...}
type GithubAccessTokenSpecAuthPatchInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPatchOutput() GithubAccessTokenSpecAuthPatchOutput
	ToGithubAccessTokenSpecAuthPatchOutputWithContext(context.Context) GithubAccessTokenSpecAuthPatchOutput
}

// Auth configures how ESO authenticates with a Github instance.
type GithubAccessTokenSpecAuthPatchArgs struct {
	PrivateKey GithubAccessTokenSpecAuthPrivateKeyPatchPtrInput `pulumi:"privateKey"`
}

func (GithubAccessTokenSpecAuthPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuthPatch)(nil)).Elem()
}

func (i GithubAccessTokenSpecAuthPatchArgs) ToGithubAccessTokenSpecAuthPatchOutput() GithubAccessTokenSpecAuthPatchOutput {
	return i.ToGithubAccessTokenSpecAuthPatchOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthPatchArgs) ToGithubAccessTokenSpecAuthPatchOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPatchOutput)
}

func (i GithubAccessTokenSpecAuthPatchArgs) ToGithubAccessTokenSpecAuthPatchPtrOutput() GithubAccessTokenSpecAuthPatchPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPatchPtrOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthPatchArgs) ToGithubAccessTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPatchOutput).ToGithubAccessTokenSpecAuthPatchPtrOutputWithContext(ctx)
}

// GithubAccessTokenSpecAuthPatchPtrInput is an input type that accepts GithubAccessTokenSpecAuthPatchArgs, GithubAccessTokenSpecAuthPatchPtr and GithubAccessTokenSpecAuthPatchPtrOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPatchPtrInput` via:
//
//	        GithubAccessTokenSpecAuthPatchArgs{...}
//
//	or:
//
//	        nil
type GithubAccessTokenSpecAuthPatchPtrInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPatchPtrOutput() GithubAccessTokenSpecAuthPatchPtrOutput
	ToGithubAccessTokenSpecAuthPatchPtrOutputWithContext(context.Context) GithubAccessTokenSpecAuthPatchPtrOutput
}

type githubAccessTokenSpecAuthPatchPtrType GithubAccessTokenSpecAuthPatchArgs

func GithubAccessTokenSpecAuthPatchPtr(v *GithubAccessTokenSpecAuthPatchArgs) GithubAccessTokenSpecAuthPatchPtrInput {
	return (*githubAccessTokenSpecAuthPatchPtrType)(v)
}

func (*githubAccessTokenSpecAuthPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuthPatch)(nil)).Elem()
}

func (i *githubAccessTokenSpecAuthPatchPtrType) ToGithubAccessTokenSpecAuthPatchPtrOutput() GithubAccessTokenSpecAuthPatchPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPatchPtrOutputWithContext(context.Background())
}

func (i *githubAccessTokenSpecAuthPatchPtrType) ToGithubAccessTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPatchPtrOutput)
}

// Auth configures how ESO authenticates with a Github instance.
type GithubAccessTokenSpecAuthPatchOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuthPatch)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPatchOutput) ToGithubAccessTokenSpecAuthPatchOutput() GithubAccessTokenSpecAuthPatchOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPatchOutput) ToGithubAccessTokenSpecAuthPatchOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPatchOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPatchOutput) ToGithubAccessTokenSpecAuthPatchPtrOutput() GithubAccessTokenSpecAuthPatchPtrOutput {
	return o.ToGithubAccessTokenSpecAuthPatchPtrOutputWithContext(context.Background())
}

func (o GithubAccessTokenSpecAuthPatchOutput) ToGithubAccessTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GithubAccessTokenSpecAuthPatch) *GithubAccessTokenSpecAuthPatch {
		return &v
	}).(GithubAccessTokenSpecAuthPatchPtrOutput)
}

func (o GithubAccessTokenSpecAuthPatchOutput) PrivateKey() GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecAuthPatch) *GithubAccessTokenSpecAuthPrivateKeyPatch { return v.PrivateKey }).(GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput)
}

type GithubAccessTokenSpecAuthPatchPtrOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuthPatch)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPatchPtrOutput) ToGithubAccessTokenSpecAuthPatchPtrOutput() GithubAccessTokenSpecAuthPatchPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPatchPtrOutput) ToGithubAccessTokenSpecAuthPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPatchPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPatchPtrOutput) Elem() GithubAccessTokenSpecAuthPatchOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPatch) GithubAccessTokenSpecAuthPatch {
		if v != nil {
			return *v
		}
		var ret GithubAccessTokenSpecAuthPatch
		return ret
	}).(GithubAccessTokenSpecAuthPatchOutput)
}

func (o GithubAccessTokenSpecAuthPatchPtrOutput) PrivateKey() GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPatch) *GithubAccessTokenSpecAuthPrivateKeyPatch {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput)
}

type GithubAccessTokenSpecAuthPrivateKey struct {
	SecretRef *GithubAccessTokenSpecAuthPrivateKeySecretRef `pulumi:"secretRef"`
}

// GithubAccessTokenSpecAuthPrivateKeyInput is an input type that accepts GithubAccessTokenSpecAuthPrivateKeyArgs and GithubAccessTokenSpecAuthPrivateKeyOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPrivateKeyInput` via:
//
//	GithubAccessTokenSpecAuthPrivateKeyArgs{...}
type GithubAccessTokenSpecAuthPrivateKeyInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPrivateKeyOutput() GithubAccessTokenSpecAuthPrivateKeyOutput
	ToGithubAccessTokenSpecAuthPrivateKeyOutputWithContext(context.Context) GithubAccessTokenSpecAuthPrivateKeyOutput
}

type GithubAccessTokenSpecAuthPrivateKeyArgs struct {
	SecretRef GithubAccessTokenSpecAuthPrivateKeySecretRefPtrInput `pulumi:"secretRef"`
}

func (GithubAccessTokenSpecAuthPrivateKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKey)(nil)).Elem()
}

func (i GithubAccessTokenSpecAuthPrivateKeyArgs) ToGithubAccessTokenSpecAuthPrivateKeyOutput() GithubAccessTokenSpecAuthPrivateKeyOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeyOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthPrivateKeyArgs) ToGithubAccessTokenSpecAuthPrivateKeyOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeyOutput)
}

func (i GithubAccessTokenSpecAuthPrivateKeyArgs) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutput() GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthPrivateKeyArgs) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeyOutput).ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(ctx)
}

// GithubAccessTokenSpecAuthPrivateKeyPtrInput is an input type that accepts GithubAccessTokenSpecAuthPrivateKeyArgs, GithubAccessTokenSpecAuthPrivateKeyPtr and GithubAccessTokenSpecAuthPrivateKeyPtrOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPrivateKeyPtrInput` via:
//
//	        GithubAccessTokenSpecAuthPrivateKeyArgs{...}
//
//	or:
//
//	        nil
type GithubAccessTokenSpecAuthPrivateKeyPtrInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPrivateKeyPtrOutput() GithubAccessTokenSpecAuthPrivateKeyPtrOutput
	ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(context.Context) GithubAccessTokenSpecAuthPrivateKeyPtrOutput
}

type githubAccessTokenSpecAuthPrivateKeyPtrType GithubAccessTokenSpecAuthPrivateKeyArgs

func GithubAccessTokenSpecAuthPrivateKeyPtr(v *GithubAccessTokenSpecAuthPrivateKeyArgs) GithubAccessTokenSpecAuthPrivateKeyPtrInput {
	return (*githubAccessTokenSpecAuthPrivateKeyPtrType)(v)
}

func (*githubAccessTokenSpecAuthPrivateKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuthPrivateKey)(nil)).Elem()
}

func (i *githubAccessTokenSpecAuthPrivateKeyPtrType) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutput() GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(context.Background())
}

func (i *githubAccessTokenSpecAuthPrivateKeyPtrType) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeyPtrOutput)
}

type GithubAccessTokenSpecAuthPrivateKeyOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPrivateKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKey)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPrivateKeyOutput) ToGithubAccessTokenSpecAuthPrivateKeyOutput() GithubAccessTokenSpecAuthPrivateKeyOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeyOutput) ToGithubAccessTokenSpecAuthPrivateKeyOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeyOutput) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutput() GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return o.ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(context.Background())
}

func (o GithubAccessTokenSpecAuthPrivateKeyOutput) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GithubAccessTokenSpecAuthPrivateKey) *GithubAccessTokenSpecAuthPrivateKey {
		return &v
	}).(GithubAccessTokenSpecAuthPrivateKeyPtrOutput)
}

func (o GithubAccessTokenSpecAuthPrivateKeyOutput) SecretRef() GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecAuthPrivateKey) *GithubAccessTokenSpecAuthPrivateKeySecretRef {
		return v.SecretRef
	}).(GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput)
}

type GithubAccessTokenSpecAuthPrivateKeyPtrOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPrivateKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuthPrivateKey)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPrivateKeyPtrOutput) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutput() GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeyPtrOutput) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeyPtrOutput) Elem() GithubAccessTokenSpecAuthPrivateKeyOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKey) GithubAccessTokenSpecAuthPrivateKey {
		if v != nil {
			return *v
		}
		var ret GithubAccessTokenSpecAuthPrivateKey
		return ret
	}).(GithubAccessTokenSpecAuthPrivateKeyOutput)
}

func (o GithubAccessTokenSpecAuthPrivateKeyPtrOutput) SecretRef() GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKey) *GithubAccessTokenSpecAuthPrivateKeySecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput)
}

type GithubAccessTokenSpecAuthPrivateKeyPatch struct {
	SecretRef *GithubAccessTokenSpecAuthPrivateKeySecretRefPatch `pulumi:"secretRef"`
}

// GithubAccessTokenSpecAuthPrivateKeyPatchInput is an input type that accepts GithubAccessTokenSpecAuthPrivateKeyPatchArgs and GithubAccessTokenSpecAuthPrivateKeyPatchOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPrivateKeyPatchInput` via:
//
//	GithubAccessTokenSpecAuthPrivateKeyPatchArgs{...}
type GithubAccessTokenSpecAuthPrivateKeyPatchInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPrivateKeyPatchOutput() GithubAccessTokenSpecAuthPrivateKeyPatchOutput
	ToGithubAccessTokenSpecAuthPrivateKeyPatchOutputWithContext(context.Context) GithubAccessTokenSpecAuthPrivateKeyPatchOutput
}

type GithubAccessTokenSpecAuthPrivateKeyPatchArgs struct {
	SecretRef GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrInput `pulumi:"secretRef"`
}

func (GithubAccessTokenSpecAuthPrivateKeyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeyPatch)(nil)).Elem()
}

func (i GithubAccessTokenSpecAuthPrivateKeyPatchArgs) ToGithubAccessTokenSpecAuthPrivateKeyPatchOutput() GithubAccessTokenSpecAuthPrivateKeyPatchOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeyPatchOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthPrivateKeyPatchArgs) ToGithubAccessTokenSpecAuthPrivateKeyPatchOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeyPatchOutput)
}

func (i GithubAccessTokenSpecAuthPrivateKeyPatchArgs) ToGithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput() GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeyPatchPtrOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthPrivateKeyPatchArgs) ToGithubAccessTokenSpecAuthPrivateKeyPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeyPatchOutput).ToGithubAccessTokenSpecAuthPrivateKeyPatchPtrOutputWithContext(ctx)
}

// GithubAccessTokenSpecAuthPrivateKeyPatchPtrInput is an input type that accepts GithubAccessTokenSpecAuthPrivateKeyPatchArgs, GithubAccessTokenSpecAuthPrivateKeyPatchPtr and GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPrivateKeyPatchPtrInput` via:
//
//	        GithubAccessTokenSpecAuthPrivateKeyPatchArgs{...}
//
//	or:
//
//	        nil
type GithubAccessTokenSpecAuthPrivateKeyPatchPtrInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput() GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput
	ToGithubAccessTokenSpecAuthPrivateKeyPatchPtrOutputWithContext(context.Context) GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput
}

type githubAccessTokenSpecAuthPrivateKeyPatchPtrType GithubAccessTokenSpecAuthPrivateKeyPatchArgs

func GithubAccessTokenSpecAuthPrivateKeyPatchPtr(v *GithubAccessTokenSpecAuthPrivateKeyPatchArgs) GithubAccessTokenSpecAuthPrivateKeyPatchPtrInput {
	return (*githubAccessTokenSpecAuthPrivateKeyPatchPtrType)(v)
}

func (*githubAccessTokenSpecAuthPrivateKeyPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuthPrivateKeyPatch)(nil)).Elem()
}

func (i *githubAccessTokenSpecAuthPrivateKeyPatchPtrType) ToGithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput() GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeyPatchPtrOutputWithContext(context.Background())
}

func (i *githubAccessTokenSpecAuthPrivateKeyPatchPtrType) ToGithubAccessTokenSpecAuthPrivateKeyPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput)
}

type GithubAccessTokenSpecAuthPrivateKeyPatchOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPrivateKeyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeyPatch)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPrivateKeyPatchOutput) ToGithubAccessTokenSpecAuthPrivateKeyPatchOutput() GithubAccessTokenSpecAuthPrivateKeyPatchOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeyPatchOutput) ToGithubAccessTokenSpecAuthPrivateKeyPatchOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyPatchOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeyPatchOutput) ToGithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput() GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput {
	return o.ToGithubAccessTokenSpecAuthPrivateKeyPatchPtrOutputWithContext(context.Background())
}

func (o GithubAccessTokenSpecAuthPrivateKeyPatchOutput) ToGithubAccessTokenSpecAuthPrivateKeyPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GithubAccessTokenSpecAuthPrivateKeyPatch) *GithubAccessTokenSpecAuthPrivateKeyPatch {
		return &v
	}).(GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput)
}

func (o GithubAccessTokenSpecAuthPrivateKeyPatchOutput) SecretRef() GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecAuthPrivateKeyPatch) *GithubAccessTokenSpecAuthPrivateKeySecretRefPatch {
		return v.SecretRef
	}).(GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput)
}

type GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuthPrivateKeyPatch)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput) ToGithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput() GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput) ToGithubAccessTokenSpecAuthPrivateKeyPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput) Elem() GithubAccessTokenSpecAuthPrivateKeyPatchOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKeyPatch) GithubAccessTokenSpecAuthPrivateKeyPatch {
		if v != nil {
			return *v
		}
		var ret GithubAccessTokenSpecAuthPrivateKeyPatch
		return ret
	}).(GithubAccessTokenSpecAuthPrivateKeyPatchOutput)
}

func (o GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput) SecretRef() GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKeyPatch) *GithubAccessTokenSpecAuthPrivateKeySecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput)
}

// A reference to a specific 'key' within a Secret resource,
// In some instances, `key` is a required field.
type GithubAccessTokenSpecAuthPrivateKeySecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// GithubAccessTokenSpecAuthPrivateKeySecretRefInput is an input type that accepts GithubAccessTokenSpecAuthPrivateKeySecretRefArgs and GithubAccessTokenSpecAuthPrivateKeySecretRefOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPrivateKeySecretRefInput` via:
//
//	GithubAccessTokenSpecAuthPrivateKeySecretRefArgs{...}
type GithubAccessTokenSpecAuthPrivateKeySecretRefInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPrivateKeySecretRefOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefOutput
	ToGithubAccessTokenSpecAuthPrivateKeySecretRefOutputWithContext(context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefOutput
}

// A reference to a specific 'key' within a Secret resource,
// In some instances, `key` is a required field.
type GithubAccessTokenSpecAuthPrivateKeySecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GithubAccessTokenSpecAuthPrivateKeySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeySecretRef)(nil)).Elem()
}

func (i GithubAccessTokenSpecAuthPrivateKeySecretRefArgs) ToGithubAccessTokenSpecAuthPrivateKeySecretRefOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeySecretRefOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthPrivateKeySecretRefArgs) ToGithubAccessTokenSpecAuthPrivateKeySecretRefOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeySecretRefOutput)
}

func (i GithubAccessTokenSpecAuthPrivateKeySecretRefArgs) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthPrivateKeySecretRefArgs) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeySecretRefOutput).ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(ctx)
}

// GithubAccessTokenSpecAuthPrivateKeySecretRefPtrInput is an input type that accepts GithubAccessTokenSpecAuthPrivateKeySecretRefArgs, GithubAccessTokenSpecAuthPrivateKeySecretRefPtr and GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPrivateKeySecretRefPtrInput` via:
//
//	        GithubAccessTokenSpecAuthPrivateKeySecretRefArgs{...}
//
//	or:
//
//	        nil
type GithubAccessTokenSpecAuthPrivateKeySecretRefPtrInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput
	ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput
}

type githubAccessTokenSpecAuthPrivateKeySecretRefPtrType GithubAccessTokenSpecAuthPrivateKeySecretRefArgs

func GithubAccessTokenSpecAuthPrivateKeySecretRefPtr(v *GithubAccessTokenSpecAuthPrivateKeySecretRefArgs) GithubAccessTokenSpecAuthPrivateKeySecretRefPtrInput {
	return (*githubAccessTokenSpecAuthPrivateKeySecretRefPtrType)(v)
}

func (*githubAccessTokenSpecAuthPrivateKeySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuthPrivateKeySecretRef)(nil)).Elem()
}

func (i *githubAccessTokenSpecAuthPrivateKeySecretRefPtrType) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(context.Background())
}

func (i *githubAccessTokenSpecAuthPrivateKeySecretRefPtrType) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput)
}

// A reference to a specific 'key' within a Secret resource,
// In some instances, `key` is a required field.
type GithubAccessTokenSpecAuthPrivateKeySecretRefOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeySecretRef)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return o.ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(context.Background())
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GithubAccessTokenSpecAuthPrivateKeySecretRef) *GithubAccessTokenSpecAuthPrivateKeySecretRef {
		return &v
	}).(GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecAuthPrivateKeySecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecAuthPrivateKeySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecAuthPrivateKeySecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuthPrivateKeySecretRef)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput) Elem() GithubAccessTokenSpecAuthPrivateKeySecretRefOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKeySecretRef) GithubAccessTokenSpecAuthPrivateKeySecretRef {
		if v != nil {
			return *v
		}
		var ret GithubAccessTokenSpecAuthPrivateKeySecretRef
		return ret
	}).(GithubAccessTokenSpecAuthPrivateKeySecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// A reference to a specific 'key' within a Secret resource,
// In some instances, `key` is a required field.
type GithubAccessTokenSpecAuthPrivateKeySecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// GithubAccessTokenSpecAuthPrivateKeySecretRefPatchInput is an input type that accepts GithubAccessTokenSpecAuthPrivateKeySecretRefPatchArgs and GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPrivateKeySecretRefPatchInput` via:
//
//	GithubAccessTokenSpecAuthPrivateKeySecretRefPatchArgs{...}
type GithubAccessTokenSpecAuthPrivateKeySecretRefPatchInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput
	ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutputWithContext(context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput
}

// A reference to a specific 'key' within a Secret resource,
// In some instances, `key` is a required field.
type GithubAccessTokenSpecAuthPrivateKeySecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GithubAccessTokenSpecAuthPrivateKeySecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeySecretRefPatch)(nil)).Elem()
}

func (i GithubAccessTokenSpecAuthPrivateKeySecretRefPatchArgs) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthPrivateKeySecretRefPatchArgs) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput)
}

func (i GithubAccessTokenSpecAuthPrivateKeySecretRefPatchArgs) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthPrivateKeySecretRefPatchArgs) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput).ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutputWithContext(ctx)
}

// GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrInput is an input type that accepts GithubAccessTokenSpecAuthPrivateKeySecretRefPatchArgs, GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtr and GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrInput` via:
//
//	        GithubAccessTokenSpecAuthPrivateKeySecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput
	ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutputWithContext(context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput
}

type githubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrType GithubAccessTokenSpecAuthPrivateKeySecretRefPatchArgs

func GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtr(v *GithubAccessTokenSpecAuthPrivateKeySecretRefPatchArgs) GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrInput {
	return (*githubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrType)(v)
}

func (*githubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuthPrivateKeySecretRefPatch)(nil)).Elem()
}

func (i *githubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrType) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *githubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrType) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput)
}

// A reference to a specific 'key' within a Secret resource,
// In some instances, `key` is a required field.
type GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeySecretRefPatch)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput {
	return o.ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GithubAccessTokenSpecAuthPrivateKeySecretRefPatch) *GithubAccessTokenSpecAuthPrivateKeySecretRefPatch {
		return &v
	}).(GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecAuthPrivateKeySecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecAuthPrivateKeySecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecAuthPrivateKeySecretRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuthPrivateKeySecretRefPatch)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput) Elem() GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKeySecretRefPatch) GithubAccessTokenSpecAuthPrivateKeySecretRefPatch {
		if v != nil {
			return *v
		}
		var ret GithubAccessTokenSpecAuthPrivateKeySecretRefPatch
		return ret
	}).(GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type GithubAccessTokenSpecPatch struct {
	AppID     *string                         `pulumi:"appID"`
	Auth      *GithubAccessTokenSpecAuthPatch `pulumi:"auth"`
	InstallID *string                         `pulumi:"installID"`
	// URL configures the Github instance URL. Defaults to https://github.com/.
	Url *string `pulumi:"url"`
}

// GithubAccessTokenSpecPatchInput is an input type that accepts GithubAccessTokenSpecPatchArgs and GithubAccessTokenSpecPatchOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecPatchInput` via:
//
//	GithubAccessTokenSpecPatchArgs{...}
type GithubAccessTokenSpecPatchInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecPatchOutput() GithubAccessTokenSpecPatchOutput
	ToGithubAccessTokenSpecPatchOutputWithContext(context.Context) GithubAccessTokenSpecPatchOutput
}

type GithubAccessTokenSpecPatchArgs struct {
	AppID     pulumi.StringPtrInput                  `pulumi:"appID"`
	Auth      GithubAccessTokenSpecAuthPatchPtrInput `pulumi:"auth"`
	InstallID pulumi.StringPtrInput                  `pulumi:"installID"`
	// URL configures the Github instance URL. Defaults to https://github.com/.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GithubAccessTokenSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecPatch)(nil)).Elem()
}

func (i GithubAccessTokenSpecPatchArgs) ToGithubAccessTokenSpecPatchOutput() GithubAccessTokenSpecPatchOutput {
	return i.ToGithubAccessTokenSpecPatchOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecPatchArgs) ToGithubAccessTokenSpecPatchOutputWithContext(ctx context.Context) GithubAccessTokenSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecPatchOutput)
}

func (i GithubAccessTokenSpecPatchArgs) ToGithubAccessTokenSpecPatchPtrOutput() GithubAccessTokenSpecPatchPtrOutput {
	return i.ToGithubAccessTokenSpecPatchPtrOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecPatchArgs) ToGithubAccessTokenSpecPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecPatchOutput).ToGithubAccessTokenSpecPatchPtrOutputWithContext(ctx)
}

// GithubAccessTokenSpecPatchPtrInput is an input type that accepts GithubAccessTokenSpecPatchArgs, GithubAccessTokenSpecPatchPtr and GithubAccessTokenSpecPatchPtrOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecPatchPtrInput` via:
//
//	        GithubAccessTokenSpecPatchArgs{...}
//
//	or:
//
//	        nil
type GithubAccessTokenSpecPatchPtrInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecPatchPtrOutput() GithubAccessTokenSpecPatchPtrOutput
	ToGithubAccessTokenSpecPatchPtrOutputWithContext(context.Context) GithubAccessTokenSpecPatchPtrOutput
}

type githubAccessTokenSpecPatchPtrType GithubAccessTokenSpecPatchArgs

func GithubAccessTokenSpecPatchPtr(v *GithubAccessTokenSpecPatchArgs) GithubAccessTokenSpecPatchPtrInput {
	return (*githubAccessTokenSpecPatchPtrType)(v)
}

func (*githubAccessTokenSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecPatch)(nil)).Elem()
}

func (i *githubAccessTokenSpecPatchPtrType) ToGithubAccessTokenSpecPatchPtrOutput() GithubAccessTokenSpecPatchPtrOutput {
	return i.ToGithubAccessTokenSpecPatchPtrOutputWithContext(context.Background())
}

func (i *githubAccessTokenSpecPatchPtrType) ToGithubAccessTokenSpecPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecPatchPtrOutput)
}

type GithubAccessTokenSpecPatchOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecPatch)(nil)).Elem()
}

func (o GithubAccessTokenSpecPatchOutput) ToGithubAccessTokenSpecPatchOutput() GithubAccessTokenSpecPatchOutput {
	return o
}

func (o GithubAccessTokenSpecPatchOutput) ToGithubAccessTokenSpecPatchOutputWithContext(ctx context.Context) GithubAccessTokenSpecPatchOutput {
	return o
}

func (o GithubAccessTokenSpecPatchOutput) ToGithubAccessTokenSpecPatchPtrOutput() GithubAccessTokenSpecPatchPtrOutput {
	return o.ToGithubAccessTokenSpecPatchPtrOutputWithContext(context.Background())
}

func (o GithubAccessTokenSpecPatchOutput) ToGithubAccessTokenSpecPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GithubAccessTokenSpecPatch) *GithubAccessTokenSpecPatch {
		return &v
	}).(GithubAccessTokenSpecPatchPtrOutput)
}

func (o GithubAccessTokenSpecPatchOutput) AppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecPatch) *string { return v.AppID }).(pulumi.StringPtrOutput)
}

func (o GithubAccessTokenSpecPatchOutput) Auth() GithubAccessTokenSpecAuthPatchPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecPatch) *GithubAccessTokenSpecAuthPatch { return v.Auth }).(GithubAccessTokenSpecAuthPatchPtrOutput)
}

func (o GithubAccessTokenSpecPatchOutput) InstallID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecPatch) *string { return v.InstallID }).(pulumi.StringPtrOutput)
}

// URL configures the Github instance URL. Defaults to https://github.com/.
func (o GithubAccessTokenSpecPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GithubAccessTokenSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecPatch)(nil)).Elem()
}

func (o GithubAccessTokenSpecPatchPtrOutput) ToGithubAccessTokenSpecPatchPtrOutput() GithubAccessTokenSpecPatchPtrOutput {
	return o
}

func (o GithubAccessTokenSpecPatchPtrOutput) ToGithubAccessTokenSpecPatchPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecPatchPtrOutput {
	return o
}

func (o GithubAccessTokenSpecPatchPtrOutput) Elem() GithubAccessTokenSpecPatchOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecPatch) GithubAccessTokenSpecPatch {
		if v != nil {
			return *v
		}
		var ret GithubAccessTokenSpecPatch
		return ret
	}).(GithubAccessTokenSpecPatchOutput)
}

func (o GithubAccessTokenSpecPatchPtrOutput) AppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.AppID
	}).(pulumi.StringPtrOutput)
}

func (o GithubAccessTokenSpecPatchPtrOutput) Auth() GithubAccessTokenSpecAuthPatchPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecPatch) *GithubAccessTokenSpecAuthPatch {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(GithubAccessTokenSpecAuthPatchPtrOutput)
}

func (o GithubAccessTokenSpecPatchPtrOutput) InstallID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.InstallID
	}).(pulumi.StringPtrOutput)
}

// URL configures the Github instance URL. Defaults to https://github.com/.
func (o GithubAccessTokenSpecPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Password generates a random password based on the
// configuration parameters in spec.
// You can specify the length, characterset and other attributes.
type PasswordType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *PasswordSpec      `pulumi:"spec"`
}

// PasswordTypeInput is an input type that accepts PasswordTypeArgs and PasswordTypeOutput values.
// You can construct a concrete instance of `PasswordTypeInput` via:
//
//	PasswordTypeArgs{...}
type PasswordTypeInput interface {
	pulumi.Input

	ToPasswordTypeOutput() PasswordTypeOutput
	ToPasswordTypeOutputWithContext(context.Context) PasswordTypeOutput
}

// Password generates a random password based on the
// configuration parameters in spec.
// You can specify the length, characterset and other attributes.
type PasswordTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     PasswordSpecPtrInput      `pulumi:"spec"`
}

func (PasswordTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordType)(nil)).Elem()
}

func (i PasswordTypeArgs) ToPasswordTypeOutput() PasswordTypeOutput {
	return i.ToPasswordTypeOutputWithContext(context.Background())
}

func (i PasswordTypeArgs) ToPasswordTypeOutputWithContext(ctx context.Context) PasswordTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordTypeOutput)
}

// PasswordTypeArrayInput is an input type that accepts PasswordTypeArray and PasswordTypeArrayOutput values.
// You can construct a concrete instance of `PasswordTypeArrayInput` via:
//
//	PasswordTypeArray{ PasswordTypeArgs{...} }
type PasswordTypeArrayInput interface {
	pulumi.Input

	ToPasswordTypeArrayOutput() PasswordTypeArrayOutput
	ToPasswordTypeArrayOutputWithContext(context.Context) PasswordTypeArrayOutput
}

type PasswordTypeArray []PasswordTypeInput

func (PasswordTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PasswordType)(nil)).Elem()
}

func (i PasswordTypeArray) ToPasswordTypeArrayOutput() PasswordTypeArrayOutput {
	return i.ToPasswordTypeArrayOutputWithContext(context.Background())
}

func (i PasswordTypeArray) ToPasswordTypeArrayOutputWithContext(ctx context.Context) PasswordTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordTypeArrayOutput)
}

// Password generates a random password based on the
// configuration parameters in spec.
// You can specify the length, characterset and other attributes.
type PasswordTypeOutput struct{ *pulumi.OutputState }

func (PasswordTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordType)(nil)).Elem()
}

func (o PasswordTypeOutput) ToPasswordTypeOutput() PasswordTypeOutput {
	return o
}

func (o PasswordTypeOutput) ToPasswordTypeOutputWithContext(ctx context.Context) PasswordTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PasswordTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PasswordTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PasswordTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PasswordType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o PasswordTypeOutput) Spec() PasswordSpecPtrOutput {
	return o.ApplyT(func(v PasswordType) *PasswordSpec { return v.Spec }).(PasswordSpecPtrOutput)
}

type PasswordTypeArrayOutput struct{ *pulumi.OutputState }

func (PasswordTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PasswordType)(nil)).Elem()
}

func (o PasswordTypeArrayOutput) ToPasswordTypeArrayOutput() PasswordTypeArrayOutput {
	return o
}

func (o PasswordTypeArrayOutput) ToPasswordTypeArrayOutputWithContext(ctx context.Context) PasswordTypeArrayOutput {
	return o
}

func (o PasswordTypeArrayOutput) Index(i pulumi.IntInput) PasswordTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PasswordType {
		return vs[0].([]PasswordType)[vs[1].(int)]
	}).(PasswordTypeOutput)
}

// PasswordList is a list of Password
type PasswordListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of passwords. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []PasswordType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// PasswordListTypeInput is an input type that accepts PasswordListTypeArgs and PasswordListTypeOutput values.
// You can construct a concrete instance of `PasswordListTypeInput` via:
//
//	PasswordListTypeArgs{...}
type PasswordListTypeInput interface {
	pulumi.Input

	ToPasswordListTypeOutput() PasswordListTypeOutput
	ToPasswordListTypeOutputWithContext(context.Context) PasswordListTypeOutput
}

// PasswordList is a list of Password
type PasswordListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of passwords. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PasswordTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (PasswordListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordListType)(nil)).Elem()
}

func (i PasswordListTypeArgs) ToPasswordListTypeOutput() PasswordListTypeOutput {
	return i.ToPasswordListTypeOutputWithContext(context.Background())
}

func (i PasswordListTypeArgs) ToPasswordListTypeOutputWithContext(ctx context.Context) PasswordListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordListTypeOutput)
}

// PasswordList is a list of Password
type PasswordListTypeOutput struct{ *pulumi.OutputState }

func (PasswordListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordListType)(nil)).Elem()
}

func (o PasswordListTypeOutput) ToPasswordListTypeOutput() PasswordListTypeOutput {
	return o
}

func (o PasswordListTypeOutput) ToPasswordListTypeOutputWithContext(ctx context.Context) PasswordListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PasswordListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of passwords. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o PasswordListTypeOutput) Items() PasswordTypeArrayOutput {
	return o.ApplyT(func(v PasswordListType) []PasswordType { return v.Items }).(PasswordTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PasswordListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PasswordListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v PasswordListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Password generates a random password based on the
// configuration parameters in spec.
// You can specify the length, characterset and other attributes.
type PasswordPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *PasswordSpecPatch      `pulumi:"spec"`
}

// PasswordPatchTypeInput is an input type that accepts PasswordPatchTypeArgs and PasswordPatchTypeOutput values.
// You can construct a concrete instance of `PasswordPatchTypeInput` via:
//
//	PasswordPatchTypeArgs{...}
type PasswordPatchTypeInput interface {
	pulumi.Input

	ToPasswordPatchTypeOutput() PasswordPatchTypeOutput
	ToPasswordPatchTypeOutputWithContext(context.Context) PasswordPatchTypeOutput
}

// Password generates a random password based on the
// configuration parameters in spec.
// You can specify the length, characterset and other attributes.
type PasswordPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     PasswordSpecPatchPtrInput      `pulumi:"spec"`
}

func (PasswordPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordPatchType)(nil)).Elem()
}

func (i PasswordPatchTypeArgs) ToPasswordPatchTypeOutput() PasswordPatchTypeOutput {
	return i.ToPasswordPatchTypeOutputWithContext(context.Background())
}

func (i PasswordPatchTypeArgs) ToPasswordPatchTypeOutputWithContext(ctx context.Context) PasswordPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPatchTypeOutput)
}

// Password generates a random password based on the
// configuration parameters in spec.
// You can specify the length, characterset and other attributes.
type PasswordPatchTypeOutput struct{ *pulumi.OutputState }

func (PasswordPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordPatchType)(nil)).Elem()
}

func (o PasswordPatchTypeOutput) ToPasswordPatchTypeOutput() PasswordPatchTypeOutput {
	return o
}

func (o PasswordPatchTypeOutput) ToPasswordPatchTypeOutputWithContext(ctx context.Context) PasswordPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PasswordPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PasswordPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PasswordPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v PasswordPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PasswordPatchTypeOutput) Spec() PasswordSpecPatchPtrOutput {
	return o.ApplyT(func(v PasswordPatchType) *PasswordSpecPatch { return v.Spec }).(PasswordSpecPatchPtrOutput)
}

// PasswordSpec controls the behavior of the password generator.
type PasswordSpec struct {
	// set AllowRepeat to true to allow repeating characters.
	AllowRepeat *bool `pulumi:"allowRepeat"`
	// Digits specifies the number of digits in the generated
	// password. If omitted it defaults to 25% of the length of the password
	Digits *int `pulumi:"digits"`
	// Length of the password to be generated.
	// Defaults to 24
	Length *int `pulumi:"length"`
	// Set NoUpper to disable uppercase characters
	NoUpper *bool `pulumi:"noUpper"`
	// SymbolCharacters specifies the special characters that should be used
	// in the generated password.
	SymbolCharacters *string `pulumi:"symbolCharacters"`
	// Symbols specifies the number of symbol characters in the generated
	// password. If omitted it defaults to 25% of the length of the password
	Symbols *int `pulumi:"symbols"`
}

// PasswordSpecInput is an input type that accepts PasswordSpecArgs and PasswordSpecOutput values.
// You can construct a concrete instance of `PasswordSpecInput` via:
//
//	PasswordSpecArgs{...}
type PasswordSpecInput interface {
	pulumi.Input

	ToPasswordSpecOutput() PasswordSpecOutput
	ToPasswordSpecOutputWithContext(context.Context) PasswordSpecOutput
}

// PasswordSpec controls the behavior of the password generator.
type PasswordSpecArgs struct {
	// set AllowRepeat to true to allow repeating characters.
	AllowRepeat pulumi.BoolPtrInput `pulumi:"allowRepeat"`
	// Digits specifies the number of digits in the generated
	// password. If omitted it defaults to 25% of the length of the password
	Digits pulumi.IntPtrInput `pulumi:"digits"`
	// Length of the password to be generated.
	// Defaults to 24
	Length pulumi.IntPtrInput `pulumi:"length"`
	// Set NoUpper to disable uppercase characters
	NoUpper pulumi.BoolPtrInput `pulumi:"noUpper"`
	// SymbolCharacters specifies the special characters that should be used
	// in the generated password.
	SymbolCharacters pulumi.StringPtrInput `pulumi:"symbolCharacters"`
	// Symbols specifies the number of symbol characters in the generated
	// password. If omitted it defaults to 25% of the length of the password
	Symbols pulumi.IntPtrInput `pulumi:"symbols"`
}

func (PasswordSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordSpec)(nil)).Elem()
}

func (i PasswordSpecArgs) ToPasswordSpecOutput() PasswordSpecOutput {
	return i.ToPasswordSpecOutputWithContext(context.Background())
}

func (i PasswordSpecArgs) ToPasswordSpecOutputWithContext(ctx context.Context) PasswordSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordSpecOutput)
}

func (i PasswordSpecArgs) ToPasswordSpecPtrOutput() PasswordSpecPtrOutput {
	return i.ToPasswordSpecPtrOutputWithContext(context.Background())
}

func (i PasswordSpecArgs) ToPasswordSpecPtrOutputWithContext(ctx context.Context) PasswordSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordSpecOutput).ToPasswordSpecPtrOutputWithContext(ctx)
}

// PasswordSpecPtrInput is an input type that accepts PasswordSpecArgs, PasswordSpecPtr and PasswordSpecPtrOutput values.
// You can construct a concrete instance of `PasswordSpecPtrInput` via:
//
//	        PasswordSpecArgs{...}
//
//	or:
//
//	        nil
type PasswordSpecPtrInput interface {
	pulumi.Input

	ToPasswordSpecPtrOutput() PasswordSpecPtrOutput
	ToPasswordSpecPtrOutputWithContext(context.Context) PasswordSpecPtrOutput
}

type passwordSpecPtrType PasswordSpecArgs

func PasswordSpecPtr(v *PasswordSpecArgs) PasswordSpecPtrInput {
	return (*passwordSpecPtrType)(v)
}

func (*passwordSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordSpec)(nil)).Elem()
}

func (i *passwordSpecPtrType) ToPasswordSpecPtrOutput() PasswordSpecPtrOutput {
	return i.ToPasswordSpecPtrOutputWithContext(context.Background())
}

func (i *passwordSpecPtrType) ToPasswordSpecPtrOutputWithContext(ctx context.Context) PasswordSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordSpecPtrOutput)
}

// PasswordSpec controls the behavior of the password generator.
type PasswordSpecOutput struct{ *pulumi.OutputState }

func (PasswordSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordSpec)(nil)).Elem()
}

func (o PasswordSpecOutput) ToPasswordSpecOutput() PasswordSpecOutput {
	return o
}

func (o PasswordSpecOutput) ToPasswordSpecOutputWithContext(ctx context.Context) PasswordSpecOutput {
	return o
}

func (o PasswordSpecOutput) ToPasswordSpecPtrOutput() PasswordSpecPtrOutput {
	return o.ToPasswordSpecPtrOutputWithContext(context.Background())
}

func (o PasswordSpecOutput) ToPasswordSpecPtrOutputWithContext(ctx context.Context) PasswordSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PasswordSpec) *PasswordSpec {
		return &v
	}).(PasswordSpecPtrOutput)
}

// set AllowRepeat to true to allow repeating characters.
func (o PasswordSpecOutput) AllowRepeat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PasswordSpec) *bool { return v.AllowRepeat }).(pulumi.BoolPtrOutput)
}

// Digits specifies the number of digits in the generated
// password. If omitted it defaults to 25% of the length of the password
func (o PasswordSpecOutput) Digits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PasswordSpec) *int { return v.Digits }).(pulumi.IntPtrOutput)
}

// Length of the password to be generated.
// Defaults to 24
func (o PasswordSpecOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PasswordSpec) *int { return v.Length }).(pulumi.IntPtrOutput)
}

// Set NoUpper to disable uppercase characters
func (o PasswordSpecOutput) NoUpper() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PasswordSpec) *bool { return v.NoUpper }).(pulumi.BoolPtrOutput)
}

// SymbolCharacters specifies the special characters that should be used
// in the generated password.
func (o PasswordSpecOutput) SymbolCharacters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordSpec) *string { return v.SymbolCharacters }).(pulumi.StringPtrOutput)
}

// Symbols specifies the number of symbol characters in the generated
// password. If omitted it defaults to 25% of the length of the password
func (o PasswordSpecOutput) Symbols() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PasswordSpec) *int { return v.Symbols }).(pulumi.IntPtrOutput)
}

type PasswordSpecPtrOutput struct{ *pulumi.OutputState }

func (PasswordSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordSpec)(nil)).Elem()
}

func (o PasswordSpecPtrOutput) ToPasswordSpecPtrOutput() PasswordSpecPtrOutput {
	return o
}

func (o PasswordSpecPtrOutput) ToPasswordSpecPtrOutputWithContext(ctx context.Context) PasswordSpecPtrOutput {
	return o
}

func (o PasswordSpecPtrOutput) Elem() PasswordSpecOutput {
	return o.ApplyT(func(v *PasswordSpec) PasswordSpec {
		if v != nil {
			return *v
		}
		var ret PasswordSpec
		return ret
	}).(PasswordSpecOutput)
}

// set AllowRepeat to true to allow repeating characters.
func (o PasswordSpecPtrOutput) AllowRepeat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AllowRepeat
	}).(pulumi.BoolPtrOutput)
}

// Digits specifies the number of digits in the generated
// password. If omitted it defaults to 25% of the length of the password
func (o PasswordSpecPtrOutput) Digits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordSpec) *int {
		if v == nil {
			return nil
		}
		return v.Digits
	}).(pulumi.IntPtrOutput)
}

// Length of the password to be generated.
// Defaults to 24
func (o PasswordSpecPtrOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordSpec) *int {
		if v == nil {
			return nil
		}
		return v.Length
	}).(pulumi.IntPtrOutput)
}

// Set NoUpper to disable uppercase characters
func (o PasswordSpecPtrOutput) NoUpper() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordSpec) *bool {
		if v == nil {
			return nil
		}
		return v.NoUpper
	}).(pulumi.BoolPtrOutput)
}

// SymbolCharacters specifies the special characters that should be used
// in the generated password.
func (o PasswordSpecPtrOutput) SymbolCharacters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordSpec) *string {
		if v == nil {
			return nil
		}
		return v.SymbolCharacters
	}).(pulumi.StringPtrOutput)
}

// Symbols specifies the number of symbol characters in the generated
// password. If omitted it defaults to 25% of the length of the password
func (o PasswordSpecPtrOutput) Symbols() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordSpec) *int {
		if v == nil {
			return nil
		}
		return v.Symbols
	}).(pulumi.IntPtrOutput)
}

// PasswordSpec controls the behavior of the password generator.
type PasswordSpecPatch struct {
	// set AllowRepeat to true to allow repeating characters.
	AllowRepeat *bool `pulumi:"allowRepeat"`
	// Digits specifies the number of digits in the generated
	// password. If omitted it defaults to 25% of the length of the password
	Digits *int `pulumi:"digits"`
	// Length of the password to be generated.
	// Defaults to 24
	Length *int `pulumi:"length"`
	// Set NoUpper to disable uppercase characters
	NoUpper *bool `pulumi:"noUpper"`
	// SymbolCharacters specifies the special characters that should be used
	// in the generated password.
	SymbolCharacters *string `pulumi:"symbolCharacters"`
	// Symbols specifies the number of symbol characters in the generated
	// password. If omitted it defaults to 25% of the length of the password
	Symbols *int `pulumi:"symbols"`
}

// PasswordSpecPatchInput is an input type that accepts PasswordSpecPatchArgs and PasswordSpecPatchOutput values.
// You can construct a concrete instance of `PasswordSpecPatchInput` via:
//
//	PasswordSpecPatchArgs{...}
type PasswordSpecPatchInput interface {
	pulumi.Input

	ToPasswordSpecPatchOutput() PasswordSpecPatchOutput
	ToPasswordSpecPatchOutputWithContext(context.Context) PasswordSpecPatchOutput
}

// PasswordSpec controls the behavior of the password generator.
type PasswordSpecPatchArgs struct {
	// set AllowRepeat to true to allow repeating characters.
	AllowRepeat pulumi.BoolPtrInput `pulumi:"allowRepeat"`
	// Digits specifies the number of digits in the generated
	// password. If omitted it defaults to 25% of the length of the password
	Digits pulumi.IntPtrInput `pulumi:"digits"`
	// Length of the password to be generated.
	// Defaults to 24
	Length pulumi.IntPtrInput `pulumi:"length"`
	// Set NoUpper to disable uppercase characters
	NoUpper pulumi.BoolPtrInput `pulumi:"noUpper"`
	// SymbolCharacters specifies the special characters that should be used
	// in the generated password.
	SymbolCharacters pulumi.StringPtrInput `pulumi:"symbolCharacters"`
	// Symbols specifies the number of symbol characters in the generated
	// password. If omitted it defaults to 25% of the length of the password
	Symbols pulumi.IntPtrInput `pulumi:"symbols"`
}

func (PasswordSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordSpecPatch)(nil)).Elem()
}

func (i PasswordSpecPatchArgs) ToPasswordSpecPatchOutput() PasswordSpecPatchOutput {
	return i.ToPasswordSpecPatchOutputWithContext(context.Background())
}

func (i PasswordSpecPatchArgs) ToPasswordSpecPatchOutputWithContext(ctx context.Context) PasswordSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordSpecPatchOutput)
}

func (i PasswordSpecPatchArgs) ToPasswordSpecPatchPtrOutput() PasswordSpecPatchPtrOutput {
	return i.ToPasswordSpecPatchPtrOutputWithContext(context.Background())
}

func (i PasswordSpecPatchArgs) ToPasswordSpecPatchPtrOutputWithContext(ctx context.Context) PasswordSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordSpecPatchOutput).ToPasswordSpecPatchPtrOutputWithContext(ctx)
}

// PasswordSpecPatchPtrInput is an input type that accepts PasswordSpecPatchArgs, PasswordSpecPatchPtr and PasswordSpecPatchPtrOutput values.
// You can construct a concrete instance of `PasswordSpecPatchPtrInput` via:
//
//	        PasswordSpecPatchArgs{...}
//
//	or:
//
//	        nil
type PasswordSpecPatchPtrInput interface {
	pulumi.Input

	ToPasswordSpecPatchPtrOutput() PasswordSpecPatchPtrOutput
	ToPasswordSpecPatchPtrOutputWithContext(context.Context) PasswordSpecPatchPtrOutput
}

type passwordSpecPatchPtrType PasswordSpecPatchArgs

func PasswordSpecPatchPtr(v *PasswordSpecPatchArgs) PasswordSpecPatchPtrInput {
	return (*passwordSpecPatchPtrType)(v)
}

func (*passwordSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordSpecPatch)(nil)).Elem()
}

func (i *passwordSpecPatchPtrType) ToPasswordSpecPatchPtrOutput() PasswordSpecPatchPtrOutput {
	return i.ToPasswordSpecPatchPtrOutputWithContext(context.Background())
}

func (i *passwordSpecPatchPtrType) ToPasswordSpecPatchPtrOutputWithContext(ctx context.Context) PasswordSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordSpecPatchPtrOutput)
}

// PasswordSpec controls the behavior of the password generator.
type PasswordSpecPatchOutput struct{ *pulumi.OutputState }

func (PasswordSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordSpecPatch)(nil)).Elem()
}

func (o PasswordSpecPatchOutput) ToPasswordSpecPatchOutput() PasswordSpecPatchOutput {
	return o
}

func (o PasswordSpecPatchOutput) ToPasswordSpecPatchOutputWithContext(ctx context.Context) PasswordSpecPatchOutput {
	return o
}

func (o PasswordSpecPatchOutput) ToPasswordSpecPatchPtrOutput() PasswordSpecPatchPtrOutput {
	return o.ToPasswordSpecPatchPtrOutputWithContext(context.Background())
}

func (o PasswordSpecPatchOutput) ToPasswordSpecPatchPtrOutputWithContext(ctx context.Context) PasswordSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PasswordSpecPatch) *PasswordSpecPatch {
		return &v
	}).(PasswordSpecPatchPtrOutput)
}

// set AllowRepeat to true to allow repeating characters.
func (o PasswordSpecPatchOutput) AllowRepeat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PasswordSpecPatch) *bool { return v.AllowRepeat }).(pulumi.BoolPtrOutput)
}

// Digits specifies the number of digits in the generated
// password. If omitted it defaults to 25% of the length of the password
func (o PasswordSpecPatchOutput) Digits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PasswordSpecPatch) *int { return v.Digits }).(pulumi.IntPtrOutput)
}

// Length of the password to be generated.
// Defaults to 24
func (o PasswordSpecPatchOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PasswordSpecPatch) *int { return v.Length }).(pulumi.IntPtrOutput)
}

// Set NoUpper to disable uppercase characters
func (o PasswordSpecPatchOutput) NoUpper() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PasswordSpecPatch) *bool { return v.NoUpper }).(pulumi.BoolPtrOutput)
}

// SymbolCharacters specifies the special characters that should be used
// in the generated password.
func (o PasswordSpecPatchOutput) SymbolCharacters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordSpecPatch) *string { return v.SymbolCharacters }).(pulumi.StringPtrOutput)
}

// Symbols specifies the number of symbol characters in the generated
// password. If omitted it defaults to 25% of the length of the password
func (o PasswordSpecPatchOutput) Symbols() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PasswordSpecPatch) *int { return v.Symbols }).(pulumi.IntPtrOutput)
}

type PasswordSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (PasswordSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordSpecPatch)(nil)).Elem()
}

func (o PasswordSpecPatchPtrOutput) ToPasswordSpecPatchPtrOutput() PasswordSpecPatchPtrOutput {
	return o
}

func (o PasswordSpecPatchPtrOutput) ToPasswordSpecPatchPtrOutputWithContext(ctx context.Context) PasswordSpecPatchPtrOutput {
	return o
}

func (o PasswordSpecPatchPtrOutput) Elem() PasswordSpecPatchOutput {
	return o.ApplyT(func(v *PasswordSpecPatch) PasswordSpecPatch {
		if v != nil {
			return *v
		}
		var ret PasswordSpecPatch
		return ret
	}).(PasswordSpecPatchOutput)
}

// set AllowRepeat to true to allow repeating characters.
func (o PasswordSpecPatchPtrOutput) AllowRepeat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.AllowRepeat
	}).(pulumi.BoolPtrOutput)
}

// Digits specifies the number of digits in the generated
// password. If omitted it defaults to 25% of the length of the password
func (o PasswordSpecPatchPtrOutput) Digits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Digits
	}).(pulumi.IntPtrOutput)
}

// Length of the password to be generated.
// Defaults to 24
func (o PasswordSpecPatchPtrOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Length
	}).(pulumi.IntPtrOutput)
}

// Set NoUpper to disable uppercase characters
func (o PasswordSpecPatchPtrOutput) NoUpper() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.NoUpper
	}).(pulumi.BoolPtrOutput)
}

// SymbolCharacters specifies the special characters that should be used
// in the generated password.
func (o PasswordSpecPatchPtrOutput) SymbolCharacters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.SymbolCharacters
	}).(pulumi.StringPtrOutput)
}

// Symbols specifies the number of symbol characters in the generated
// password. If omitted it defaults to 25% of the length of the password
func (o PasswordSpecPatchPtrOutput) Symbols() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Symbols
	}).(pulumi.IntPtrOutput)
}

type VaultDynamicSecretType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta      `pulumi:"metadata"`
	Spec     *VaultDynamicSecretSpec `pulumi:"spec"`
}

// VaultDynamicSecretTypeInput is an input type that accepts VaultDynamicSecretTypeArgs and VaultDynamicSecretTypeOutput values.
// You can construct a concrete instance of `VaultDynamicSecretTypeInput` via:
//
//	VaultDynamicSecretTypeArgs{...}
type VaultDynamicSecretTypeInput interface {
	pulumi.Input

	ToVaultDynamicSecretTypeOutput() VaultDynamicSecretTypeOutput
	ToVaultDynamicSecretTypeOutputWithContext(context.Context) VaultDynamicSecretTypeOutput
}

type VaultDynamicSecretTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput      `pulumi:"metadata"`
	Spec     VaultDynamicSecretSpecPtrInput `pulumi:"spec"`
}

func (VaultDynamicSecretTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretType)(nil)).Elem()
}

func (i VaultDynamicSecretTypeArgs) ToVaultDynamicSecretTypeOutput() VaultDynamicSecretTypeOutput {
	return i.ToVaultDynamicSecretTypeOutputWithContext(context.Background())
}

func (i VaultDynamicSecretTypeArgs) ToVaultDynamicSecretTypeOutputWithContext(ctx context.Context) VaultDynamicSecretTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretTypeOutput)
}

// VaultDynamicSecretTypeArrayInput is an input type that accepts VaultDynamicSecretTypeArray and VaultDynamicSecretTypeArrayOutput values.
// You can construct a concrete instance of `VaultDynamicSecretTypeArrayInput` via:
//
//	VaultDynamicSecretTypeArray{ VaultDynamicSecretTypeArgs{...} }
type VaultDynamicSecretTypeArrayInput interface {
	pulumi.Input

	ToVaultDynamicSecretTypeArrayOutput() VaultDynamicSecretTypeArrayOutput
	ToVaultDynamicSecretTypeArrayOutputWithContext(context.Context) VaultDynamicSecretTypeArrayOutput
}

type VaultDynamicSecretTypeArray []VaultDynamicSecretTypeInput

func (VaultDynamicSecretTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultDynamicSecretType)(nil)).Elem()
}

func (i VaultDynamicSecretTypeArray) ToVaultDynamicSecretTypeArrayOutput() VaultDynamicSecretTypeArrayOutput {
	return i.ToVaultDynamicSecretTypeArrayOutputWithContext(context.Background())
}

func (i VaultDynamicSecretTypeArray) ToVaultDynamicSecretTypeArrayOutputWithContext(ctx context.Context) VaultDynamicSecretTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretTypeArrayOutput)
}

type VaultDynamicSecretTypeOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretType)(nil)).Elem()
}

func (o VaultDynamicSecretTypeOutput) ToVaultDynamicSecretTypeOutput() VaultDynamicSecretTypeOutput {
	return o
}

func (o VaultDynamicSecretTypeOutput) ToVaultDynamicSecretTypeOutputWithContext(ctx context.Context) VaultDynamicSecretTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VaultDynamicSecretTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VaultDynamicSecretTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VaultDynamicSecretTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o VaultDynamicSecretTypeOutput) Spec() VaultDynamicSecretSpecPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretType) *VaultDynamicSecretSpec { return v.Spec }).(VaultDynamicSecretSpecPtrOutput)
}

type VaultDynamicSecretTypeArrayOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultDynamicSecretType)(nil)).Elem()
}

func (o VaultDynamicSecretTypeArrayOutput) ToVaultDynamicSecretTypeArrayOutput() VaultDynamicSecretTypeArrayOutput {
	return o
}

func (o VaultDynamicSecretTypeArrayOutput) ToVaultDynamicSecretTypeArrayOutputWithContext(ctx context.Context) VaultDynamicSecretTypeArrayOutput {
	return o
}

func (o VaultDynamicSecretTypeArrayOutput) Index(i pulumi.IntInput) VaultDynamicSecretTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VaultDynamicSecretType {
		return vs[0].([]VaultDynamicSecretType)[vs[1].(int)]
	}).(VaultDynamicSecretTypeOutput)
}

// VaultDynamicSecretList is a list of VaultDynamicSecret
type VaultDynamicSecretListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of vaultdynamicsecrets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []VaultDynamicSecretType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// VaultDynamicSecretListTypeInput is an input type that accepts VaultDynamicSecretListTypeArgs and VaultDynamicSecretListTypeOutput values.
// You can construct a concrete instance of `VaultDynamicSecretListTypeInput` via:
//
//	VaultDynamicSecretListTypeArgs{...}
type VaultDynamicSecretListTypeInput interface {
	pulumi.Input

	ToVaultDynamicSecretListTypeOutput() VaultDynamicSecretListTypeOutput
	ToVaultDynamicSecretListTypeOutputWithContext(context.Context) VaultDynamicSecretListTypeOutput
}

// VaultDynamicSecretList is a list of VaultDynamicSecret
type VaultDynamicSecretListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of vaultdynamicsecrets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VaultDynamicSecretTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (VaultDynamicSecretListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretListType)(nil)).Elem()
}

func (i VaultDynamicSecretListTypeArgs) ToVaultDynamicSecretListTypeOutput() VaultDynamicSecretListTypeOutput {
	return i.ToVaultDynamicSecretListTypeOutputWithContext(context.Background())
}

func (i VaultDynamicSecretListTypeArgs) ToVaultDynamicSecretListTypeOutputWithContext(ctx context.Context) VaultDynamicSecretListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretListTypeOutput)
}

// VaultDynamicSecretList is a list of VaultDynamicSecret
type VaultDynamicSecretListTypeOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretListType)(nil)).Elem()
}

func (o VaultDynamicSecretListTypeOutput) ToVaultDynamicSecretListTypeOutput() VaultDynamicSecretListTypeOutput {
	return o
}

func (o VaultDynamicSecretListTypeOutput) ToVaultDynamicSecretListTypeOutputWithContext(ctx context.Context) VaultDynamicSecretListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VaultDynamicSecretListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of vaultdynamicsecrets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o VaultDynamicSecretListTypeOutput) Items() VaultDynamicSecretTypeArrayOutput {
	return o.ApplyT(func(v VaultDynamicSecretListType) []VaultDynamicSecretType { return v.Items }).(VaultDynamicSecretTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VaultDynamicSecretListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VaultDynamicSecretListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

type VaultDynamicSecretPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch      `pulumi:"metadata"`
	Spec     *VaultDynamicSecretSpecPatch `pulumi:"spec"`
}

// VaultDynamicSecretPatchTypeInput is an input type that accepts VaultDynamicSecretPatchTypeArgs and VaultDynamicSecretPatchTypeOutput values.
// You can construct a concrete instance of `VaultDynamicSecretPatchTypeInput` via:
//
//	VaultDynamicSecretPatchTypeArgs{...}
type VaultDynamicSecretPatchTypeInput interface {
	pulumi.Input

	ToVaultDynamicSecretPatchTypeOutput() VaultDynamicSecretPatchTypeOutput
	ToVaultDynamicSecretPatchTypeOutputWithContext(context.Context) VaultDynamicSecretPatchTypeOutput
}

type VaultDynamicSecretPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput      `pulumi:"metadata"`
	Spec     VaultDynamicSecretSpecPatchPtrInput `pulumi:"spec"`
}

func (VaultDynamicSecretPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretPatchType)(nil)).Elem()
}

func (i VaultDynamicSecretPatchTypeArgs) ToVaultDynamicSecretPatchTypeOutput() VaultDynamicSecretPatchTypeOutput {
	return i.ToVaultDynamicSecretPatchTypeOutputWithContext(context.Background())
}

func (i VaultDynamicSecretPatchTypeArgs) ToVaultDynamicSecretPatchTypeOutputWithContext(ctx context.Context) VaultDynamicSecretPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretPatchTypeOutput)
}

type VaultDynamicSecretPatchTypeOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretPatchType)(nil)).Elem()
}

func (o VaultDynamicSecretPatchTypeOutput) ToVaultDynamicSecretPatchTypeOutput() VaultDynamicSecretPatchTypeOutput {
	return o
}

func (o VaultDynamicSecretPatchTypeOutput) ToVaultDynamicSecretPatchTypeOutputWithContext(ctx context.Context) VaultDynamicSecretPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VaultDynamicSecretPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VaultDynamicSecretPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VaultDynamicSecretPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o VaultDynamicSecretPatchTypeOutput) Spec() VaultDynamicSecretSpecPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretPatchType) *VaultDynamicSecretSpecPatch { return v.Spec }).(VaultDynamicSecretSpecPatchPtrOutput)
}

type VaultDynamicSecretSpec struct {
	// Used to select the correct ESO controller (think: ingress.ingressClassName)
	// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
	Controller *string `pulumi:"controller"`
	// Vault API method to use (GET/POST/other)
	Method *string `pulumi:"method"`
	// Parameters to pass to Vault write (for non-GET methods)
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Vault path to obtain the dynamic secret from
	Path     *string                         `pulumi:"path"`
	Provider *VaultDynamicSecretSpecProvider `pulumi:"provider"`
	// Result type defines which data is returned from the generator.
	// By default it is the "data" section of the Vault API response.
	// When using e.g. /auth/token/create the "data" section is empty but
	// the "auth" section contains the generated token.
	// Please refer to the vault docs regarding the result data structure.
	ResultType *string `pulumi:"resultType"`
}

// VaultDynamicSecretSpecInput is an input type that accepts VaultDynamicSecretSpecArgs and VaultDynamicSecretSpecOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecInput` via:
//
//	VaultDynamicSecretSpecArgs{...}
type VaultDynamicSecretSpecInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecOutput() VaultDynamicSecretSpecOutput
	ToVaultDynamicSecretSpecOutputWithContext(context.Context) VaultDynamicSecretSpecOutput
}

type VaultDynamicSecretSpecArgs struct {
	// Used to select the correct ESO controller (think: ingress.ingressClassName)
	// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
	Controller pulumi.StringPtrInput `pulumi:"controller"`
	// Vault API method to use (GET/POST/other)
	Method pulumi.StringPtrInput `pulumi:"method"`
	// Parameters to pass to Vault write (for non-GET methods)
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Vault path to obtain the dynamic secret from
	Path     pulumi.StringPtrInput                  `pulumi:"path"`
	Provider VaultDynamicSecretSpecProviderPtrInput `pulumi:"provider"`
	// Result type defines which data is returned from the generator.
	// By default it is the "data" section of the Vault API response.
	// When using e.g. /auth/token/create the "data" section is empty but
	// the "auth" section contains the generated token.
	// Please refer to the vault docs regarding the result data structure.
	ResultType pulumi.StringPtrInput `pulumi:"resultType"`
}

func (VaultDynamicSecretSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpec)(nil)).Elem()
}

func (i VaultDynamicSecretSpecArgs) ToVaultDynamicSecretSpecOutput() VaultDynamicSecretSpecOutput {
	return i.ToVaultDynamicSecretSpecOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecArgs) ToVaultDynamicSecretSpecOutputWithContext(ctx context.Context) VaultDynamicSecretSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecOutput)
}

func (i VaultDynamicSecretSpecArgs) ToVaultDynamicSecretSpecPtrOutput() VaultDynamicSecretSpecPtrOutput {
	return i.ToVaultDynamicSecretSpecPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecArgs) ToVaultDynamicSecretSpecPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecOutput).ToVaultDynamicSecretSpecPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecPtrInput is an input type that accepts VaultDynamicSecretSpecArgs, VaultDynamicSecretSpecPtr and VaultDynamicSecretSpecPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecPtrInput` via:
//
//	        VaultDynamicSecretSpecArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecPtrOutput() VaultDynamicSecretSpecPtrOutput
	ToVaultDynamicSecretSpecPtrOutputWithContext(context.Context) VaultDynamicSecretSpecPtrOutput
}

type vaultDynamicSecretSpecPtrType VaultDynamicSecretSpecArgs

func VaultDynamicSecretSpecPtr(v *VaultDynamicSecretSpecArgs) VaultDynamicSecretSpecPtrInput {
	return (*vaultDynamicSecretSpecPtrType)(v)
}

func (*vaultDynamicSecretSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpec)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecPtrType) ToVaultDynamicSecretSpecPtrOutput() VaultDynamicSecretSpecPtrOutput {
	return i.ToVaultDynamicSecretSpecPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecPtrType) ToVaultDynamicSecretSpecPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecPtrOutput)
}

type VaultDynamicSecretSpecOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpec)(nil)).Elem()
}

func (o VaultDynamicSecretSpecOutput) ToVaultDynamicSecretSpecOutput() VaultDynamicSecretSpecOutput {
	return o
}

func (o VaultDynamicSecretSpecOutput) ToVaultDynamicSecretSpecOutputWithContext(ctx context.Context) VaultDynamicSecretSpecOutput {
	return o
}

func (o VaultDynamicSecretSpecOutput) ToVaultDynamicSecretSpecPtrOutput() VaultDynamicSecretSpecPtrOutput {
	return o.ToVaultDynamicSecretSpecPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecOutput) ToVaultDynamicSecretSpecPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpec) *VaultDynamicSecretSpec {
		return &v
	}).(VaultDynamicSecretSpecPtrOutput)
}

// Used to select the correct ESO controller (think: ingress.ingressClassName)
// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
func (o VaultDynamicSecretSpecOutput) Controller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpec) *string { return v.Controller }).(pulumi.StringPtrOutput)
}

// Vault API method to use (GET/POST/other)
func (o VaultDynamicSecretSpecOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpec) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// Parameters to pass to Vault write (for non-GET methods)
func (o VaultDynamicSecretSpecOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpec) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Vault path to obtain the dynamic secret from
func (o VaultDynamicSecretSpecOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpec) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecOutput) Provider() VaultDynamicSecretSpecProviderPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpec) *VaultDynamicSecretSpecProvider { return v.Provider }).(VaultDynamicSecretSpecProviderPtrOutput)
}

// Result type defines which data is returned from the generator.
// By default it is the "data" section of the Vault API response.
// When using e.g. /auth/token/create the "data" section is empty but
// the "auth" section contains the generated token.
// Please refer to the vault docs regarding the result data structure.
func (o VaultDynamicSecretSpecOutput) ResultType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpec) *string { return v.ResultType }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpec)(nil)).Elem()
}

func (o VaultDynamicSecretSpecPtrOutput) ToVaultDynamicSecretSpecPtrOutput() VaultDynamicSecretSpecPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecPtrOutput) ToVaultDynamicSecretSpecPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecPtrOutput) Elem() VaultDynamicSecretSpecOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpec) VaultDynamicSecretSpec {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpec
		return ret
	}).(VaultDynamicSecretSpecOutput)
}

// Used to select the correct ESO controller (think: ingress.ingressClassName)
// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
func (o VaultDynamicSecretSpecPtrOutput) Controller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpec) *string {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(pulumi.StringPtrOutput)
}

// Vault API method to use (GET/POST/other)
func (o VaultDynamicSecretSpecPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpec) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// Parameters to pass to Vault write (for non-GET methods)
func (o VaultDynamicSecretSpecPtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Vault path to obtain the dynamic secret from
func (o VaultDynamicSecretSpecPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpec) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecPtrOutput) Provider() VaultDynamicSecretSpecProviderPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpec) *VaultDynamicSecretSpecProvider {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(VaultDynamicSecretSpecProviderPtrOutput)
}

// Result type defines which data is returned from the generator.
// By default it is the "data" section of the Vault API response.
// When using e.g. /auth/token/create the "data" section is empty but
// the "auth" section contains the generated token.
// Please refer to the vault docs regarding the result data structure.
func (o VaultDynamicSecretSpecPtrOutput) ResultType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpec) *string {
		if v == nil {
			return nil
		}
		return v.ResultType
	}).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecPatch struct {
	// Used to select the correct ESO controller (think: ingress.ingressClassName)
	// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
	Controller *string `pulumi:"controller"`
	// Vault API method to use (GET/POST/other)
	Method *string `pulumi:"method"`
	// Parameters to pass to Vault write (for non-GET methods)
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Vault path to obtain the dynamic secret from
	Path     *string                              `pulumi:"path"`
	Provider *VaultDynamicSecretSpecProviderPatch `pulumi:"provider"`
	// Result type defines which data is returned from the generator.
	// By default it is the "data" section of the Vault API response.
	// When using e.g. /auth/token/create the "data" section is empty but
	// the "auth" section contains the generated token.
	// Please refer to the vault docs regarding the result data structure.
	ResultType *string `pulumi:"resultType"`
}

// VaultDynamicSecretSpecPatchInput is an input type that accepts VaultDynamicSecretSpecPatchArgs and VaultDynamicSecretSpecPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecPatchInput` via:
//
//	VaultDynamicSecretSpecPatchArgs{...}
type VaultDynamicSecretSpecPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecPatchOutput() VaultDynamicSecretSpecPatchOutput
	ToVaultDynamicSecretSpecPatchOutputWithContext(context.Context) VaultDynamicSecretSpecPatchOutput
}

type VaultDynamicSecretSpecPatchArgs struct {
	// Used to select the correct ESO controller (think: ingress.ingressClassName)
	// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
	Controller pulumi.StringPtrInput `pulumi:"controller"`
	// Vault API method to use (GET/POST/other)
	Method pulumi.StringPtrInput `pulumi:"method"`
	// Parameters to pass to Vault write (for non-GET methods)
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Vault path to obtain the dynamic secret from
	Path     pulumi.StringPtrInput                       `pulumi:"path"`
	Provider VaultDynamicSecretSpecProviderPatchPtrInput `pulumi:"provider"`
	// Result type defines which data is returned from the generator.
	// By default it is the "data" section of the Vault API response.
	// When using e.g. /auth/token/create the "data" section is empty but
	// the "auth" section contains the generated token.
	// Please refer to the vault docs regarding the result data structure.
	ResultType pulumi.StringPtrInput `pulumi:"resultType"`
}

func (VaultDynamicSecretSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecPatchArgs) ToVaultDynamicSecretSpecPatchOutput() VaultDynamicSecretSpecPatchOutput {
	return i.ToVaultDynamicSecretSpecPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecPatchArgs) ToVaultDynamicSecretSpecPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecPatchOutput)
}

func (i VaultDynamicSecretSpecPatchArgs) ToVaultDynamicSecretSpecPatchPtrOutput() VaultDynamicSecretSpecPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecPatchArgs) ToVaultDynamicSecretSpecPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecPatchOutput).ToVaultDynamicSecretSpecPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecPatchPtrInput is an input type that accepts VaultDynamicSecretSpecPatchArgs, VaultDynamicSecretSpecPatchPtr and VaultDynamicSecretSpecPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecPatchPtrOutput() VaultDynamicSecretSpecPatchPtrOutput
	ToVaultDynamicSecretSpecPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecPatchPtrOutput
}

type vaultDynamicSecretSpecPatchPtrType VaultDynamicSecretSpecPatchArgs

func VaultDynamicSecretSpecPatchPtr(v *VaultDynamicSecretSpecPatchArgs) VaultDynamicSecretSpecPatchPtrInput {
	return (*vaultDynamicSecretSpecPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecPatchPtrType) ToVaultDynamicSecretSpecPatchPtrOutput() VaultDynamicSecretSpecPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecPatchPtrType) ToVaultDynamicSecretSpecPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecPatchPtrOutput)
}

type VaultDynamicSecretSpecPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecPatchOutput) ToVaultDynamicSecretSpecPatchOutput() VaultDynamicSecretSpecPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecPatchOutput) ToVaultDynamicSecretSpecPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecPatchOutput) ToVaultDynamicSecretSpecPatchPtrOutput() VaultDynamicSecretSpecPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecPatchOutput) ToVaultDynamicSecretSpecPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecPatch) *VaultDynamicSecretSpecPatch {
		return &v
	}).(VaultDynamicSecretSpecPatchPtrOutput)
}

// Used to select the correct ESO controller (think: ingress.ingressClassName)
// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
func (o VaultDynamicSecretSpecPatchOutput) Controller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecPatch) *string { return v.Controller }).(pulumi.StringPtrOutput)
}

// Vault API method to use (GET/POST/other)
func (o VaultDynamicSecretSpecPatchOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecPatch) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// Parameters to pass to Vault write (for non-GET methods)
func (o VaultDynamicSecretSpecPatchOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecPatch) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Vault path to obtain the dynamic secret from
func (o VaultDynamicSecretSpecPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecPatchOutput) Provider() VaultDynamicSecretSpecProviderPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecPatch) *VaultDynamicSecretSpecProviderPatch { return v.Provider }).(VaultDynamicSecretSpecProviderPatchPtrOutput)
}

// Result type defines which data is returned from the generator.
// By default it is the "data" section of the Vault API response.
// When using e.g. /auth/token/create the "data" section is empty but
// the "auth" section contains the generated token.
// Please refer to the vault docs regarding the result data structure.
func (o VaultDynamicSecretSpecPatchOutput) ResultType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecPatch) *string { return v.ResultType }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecPatchPtrOutput) ToVaultDynamicSecretSpecPatchPtrOutput() VaultDynamicSecretSpecPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecPatchPtrOutput) ToVaultDynamicSecretSpecPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecPatchPtrOutput) Elem() VaultDynamicSecretSpecPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecPatch) VaultDynamicSecretSpecPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecPatch
		return ret
	}).(VaultDynamicSecretSpecPatchOutput)
}

// Used to select the correct ESO controller (think: ingress.ingressClassName)
// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
func (o VaultDynamicSecretSpecPatchPtrOutput) Controller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(pulumi.StringPtrOutput)
}

// Vault API method to use (GET/POST/other)
func (o VaultDynamicSecretSpecPatchPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// Parameters to pass to Vault write (for non-GET methods)
func (o VaultDynamicSecretSpecPatchPtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Vault path to obtain the dynamic secret from
func (o VaultDynamicSecretSpecPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecPatchPtrOutput) Provider() VaultDynamicSecretSpecProviderPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecPatch) *VaultDynamicSecretSpecProviderPatch {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(VaultDynamicSecretSpecProviderPatchPtrOutput)
}

// Result type defines which data is returned from the generator.
// By default it is the "data" section of the Vault API response.
// When using e.g. /auth/token/create the "data" section is empty but
// the "auth" section contains the generated token.
// Please refer to the vault docs regarding the result data structure.
func (o VaultDynamicSecretSpecPatchPtrOutput) ResultType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ResultType
	}).(pulumi.StringPtrOutput)
}

// Vault provider common spec
type VaultDynamicSecretSpecProvider struct {
	Auth *VaultDynamicSecretSpecProviderAuth `pulumi:"auth"`
	// PEM encoded CA bundle used to validate Vault server certificate. Only used
	// if the Server URL is using HTTPS protocol. This parameter is ignored for
	// plain HTTP protocol connection. If not set the system root certificates
	// are used to validate the TLS connection.
	CaBundle   *string                                   `pulumi:"caBundle"`
	CaProvider *VaultDynamicSecretSpecProviderCaProvider `pulumi:"caProvider"`
	// ForwardInconsistent tells Vault to forward read-after-write requests to the Vault
	// leader instead of simply retrying within a loop. This can increase performance if
	// the option is enabled serverside.
	// https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header
	ForwardInconsistent *bool `pulumi:"forwardInconsistent"`
	// Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows
	// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
	// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
	Namespace *string `pulumi:"namespace"`
	// Path is the mount path of the Vault KV backend endpoint, e.g:
	// "secret". The v2 KV secret engine version specific "/data" path suffix
	// for fetching secrets from Vault is optional and will be appended
	// if not present in specified path.
	Path *string `pulumi:"path"`
	// ReadYourWrites ensures isolated read-after-write semantics by
	// providing discovered cluster replication states in each request.
	// More information about eventual consistency in Vault can be found here
	// https://www.vaultproject.io/docs/enterprise/consistency
	ReadYourWrites *bool `pulumi:"readYourWrites"`
	// Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
	Server *string                            `pulumi:"server"`
	Tls    *VaultDynamicSecretSpecProviderTls `pulumi:"tls"`
	// Version is the Vault KV secret engine version. This can be either "v1" or
	// "v2". Version defaults to "v2".
	Version *string `pulumi:"version"`
}

// VaultDynamicSecretSpecProviderInput is an input type that accepts VaultDynamicSecretSpecProviderArgs and VaultDynamicSecretSpecProviderOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderInput` via:
//
//	VaultDynamicSecretSpecProviderArgs{...}
type VaultDynamicSecretSpecProviderInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderOutput() VaultDynamicSecretSpecProviderOutput
	ToVaultDynamicSecretSpecProviderOutputWithContext(context.Context) VaultDynamicSecretSpecProviderOutput
}

// Vault provider common spec
type VaultDynamicSecretSpecProviderArgs struct {
	Auth VaultDynamicSecretSpecProviderAuthPtrInput `pulumi:"auth"`
	// PEM encoded CA bundle used to validate Vault server certificate. Only used
	// if the Server URL is using HTTPS protocol. This parameter is ignored for
	// plain HTTP protocol connection. If not set the system root certificates
	// are used to validate the TLS connection.
	CaBundle   pulumi.StringPtrInput                            `pulumi:"caBundle"`
	CaProvider VaultDynamicSecretSpecProviderCaProviderPtrInput `pulumi:"caProvider"`
	// ForwardInconsistent tells Vault to forward read-after-write requests to the Vault
	// leader instead of simply retrying within a loop. This can increase performance if
	// the option is enabled serverside.
	// https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header
	ForwardInconsistent pulumi.BoolPtrInput `pulumi:"forwardInconsistent"`
	// Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows
	// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
	// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Path is the mount path of the Vault KV backend endpoint, e.g:
	// "secret". The v2 KV secret engine version specific "/data" path suffix
	// for fetching secrets from Vault is optional and will be appended
	// if not present in specified path.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// ReadYourWrites ensures isolated read-after-write semantics by
	// providing discovered cluster replication states in each request.
	// More information about eventual consistency in Vault can be found here
	// https://www.vaultproject.io/docs/enterprise/consistency
	ReadYourWrites pulumi.BoolPtrInput `pulumi:"readYourWrites"`
	// Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
	Server pulumi.StringPtrInput                     `pulumi:"server"`
	Tls    VaultDynamicSecretSpecProviderTlsPtrInput `pulumi:"tls"`
	// Version is the Vault KV secret engine version. This can be either "v1" or
	// "v2". Version defaults to "v2".
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (VaultDynamicSecretSpecProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProvider)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderArgs) ToVaultDynamicSecretSpecProviderOutput() VaultDynamicSecretSpecProviderOutput {
	return i.ToVaultDynamicSecretSpecProviderOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderArgs) ToVaultDynamicSecretSpecProviderOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderOutput)
}

func (i VaultDynamicSecretSpecProviderArgs) ToVaultDynamicSecretSpecProviderPtrOutput() VaultDynamicSecretSpecProviderPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderArgs) ToVaultDynamicSecretSpecProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderOutput).ToVaultDynamicSecretSpecProviderPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderPtrInput is an input type that accepts VaultDynamicSecretSpecProviderArgs, VaultDynamicSecretSpecProviderPtr and VaultDynamicSecretSpecProviderPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderPtrOutput() VaultDynamicSecretSpecProviderPtrOutput
	ToVaultDynamicSecretSpecProviderPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderPtrOutput
}

type vaultDynamicSecretSpecProviderPtrType VaultDynamicSecretSpecProviderArgs

func VaultDynamicSecretSpecProviderPtr(v *VaultDynamicSecretSpecProviderArgs) VaultDynamicSecretSpecProviderPtrInput {
	return (*vaultDynamicSecretSpecProviderPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProvider)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderPtrType) ToVaultDynamicSecretSpecProviderPtrOutput() VaultDynamicSecretSpecProviderPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderPtrType) ToVaultDynamicSecretSpecProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderPtrOutput)
}

// Vault provider common spec
type VaultDynamicSecretSpecProviderOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProvider)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderOutput) ToVaultDynamicSecretSpecProviderOutput() VaultDynamicSecretSpecProviderOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderOutput) ToVaultDynamicSecretSpecProviderOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderOutput) ToVaultDynamicSecretSpecProviderPtrOutput() VaultDynamicSecretSpecProviderPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderOutput) ToVaultDynamicSecretSpecProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProvider) *VaultDynamicSecretSpecProvider {
		return &v
	}).(VaultDynamicSecretSpecProviderPtrOutput)
}

func (o VaultDynamicSecretSpecProviderOutput) Auth() VaultDynamicSecretSpecProviderAuthPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *VaultDynamicSecretSpecProviderAuth { return v.Auth }).(VaultDynamicSecretSpecProviderAuthPtrOutput)
}

// PEM encoded CA bundle used to validate Vault server certificate. Only used
// if the Server URL is using HTTPS protocol. This parameter is ignored for
// plain HTTP protocol connection. If not set the system root certificates
// are used to validate the TLS connection.
func (o VaultDynamicSecretSpecProviderOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *string { return v.CaBundle }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderOutput) CaProvider() VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *VaultDynamicSecretSpecProviderCaProvider { return v.CaProvider }).(VaultDynamicSecretSpecProviderCaProviderPtrOutput)
}

// ForwardInconsistent tells Vault to forward read-after-write requests to the Vault
// leader instead of simply retrying within a loop. This can increase performance if
// the option is enabled serverside.
// https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header
func (o VaultDynamicSecretSpecProviderOutput) ForwardInconsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *bool { return v.ForwardInconsistent }).(pulumi.BoolPtrOutput)
}

// Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows
// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
func (o VaultDynamicSecretSpecProviderOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Path is the mount path of the Vault KV backend endpoint, e.g:
// "secret". The v2 KV secret engine version specific "/data" path suffix
// for fetching secrets from Vault is optional and will be appended
// if not present in specified path.
func (o VaultDynamicSecretSpecProviderOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// ReadYourWrites ensures isolated read-after-write semantics by
// providing discovered cluster replication states in each request.
// More information about eventual consistency in Vault can be found here
// https://www.vaultproject.io/docs/enterprise/consistency
func (o VaultDynamicSecretSpecProviderOutput) ReadYourWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *bool { return v.ReadYourWrites }).(pulumi.BoolPtrOutput)
}

// Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
func (o VaultDynamicSecretSpecProviderOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *string { return v.Server }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderOutput) Tls() VaultDynamicSecretSpecProviderTlsPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *VaultDynamicSecretSpecProviderTls { return v.Tls }).(VaultDynamicSecretSpecProviderTlsPtrOutput)
}

// Version is the Vault KV secret engine version. This can be either "v1" or
// "v2". Version defaults to "v2".
func (o VaultDynamicSecretSpecProviderOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProvider)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderPtrOutput) ToVaultDynamicSecretSpecProviderPtrOutput() VaultDynamicSecretSpecProviderPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderPtrOutput) ToVaultDynamicSecretSpecProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderPtrOutput) Elem() VaultDynamicSecretSpecProviderOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) VaultDynamicSecretSpecProvider {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProvider
		return ret
	}).(VaultDynamicSecretSpecProviderOutput)
}

func (o VaultDynamicSecretSpecProviderPtrOutput) Auth() VaultDynamicSecretSpecProviderAuthPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *VaultDynamicSecretSpecProviderAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(VaultDynamicSecretSpecProviderAuthPtrOutput)
}

// PEM encoded CA bundle used to validate Vault server certificate. Only used
// if the Server URL is using HTTPS protocol. This parameter is ignored for
// plain HTTP protocol connection. If not set the system root certificates
// are used to validate the TLS connection.
func (o VaultDynamicSecretSpecProviderPtrOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *string {
		if v == nil {
			return nil
		}
		return v.CaBundle
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderPtrOutput) CaProvider() VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *VaultDynamicSecretSpecProviderCaProvider {
		if v == nil {
			return nil
		}
		return v.CaProvider
	}).(VaultDynamicSecretSpecProviderCaProviderPtrOutput)
}

// ForwardInconsistent tells Vault to forward read-after-write requests to the Vault
// leader instead of simply retrying within a loop. This can increase performance if
// the option is enabled serverside.
// https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header
func (o VaultDynamicSecretSpecProviderPtrOutput) ForwardInconsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *bool {
		if v == nil {
			return nil
		}
		return v.ForwardInconsistent
	}).(pulumi.BoolPtrOutput)
}

// Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows
// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
func (o VaultDynamicSecretSpecProviderPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Path is the mount path of the Vault KV backend endpoint, e.g:
// "secret". The v2 KV secret engine version specific "/data" path suffix
// for fetching secrets from Vault is optional and will be appended
// if not present in specified path.
func (o VaultDynamicSecretSpecProviderPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// ReadYourWrites ensures isolated read-after-write semantics by
// providing discovered cluster replication states in each request.
// More information about eventual consistency in Vault can be found here
// https://www.vaultproject.io/docs/enterprise/consistency
func (o VaultDynamicSecretSpecProviderPtrOutput) ReadYourWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *bool {
		if v == nil {
			return nil
		}
		return v.ReadYourWrites
	}).(pulumi.BoolPtrOutput)
}

// Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
func (o VaultDynamicSecretSpecProviderPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderPtrOutput) Tls() VaultDynamicSecretSpecProviderTlsPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *VaultDynamicSecretSpecProviderTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(VaultDynamicSecretSpecProviderTlsPtrOutput)
}

// Version is the Vault KV secret engine version. This can be either "v1" or
// "v2". Version defaults to "v2".
func (o VaultDynamicSecretSpecProviderPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Auth configures how secret-manager authenticates with the Vault server.
type VaultDynamicSecretSpecProviderAuth struct {
	AppRole    *VaultDynamicSecretSpecProviderAuthAppRole    `pulumi:"appRole"`
	Cert       *VaultDynamicSecretSpecProviderAuthCert       `pulumi:"cert"`
	Iam        *VaultDynamicSecretSpecProviderAuthIam        `pulumi:"iam"`
	Jwt        *VaultDynamicSecretSpecProviderAuthJwt        `pulumi:"jwt"`
	Kubernetes *VaultDynamicSecretSpecProviderAuthKubernetes `pulumi:"kubernetes"`
	Ldap       *VaultDynamicSecretSpecProviderAuthLdap       `pulumi:"ldap"`
	// Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in.
	// Namespaces is a set of features within Vault Enterprise that allows
	// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
	// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
	// This will default to Vault.Namespace field if set, or empty otherwise
	Namespace      *string                                           `pulumi:"namespace"`
	TokenSecretRef *VaultDynamicSecretSpecProviderAuthTokenSecretRef `pulumi:"tokenSecretRef"`
	UserPass       *VaultDynamicSecretSpecProviderAuthUserPass       `pulumi:"userPass"`
}

// VaultDynamicSecretSpecProviderAuthInput is an input type that accepts VaultDynamicSecretSpecProviderAuthArgs and VaultDynamicSecretSpecProviderAuthOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthInput` via:
//
//	VaultDynamicSecretSpecProviderAuthArgs{...}
type VaultDynamicSecretSpecProviderAuthInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthOutput() VaultDynamicSecretSpecProviderAuthOutput
	ToVaultDynamicSecretSpecProviderAuthOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthOutput
}

// Auth configures how secret-manager authenticates with the Vault server.
type VaultDynamicSecretSpecProviderAuthArgs struct {
	AppRole    VaultDynamicSecretSpecProviderAuthAppRolePtrInput    `pulumi:"appRole"`
	Cert       VaultDynamicSecretSpecProviderAuthCertPtrInput       `pulumi:"cert"`
	Iam        VaultDynamicSecretSpecProviderAuthIamPtrInput        `pulumi:"iam"`
	Jwt        VaultDynamicSecretSpecProviderAuthJwtPtrInput        `pulumi:"jwt"`
	Kubernetes VaultDynamicSecretSpecProviderAuthKubernetesPtrInput `pulumi:"kubernetes"`
	Ldap       VaultDynamicSecretSpecProviderAuthLdapPtrInput       `pulumi:"ldap"`
	// Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in.
	// Namespaces is a set of features within Vault Enterprise that allows
	// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
	// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
	// This will default to Vault.Namespace field if set, or empty otherwise
	Namespace      pulumi.StringPtrInput                                    `pulumi:"namespace"`
	TokenSecretRef VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrInput `pulumi:"tokenSecretRef"`
	UserPass       VaultDynamicSecretSpecProviderAuthUserPassPtrInput       `pulumi:"userPass"`
}

func (VaultDynamicSecretSpecProviderAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuth)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthArgs) ToVaultDynamicSecretSpecProviderAuthOutput() VaultDynamicSecretSpecProviderAuthOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthArgs) ToVaultDynamicSecretSpecProviderAuthOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthOutput)
}

func (i VaultDynamicSecretSpecProviderAuthArgs) ToVaultDynamicSecretSpecProviderAuthPtrOutput() VaultDynamicSecretSpecProviderAuthPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthArgs) ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthOutput).ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthArgs, VaultDynamicSecretSpecProviderAuthPtr and VaultDynamicSecretSpecProviderAuthPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthPtrOutput() VaultDynamicSecretSpecProviderAuthPtrOutput
	ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthPtrOutput
}

type vaultDynamicSecretSpecProviderAuthPtrType VaultDynamicSecretSpecProviderAuthArgs

func VaultDynamicSecretSpecProviderAuthPtr(v *VaultDynamicSecretSpecProviderAuthArgs) VaultDynamicSecretSpecProviderAuthPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuth)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthPtrType) ToVaultDynamicSecretSpecProviderAuthPtrOutput() VaultDynamicSecretSpecProviderAuthPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthPtrType) ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthPtrOutput)
}

// Auth configures how secret-manager authenticates with the Vault server.
type VaultDynamicSecretSpecProviderAuthOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuth)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthOutput) ToVaultDynamicSecretSpecProviderAuthOutput() VaultDynamicSecretSpecProviderAuthOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthOutput) ToVaultDynamicSecretSpecProviderAuthOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthOutput) ToVaultDynamicSecretSpecProviderAuthPtrOutput() VaultDynamicSecretSpecProviderAuthPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthOutput) ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuth {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthOutput) AppRole() VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthAppRole {
		return v.AppRole
	}).(VaultDynamicSecretSpecProviderAuthAppRolePtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthOutput) Cert() VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthCert { return v.Cert }).(VaultDynamicSecretSpecProviderAuthCertPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthOutput) Iam() VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthIam { return v.Iam }).(VaultDynamicSecretSpecProviderAuthIamPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthOutput) Jwt() VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthJwt { return v.Jwt }).(VaultDynamicSecretSpecProviderAuthJwtPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthOutput) Kubernetes() VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthKubernetes {
		return v.Kubernetes
	}).(VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthOutput) Ldap() VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthLdap { return v.Ldap }).(VaultDynamicSecretSpecProviderAuthLdapPtrOutput)
}

// Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in.
// Namespaces is a set of features within Vault Enterprise that allows
// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
// This will default to Vault.Namespace field if set, or empty otherwise
func (o VaultDynamicSecretSpecProviderAuthOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthOutput) TokenSecretRef() VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthTokenSecretRef {
		return v.TokenSecretRef
	}).(VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthOutput) UserPass() VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthUserPass {
		return v.UserPass
	}).(VaultDynamicSecretSpecProviderAuthUserPassPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuth)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthPtrOutput) ToVaultDynamicSecretSpecProviderAuthPtrOutput() VaultDynamicSecretSpecProviderAuthPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthPtrOutput) ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) VaultDynamicSecretSpecProviderAuth {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuth
		return ret
	}).(VaultDynamicSecretSpecProviderAuthOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPtrOutput) AppRole() VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthAppRole {
		if v == nil {
			return nil
		}
		return v.AppRole
	}).(VaultDynamicSecretSpecProviderAuthAppRolePtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPtrOutput) Cert() VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthCert {
		if v == nil {
			return nil
		}
		return v.Cert
	}).(VaultDynamicSecretSpecProviderAuthCertPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPtrOutput) Iam() VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthIam {
		if v == nil {
			return nil
		}
		return v.Iam
	}).(VaultDynamicSecretSpecProviderAuthIamPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPtrOutput) Jwt() VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthJwt {
		if v == nil {
			return nil
		}
		return v.Jwt
	}).(VaultDynamicSecretSpecProviderAuthJwtPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPtrOutput) Kubernetes() VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthKubernetes {
		if v == nil {
			return nil
		}
		return v.Kubernetes
	}).(VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPtrOutput) Ldap() VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthLdap {
		if v == nil {
			return nil
		}
		return v.Ldap
	}).(VaultDynamicSecretSpecProviderAuthLdapPtrOutput)
}

// Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in.
// Namespaces is a set of features within Vault Enterprise that allows
// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
// This will default to Vault.Namespace field if set, or empty otherwise
func (o VaultDynamicSecretSpecProviderAuthPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPtrOutput) TokenSecretRef() VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthTokenSecretRef {
		if v == nil {
			return nil
		}
		return v.TokenSecretRef
	}).(VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPtrOutput) UserPass() VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthUserPass {
		if v == nil {
			return nil
		}
		return v.UserPass
	}).(VaultDynamicSecretSpecProviderAuthUserPassPtrOutput)
}

// AppRole authenticates with Vault using the App Role auth mechanism,
// with the role and secret stored in a Kubernetes Secret resource.
type VaultDynamicSecretSpecProviderAuthAppRole struct {
	// Path where the App Role authentication backend is mounted
	// in Vault, e.g: "approle"
	Path *string `pulumi:"path"`
	// RoleID configured in the App Role authentication backend when setting
	// up the authentication backend in Vault.
	RoleId    *string                                             `pulumi:"roleId"`
	RoleRef   *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef   `pulumi:"roleRef"`
	SecretRef *VaultDynamicSecretSpecProviderAuthAppRoleSecretRef `pulumi:"secretRef"`
}

// VaultDynamicSecretSpecProviderAuthAppRoleInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleArgs and VaultDynamicSecretSpecProviderAuthAppRoleOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRoleInput` via:
//
//	VaultDynamicSecretSpecProviderAuthAppRoleArgs{...}
type VaultDynamicSecretSpecProviderAuthAppRoleInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRoleOutput() VaultDynamicSecretSpecProviderAuthAppRoleOutput
	ToVaultDynamicSecretSpecProviderAuthAppRoleOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRoleOutput
}

// AppRole authenticates with Vault using the App Role auth mechanism,
// with the role and secret stored in a Kubernetes Secret resource.
type VaultDynamicSecretSpecProviderAuthAppRoleArgs struct {
	// Path where the App Role authentication backend is mounted
	// in Vault, e.g: "approle"
	Path pulumi.StringPtrInput `pulumi:"path"`
	// RoleID configured in the App Role authentication backend when setting
	// up the authentication backend in Vault.
	RoleId    pulumi.StringPtrInput                                      `pulumi:"roleId"`
	RoleRef   VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrInput   `pulumi:"roleRef"`
	SecretRef VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrInput `pulumi:"secretRef"`
}

func (VaultDynamicSecretSpecProviderAuthAppRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRole)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleOutput() VaultDynamicSecretSpecProviderAuthAppRoleOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleOutput)
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleArgs) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutput() VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleArgs) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleOutput).ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthAppRolePtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleArgs, VaultDynamicSecretSpecProviderAuthAppRolePtr and VaultDynamicSecretSpecProviderAuthAppRolePtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRolePtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthAppRoleArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthAppRolePtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutput() VaultDynamicSecretSpecProviderAuthAppRolePtrOutput
	ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRolePtrOutput
}

type vaultDynamicSecretSpecProviderAuthAppRolePtrType VaultDynamicSecretSpecProviderAuthAppRoleArgs

func VaultDynamicSecretSpecProviderAuthAppRolePtr(v *VaultDynamicSecretSpecProviderAuthAppRoleArgs) VaultDynamicSecretSpecProviderAuthAppRolePtrInput {
	return (*vaultDynamicSecretSpecProviderAuthAppRolePtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthAppRolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRole)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthAppRolePtrType) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutput() VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthAppRolePtrType) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRolePtrOutput)
}

// AppRole authenticates with Vault using the App Role auth mechanism,
// with the role and secret stored in a Kubernetes Secret resource.
type VaultDynamicSecretSpecProviderAuthAppRoleOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRole)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleOutput() VaultDynamicSecretSpecProviderAuthAppRoleOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutput() VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthAppRole) *VaultDynamicSecretSpecProviderAuthAppRole {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthAppRolePtrOutput)
}

// Path where the App Role authentication backend is mounted
// in Vault, e.g: "approle"
func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRole) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// RoleID configured in the App Role authentication backend when setting
// up the authentication backend in Vault.
func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) RoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRole) *string { return v.RoleId }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) RoleRef() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRole) *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef {
		return v.RoleRef
	}).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) SecretRef() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRole) *VaultDynamicSecretSpecProviderAuthAppRoleSecretRef {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthAppRolePtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRole)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutput() VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) Elem() VaultDynamicSecretSpecProviderAuthAppRoleOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRole) VaultDynamicSecretSpecProviderAuthAppRole {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthAppRole
		return ret
	}).(VaultDynamicSecretSpecProviderAuthAppRoleOutput)
}

// Path where the App Role authentication backend is mounted
// in Vault, e.g: "approle"
func (o VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRole) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// RoleID configured in the App Role authentication backend when setting
// up the authentication backend in Vault.
func (o VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) RoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRole) *string {
		if v == nil {
			return nil
		}
		return v.RoleId
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) RoleRef() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRole) *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef {
		if v == nil {
			return nil
		}
		return v.RoleRef
	}).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRole) *VaultDynamicSecretSpecProviderAuthAppRoleSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput)
}

// AppRole authenticates with Vault using the App Role auth mechanism,
// with the role and secret stored in a Kubernetes Secret resource.
type VaultDynamicSecretSpecProviderAuthAppRolePatch struct {
	// Path where the App Role authentication backend is mounted
	// in Vault, e.g: "approle"
	Path *string `pulumi:"path"`
	// RoleID configured in the App Role authentication backend when setting
	// up the authentication backend in Vault.
	RoleId    *string                                                  `pulumi:"roleId"`
	RoleRef   *VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch   `pulumi:"roleRef"`
	SecretRef *VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch `pulumi:"secretRef"`
}

// VaultDynamicSecretSpecProviderAuthAppRolePatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRolePatchArgs and VaultDynamicSecretSpecProviderAuthAppRolePatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRolePatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthAppRolePatchArgs{...}
type VaultDynamicSecretSpecProviderAuthAppRolePatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRolePatchOutput() VaultDynamicSecretSpecProviderAuthAppRolePatchOutput
	ToVaultDynamicSecretSpecProviderAuthAppRolePatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRolePatchOutput
}

// AppRole authenticates with Vault using the App Role auth mechanism,
// with the role and secret stored in a Kubernetes Secret resource.
type VaultDynamicSecretSpecProviderAuthAppRolePatchArgs struct {
	// Path where the App Role authentication backend is mounted
	// in Vault, e.g: "approle"
	Path pulumi.StringPtrInput `pulumi:"path"`
	// RoleID configured in the App Role authentication backend when setting
	// up the authentication backend in Vault.
	RoleId    pulumi.StringPtrInput                                           `pulumi:"roleId"`
	RoleRef   VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrInput   `pulumi:"roleRef"`
	SecretRef VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrInput `pulumi:"secretRef"`
}

func (VaultDynamicSecretSpecProviderAuthAppRolePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRolePatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthAppRolePatchArgs) ToVaultDynamicSecretSpecProviderAuthAppRolePatchOutput() VaultDynamicSecretSpecProviderAuthAppRolePatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRolePatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRolePatchArgs) ToVaultDynamicSecretSpecProviderAuthAppRolePatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRolePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRolePatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthAppRolePatchArgs) ToVaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput() VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRolePatchArgs) ToVaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRolePatchOutput).ToVaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthAppRolePatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRolePatchArgs, VaultDynamicSecretSpecProviderAuthAppRolePatchPtr and VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRolePatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthAppRolePatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthAppRolePatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput() VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthAppRolePatchPtrType VaultDynamicSecretSpecProviderAuthAppRolePatchArgs

func VaultDynamicSecretSpecProviderAuthAppRolePatchPtr(v *VaultDynamicSecretSpecProviderAuthAppRolePatchArgs) VaultDynamicSecretSpecProviderAuthAppRolePatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthAppRolePatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthAppRolePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRolePatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthAppRolePatchPtrType) ToVaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput() VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthAppRolePatchPtrType) ToVaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput)
}

// AppRole authenticates with Vault using the App Role auth mechanism,
// with the role and secret stored in a Kubernetes Secret resource.
type VaultDynamicSecretSpecProviderAuthAppRolePatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRolePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRolePatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePatchOutput) ToVaultDynamicSecretSpecProviderAuthAppRolePatchOutput() VaultDynamicSecretSpecProviderAuthAppRolePatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePatchOutput) ToVaultDynamicSecretSpecProviderAuthAppRolePatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRolePatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePatchOutput) ToVaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput() VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePatchOutput) ToVaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthAppRolePatch) *VaultDynamicSecretSpecProviderAuthAppRolePatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput)
}

// Path where the App Role authentication backend is mounted
// in Vault, e.g: "approle"
func (o VaultDynamicSecretSpecProviderAuthAppRolePatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRolePatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// RoleID configured in the App Role authentication backend when setting
// up the authentication backend in Vault.
func (o VaultDynamicSecretSpecProviderAuthAppRolePatchOutput) RoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRolePatch) *string { return v.RoleId }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePatchOutput) RoleRef() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRolePatch) *VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch {
		return v.RoleRef
	}).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePatchOutput) SecretRef() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRolePatch) *VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRolePatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput() VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthAppRolePatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRolePatch) VaultDynamicSecretSpecProviderAuthAppRolePatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthAppRolePatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthAppRolePatchOutput)
}

// Path where the App Role authentication backend is mounted
// in Vault, e.g: "approle"
func (o VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRolePatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// RoleID configured in the App Role authentication backend when setting
// up the authentication backend in Vault.
func (o VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput) RoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRolePatch) *string {
		if v == nil {
			return nil
		}
		return v.RoleId
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput) RoleRef() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRolePatch) *VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch {
		if v == nil {
			return nil
		}
		return v.RoleRef
	}).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRolePatch) *VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput)
}

// Reference to a key in a Secret that contains the App Role ID used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role id.
type VaultDynamicSecretSpecProviderAuthAppRoleRoleRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthAppRoleRoleRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs and VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRoleRoleRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs{...}
type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput
	ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput
}

// Reference to a key in a Secret that contains the App Role ID used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role id.
type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleRoleRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput).ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs, VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtr and VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrType VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs

func VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtr(v *VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRoleRoleRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrType) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrType) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput)
}

// Reference to a key in a Secret that contains the App Role ID used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role id.
type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleRoleRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRoleRoleRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) VaultDynamicSecretSpecProviderAuthAppRoleRoleRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthAppRoleRoleRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Reference to a key in a Secret that contains the App Role ID used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role id.
type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchArgs and VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput
	ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput
}

// Reference to a key in a Secret that contains the App Role ID used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role id.
type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput).ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchArgs, VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtr and VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrType VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchArgs

func VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtr(v *VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchArgs) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput)
}

// Reference to a key in a Secret that contains the App Role ID used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role id.
type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch) *VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Reference to a key in a Secret that contains the App Role secret used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role secret.
type VaultDynamicSecretSpecProviderAuthAppRoleSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthAppRoleSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs and VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRoleSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput
}

// Reference to a key in a Secret that contains the App Role secret used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role secret.
type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs, VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtr and VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrType VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs

func VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRoleSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput)
}

// Reference to a key in a Secret that contains the App Role secret used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role secret.
type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) *VaultDynamicSecretSpecProviderAuthAppRoleSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRoleSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) VaultDynamicSecretSpecProviderAuthAppRoleSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthAppRoleSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Reference to a key in a Secret that contains the App Role secret used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role secret.
type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchArgs and VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput
	ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput
}

// Reference to a key in a Secret that contains the App Role secret used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role secret.
type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput).ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchArgs, VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtr and VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrType VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchArgs

func VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtr(v *VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchArgs) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput)
}

// Reference to a key in a Secret that contains the App Role secret used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role secret.
type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch) *VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
// Cert authentication method
type VaultDynamicSecretSpecProviderAuthCert struct {
	ClientCert *VaultDynamicSecretSpecProviderAuthCertClientCert `pulumi:"clientCert"`
	SecretRef  *VaultDynamicSecretSpecProviderAuthCertSecretRef  `pulumi:"secretRef"`
}

// VaultDynamicSecretSpecProviderAuthCertInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertArgs and VaultDynamicSecretSpecProviderAuthCertOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertInput` via:
//
//	VaultDynamicSecretSpecProviderAuthCertArgs{...}
type VaultDynamicSecretSpecProviderAuthCertInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertOutput() VaultDynamicSecretSpecProviderAuthCertOutput
	ToVaultDynamicSecretSpecProviderAuthCertOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertOutput
}

// Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
// Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertArgs struct {
	ClientCert VaultDynamicSecretSpecProviderAuthCertClientCertPtrInput `pulumi:"clientCert"`
	SecretRef  VaultDynamicSecretSpecProviderAuthCertSecretRefPtrInput  `pulumi:"secretRef"`
}

func (VaultDynamicSecretSpecProviderAuthCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCert)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthCertArgs) ToVaultDynamicSecretSpecProviderAuthCertOutput() VaultDynamicSecretSpecProviderAuthCertOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertArgs) ToVaultDynamicSecretSpecProviderAuthCertOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertOutput)
}

func (i VaultDynamicSecretSpecProviderAuthCertArgs) ToVaultDynamicSecretSpecProviderAuthCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertArgs) ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertOutput).ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthCertPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertArgs, VaultDynamicSecretSpecProviderAuthCertPtr and VaultDynamicSecretSpecProviderAuthCertPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthCertArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthCertPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertPtrOutput
	ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertPtrOutput
}

type vaultDynamicSecretSpecProviderAuthCertPtrType VaultDynamicSecretSpecProviderAuthCertArgs

func VaultDynamicSecretSpecProviderAuthCertPtr(v *VaultDynamicSecretSpecProviderAuthCertArgs) VaultDynamicSecretSpecProviderAuthCertPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthCertPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthCertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCert)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthCertPtrType) ToVaultDynamicSecretSpecProviderAuthCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthCertPtrType) ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertPtrOutput)
}

// Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
// Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCert)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertOutput) ToVaultDynamicSecretSpecProviderAuthCertOutput() VaultDynamicSecretSpecProviderAuthCertOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertOutput) ToVaultDynamicSecretSpecProviderAuthCertOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertOutput) ToVaultDynamicSecretSpecProviderAuthCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthCertOutput) ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthCert) *VaultDynamicSecretSpecProviderAuthCert {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthCertPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthCertOutput) ClientCert() VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCert) *VaultDynamicSecretSpecProviderAuthCertClientCert {
		return v.ClientCert
	}).(VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthCertOutput) SecretRef() VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCert) *VaultDynamicSecretSpecProviderAuthCertSecretRef {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthCertPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCert)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthCertOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCert) VaultDynamicSecretSpecProviderAuthCert {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthCert
		return ret
	}).(VaultDynamicSecretSpecProviderAuthCertOutput)
}

func (o VaultDynamicSecretSpecProviderAuthCertPtrOutput) ClientCert() VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCert) *VaultDynamicSecretSpecProviderAuthCertClientCert {
		if v == nil {
			return nil
		}
		return v.ClientCert
	}).(VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthCertPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCert) *VaultDynamicSecretSpecProviderAuthCertSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput)
}

// ClientCert is a certificate to authenticate using the Cert Vault
// authentication method
type VaultDynamicSecretSpecProviderAuthCertClientCert struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthCertClientCertInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertClientCertArgs and VaultDynamicSecretSpecProviderAuthCertClientCertOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertClientCertInput` via:
//
//	VaultDynamicSecretSpecProviderAuthCertClientCertArgs{...}
type VaultDynamicSecretSpecProviderAuthCertClientCertInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertClientCertOutput() VaultDynamicSecretSpecProviderAuthCertClientCertOutput
	ToVaultDynamicSecretSpecProviderAuthCertClientCertOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertOutput
}

// ClientCert is a certificate to authenticate using the Cert Vault
// authentication method
type VaultDynamicSecretSpecProviderAuthCertClientCertArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthCertClientCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertClientCert)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthCertClientCertArgs) ToVaultDynamicSecretSpecProviderAuthCertClientCertOutput() VaultDynamicSecretSpecProviderAuthCertClientCertOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertClientCertOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertClientCertArgs) ToVaultDynamicSecretSpecProviderAuthCertClientCertOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertClientCertOutput)
}

func (i VaultDynamicSecretSpecProviderAuthCertClientCertArgs) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertClientCertArgs) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertClientCertOutput).ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthCertClientCertPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertClientCertArgs, VaultDynamicSecretSpecProviderAuthCertClientCertPtr and VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertClientCertPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthCertClientCertArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthCertClientCertPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput
	ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput
}

type vaultDynamicSecretSpecProviderAuthCertClientCertPtrType VaultDynamicSecretSpecProviderAuthCertClientCertArgs

func VaultDynamicSecretSpecProviderAuthCertClientCertPtr(v *VaultDynamicSecretSpecProviderAuthCertClientCertArgs) VaultDynamicSecretSpecProviderAuthCertClientCertPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthCertClientCertPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthCertClientCertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCertClientCert)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthCertClientCertPtrType) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthCertClientCertPtrType) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput)
}

// ClientCert is a certificate to authenticate using the Cert Vault
// authentication method
type VaultDynamicSecretSpecProviderAuthCertClientCertOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertClientCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertClientCert)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertOutput() VaultDynamicSecretSpecProviderAuthCertClientCertOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthCertClientCert) *VaultDynamicSecretSpecProviderAuthCertClientCert {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertClientCert) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertClientCert) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertClientCert) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCertClientCert)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthCertClientCertOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertClientCert) VaultDynamicSecretSpecProviderAuthCertClientCert {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthCertClientCert
		return ret
	}).(VaultDynamicSecretSpecProviderAuthCertClientCertOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertClientCert) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertClientCert) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertClientCert) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ClientCert is a certificate to authenticate using the Cert Vault
// authentication method
type VaultDynamicSecretSpecProviderAuthCertClientCertPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthCertClientCertPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertClientCertPatchArgs and VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertClientCertPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthCertClientCertPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthCertClientCertPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput
	ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput
}

// ClientCert is a certificate to authenticate using the Cert Vault
// authentication method
type VaultDynamicSecretSpecProviderAuthCertClientCertPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthCertClientCertPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertClientCertPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthCertClientCertPatchArgs) ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertClientCertPatchArgs) ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthCertClientCertPatchArgs) ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertClientCertPatchArgs) ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput).ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertClientCertPatchArgs, VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtr and VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthCertClientCertPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrType VaultDynamicSecretSpecProviderAuthCertClientCertPatchArgs

func VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtr(v *VaultDynamicSecretSpecProviderAuthCertClientCertPatchArgs) VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCertClientCertPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrType) ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrType) ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput)
}

// ClientCert is a certificate to authenticate using the Cert Vault
// authentication method
type VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertClientCertPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthCertClientCertPatch) *VaultDynamicSecretSpecProviderAuthCertClientCertPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertClientCertPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertClientCertPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertClientCertPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCertClientCertPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertClientCertPatch) VaultDynamicSecretSpecProviderAuthCertClientCertPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthCertClientCertPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertClientCertPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertClientCertPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertClientCertPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
// Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertPatch struct {
	ClientCert *VaultDynamicSecretSpecProviderAuthCertClientCertPatch `pulumi:"clientCert"`
	SecretRef  *VaultDynamicSecretSpecProviderAuthCertSecretRefPatch  `pulumi:"secretRef"`
}

// VaultDynamicSecretSpecProviderAuthCertPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertPatchArgs and VaultDynamicSecretSpecProviderAuthCertPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthCertPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthCertPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertPatchOutput() VaultDynamicSecretSpecProviderAuthCertPatchOutput
	ToVaultDynamicSecretSpecProviderAuthCertPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertPatchOutput
}

// Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
// Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertPatchArgs struct {
	ClientCert VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrInput `pulumi:"clientCert"`
	SecretRef  VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrInput  `pulumi:"secretRef"`
}

func (VaultDynamicSecretSpecProviderAuthCertPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthCertPatchArgs) ToVaultDynamicSecretSpecProviderAuthCertPatchOutput() VaultDynamicSecretSpecProviderAuthCertPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertPatchArgs) ToVaultDynamicSecretSpecProviderAuthCertPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthCertPatchArgs) ToVaultDynamicSecretSpecProviderAuthCertPatchPtrOutput() VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertPatchArgs) ToVaultDynamicSecretSpecProviderAuthCertPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertPatchOutput).ToVaultDynamicSecretSpecProviderAuthCertPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthCertPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertPatchArgs, VaultDynamicSecretSpecProviderAuthCertPatchPtr and VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthCertPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthCertPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertPatchPtrOutput() VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthCertPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthCertPatchPtrType VaultDynamicSecretSpecProviderAuthCertPatchArgs

func VaultDynamicSecretSpecProviderAuthCertPatchPtr(v *VaultDynamicSecretSpecProviderAuthCertPatchArgs) VaultDynamicSecretSpecProviderAuthCertPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthCertPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthCertPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCertPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthCertPatchPtrType) ToVaultDynamicSecretSpecProviderAuthCertPatchPtrOutput() VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthCertPatchPtrType) ToVaultDynamicSecretSpecProviderAuthCertPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput)
}

// Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
// Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertPatchOutput) ToVaultDynamicSecretSpecProviderAuthCertPatchOutput() VaultDynamicSecretSpecProviderAuthCertPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertPatchOutput) ToVaultDynamicSecretSpecProviderAuthCertPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertPatchOutput) ToVaultDynamicSecretSpecProviderAuthCertPatchPtrOutput() VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthCertPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthCertPatchOutput) ToVaultDynamicSecretSpecProviderAuthCertPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthCertPatch) *VaultDynamicSecretSpecProviderAuthCertPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthCertPatchOutput) ClientCert() VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertPatch) *VaultDynamicSecretSpecProviderAuthCertClientCertPatch {
		return v.ClientCert
	}).(VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthCertPatchOutput) SecretRef() VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertPatch) *VaultDynamicSecretSpecProviderAuthCertSecretRefPatch {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCertPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertPatchPtrOutput() VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthCertPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertPatch) VaultDynamicSecretSpecProviderAuthCertPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthCertPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthCertPatchOutput)
}

func (o VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput) ClientCert() VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertPatch) *VaultDynamicSecretSpecProviderAuthCertClientCertPatch {
		if v == nil {
			return nil
		}
		return v.ClientCert
	}).(VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertPatch) *VaultDynamicSecretSpecProviderAuthCertSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput)
}

// SecretRef to a key in a Secret resource containing client private key to
// authenticate with Vault using the Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthCertSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertSecretRefArgs and VaultDynamicSecretSpecProviderAuthCertSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthCertSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthCertSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertSecretRefOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthCertSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefOutput
}

// SecretRef to a key in a Secret resource containing client private key to
// authenticate with Vault using the Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthCertSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthCertSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthCertSecretRefOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthCertSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthCertSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthCertSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertSecretRefArgs, VaultDynamicSecretSpecProviderAuthCertSecretRefPtr and VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthCertSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthCertSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthCertSecretRefPtrType VaultDynamicSecretSpecProviderAuthCertSecretRefArgs

func VaultDynamicSecretSpecProviderAuthCertSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthCertSecretRefArgs) VaultDynamicSecretSpecProviderAuthCertSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthCertSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthCertSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCertSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthCertSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthCertSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput)
}

// SecretRef to a key in a Secret resource containing client private key to
// authenticate with Vault using the Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthCertSecretRef) *VaultDynamicSecretSpecProviderAuthCertSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCertSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthCertSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertSecretRef) VaultDynamicSecretSpecProviderAuthCertSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthCertSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthCertSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretRef to a key in a Secret resource containing client private key to
// authenticate with Vault using the Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertSecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthCertSecretRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertSecretRefPatchArgs and VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertSecretRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthCertSecretRefPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthCertSecretRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput
	ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput
}

// SecretRef to a key in a Secret resource containing client private key to
// authenticate with Vault using the Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertSecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthCertSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertSecretRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthCertSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthCertSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput).ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertSecretRefPatchArgs, VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtr and VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthCertSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrType VaultDynamicSecretSpecProviderAuthCertSecretRefPatchArgs

func VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtr(v *VaultDynamicSecretSpecProviderAuthCertSecretRefPatchArgs) VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCertSecretRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput)
}

// SecretRef to a key in a Secret resource containing client private key to
// authenticate with Vault using the Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthCertSecretRefPatch) *VaultDynamicSecretSpecProviderAuthCertSecretRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertSecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertSecretRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCertSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertSecretRefPatch) VaultDynamicSecretSpecProviderAuthCertSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthCertSecretRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
// AWS IAM authentication method
type VaultDynamicSecretSpecProviderAuthIam struct {
	// AWS External ID set on assumed IAM roles
	ExternalID *string                                   `pulumi:"externalID"`
	Jwt        *VaultDynamicSecretSpecProviderAuthIamJwt `pulumi:"jwt"`
	// Path where the AWS auth method is enabled in Vault, e.g: "aws"
	Path *string `pulumi:"path"`
	// AWS region
	Region *string `pulumi:"region"`
	// This is the AWS role to be assumed before talking to vault
	Role      *string                                         `pulumi:"role"`
	SecretRef *VaultDynamicSecretSpecProviderAuthIamSecretRef `pulumi:"secretRef"`
	// X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws
	VaultAwsIamServerID *string `pulumi:"vaultAwsIamServerID"`
	// Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine
	VaultRole *string `pulumi:"vaultRole"`
}

// VaultDynamicSecretSpecProviderAuthIamInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamArgs and VaultDynamicSecretSpecProviderAuthIamOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamArgs{...}
type VaultDynamicSecretSpecProviderAuthIamInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamOutput() VaultDynamicSecretSpecProviderAuthIamOutput
	ToVaultDynamicSecretSpecProviderAuthIamOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamOutput
}

// Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
// AWS IAM authentication method
type VaultDynamicSecretSpecProviderAuthIamArgs struct {
	// AWS External ID set on assumed IAM roles
	ExternalID pulumi.StringPtrInput                            `pulumi:"externalID"`
	Jwt        VaultDynamicSecretSpecProviderAuthIamJwtPtrInput `pulumi:"jwt"`
	// Path where the AWS auth method is enabled in Vault, e.g: "aws"
	Path pulumi.StringPtrInput `pulumi:"path"`
	// AWS region
	Region pulumi.StringPtrInput `pulumi:"region"`
	// This is the AWS role to be assumed before talking to vault
	Role      pulumi.StringPtrInput                                  `pulumi:"role"`
	SecretRef VaultDynamicSecretSpecProviderAuthIamSecretRefPtrInput `pulumi:"secretRef"`
	// X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws
	VaultAwsIamServerID pulumi.StringPtrInput `pulumi:"vaultAwsIamServerID"`
	// Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine
	VaultRole pulumi.StringPtrInput `pulumi:"vaultRole"`
}

func (VaultDynamicSecretSpecProviderAuthIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIam)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamArgs) ToVaultDynamicSecretSpecProviderAuthIamOutput() VaultDynamicSecretSpecProviderAuthIamOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamArgs) ToVaultDynamicSecretSpecProviderAuthIamOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamArgs) ToVaultDynamicSecretSpecProviderAuthIamPtrOutput() VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamArgs) ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamOutput).ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamArgs, VaultDynamicSecretSpecProviderAuthIamPtr and VaultDynamicSecretSpecProviderAuthIamPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamPtrOutput() VaultDynamicSecretSpecProviderAuthIamPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamPtrType VaultDynamicSecretSpecProviderAuthIamArgs

func VaultDynamicSecretSpecProviderAuthIamPtr(v *VaultDynamicSecretSpecProviderAuthIamArgs) VaultDynamicSecretSpecProviderAuthIamPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIam)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamPtrType) ToVaultDynamicSecretSpecProviderAuthIamPtrOutput() VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamPtrType) ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamPtrOutput)
}

// Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
// AWS IAM authentication method
type VaultDynamicSecretSpecProviderAuthIamOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIam)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamOutput) ToVaultDynamicSecretSpecProviderAuthIamOutput() VaultDynamicSecretSpecProviderAuthIamOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamOutput) ToVaultDynamicSecretSpecProviderAuthIamOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamOutput) ToVaultDynamicSecretSpecProviderAuthIamPtrOutput() VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamOutput) ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIam) *VaultDynamicSecretSpecProviderAuthIam {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamPtrOutput)
}

// AWS External ID set on assumed IAM roles
func (o VaultDynamicSecretSpecProviderAuthIamOutput) ExternalID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) *string { return v.ExternalID }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamOutput) Jwt() VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) *VaultDynamicSecretSpecProviderAuthIamJwt { return v.Jwt }).(VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput)
}

// Path where the AWS auth method is enabled in Vault, e.g: "aws"
func (o VaultDynamicSecretSpecProviderAuthIamOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// AWS region
func (o VaultDynamicSecretSpecProviderAuthIamOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// This is the AWS role to be assumed before talking to vault
func (o VaultDynamicSecretSpecProviderAuthIamOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamOutput) SecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) *VaultDynamicSecretSpecProviderAuthIamSecretRef {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput)
}

// X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws
func (o VaultDynamicSecretSpecProviderAuthIamOutput) VaultAwsIamServerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) *string { return v.VaultAwsIamServerID }).(pulumi.StringPtrOutput)
}

// Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine
func (o VaultDynamicSecretSpecProviderAuthIamOutput) VaultRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) *string { return v.VaultRole }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIam)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamPtrOutput() VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) VaultDynamicSecretSpecProviderAuthIam {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIam
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamOutput)
}

// AWS External ID set on assumed IAM roles
func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) ExternalID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *string {
		if v == nil {
			return nil
		}
		return v.ExternalID
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) Jwt() VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *VaultDynamicSecretSpecProviderAuthIamJwt {
		if v == nil {
			return nil
		}
		return v.Jwt
	}).(VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput)
}

// Path where the AWS auth method is enabled in Vault, e.g: "aws"
func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// AWS region
func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// This is the AWS role to be assumed before talking to vault
func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *VaultDynamicSecretSpecProviderAuthIamSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput)
}

// X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws
func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) VaultAwsIamServerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *string {
		if v == nil {
			return nil
		}
		return v.VaultAwsIamServerID
	}).(pulumi.StringPtrOutput)
}

// Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine
func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) VaultRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *string {
		if v == nil {
			return nil
		}
		return v.VaultRole
	}).(pulumi.StringPtrOutput)
}

// Specify a service account with IRSA enabled
type VaultDynamicSecretSpecProviderAuthIamJwt struct {
	ServiceAccountRef *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef `pulumi:"serviceAccountRef"`
}

// VaultDynamicSecretSpecProviderAuthIamJwtInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamJwtArgs and VaultDynamicSecretSpecProviderAuthIamJwtOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamJwtInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamJwtArgs{...}
type VaultDynamicSecretSpecProviderAuthIamJwtInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamJwtOutput() VaultDynamicSecretSpecProviderAuthIamJwtOutput
	ToVaultDynamicSecretSpecProviderAuthIamJwtOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamJwtOutput
}

// Specify a service account with IRSA enabled
type VaultDynamicSecretSpecProviderAuthIamJwtArgs struct {
	ServiceAccountRef VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrInput `pulumi:"serviceAccountRef"`
}

func (VaultDynamicSecretSpecProviderAuthIamJwtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwt)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtOutput() VaultDynamicSecretSpecProviderAuthIamJwtOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtOutput).ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamJwtPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamJwtArgs, VaultDynamicSecretSpecProviderAuthIamJwtPtr and VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamJwtPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamJwtArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamJwtPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamJwtPtrType VaultDynamicSecretSpecProviderAuthIamJwtArgs

func VaultDynamicSecretSpecProviderAuthIamJwtPtr(v *VaultDynamicSecretSpecProviderAuthIamJwtArgs) VaultDynamicSecretSpecProviderAuthIamJwtPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamJwtPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamJwtPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamJwt)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamJwtPtrType) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamJwtPtrType) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput)
}

// Specify a service account with IRSA enabled
type VaultDynamicSecretSpecProviderAuthIamJwtOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamJwtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwt)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtOutput() VaultDynamicSecretSpecProviderAuthIamJwtOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamJwt) *VaultDynamicSecretSpecProviderAuthIamJwt {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamJwt) *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef {
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamJwt)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamJwtOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwt) VaultDynamicSecretSpecProviderAuthIamJwt {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamJwt
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamJwtOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwt) *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput)
}

// Specify a service account with IRSA enabled
type VaultDynamicSecretSpecProviderAuthIamJwtPatch struct {
	ServiceAccountRef *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch `pulumi:"serviceAccountRef"`
}

// VaultDynamicSecretSpecProviderAuthIamJwtPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamJwtPatchArgs and VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamJwtPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamJwtPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthIamJwtPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamJwtPatchOutput() VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput
	ToVaultDynamicSecretSpecProviderAuthIamJwtPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput
}

// Specify a service account with IRSA enabled
type VaultDynamicSecretSpecProviderAuthIamJwtPatchArgs struct {
	ServiceAccountRef VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrInput `pulumi:"serviceAccountRef"`
}

func (VaultDynamicSecretSpecProviderAuthIamJwtPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtPatchOutput() VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput).ToVaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamJwtPatchArgs, VaultDynamicSecretSpecProviderAuthIamJwtPatchPtr and VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamJwtPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamJwtPatchPtrType VaultDynamicSecretSpecProviderAuthIamJwtPatchArgs

func VaultDynamicSecretSpecProviderAuthIamJwtPatchPtr(v *VaultDynamicSecretSpecProviderAuthIamJwtPatchArgs) VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamJwtPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamJwtPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamJwtPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamJwtPatchPtrType) ToVaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamJwtPatchPtrType) ToVaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput)
}

// Specify a service account with IRSA enabled
type VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtPatchOutput() VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamJwtPatch) *VaultDynamicSecretSpecProviderAuthIamJwtPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamJwtPatch) *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch {
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamJwtPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwtPatch) VaultDynamicSecretSpecProviderAuthIamJwtPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamJwtPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwtPatch) *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput)
}

// A reference to a ServiceAccount resource.
type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs and VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs{...}
type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput
	ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput
}

// A reference to a ServiceAccount resource.
type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput).ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs, VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtr and VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrType VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs

func VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtr(v *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput)
}

// A reference to a ServiceAccount resource.
type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// A reference to a ServiceAccount resource.
type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchArgs and VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput
	ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput
}

// A reference to a ServiceAccount resource.
type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput).ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchArgs, VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtr and VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrType VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchArgs

func VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtr(v *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchArgs) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput)
}

// A reference to a ServiceAccount resource.
type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch) *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
// AWS IAM authentication method
type VaultDynamicSecretSpecProviderAuthIamPatch struct {
	// AWS External ID set on assumed IAM roles
	ExternalID *string                                        `pulumi:"externalID"`
	Jwt        *VaultDynamicSecretSpecProviderAuthIamJwtPatch `pulumi:"jwt"`
	// Path where the AWS auth method is enabled in Vault, e.g: "aws"
	Path *string `pulumi:"path"`
	// AWS region
	Region *string `pulumi:"region"`
	// This is the AWS role to be assumed before talking to vault
	Role      *string                                              `pulumi:"role"`
	SecretRef *VaultDynamicSecretSpecProviderAuthIamSecretRefPatch `pulumi:"secretRef"`
	// X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws
	VaultAwsIamServerID *string `pulumi:"vaultAwsIamServerID"`
	// Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine
	VaultRole *string `pulumi:"vaultRole"`
}

// VaultDynamicSecretSpecProviderAuthIamPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamPatchArgs and VaultDynamicSecretSpecProviderAuthIamPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthIamPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamPatchOutput() VaultDynamicSecretSpecProviderAuthIamPatchOutput
	ToVaultDynamicSecretSpecProviderAuthIamPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamPatchOutput
}

// Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
// AWS IAM authentication method
type VaultDynamicSecretSpecProviderAuthIamPatchArgs struct {
	// AWS External ID set on assumed IAM roles
	ExternalID pulumi.StringPtrInput                                 `pulumi:"externalID"`
	Jwt        VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrInput `pulumi:"jwt"`
	// Path where the AWS auth method is enabled in Vault, e.g: "aws"
	Path pulumi.StringPtrInput `pulumi:"path"`
	// AWS region
	Region pulumi.StringPtrInput `pulumi:"region"`
	// This is the AWS role to be assumed before talking to vault
	Role      pulumi.StringPtrInput                                       `pulumi:"role"`
	SecretRef VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrInput `pulumi:"secretRef"`
	// X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws
	VaultAwsIamServerID pulumi.StringPtrInput `pulumi:"vaultAwsIamServerID"`
	// Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine
	VaultRole pulumi.StringPtrInput `pulumi:"vaultRole"`
}

func (VaultDynamicSecretSpecProviderAuthIamPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamPatchOutput() VaultDynamicSecretSpecProviderAuthIamPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamPatchOutput).ToVaultDynamicSecretSpecProviderAuthIamPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamPatchArgs, VaultDynamicSecretSpecProviderAuthIamPatchPtr and VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamPatchPtrType VaultDynamicSecretSpecProviderAuthIamPatchArgs

func VaultDynamicSecretSpecProviderAuthIamPatchPtr(v *VaultDynamicSecretSpecProviderAuthIamPatchArgs) VaultDynamicSecretSpecProviderAuthIamPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamPatchPtrType) ToVaultDynamicSecretSpecProviderAuthIamPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamPatchPtrType) ToVaultDynamicSecretSpecProviderAuthIamPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput)
}

// Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
// AWS IAM authentication method
type VaultDynamicSecretSpecProviderAuthIamPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamPatchOutput() VaultDynamicSecretSpecProviderAuthIamPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamPatch) *VaultDynamicSecretSpecProviderAuthIamPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput)
}

// AWS External ID set on assumed IAM roles
func (o VaultDynamicSecretSpecProviderAuthIamPatchOutput) ExternalID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamPatch) *string { return v.ExternalID }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamPatchOutput) Jwt() VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamPatch) *VaultDynamicSecretSpecProviderAuthIamJwtPatch {
		return v.Jwt
	}).(VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput)
}

// Path where the AWS auth method is enabled in Vault, e.g: "aws"
func (o VaultDynamicSecretSpecProviderAuthIamPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// AWS region
func (o VaultDynamicSecretSpecProviderAuthIamPatchOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamPatch) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// This is the AWS role to be assumed before talking to vault
func (o VaultDynamicSecretSpecProviderAuthIamPatchOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamPatch) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamPatchOutput) SecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamPatch) *VaultDynamicSecretSpecProviderAuthIamSecretRefPatch {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput)
}

// X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws
func (o VaultDynamicSecretSpecProviderAuthIamPatchOutput) VaultAwsIamServerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamPatch) *string { return v.VaultAwsIamServerID }).(pulumi.StringPtrOutput)
}

// Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine
func (o VaultDynamicSecretSpecProviderAuthIamPatchOutput) VaultRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamPatch) *string { return v.VaultRole }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamPatch) VaultDynamicSecretSpecProviderAuthIamPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamPatchOutput)
}

// AWS External ID set on assumed IAM roles
func (o VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput) ExternalID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamPatch) *string {
		if v == nil {
			return nil
		}
		return v.ExternalID
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput) Jwt() VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamPatch) *VaultDynamicSecretSpecProviderAuthIamJwtPatch {
		if v == nil {
			return nil
		}
		return v.Jwt
	}).(VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput)
}

// Path where the AWS auth method is enabled in Vault, e.g: "aws"
func (o VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// AWS region
func (o VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamPatch) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// This is the AWS role to be assumed before talking to vault
func (o VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamPatch) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamPatch) *VaultDynamicSecretSpecProviderAuthIamSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput)
}

// X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws
func (o VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput) VaultAwsIamServerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamPatch) *string {
		if v == nil {
			return nil
		}
		return v.VaultAwsIamServerID
	}).(pulumi.StringPtrOutput)
}

// Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine
func (o VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput) VaultRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamPatch) *string {
		if v == nil {
			return nil
		}
		return v.VaultRole
	}).(pulumi.StringPtrOutput)
}

// Specify credentials in a Secret object
type VaultDynamicSecretSpecProviderAuthIamSecretRef struct {
	AccessKeyIDSecretRef     *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef     `pulumi:"accessKeyIDSecretRef"`
	SecretAccessKeySecretRef *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef `pulumi:"secretAccessKeySecretRef"`
	SessionTokenSecretRef    *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef    `pulumi:"sessionTokenSecretRef"`
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefArgs and VaultDynamicSecretSpecProviderAuthIamSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthIamSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefOutput
}

// Specify credentials in a Secret object
type VaultDynamicSecretSpecProviderAuthIamSecretRefArgs struct {
	AccessKeyIDSecretRef     VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrInput     `pulumi:"accessKeyIDSecretRef"`
	SecretAccessKeySecretRef VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrInput `pulumi:"secretAccessKeySecretRef"`
	SessionTokenSecretRef    VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrInput    `pulumi:"sessionTokenSecretRef"`
}

func (VaultDynamicSecretSpecProviderAuthIamSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefArgs, VaultDynamicSecretSpecProviderAuthIamSecretRefPtr and VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamSecretRefPtrType VaultDynamicSecretSpecProviderAuthIamSecretRefArgs

func VaultDynamicSecretSpecProviderAuthIamSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthIamSecretRefArgs) VaultDynamicSecretSpecProviderAuthIamSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput)
}

// Specify credentials in a Secret object
type VaultDynamicSecretSpecProviderAuthIamSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) AccessKeyIDSecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef {
		return v.AccessKeyIDSecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) SecretAccessKeySecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef {
		return v.SecretAccessKeySecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) SessionTokenSecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef {
		return v.SessionTokenSecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRef) VaultDynamicSecretSpecProviderAuthIamSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput) AccessKeyIDSecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef {
		if v == nil {
			return nil
		}
		return v.AccessKeyIDSecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput) SecretAccessKeySecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef {
		if v == nil {
			return nil
		}
		return v.SecretAccessKeySecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput) SessionTokenSecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef {
		if v == nil {
			return nil
		}
		return v.SessionTokenSecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput)
}

// The AccessKeyID is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefArgs and VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput
}

// The AccessKeyID is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefArgs, VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtr and VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrType VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefArgs

func VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefArgs) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput)
}

// The AccessKeyID is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The AccessKeyID is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchArgs and VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput
}

// The AccessKeyID is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput).ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchArgs, VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtr and VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrType VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchArgs

func VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtr(v *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchArgs) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput)
}

// The AccessKeyID is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch) *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specify credentials in a Secret object
type VaultDynamicSecretSpecProviderAuthIamSecretRefPatch struct {
	AccessKeyIDSecretRef     *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch     `pulumi:"accessKeyIDSecretRef"`
	SecretAccessKeySecretRef *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch `pulumi:"secretAccessKeySecretRef"`
	SessionTokenSecretRef    *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch    `pulumi:"sessionTokenSecretRef"`
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefPatchArgs and VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamSecretRefPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthIamSecretRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput
}

// Specify credentials in a Secret object
type VaultDynamicSecretSpecProviderAuthIamSecretRefPatchArgs struct {
	AccessKeyIDSecretRef     VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrInput     `pulumi:"accessKeyIDSecretRef"`
	SecretAccessKeySecretRef VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrInput `pulumi:"secretAccessKeySecretRef"`
	SessionTokenSecretRef    VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrInput    `pulumi:"sessionTokenSecretRef"`
}

func (VaultDynamicSecretSpecProviderAuthIamSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput).ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefPatchArgs, VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtr and VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrType VaultDynamicSecretSpecProviderAuthIamSecretRefPatchArgs

func VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtr(v *VaultDynamicSecretSpecProviderAuthIamSecretRefPatchArgs) VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput)
}

// Specify credentials in a Secret object
type VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamSecretRefPatch) *VaultDynamicSecretSpecProviderAuthIamSecretRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput) AccessKeyIDSecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefPatch) *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch {
		return v.AccessKeyIDSecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput) SecretAccessKeySecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefPatch) *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch {
		return v.SecretAccessKeySecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput) SessionTokenSecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefPatch) *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch {
		return v.SessionTokenSecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefPatch) VaultDynamicSecretSpecProviderAuthIamSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamSecretRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput) AccessKeyIDSecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefPatch) *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.AccessKeyIDSecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput) SecretAccessKeySecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefPatch) *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretAccessKeySecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput) SessionTokenSecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefPatch) *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SessionTokenSecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput)
}

// The SecretAccessKey is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs and VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput
}

// The SecretAccessKey is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput).ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs, VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtr and VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrType VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs

func VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtr(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The SecretAccessKey is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The SecretAccessKey is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchArgs and VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput
}

// The SecretAccessKey is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput).ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchArgs, VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtr and VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrType VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchArgs

func VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtr(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchArgs) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput)
}

// The SecretAccessKey is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch) *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs and VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs, VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtr and VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrType VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs

func VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchArgs and VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput).ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchArgs, VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtr and VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrType VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchArgs

func VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtr(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchArgs) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch) *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Jwt authenticates with Vault by passing role and JWT token using the
// JWT/OIDC authentication method
type VaultDynamicSecretSpecProviderAuthJwt struct {
	KubernetesServiceAccountToken *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken `pulumi:"kubernetesServiceAccountToken"`
	// Path where the JWT authentication backend is mounted
	// in Vault, e.g: "jwt"
	Path *string `pulumi:"path"`
	// Role is a JWT role to authenticate using the JWT/OIDC Vault
	// authentication method
	Role      *string                                         `pulumi:"role"`
	SecretRef *VaultDynamicSecretSpecProviderAuthJwtSecretRef `pulumi:"secretRef"`
}

// VaultDynamicSecretSpecProviderAuthJwtInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtArgs and VaultDynamicSecretSpecProviderAuthJwtOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtInput` via:
//
//	VaultDynamicSecretSpecProviderAuthJwtArgs{...}
type VaultDynamicSecretSpecProviderAuthJwtInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtOutput() VaultDynamicSecretSpecProviderAuthJwtOutput
	ToVaultDynamicSecretSpecProviderAuthJwtOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtOutput
}

// Jwt authenticates with Vault by passing role and JWT token using the
// JWT/OIDC authentication method
type VaultDynamicSecretSpecProviderAuthJwtArgs struct {
	KubernetesServiceAccountToken VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrInput `pulumi:"kubernetesServiceAccountToken"`
	// Path where the JWT authentication backend is mounted
	// in Vault, e.g: "jwt"
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Role is a JWT role to authenticate using the JWT/OIDC Vault
	// authentication method
	Role      pulumi.StringPtrInput                                  `pulumi:"role"`
	SecretRef VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrInput `pulumi:"secretRef"`
}

func (VaultDynamicSecretSpecProviderAuthJwtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwt)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthJwtArgs) ToVaultDynamicSecretSpecProviderAuthJwtOutput() VaultDynamicSecretSpecProviderAuthJwtOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtArgs) ToVaultDynamicSecretSpecProviderAuthJwtOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtOutput)
}

func (i VaultDynamicSecretSpecProviderAuthJwtArgs) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutput() VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtArgs) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtOutput).ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthJwtPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtArgs, VaultDynamicSecretSpecProviderAuthJwtPtr and VaultDynamicSecretSpecProviderAuthJwtPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthJwtArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthJwtPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtPtrOutput() VaultDynamicSecretSpecProviderAuthJwtPtrOutput
	ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtPtrOutput
}

type vaultDynamicSecretSpecProviderAuthJwtPtrType VaultDynamicSecretSpecProviderAuthJwtArgs

func VaultDynamicSecretSpecProviderAuthJwtPtr(v *VaultDynamicSecretSpecProviderAuthJwtArgs) VaultDynamicSecretSpecProviderAuthJwtPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthJwtPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthJwtPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwt)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthJwtPtrType) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutput() VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthJwtPtrType) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtPtrOutput)
}

// Jwt authenticates with Vault by passing role and JWT token using the
// JWT/OIDC authentication method
type VaultDynamicSecretSpecProviderAuthJwtOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwt)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtOutput) ToVaultDynamicSecretSpecProviderAuthJwtOutput() VaultDynamicSecretSpecProviderAuthJwtOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtOutput) ToVaultDynamicSecretSpecProviderAuthJwtOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtOutput) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutput() VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthJwtOutput) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthJwt) *VaultDynamicSecretSpecProviderAuthJwt {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthJwtPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthJwtOutput) KubernetesServiceAccountToken() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwt) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken {
		return v.KubernetesServiceAccountToken
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput)
}

// Path where the JWT authentication backend is mounted
// in Vault, e.g: "jwt"
func (o VaultDynamicSecretSpecProviderAuthJwtOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwt) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Role is a JWT role to authenticate using the JWT/OIDC Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthJwtOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwt) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthJwtOutput) SecretRef() VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwt) *VaultDynamicSecretSpecProviderAuthJwtSecretRef {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthJwtPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwt)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutput() VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthJwtOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwt) VaultDynamicSecretSpecProviderAuthJwt {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthJwt
		return ret
	}).(VaultDynamicSecretSpecProviderAuthJwtOutput)
}

func (o VaultDynamicSecretSpecProviderAuthJwtPtrOutput) KubernetesServiceAccountToken() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwt) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken {
		if v == nil {
			return nil
		}
		return v.KubernetesServiceAccountToken
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput)
}

// Path where the JWT authentication backend is mounted
// in Vault, e.g: "jwt"
func (o VaultDynamicSecretSpecProviderAuthJwtPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwt) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Role is a JWT role to authenticate using the JWT/OIDC Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthJwtPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwt) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthJwtPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwt) *VaultDynamicSecretSpecProviderAuthJwtSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput)
}

// Optional ServiceAccountToken specifies the Kubernetes service account for which to request
// a token for with the `TokenRequest` API.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken struct {
	// Optional audiences field that will be used to request a temporary Kubernetes service
	// account token for the service account referenced by `serviceAccountRef`.
	// Defaults to a single audience `vault` it not specified.
	// Deprecated: use serviceAccountRef.Audiences instead
	Audiences []string `pulumi:"audiences"`
	// Optional expiration time in seconds that will be used to request a temporary
	// Kubernetes service account token for the service account referenced by
	// `serviceAccountRef`.
	// Deprecated: this will be removed in the future.
	// Defaults to 10 minutes.
	ExpirationSeconds *int                                                                                 `pulumi:"expirationSeconds"`
	ServiceAccountRef *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef `pulumi:"serviceAccountRef"`
}

// VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs and VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenInput` via:
//
//	VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs{...}
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput
	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput
}

// Optional ServiceAccountToken specifies the Kubernetes service account for which to request
// a token for with the `TokenRequest` API.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs struct {
	// Optional audiences field that will be used to request a temporary Kubernetes service
	// account token for the service account referenced by `serviceAccountRef`.
	// Defaults to a single audience `vault` it not specified.
	// Deprecated: use serviceAccountRef.Audiences instead
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// Optional expiration time in seconds that will be used to request a temporary
	// Kubernetes service account token for the service account referenced by
	// `serviceAccountRef`.
	// Deprecated: this will be removed in the future.
	// Defaults to 10 minutes.
	ExpirationSeconds pulumi.IntPtrInput                                                                          `pulumi:"expirationSeconds"`
	ServiceAccountRef VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrInput `pulumi:"serviceAccountRef"`
}

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput)
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput).ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs, VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtr and VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput
	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput
}

type vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrType VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs

func VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtr(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrType) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrType) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput)
}

// Optional ServiceAccountToken specifies the Kubernetes service account for which to request
// a token for with the `TokenRequest` API.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput)
}

// Optional audiences field that will be used to request a temporary Kubernetes service
// account token for the service account referenced by `serviceAccountRef`.
// Defaults to a single audience `vault` it not specified.
// Deprecated: use serviceAccountRef.Audiences instead
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) []string {
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// Optional expiration time in seconds that will be used to request a temporary
// Kubernetes service account token for the service account referenced by
// `serviceAccountRef`.
// Deprecated: this will be removed in the future.
// Defaults to 10 minutes.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) *int {
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef {
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken
		return ret
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput)
}

// Optional audiences field that will be used to request a temporary Kubernetes service
// account token for the service account referenced by `serviceAccountRef`.
// Defaults to a single audience `vault` it not specified.
// Deprecated: use serviceAccountRef.Audiences instead
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// Optional expiration time in seconds that will be used to request a temporary
// Kubernetes service account token for the service account referenced by
// `serviceAccountRef`.
// Deprecated: this will be removed in the future.
// Defaults to 10 minutes.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput)
}

// Optional ServiceAccountToken specifies the Kubernetes service account for which to request
// a token for with the `TokenRequest` API.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch struct {
	// Optional audiences field that will be used to request a temporary Kubernetes service
	// account token for the service account referenced by `serviceAccountRef`.
	// Defaults to a single audience `vault` it not specified.
	// Deprecated: use serviceAccountRef.Audiences instead
	Audiences []string `pulumi:"audiences"`
	// Optional expiration time in seconds that will be used to request a temporary
	// Kubernetes service account token for the service account referenced by
	// `serviceAccountRef`.
	// Deprecated: this will be removed in the future.
	// Defaults to 10 minutes.
	ExpirationSeconds *int                                                                                      `pulumi:"expirationSeconds"`
	ServiceAccountRef *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch `pulumi:"serviceAccountRef"`
}

// VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchArgs and VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput
	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput
}

// Optional ServiceAccountToken specifies the Kubernetes service account for which to request
// a token for with the `TokenRequest` API.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchArgs struct {
	// Optional audiences field that will be used to request a temporary Kubernetes service
	// account token for the service account referenced by `serviceAccountRef`.
	// Defaults to a single audience `vault` it not specified.
	// Deprecated: use serviceAccountRef.Audiences instead
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// Optional expiration time in seconds that will be used to request a temporary
	// Kubernetes service account token for the service account referenced by
	// `serviceAccountRef`.
	// Deprecated: this will be removed in the future.
	// Defaults to 10 minutes.
	ExpirationSeconds pulumi.IntPtrInput                                                                               `pulumi:"expirationSeconds"`
	ServiceAccountRef VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrInput `pulumi:"serviceAccountRef"`
}

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput).ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchArgs, VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtr and VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrType VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchArgs

func VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtr(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchArgs) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrType) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrType) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput)
}

// Optional ServiceAccountToken specifies the Kubernetes service account for which to request
// a token for with the `TokenRequest` API.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput)
}

// Optional audiences field that will be used to request a temporary Kubernetes service
// account token for the service account referenced by `serviceAccountRef`.
// Defaults to a single audience `vault` it not specified.
// Deprecated: use serviceAccountRef.Audiences instead
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch) []string {
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// Optional expiration time in seconds that will be used to request a temporary
// Kubernetes service account token for the service account referenced by
// `serviceAccountRef`.
// Deprecated: this will be removed in the future.
// Defaults to 10 minutes.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch) *int {
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch {
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput)
}

// Optional audiences field that will be used to request a temporary Kubernetes service
// account token for the service account referenced by `serviceAccountRef`.
// Defaults to a single audience `vault` it not specified.
// Deprecated: use serviceAccountRef.Audiences instead
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// Optional expiration time in seconds that will be used to request a temporary
// Kubernetes service account token for the service account referenced by
// `serviceAccountRef`.
// Deprecated: this will be removed in the future.
// Defaults to 10 minutes.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput)
}

// Service account field containing the name of a kubernetes ServiceAccount.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs and VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs{...}
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput
	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput
}

// Service account field containing the name of a kubernetes ServiceAccount.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput).ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs, VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtr and VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrType VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs

func VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtr(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrType) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrType) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput)
}

// Service account field containing the name of a kubernetes ServiceAccount.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) []string {
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Service account field containing the name of a kubernetes ServiceAccount.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchArgs and VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput
	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput
}

// Service account field containing the name of a kubernetes ServiceAccount.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput).ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchArgs, VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtr and VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrType VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchArgs

func VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtr(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchArgs) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput)
}

// Service account field containing the name of a kubernetes ServiceAccount.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch) []string {
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Jwt authenticates with Vault by passing role and JWT token using the
// JWT/OIDC authentication method
type VaultDynamicSecretSpecProviderAuthJwtPatch struct {
	KubernetesServiceAccountToken *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch `pulumi:"kubernetesServiceAccountToken"`
	// Path where the JWT authentication backend is mounted
	// in Vault, e.g: "jwt"
	Path *string `pulumi:"path"`
	// Role is a JWT role to authenticate using the JWT/OIDC Vault
	// authentication method
	Role      *string                                              `pulumi:"role"`
	SecretRef *VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch `pulumi:"secretRef"`
}

// VaultDynamicSecretSpecProviderAuthJwtPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtPatchArgs and VaultDynamicSecretSpecProviderAuthJwtPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthJwtPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthJwtPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtPatchOutput() VaultDynamicSecretSpecProviderAuthJwtPatchOutput
	ToVaultDynamicSecretSpecProviderAuthJwtPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtPatchOutput
}

// Jwt authenticates with Vault by passing role and JWT token using the
// JWT/OIDC authentication method
type VaultDynamicSecretSpecProviderAuthJwtPatchArgs struct {
	KubernetesServiceAccountToken VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrInput `pulumi:"kubernetesServiceAccountToken"`
	// Path where the JWT authentication backend is mounted
	// in Vault, e.g: "jwt"
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Role is a JWT role to authenticate using the JWT/OIDC Vault
	// authentication method
	Role      pulumi.StringPtrInput                                       `pulumi:"role"`
	SecretRef VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrInput `pulumi:"secretRef"`
}

func (VaultDynamicSecretSpecProviderAuthJwtPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthJwtPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtPatchOutput() VaultDynamicSecretSpecProviderAuthJwtPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthJwtPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtPatchOutput).ToVaultDynamicSecretSpecProviderAuthJwtPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthJwtPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtPatchArgs, VaultDynamicSecretSpecProviderAuthJwtPatchPtr and VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthJwtPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthJwtPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthJwtPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthJwtPatchPtrType VaultDynamicSecretSpecProviderAuthJwtPatchArgs

func VaultDynamicSecretSpecProviderAuthJwtPatchPtr(v *VaultDynamicSecretSpecProviderAuthJwtPatchArgs) VaultDynamicSecretSpecProviderAuthJwtPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthJwtPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthJwtPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthJwtPatchPtrType) ToVaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthJwtPatchPtrType) ToVaultDynamicSecretSpecProviderAuthJwtPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput)
}

// Jwt authenticates with Vault by passing role and JWT token using the
// JWT/OIDC authentication method
type VaultDynamicSecretSpecProviderAuthJwtPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtPatchOutput() VaultDynamicSecretSpecProviderAuthJwtPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthJwtPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthJwtPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthJwtPatch) *VaultDynamicSecretSpecProviderAuthJwtPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthJwtPatchOutput) KubernetesServiceAccountToken() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtPatch) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch {
		return v.KubernetesServiceAccountToken
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput)
}

// Path where the JWT authentication backend is mounted
// in Vault, e.g: "jwt"
func (o VaultDynamicSecretSpecProviderAuthJwtPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Role is a JWT role to authenticate using the JWT/OIDC Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthJwtPatchOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtPatch) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthJwtPatchOutput) SecretRef() VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtPatch) *VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthJwtPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtPatch) VaultDynamicSecretSpecProviderAuthJwtPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthJwtPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthJwtPatchOutput)
}

func (o VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput) KubernetesServiceAccountToken() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtPatch) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatch {
		if v == nil {
			return nil
		}
		return v.KubernetesServiceAccountToken
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput)
}

// Path where the JWT authentication backend is mounted
// in Vault, e.g: "jwt"
func (o VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Role is a JWT role to authenticate using the JWT/OIDC Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtPatch) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtPatch) *VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput)
}

// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
// authenticate with Vault using the JWT/OIDC authentication method.
type VaultDynamicSecretSpecProviderAuthJwtSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthJwtSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs and VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthJwtSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtSecretRefOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthJwtSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput
}

// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
// authenticate with Vault using the JWT/OIDC authentication method.
type VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs, VaultDynamicSecretSpecProviderAuthJwtSecretRefPtr and VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthJwtSecretRefPtrType VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs

func VaultDynamicSecretSpecProviderAuthJwtSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs) VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthJwtSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthJwtSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthJwtSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthJwtSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput)
}

// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
// authenticate with Vault using the JWT/OIDC authentication method.
type VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthJwtSecretRef) *VaultDynamicSecretSpecProviderAuthJwtSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtSecretRef) VaultDynamicSecretSpecProviderAuthJwtSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthJwtSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
// authenticate with Vault using the JWT/OIDC authentication method.
type VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchArgs and VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput
	ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput
}

// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
// authenticate with Vault using the JWT/OIDC authentication method.
type VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput).ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchArgs, VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtr and VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrType VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchArgs

func VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtr(v *VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchArgs) VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput)
}

// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
// authenticate with Vault using the JWT/OIDC authentication method.
type VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch) *VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch) VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Kubernetes authenticates with Vault by passing the ServiceAccount
// token stored in the named Secret resource to the Vault server.
type VaultDynamicSecretSpecProviderAuthKubernetes struct {
	// Path where the Kubernetes authentication backend is mounted in Vault, e.g:
	// "kubernetes"
	MountPath *string `pulumi:"mountPath"`
	// A required field containing the Vault Role to assume. A Role binds a
	// Kubernetes ServiceAccount with a set of Vault policies.
	Role              *string                                                        `pulumi:"role"`
	SecretRef         *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef         `pulumi:"secretRef"`
	ServiceAccountRef *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef `pulumi:"serviceAccountRef"`
}

// VaultDynamicSecretSpecProviderAuthKubernetesInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesArgs and VaultDynamicSecretSpecProviderAuthKubernetesOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesInput` via:
//
//	VaultDynamicSecretSpecProviderAuthKubernetesArgs{...}
type VaultDynamicSecretSpecProviderAuthKubernetesInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesOutput() VaultDynamicSecretSpecProviderAuthKubernetesOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesOutput
}

// Kubernetes authenticates with Vault by passing the ServiceAccount
// token stored in the named Secret resource to the Vault server.
type VaultDynamicSecretSpecProviderAuthKubernetesArgs struct {
	// Path where the Kubernetes authentication backend is mounted in Vault, e.g:
	// "kubernetes"
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// A required field containing the Vault Role to assume. A Role binds a
	// Kubernetes ServiceAccount with a set of Vault policies.
	Role              pulumi.StringPtrInput                                                 `pulumi:"role"`
	SecretRef         VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrInput         `pulumi:"secretRef"`
	ServiceAccountRef VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrInput `pulumi:"serviceAccountRef"`
}

func (VaultDynamicSecretSpecProviderAuthKubernetesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetes)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesOutput() VaultDynamicSecretSpecProviderAuthKubernetesOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesOutput)
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesOutput).ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthKubernetesPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesArgs, VaultDynamicSecretSpecProviderAuthKubernetesPtr and VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthKubernetesArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthKubernetesPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput
}

type vaultDynamicSecretSpecProviderAuthKubernetesPtrType VaultDynamicSecretSpecProviderAuthKubernetesArgs

func VaultDynamicSecretSpecProviderAuthKubernetesPtr(v *VaultDynamicSecretSpecProviderAuthKubernetesArgs) VaultDynamicSecretSpecProviderAuthKubernetesPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthKubernetesPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthKubernetesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetes)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput)
}

// Kubernetes authenticates with Vault by passing the ServiceAccount
// token stored in the named Secret resource to the Vault server.
type VaultDynamicSecretSpecProviderAuthKubernetesOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetes)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesOutput() VaultDynamicSecretSpecProviderAuthKubernetesOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthKubernetes) *VaultDynamicSecretSpecProviderAuthKubernetes {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput)
}

// Path where the Kubernetes authentication backend is mounted in Vault, e.g:
// "kubernetes"
func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetes) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// A required field containing the Vault Role to assume. A Role binds a
// Kubernetes ServiceAccount with a set of Vault policies.
func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetes) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) SecretRef() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetes) *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetes) *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef {
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetes)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthKubernetesOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetes) VaultDynamicSecretSpecProviderAuthKubernetes {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthKubernetes
		return ret
	}).(VaultDynamicSecretSpecProviderAuthKubernetesOutput)
}

// Path where the Kubernetes authentication backend is mounted in Vault, e.g:
// "kubernetes"
func (o VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.MountPath
	}).(pulumi.StringPtrOutput)
}

// A required field containing the Vault Role to assume. A Role binds a
// Kubernetes ServiceAccount with a set of Vault policies.
func (o VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetes) *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetes) *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput)
}

// Kubernetes authenticates with Vault by passing the ServiceAccount
// token stored in the named Secret resource to the Vault server.
type VaultDynamicSecretSpecProviderAuthKubernetesPatch struct {
	// Path where the Kubernetes authentication backend is mounted in Vault, e.g:
	// "kubernetes"
	MountPath *string `pulumi:"mountPath"`
	// A required field containing the Vault Role to assume. A Role binds a
	// Kubernetes ServiceAccount with a set of Vault policies.
	Role              *string                                                             `pulumi:"role"`
	SecretRef         *VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch         `pulumi:"secretRef"`
	ServiceAccountRef *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch `pulumi:"serviceAccountRef"`
}

// VaultDynamicSecretSpecProviderAuthKubernetesPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesPatchArgs and VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthKubernetesPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthKubernetesPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesPatchOutput() VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput
}

// Kubernetes authenticates with Vault by passing the ServiceAccount
// token stored in the named Secret resource to the Vault server.
type VaultDynamicSecretSpecProviderAuthKubernetesPatchArgs struct {
	// Path where the Kubernetes authentication backend is mounted in Vault, e.g:
	// "kubernetes"
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// A required field containing the Vault Role to assume. A Role binds a
	// Kubernetes ServiceAccount with a set of Vault policies.
	Role              pulumi.StringPtrInput                                                      `pulumi:"role"`
	SecretRef         VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrInput         `pulumi:"secretRef"`
	ServiceAccountRef VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrInput `pulumi:"serviceAccountRef"`
}

func (VaultDynamicSecretSpecProviderAuthKubernetesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesPatchArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesPatchOutput() VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesPatchArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesPatchArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesPatchArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput).ToVaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesPatchArgs, VaultDynamicSecretSpecProviderAuthKubernetesPatchPtr and VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthKubernetesPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthKubernetesPatchPtrType VaultDynamicSecretSpecProviderAuthKubernetesPatchArgs

func VaultDynamicSecretSpecProviderAuthKubernetesPatchPtr(v *VaultDynamicSecretSpecProviderAuthKubernetesPatchArgs) VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthKubernetesPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthKubernetesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetesPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesPatchPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesPatchPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput)
}

// Kubernetes authenticates with Vault by passing the ServiceAccount
// token stored in the named Secret resource to the Vault server.
type VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesPatchOutput() VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthKubernetesPatch) *VaultDynamicSecretSpecProviderAuthKubernetesPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput)
}

// Path where the Kubernetes authentication backend is mounted in Vault, e.g:
// "kubernetes"
func (o VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesPatch) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// A required field containing the Vault Role to assume. A Role binds a
// Kubernetes ServiceAccount with a set of Vault policies.
func (o VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesPatch) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput) SecretRef() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesPatch) *VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesPatch) *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch {
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetesPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesPatch) VaultDynamicSecretSpecProviderAuthKubernetesPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthKubernetesPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput)
}

// Path where the Kubernetes authentication backend is mounted in Vault, e.g:
// "kubernetes"
func (o VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesPatch) *string {
		if v == nil {
			return nil
		}
		return v.MountPath
	}).(pulumi.StringPtrOutput)
}

// A required field containing the Vault Role to assume. A Role binds a
// Kubernetes ServiceAccount with a set of Vault policies.
func (o VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesPatch) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesPatch) *VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesPatch) *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput)
}

// Optional secret field containing a Kubernetes ServiceAccount JWT used
// for authenticating with Vault. If a name is specified without a key,
// `token` is the default. If one is not specified, the one bound to
// the controller will be used.
type VaultDynamicSecretSpecProviderAuthKubernetesSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthKubernetesSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs and VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput
}

// Optional secret field containing a Kubernetes ServiceAccount JWT used
// for authenticating with Vault. If a name is specified without a key,
// `token` is the default. If one is not specified, the one bound to
// the controller will be used.
type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs, VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtr and VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrType VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs

func VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetesSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput)
}

// Optional secret field containing a Kubernetes ServiceAccount JWT used
// for authenticating with Vault. If a name is specified without a key,
// `token` is the default. If one is not specified, the one bound to
// the controller will be used.
type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetesSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) VaultDynamicSecretSpecProviderAuthKubernetesSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthKubernetesSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Optional secret field containing a Kubernetes ServiceAccount JWT used
// for authenticating with Vault. If a name is specified without a key,
// `token` is the default. If one is not specified, the one bound to
// the controller will be used.
type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchArgs and VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput
}

// Optional secret field containing a Kubernetes ServiceAccount JWT used
// for authenticating with Vault. If a name is specified without a key,
// `token` is the default. If one is not specified, the one bound to
// the controller will be used.
type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput).ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchArgs, VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtr and VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrType VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchArgs

func VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtr(v *VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchArgs) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput)
}

// Optional secret field containing a Kubernetes ServiceAccount JWT used
// for authenticating with Vault. If a name is specified without a key,
// `token` is the default. If one is not specified, the one bound to
// the controller will be used.
type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch) *VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Optional service account field containing the name of a kubernetes ServiceAccount.
// If the service account is specified, the service account secret token JWT will be used
// for authenticating with Vault. If the service account selector is not supplied,
// the secretRef will be used instead.
type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs and VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs{...}
type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput
}

// Optional service account field containing the name of a kubernetes ServiceAccount.
// If the service account is specified, the service account secret token JWT will be used
// for authenticating with Vault. If the service account selector is not supplied,
// the secretRef will be used instead.
type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput).ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs, VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtr and VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrType VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs

func VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtr(v *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput)
}

// Optional service account field containing the name of a kubernetes ServiceAccount.
// If the service account is specified, the service account secret token JWT will be used
// for authenticating with Vault. If the service account selector is not supplied,
// the secretRef will be used instead.
type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Optional service account field containing the name of a kubernetes ServiceAccount.
// If the service account is specified, the service account secret token JWT will be used
// for authenticating with Vault. If the service account selector is not supplied,
// the secretRef will be used instead.
type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchArgs and VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput
}

// Optional service account field containing the name of a kubernetes ServiceAccount.
// If the service account is specified, the service account secret token JWT will be used
// for authenticating with Vault. If the service account selector is not supplied,
// the secretRef will be used instead.
type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput).ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchArgs, VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtr and VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrType VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchArgs

func VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtr(v *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchArgs) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput)
}

// Optional service account field containing the name of a kubernetes ServiceAccount.
// If the service account is specified, the service account secret token JWT will be used
// for authenticating with Vault. If the service account selector is not supplied,
// the secretRef will be used instead.
type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch) *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch) []string {
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Ldap authenticates with Vault by passing username/password pair using
// the LDAP authentication method
type VaultDynamicSecretSpecProviderAuthLdap struct {
	// Path where the LDAP authentication backend is mounted
	// in Vault, e.g: "ldap"
	Path      *string                                          `pulumi:"path"`
	SecretRef *VaultDynamicSecretSpecProviderAuthLdapSecretRef `pulumi:"secretRef"`
	// Username is a LDAP user name used to authenticate using the LDAP Vault
	// authentication method
	Username *string `pulumi:"username"`
}

// VaultDynamicSecretSpecProviderAuthLdapInput is an input type that accepts VaultDynamicSecretSpecProviderAuthLdapArgs and VaultDynamicSecretSpecProviderAuthLdapOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthLdapInput` via:
//
//	VaultDynamicSecretSpecProviderAuthLdapArgs{...}
type VaultDynamicSecretSpecProviderAuthLdapInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthLdapOutput() VaultDynamicSecretSpecProviderAuthLdapOutput
	ToVaultDynamicSecretSpecProviderAuthLdapOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthLdapOutput
}

// Ldap authenticates with Vault by passing username/password pair using
// the LDAP authentication method
type VaultDynamicSecretSpecProviderAuthLdapArgs struct {
	// Path where the LDAP authentication backend is mounted
	// in Vault, e.g: "ldap"
	Path      pulumi.StringPtrInput                                   `pulumi:"path"`
	SecretRef VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrInput `pulumi:"secretRef"`
	// Username is a LDAP user name used to authenticate using the LDAP Vault
	// authentication method
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (VaultDynamicSecretSpecProviderAuthLdapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdap)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthLdapArgs) ToVaultDynamicSecretSpecProviderAuthLdapOutput() VaultDynamicSecretSpecProviderAuthLdapOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthLdapArgs) ToVaultDynamicSecretSpecProviderAuthLdapOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapOutput)
}

func (i VaultDynamicSecretSpecProviderAuthLdapArgs) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutput() VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthLdapArgs) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapOutput).ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthLdapPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthLdapArgs, VaultDynamicSecretSpecProviderAuthLdapPtr and VaultDynamicSecretSpecProviderAuthLdapPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthLdapPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthLdapArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthLdapPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthLdapPtrOutput() VaultDynamicSecretSpecProviderAuthLdapPtrOutput
	ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthLdapPtrOutput
}

type vaultDynamicSecretSpecProviderAuthLdapPtrType VaultDynamicSecretSpecProviderAuthLdapArgs

func VaultDynamicSecretSpecProviderAuthLdapPtr(v *VaultDynamicSecretSpecProviderAuthLdapArgs) VaultDynamicSecretSpecProviderAuthLdapPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthLdapPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthLdapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthLdap)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthLdapPtrType) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutput() VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthLdapPtrType) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapPtrOutput)
}

// Ldap authenticates with Vault by passing username/password pair using
// the LDAP authentication method
type VaultDynamicSecretSpecProviderAuthLdapOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthLdapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdap)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthLdapOutput) ToVaultDynamicSecretSpecProviderAuthLdapOutput() VaultDynamicSecretSpecProviderAuthLdapOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapOutput) ToVaultDynamicSecretSpecProviderAuthLdapOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapOutput) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutput() VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthLdapOutput) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthLdap) *VaultDynamicSecretSpecProviderAuthLdap {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthLdapPtrOutput)
}

// Path where the LDAP authentication backend is mounted
// in Vault, e.g: "ldap"
func (o VaultDynamicSecretSpecProviderAuthLdapOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdap) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthLdapOutput) SecretRef() VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdap) *VaultDynamicSecretSpecProviderAuthLdapSecretRef {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput)
}

// Username is a LDAP user name used to authenticate using the LDAP Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthLdapOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdap) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthLdapPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthLdapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthLdap)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthLdapPtrOutput) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutput() VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapPtrOutput) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthLdapOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdap) VaultDynamicSecretSpecProviderAuthLdap {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthLdap
		return ret
	}).(VaultDynamicSecretSpecProviderAuthLdapOutput)
}

// Path where the LDAP authentication backend is mounted
// in Vault, e.g: "ldap"
func (o VaultDynamicSecretSpecProviderAuthLdapPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdap) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthLdapPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdap) *VaultDynamicSecretSpecProviderAuthLdapSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput)
}

// Username is a LDAP user name used to authenticate using the LDAP Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthLdapPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdap) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Ldap authenticates with Vault by passing username/password pair using
// the LDAP authentication method
type VaultDynamicSecretSpecProviderAuthLdapPatch struct {
	// Path where the LDAP authentication backend is mounted
	// in Vault, e.g: "ldap"
	Path      *string                                               `pulumi:"path"`
	SecretRef *VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch `pulumi:"secretRef"`
	// Username is a LDAP user name used to authenticate using the LDAP Vault
	// authentication method
	Username *string `pulumi:"username"`
}

// VaultDynamicSecretSpecProviderAuthLdapPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthLdapPatchArgs and VaultDynamicSecretSpecProviderAuthLdapPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthLdapPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthLdapPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthLdapPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthLdapPatchOutput() VaultDynamicSecretSpecProviderAuthLdapPatchOutput
	ToVaultDynamicSecretSpecProviderAuthLdapPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthLdapPatchOutput
}

// Ldap authenticates with Vault by passing username/password pair using
// the LDAP authentication method
type VaultDynamicSecretSpecProviderAuthLdapPatchArgs struct {
	// Path where the LDAP authentication backend is mounted
	// in Vault, e.g: "ldap"
	Path      pulumi.StringPtrInput                                        `pulumi:"path"`
	SecretRef VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrInput `pulumi:"secretRef"`
	// Username is a LDAP user name used to authenticate using the LDAP Vault
	// authentication method
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (VaultDynamicSecretSpecProviderAuthLdapPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthLdapPatchArgs) ToVaultDynamicSecretSpecProviderAuthLdapPatchOutput() VaultDynamicSecretSpecProviderAuthLdapPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthLdapPatchArgs) ToVaultDynamicSecretSpecProviderAuthLdapPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthLdapPatchArgs) ToVaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput() VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthLdapPatchArgs) ToVaultDynamicSecretSpecProviderAuthLdapPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapPatchOutput).ToVaultDynamicSecretSpecProviderAuthLdapPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthLdapPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthLdapPatchArgs, VaultDynamicSecretSpecProviderAuthLdapPatchPtr and VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthLdapPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthLdapPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthLdapPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput() VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthLdapPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthLdapPatchPtrType VaultDynamicSecretSpecProviderAuthLdapPatchArgs

func VaultDynamicSecretSpecProviderAuthLdapPatchPtr(v *VaultDynamicSecretSpecProviderAuthLdapPatchArgs) VaultDynamicSecretSpecProviderAuthLdapPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthLdapPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthLdapPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthLdapPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthLdapPatchPtrType) ToVaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput() VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthLdapPatchPtrType) ToVaultDynamicSecretSpecProviderAuthLdapPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput)
}

// Ldap authenticates with Vault by passing username/password pair using
// the LDAP authentication method
type VaultDynamicSecretSpecProviderAuthLdapPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthLdapPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthLdapPatchOutput) ToVaultDynamicSecretSpecProviderAuthLdapPatchOutput() VaultDynamicSecretSpecProviderAuthLdapPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapPatchOutput) ToVaultDynamicSecretSpecProviderAuthLdapPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapPatchOutput) ToVaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput() VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthLdapPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthLdapPatchOutput) ToVaultDynamicSecretSpecProviderAuthLdapPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthLdapPatch) *VaultDynamicSecretSpecProviderAuthLdapPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput)
}

// Path where the LDAP authentication backend is mounted
// in Vault, e.g: "ldap"
func (o VaultDynamicSecretSpecProviderAuthLdapPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdapPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthLdapPatchOutput) SecretRef() VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdapPatch) *VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput)
}

// Username is a LDAP user name used to authenticate using the LDAP Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthLdapPatchOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdapPatch) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthLdapPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput() VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthLdapPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthLdapPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapPatch) VaultDynamicSecretSpecProviderAuthLdapPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthLdapPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthLdapPatchOutput)
}

// Path where the LDAP authentication backend is mounted
// in Vault, e.g: "ldap"
func (o VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapPatch) *VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput)
}

// Username is a LDAP user name used to authenticate using the LDAP Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapPatch) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// SecretRef to a key in a Secret resource containing password for the LDAP
// user used to authenticate with Vault using the LDAP authentication
// method
type VaultDynamicSecretSpecProviderAuthLdapSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthLdapSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs and VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthLdapSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthLdapSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthLdapSecretRefOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthLdapSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput
}

// SecretRef to a key in a Secret resource containing password for the LDAP
// user used to authenticate with Vault using the LDAP authentication
// method
type VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs, VaultDynamicSecretSpecProviderAuthLdapSecretRefPtr and VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthLdapSecretRefPtrType VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs

func VaultDynamicSecretSpecProviderAuthLdapSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs) VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthLdapSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthLdapSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthLdapSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthLdapSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthLdapSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput)
}

// SecretRef to a key in a Secret resource containing password for the LDAP
// user used to authenticate with Vault using the LDAP authentication
// method
type VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthLdapSecretRef) *VaultDynamicSecretSpecProviderAuthLdapSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdapSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdapSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdapSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthLdapSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapSecretRef) VaultDynamicSecretSpecProviderAuthLdapSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthLdapSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretRef to a key in a Secret resource containing password for the LDAP
// user used to authenticate with Vault using the LDAP authentication
// method
type VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchArgs and VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput
	ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput
}

// SecretRef to a key in a Secret resource containing password for the LDAP
// user used to authenticate with Vault using the LDAP authentication
// method
type VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput).ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchArgs, VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtr and VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrType VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchArgs

func VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtr(v *VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchArgs) VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput)
}

// SecretRef to a key in a Secret resource containing password for the LDAP
// user used to authenticate with Vault using the LDAP authentication
// method
type VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch) *VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch) VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Auth configures how secret-manager authenticates with the Vault server.
type VaultDynamicSecretSpecProviderAuthPatch struct {
	AppRole    *VaultDynamicSecretSpecProviderAuthAppRolePatch    `pulumi:"appRole"`
	Cert       *VaultDynamicSecretSpecProviderAuthCertPatch       `pulumi:"cert"`
	Iam        *VaultDynamicSecretSpecProviderAuthIamPatch        `pulumi:"iam"`
	Jwt        *VaultDynamicSecretSpecProviderAuthJwtPatch        `pulumi:"jwt"`
	Kubernetes *VaultDynamicSecretSpecProviderAuthKubernetesPatch `pulumi:"kubernetes"`
	Ldap       *VaultDynamicSecretSpecProviderAuthLdapPatch       `pulumi:"ldap"`
	// Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in.
	// Namespaces is a set of features within Vault Enterprise that allows
	// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
	// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
	// This will default to Vault.Namespace field if set, or empty otherwise
	Namespace      *string                                                `pulumi:"namespace"`
	TokenSecretRef *VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch `pulumi:"tokenSecretRef"`
	UserPass       *VaultDynamicSecretSpecProviderAuthUserPassPatch       `pulumi:"userPass"`
}

// VaultDynamicSecretSpecProviderAuthPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthPatchArgs and VaultDynamicSecretSpecProviderAuthPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthPatchOutput() VaultDynamicSecretSpecProviderAuthPatchOutput
	ToVaultDynamicSecretSpecProviderAuthPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthPatchOutput
}

// Auth configures how secret-manager authenticates with the Vault server.
type VaultDynamicSecretSpecProviderAuthPatchArgs struct {
	AppRole    VaultDynamicSecretSpecProviderAuthAppRolePatchPtrInput    `pulumi:"appRole"`
	Cert       VaultDynamicSecretSpecProviderAuthCertPatchPtrInput       `pulumi:"cert"`
	Iam        VaultDynamicSecretSpecProviderAuthIamPatchPtrInput        `pulumi:"iam"`
	Jwt        VaultDynamicSecretSpecProviderAuthJwtPatchPtrInput        `pulumi:"jwt"`
	Kubernetes VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrInput `pulumi:"kubernetes"`
	Ldap       VaultDynamicSecretSpecProviderAuthLdapPatchPtrInput       `pulumi:"ldap"`
	// Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in.
	// Namespaces is a set of features within Vault Enterprise that allows
	// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
	// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
	// This will default to Vault.Namespace field if set, or empty otherwise
	Namespace      pulumi.StringPtrInput                                         `pulumi:"namespace"`
	TokenSecretRef VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrInput `pulumi:"tokenSecretRef"`
	UserPass       VaultDynamicSecretSpecProviderAuthUserPassPatchPtrInput       `pulumi:"userPass"`
}

func (VaultDynamicSecretSpecProviderAuthPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthPatchArgs) ToVaultDynamicSecretSpecProviderAuthPatchOutput() VaultDynamicSecretSpecProviderAuthPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthPatchArgs) ToVaultDynamicSecretSpecProviderAuthPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthPatchArgs) ToVaultDynamicSecretSpecProviderAuthPatchPtrOutput() VaultDynamicSecretSpecProviderAuthPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthPatchArgs) ToVaultDynamicSecretSpecProviderAuthPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthPatchOutput).ToVaultDynamicSecretSpecProviderAuthPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthPatchArgs, VaultDynamicSecretSpecProviderAuthPatchPtr and VaultDynamicSecretSpecProviderAuthPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthPatchPtrOutput() VaultDynamicSecretSpecProviderAuthPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthPatchPtrType VaultDynamicSecretSpecProviderAuthPatchArgs

func VaultDynamicSecretSpecProviderAuthPatchPtr(v *VaultDynamicSecretSpecProviderAuthPatchArgs) VaultDynamicSecretSpecProviderAuthPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthPatchPtrType) ToVaultDynamicSecretSpecProviderAuthPatchPtrOutput() VaultDynamicSecretSpecProviderAuthPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthPatchPtrType) ToVaultDynamicSecretSpecProviderAuthPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthPatchPtrOutput)
}

// Auth configures how secret-manager authenticates with the Vault server.
type VaultDynamicSecretSpecProviderAuthPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthPatchOutput) ToVaultDynamicSecretSpecProviderAuthPatchOutput() VaultDynamicSecretSpecProviderAuthPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthPatchOutput) ToVaultDynamicSecretSpecProviderAuthPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthPatchOutput) ToVaultDynamicSecretSpecProviderAuthPatchPtrOutput() VaultDynamicSecretSpecProviderAuthPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthPatchOutput) ToVaultDynamicSecretSpecProviderAuthPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchOutput) AppRole() VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthAppRolePatch {
		return v.AppRole
	}).(VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchOutput) Cert() VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthCertPatch {
		return v.Cert
	}).(VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchOutput) Iam() VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthIamPatch {
		return v.Iam
	}).(VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchOutput) Jwt() VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthJwtPatch {
		return v.Jwt
	}).(VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchOutput) Kubernetes() VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthKubernetesPatch {
		return v.Kubernetes
	}).(VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchOutput) Ldap() VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthLdapPatch {
		return v.Ldap
	}).(VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput)
}

// Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in.
// Namespaces is a set of features within Vault Enterprise that allows
// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
// This will default to Vault.Namespace field if set, or empty otherwise
func (o VaultDynamicSecretSpecProviderAuthPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchOutput) TokenSecretRef() VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch {
		return v.TokenSecretRef
	}).(VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchOutput) UserPass() VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthUserPassPatch {
		return v.UserPass
	}).(VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthPatchPtrOutput() VaultDynamicSecretSpecProviderAuthPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthPatch) VaultDynamicSecretSpecProviderAuthPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthPatchOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchPtrOutput) AppRole() VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthAppRolePatch {
		if v == nil {
			return nil
		}
		return v.AppRole
	}).(VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchPtrOutput) Cert() VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthCertPatch {
		if v == nil {
			return nil
		}
		return v.Cert
	}).(VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchPtrOutput) Iam() VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthIamPatch {
		if v == nil {
			return nil
		}
		return v.Iam
	}).(VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchPtrOutput) Jwt() VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthJwtPatch {
		if v == nil {
			return nil
		}
		return v.Jwt
	}).(VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchPtrOutput) Kubernetes() VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthKubernetesPatch {
		if v == nil {
			return nil
		}
		return v.Kubernetes
	}).(VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchPtrOutput) Ldap() VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthLdapPatch {
		if v == nil {
			return nil
		}
		return v.Ldap
	}).(VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput)
}

// Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in.
// Namespaces is a set of features within Vault Enterprise that allows
// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
// This will default to Vault.Namespace field if set, or empty otherwise
func (o VaultDynamicSecretSpecProviderAuthPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchPtrOutput) TokenSecretRef() VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.TokenSecretRef
	}).(VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthPatchPtrOutput) UserPass() VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthPatch) *VaultDynamicSecretSpecProviderAuthUserPassPatch {
		if v == nil {
			return nil
		}
		return v.UserPass
	}).(VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput)
}

// TokenSecretRef authenticates with Vault by presenting a token.
type VaultDynamicSecretSpecProviderAuthTokenSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthTokenSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs and VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthTokenSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthTokenSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthTokenSecretRefOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthTokenSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput
}

// TokenSecretRef authenticates with Vault by presenting a token.
type VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthTokenSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthTokenSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs, VaultDynamicSecretSpecProviderAuthTokenSecretRefPtr and VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthTokenSecretRefPtrType VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs

func VaultDynamicSecretSpecProviderAuthTokenSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs) VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthTokenSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthTokenSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthTokenSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthTokenSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthTokenSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput)
}

// TokenSecretRef authenticates with Vault by presenting a token.
type VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthTokenSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthTokenSecretRef) *VaultDynamicSecretSpecProviderAuthTokenSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthTokenSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthTokenSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthTokenSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthTokenSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthTokenSecretRef) VaultDynamicSecretSpecProviderAuthTokenSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthTokenSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// TokenSecretRef authenticates with Vault by presenting a token.
type VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchArgs and VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput
	ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput
}

// TokenSecretRef authenticates with Vault by presenting a token.
type VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput).ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchArgs, VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtr and VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrType VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchArgs

func VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtr(v *VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchArgs) VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput)
}

// TokenSecretRef authenticates with Vault by presenting a token.
type VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch) *VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch) VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthTokenSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// UserPass authenticates with Vault by passing username/password pair
type VaultDynamicSecretSpecProviderAuthUserPass struct {
	// Path where the UserPassword authentication backend is mounted
	// in Vault, e.g: "user"
	Path      *string                                              `pulumi:"path"`
	SecretRef *VaultDynamicSecretSpecProviderAuthUserPassSecretRef `pulumi:"secretRef"`
	// Username is a user name used to authenticate using the UserPass Vault
	// authentication method
	Username *string `pulumi:"username"`
}

// VaultDynamicSecretSpecProviderAuthUserPassInput is an input type that accepts VaultDynamicSecretSpecProviderAuthUserPassArgs and VaultDynamicSecretSpecProviderAuthUserPassOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthUserPassInput` via:
//
//	VaultDynamicSecretSpecProviderAuthUserPassArgs{...}
type VaultDynamicSecretSpecProviderAuthUserPassInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthUserPassOutput() VaultDynamicSecretSpecProviderAuthUserPassOutput
	ToVaultDynamicSecretSpecProviderAuthUserPassOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthUserPassOutput
}

// UserPass authenticates with Vault by passing username/password pair
type VaultDynamicSecretSpecProviderAuthUserPassArgs struct {
	// Path where the UserPassword authentication backend is mounted
	// in Vault, e.g: "user"
	Path      pulumi.StringPtrInput                                       `pulumi:"path"`
	SecretRef VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrInput `pulumi:"secretRef"`
	// Username is a user name used to authenticate using the UserPass Vault
	// authentication method
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (VaultDynamicSecretSpecProviderAuthUserPassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPass)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthUserPassArgs) ToVaultDynamicSecretSpecProviderAuthUserPassOutput() VaultDynamicSecretSpecProviderAuthUserPassOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthUserPassArgs) ToVaultDynamicSecretSpecProviderAuthUserPassOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassOutput)
}

func (i VaultDynamicSecretSpecProviderAuthUserPassArgs) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthUserPassArgs) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassOutput).ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthUserPassPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthUserPassArgs, VaultDynamicSecretSpecProviderAuthUserPassPtr and VaultDynamicSecretSpecProviderAuthUserPassPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthUserPassPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthUserPassArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthUserPassPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassPtrOutput
	ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthUserPassPtrOutput
}

type vaultDynamicSecretSpecProviderAuthUserPassPtrType VaultDynamicSecretSpecProviderAuthUserPassArgs

func VaultDynamicSecretSpecProviderAuthUserPassPtr(v *VaultDynamicSecretSpecProviderAuthUserPassArgs) VaultDynamicSecretSpecProviderAuthUserPassPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthUserPassPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthUserPassPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthUserPass)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthUserPassPtrType) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthUserPassPtrType) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassPtrOutput)
}

// UserPass authenticates with Vault by passing username/password pair
type VaultDynamicSecretSpecProviderAuthUserPassOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthUserPassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPass)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthUserPassOutput) ToVaultDynamicSecretSpecProviderAuthUserPassOutput() VaultDynamicSecretSpecProviderAuthUserPassOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassOutput) ToVaultDynamicSecretSpecProviderAuthUserPassOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassOutput) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthUserPassOutput) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthUserPass) *VaultDynamicSecretSpecProviderAuthUserPass {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthUserPassPtrOutput)
}

// Path where the UserPassword authentication backend is mounted
// in Vault, e.g: "user"
func (o VaultDynamicSecretSpecProviderAuthUserPassOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPass) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthUserPassOutput) SecretRef() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPass) *VaultDynamicSecretSpecProviderAuthUserPassSecretRef {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput)
}

// Username is a user name used to authenticate using the UserPass Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthUserPassOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPass) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthUserPassPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthUserPassPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthUserPass)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPtrOutput) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPtrOutput) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthUserPassOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPass) VaultDynamicSecretSpecProviderAuthUserPass {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthUserPass
		return ret
	}).(VaultDynamicSecretSpecProviderAuthUserPassOutput)
}

// Path where the UserPassword authentication backend is mounted
// in Vault, e.g: "user"
func (o VaultDynamicSecretSpecProviderAuthUserPassPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPass) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPass) *VaultDynamicSecretSpecProviderAuthUserPassSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput)
}

// Username is a user name used to authenticate using the UserPass Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthUserPassPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPass) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// UserPass authenticates with Vault by passing username/password pair
type VaultDynamicSecretSpecProviderAuthUserPassPatch struct {
	// Path where the UserPassword authentication backend is mounted
	// in Vault, e.g: "user"
	Path      *string                                                   `pulumi:"path"`
	SecretRef *VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch `pulumi:"secretRef"`
	// Username is a user name used to authenticate using the UserPass Vault
	// authentication method
	Username *string `pulumi:"username"`
}

// VaultDynamicSecretSpecProviderAuthUserPassPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthUserPassPatchArgs and VaultDynamicSecretSpecProviderAuthUserPassPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthUserPassPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthUserPassPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthUserPassPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthUserPassPatchOutput() VaultDynamicSecretSpecProviderAuthUserPassPatchOutput
	ToVaultDynamicSecretSpecProviderAuthUserPassPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthUserPassPatchOutput
}

// UserPass authenticates with Vault by passing username/password pair
type VaultDynamicSecretSpecProviderAuthUserPassPatchArgs struct {
	// Path where the UserPassword authentication backend is mounted
	// in Vault, e.g: "user"
	Path      pulumi.StringPtrInput                                            `pulumi:"path"`
	SecretRef VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrInput `pulumi:"secretRef"`
	// Username is a user name used to authenticate using the UserPass Vault
	// authentication method
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (VaultDynamicSecretSpecProviderAuthUserPassPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthUserPassPatchArgs) ToVaultDynamicSecretSpecProviderAuthUserPassPatchOutput() VaultDynamicSecretSpecProviderAuthUserPassPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthUserPassPatchArgs) ToVaultDynamicSecretSpecProviderAuthUserPassPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthUserPassPatchArgs) ToVaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthUserPassPatchArgs) ToVaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassPatchOutput).ToVaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthUserPassPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthUserPassPatchArgs, VaultDynamicSecretSpecProviderAuthUserPassPatchPtr and VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthUserPassPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthUserPassPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthUserPassPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthUserPassPatchPtrType VaultDynamicSecretSpecProviderAuthUserPassPatchArgs

func VaultDynamicSecretSpecProviderAuthUserPassPatchPtr(v *VaultDynamicSecretSpecProviderAuthUserPassPatchArgs) VaultDynamicSecretSpecProviderAuthUserPassPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthUserPassPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthUserPassPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthUserPassPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthUserPassPatchPtrType) ToVaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthUserPassPatchPtrType) ToVaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput)
}

// UserPass authenticates with Vault by passing username/password pair
type VaultDynamicSecretSpecProviderAuthUserPassPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthUserPassPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPatchOutput) ToVaultDynamicSecretSpecProviderAuthUserPassPatchOutput() VaultDynamicSecretSpecProviderAuthUserPassPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPatchOutput) ToVaultDynamicSecretSpecProviderAuthUserPassPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPatchOutput) ToVaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPatchOutput) ToVaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthUserPassPatch) *VaultDynamicSecretSpecProviderAuthUserPassPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput)
}

// Path where the UserPassword authentication backend is mounted
// in Vault, e.g: "user"
func (o VaultDynamicSecretSpecProviderAuthUserPassPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPassPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPatchOutput) SecretRef() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPassPatch) *VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput)
}

// Username is a user name used to authenticate using the UserPass Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthUserPassPatchOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPassPatch) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthUserPassPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthUserPassPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassPatch) VaultDynamicSecretSpecProviderAuthUserPassPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthUserPassPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthUserPassPatchOutput)
}

// Path where the UserPassword authentication backend is mounted
// in Vault, e.g: "user"
func (o VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassPatch) *VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput)
}

// Username is a user name used to authenticate using the UserPass Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassPatch) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// SecretRef to a key in a Secret resource containing password for the
// user used to authenticate with Vault using the UserPass authentication
// method
type VaultDynamicSecretSpecProviderAuthUserPassSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthUserPassSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs and VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthUserPassSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthUserPassSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput
}

// SecretRef to a key in a Secret resource containing password for the
// user used to authenticate with Vault using the UserPass authentication
// method
type VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs, VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtr and VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrType VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs

func VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthUserPassSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput)
}

// SecretRef to a key in a Secret resource containing password for the
// user used to authenticate with Vault using the UserPass authentication
// method
type VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthUserPassSecretRef) *VaultDynamicSecretSpecProviderAuthUserPassSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPassSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPassSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPassSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthUserPassSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassSecretRef) VaultDynamicSecretSpecProviderAuthUserPassSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthUserPassSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretRef to a key in a Secret resource containing password for the
// user used to authenticate with Vault using the UserPass authentication
// method
type VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchArgs and VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchArgs{...}
type VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput
	ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput
}

// SecretRef to a key in a Secret resource containing password for the
// user used to authenticate with Vault using the UserPass authentication
// method
type VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput).ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchArgs, VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtr and VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrType VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchArgs

func VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtr(v *VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchArgs) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput)
}

// SecretRef to a key in a Secret resource containing password for the
// user used to authenticate with Vault using the UserPass authentication
// method
type VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch) *VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The provider for the CA bundle to use to validate Vault server certificate.
type VaultDynamicSecretSpecProviderCaProvider struct {
	// The key where the CA certificate can be found in the Secret or ConfigMap.
	Key *string `pulumi:"key"`
	// The name of the object located at the provider type.
	Name *string `pulumi:"name"`
	// The namespace the Provider type is in.
	// Can only be defined when used in a ClusterSecretStore.
	Namespace *string `pulumi:"namespace"`
	// The type of provider to use such as "Secret", or "ConfigMap".
	Type *string `pulumi:"type"`
}

// VaultDynamicSecretSpecProviderCaProviderInput is an input type that accepts VaultDynamicSecretSpecProviderCaProviderArgs and VaultDynamicSecretSpecProviderCaProviderOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderCaProviderInput` via:
//
//	VaultDynamicSecretSpecProviderCaProviderArgs{...}
type VaultDynamicSecretSpecProviderCaProviderInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderCaProviderOutput() VaultDynamicSecretSpecProviderCaProviderOutput
	ToVaultDynamicSecretSpecProviderCaProviderOutputWithContext(context.Context) VaultDynamicSecretSpecProviderCaProviderOutput
}

// The provider for the CA bundle to use to validate Vault server certificate.
type VaultDynamicSecretSpecProviderCaProviderArgs struct {
	// The key where the CA certificate can be found in the Secret or ConfigMap.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the object located at the provider type.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace the Provider type is in.
	// Can only be defined when used in a ClusterSecretStore.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The type of provider to use such as "Secret", or "ConfigMap".
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VaultDynamicSecretSpecProviderCaProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderCaProvider)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderCaProviderArgs) ToVaultDynamicSecretSpecProviderCaProviderOutput() VaultDynamicSecretSpecProviderCaProviderOutput {
	return i.ToVaultDynamicSecretSpecProviderCaProviderOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderCaProviderArgs) ToVaultDynamicSecretSpecProviderCaProviderOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderCaProviderOutput)
}

func (i VaultDynamicSecretSpecProviderCaProviderArgs) ToVaultDynamicSecretSpecProviderCaProviderPtrOutput() VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderCaProviderArgs) ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderCaProviderOutput).ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderCaProviderPtrInput is an input type that accepts VaultDynamicSecretSpecProviderCaProviderArgs, VaultDynamicSecretSpecProviderCaProviderPtr and VaultDynamicSecretSpecProviderCaProviderPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderCaProviderPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderCaProviderArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderCaProviderPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderCaProviderPtrOutput() VaultDynamicSecretSpecProviderCaProviderPtrOutput
	ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderCaProviderPtrOutput
}

type vaultDynamicSecretSpecProviderCaProviderPtrType VaultDynamicSecretSpecProviderCaProviderArgs

func VaultDynamicSecretSpecProviderCaProviderPtr(v *VaultDynamicSecretSpecProviderCaProviderArgs) VaultDynamicSecretSpecProviderCaProviderPtrInput {
	return (*vaultDynamicSecretSpecProviderCaProviderPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderCaProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderCaProvider)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderCaProviderPtrType) ToVaultDynamicSecretSpecProviderCaProviderPtrOutput() VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderCaProviderPtrType) ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderCaProviderPtrOutput)
}

// The provider for the CA bundle to use to validate Vault server certificate.
type VaultDynamicSecretSpecProviderCaProviderOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderCaProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderCaProvider)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderCaProviderOutput) ToVaultDynamicSecretSpecProviderCaProviderOutput() VaultDynamicSecretSpecProviderCaProviderOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderCaProviderOutput) ToVaultDynamicSecretSpecProviderCaProviderOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderCaProviderOutput) ToVaultDynamicSecretSpecProviderCaProviderPtrOutput() VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderCaProviderOutput) ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderCaProvider) *VaultDynamicSecretSpecProviderCaProvider {
		return &v
	}).(VaultDynamicSecretSpecProviderCaProviderPtrOutput)
}

// The key where the CA certificate can be found in the Secret or ConfigMap.
func (o VaultDynamicSecretSpecProviderCaProviderOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderCaProvider) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the object located at the provider type.
func (o VaultDynamicSecretSpecProviderCaProviderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderCaProvider) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace the Provider type is in.
// Can only be defined when used in a ClusterSecretStore.
func (o VaultDynamicSecretSpecProviderCaProviderOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderCaProvider) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The type of provider to use such as "Secret", or "ConfigMap".
func (o VaultDynamicSecretSpecProviderCaProviderOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderCaProvider) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderCaProviderPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderCaProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderCaProvider)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderCaProviderPtrOutput) ToVaultDynamicSecretSpecProviderCaProviderPtrOutput() VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderCaProviderPtrOutput) ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderCaProviderPtrOutput) Elem() VaultDynamicSecretSpecProviderCaProviderOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderCaProvider) VaultDynamicSecretSpecProviderCaProvider {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderCaProvider
		return ret
	}).(VaultDynamicSecretSpecProviderCaProviderOutput)
}

// The key where the CA certificate can be found in the Secret or ConfigMap.
func (o VaultDynamicSecretSpecProviderCaProviderPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderCaProvider) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the object located at the provider type.
func (o VaultDynamicSecretSpecProviderCaProviderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderCaProvider) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace the Provider type is in.
// Can only be defined when used in a ClusterSecretStore.
func (o VaultDynamicSecretSpecProviderCaProviderPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderCaProvider) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The type of provider to use such as "Secret", or "ConfigMap".
func (o VaultDynamicSecretSpecProviderCaProviderPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderCaProvider) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The provider for the CA bundle to use to validate Vault server certificate.
type VaultDynamicSecretSpecProviderCaProviderPatch struct {
	// The key where the CA certificate can be found in the Secret or ConfigMap.
	Key *string `pulumi:"key"`
	// The name of the object located at the provider type.
	Name *string `pulumi:"name"`
	// The namespace the Provider type is in.
	// Can only be defined when used in a ClusterSecretStore.
	Namespace *string `pulumi:"namespace"`
	// The type of provider to use such as "Secret", or "ConfigMap".
	Type *string `pulumi:"type"`
}

// VaultDynamicSecretSpecProviderCaProviderPatchInput is an input type that accepts VaultDynamicSecretSpecProviderCaProviderPatchArgs and VaultDynamicSecretSpecProviderCaProviderPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderCaProviderPatchInput` via:
//
//	VaultDynamicSecretSpecProviderCaProviderPatchArgs{...}
type VaultDynamicSecretSpecProviderCaProviderPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderCaProviderPatchOutput() VaultDynamicSecretSpecProviderCaProviderPatchOutput
	ToVaultDynamicSecretSpecProviderCaProviderPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderCaProviderPatchOutput
}

// The provider for the CA bundle to use to validate Vault server certificate.
type VaultDynamicSecretSpecProviderCaProviderPatchArgs struct {
	// The key where the CA certificate can be found in the Secret or ConfigMap.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the object located at the provider type.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace the Provider type is in.
	// Can only be defined when used in a ClusterSecretStore.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The type of provider to use such as "Secret", or "ConfigMap".
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VaultDynamicSecretSpecProviderCaProviderPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderCaProviderPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderCaProviderPatchArgs) ToVaultDynamicSecretSpecProviderCaProviderPatchOutput() VaultDynamicSecretSpecProviderCaProviderPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderCaProviderPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderCaProviderPatchArgs) ToVaultDynamicSecretSpecProviderCaProviderPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderCaProviderPatchOutput)
}

func (i VaultDynamicSecretSpecProviderCaProviderPatchArgs) ToVaultDynamicSecretSpecProviderCaProviderPatchPtrOutput() VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderCaProviderPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderCaProviderPatchArgs) ToVaultDynamicSecretSpecProviderCaProviderPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderCaProviderPatchOutput).ToVaultDynamicSecretSpecProviderCaProviderPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderCaProviderPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderCaProviderPatchArgs, VaultDynamicSecretSpecProviderCaProviderPatchPtr and VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderCaProviderPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderCaProviderPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderCaProviderPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderCaProviderPatchPtrOutput() VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput
	ToVaultDynamicSecretSpecProviderCaProviderPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput
}

type vaultDynamicSecretSpecProviderCaProviderPatchPtrType VaultDynamicSecretSpecProviderCaProviderPatchArgs

func VaultDynamicSecretSpecProviderCaProviderPatchPtr(v *VaultDynamicSecretSpecProviderCaProviderPatchArgs) VaultDynamicSecretSpecProviderCaProviderPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderCaProviderPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderCaProviderPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderCaProviderPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderCaProviderPatchPtrType) ToVaultDynamicSecretSpecProviderCaProviderPatchPtrOutput() VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderCaProviderPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderCaProviderPatchPtrType) ToVaultDynamicSecretSpecProviderCaProviderPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput)
}

// The provider for the CA bundle to use to validate Vault server certificate.
type VaultDynamicSecretSpecProviderCaProviderPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderCaProviderPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderCaProviderPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderCaProviderPatchOutput) ToVaultDynamicSecretSpecProviderCaProviderPatchOutput() VaultDynamicSecretSpecProviderCaProviderPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderCaProviderPatchOutput) ToVaultDynamicSecretSpecProviderCaProviderPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderCaProviderPatchOutput) ToVaultDynamicSecretSpecProviderCaProviderPatchPtrOutput() VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderCaProviderPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderCaProviderPatchOutput) ToVaultDynamicSecretSpecProviderCaProviderPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderCaProviderPatch) *VaultDynamicSecretSpecProviderCaProviderPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput)
}

// The key where the CA certificate can be found in the Secret or ConfigMap.
func (o VaultDynamicSecretSpecProviderCaProviderPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderCaProviderPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the object located at the provider type.
func (o VaultDynamicSecretSpecProviderCaProviderPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderCaProviderPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace the Provider type is in.
// Can only be defined when used in a ClusterSecretStore.
func (o VaultDynamicSecretSpecProviderCaProviderPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderCaProviderPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The type of provider to use such as "Secret", or "ConfigMap".
func (o VaultDynamicSecretSpecProviderCaProviderPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderCaProviderPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderCaProviderPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput) ToVaultDynamicSecretSpecProviderCaProviderPatchPtrOutput() VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput) ToVaultDynamicSecretSpecProviderCaProviderPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderCaProviderPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderCaProviderPatch) VaultDynamicSecretSpecProviderCaProviderPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderCaProviderPatch
		return ret
	}).(VaultDynamicSecretSpecProviderCaProviderPatchOutput)
}

// The key where the CA certificate can be found in the Secret or ConfigMap.
func (o VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderCaProviderPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the object located at the provider type.
func (o VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderCaProviderPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace the Provider type is in.
// Can only be defined when used in a ClusterSecretStore.
func (o VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderCaProviderPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The type of provider to use such as "Secret", or "ConfigMap".
func (o VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderCaProviderPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Vault provider common spec
type VaultDynamicSecretSpecProviderPatch struct {
	Auth *VaultDynamicSecretSpecProviderAuthPatch `pulumi:"auth"`
	// PEM encoded CA bundle used to validate Vault server certificate. Only used
	// if the Server URL is using HTTPS protocol. This parameter is ignored for
	// plain HTTP protocol connection. If not set the system root certificates
	// are used to validate the TLS connection.
	CaBundle   *string                                        `pulumi:"caBundle"`
	CaProvider *VaultDynamicSecretSpecProviderCaProviderPatch `pulumi:"caProvider"`
	// ForwardInconsistent tells Vault to forward read-after-write requests to the Vault
	// leader instead of simply retrying within a loop. This can increase performance if
	// the option is enabled serverside.
	// https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header
	ForwardInconsistent *bool `pulumi:"forwardInconsistent"`
	// Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows
	// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
	// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
	Namespace *string `pulumi:"namespace"`
	// Path is the mount path of the Vault KV backend endpoint, e.g:
	// "secret". The v2 KV secret engine version specific "/data" path suffix
	// for fetching secrets from Vault is optional and will be appended
	// if not present in specified path.
	Path *string `pulumi:"path"`
	// ReadYourWrites ensures isolated read-after-write semantics by
	// providing discovered cluster replication states in each request.
	// More information about eventual consistency in Vault can be found here
	// https://www.vaultproject.io/docs/enterprise/consistency
	ReadYourWrites *bool `pulumi:"readYourWrites"`
	// Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
	Server *string                                 `pulumi:"server"`
	Tls    *VaultDynamicSecretSpecProviderTlsPatch `pulumi:"tls"`
	// Version is the Vault KV secret engine version. This can be either "v1" or
	// "v2". Version defaults to "v2".
	Version *string `pulumi:"version"`
}

// VaultDynamicSecretSpecProviderPatchInput is an input type that accepts VaultDynamicSecretSpecProviderPatchArgs and VaultDynamicSecretSpecProviderPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderPatchInput` via:
//
//	VaultDynamicSecretSpecProviderPatchArgs{...}
type VaultDynamicSecretSpecProviderPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderPatchOutput() VaultDynamicSecretSpecProviderPatchOutput
	ToVaultDynamicSecretSpecProviderPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderPatchOutput
}

// Vault provider common spec
type VaultDynamicSecretSpecProviderPatchArgs struct {
	Auth VaultDynamicSecretSpecProviderAuthPatchPtrInput `pulumi:"auth"`
	// PEM encoded CA bundle used to validate Vault server certificate. Only used
	// if the Server URL is using HTTPS protocol. This parameter is ignored for
	// plain HTTP protocol connection. If not set the system root certificates
	// are used to validate the TLS connection.
	CaBundle   pulumi.StringPtrInput                                 `pulumi:"caBundle"`
	CaProvider VaultDynamicSecretSpecProviderCaProviderPatchPtrInput `pulumi:"caProvider"`
	// ForwardInconsistent tells Vault to forward read-after-write requests to the Vault
	// leader instead of simply retrying within a loop. This can increase performance if
	// the option is enabled serverside.
	// https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header
	ForwardInconsistent pulumi.BoolPtrInput `pulumi:"forwardInconsistent"`
	// Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows
	// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
	// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Path is the mount path of the Vault KV backend endpoint, e.g:
	// "secret". The v2 KV secret engine version specific "/data" path suffix
	// for fetching secrets from Vault is optional and will be appended
	// if not present in specified path.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// ReadYourWrites ensures isolated read-after-write semantics by
	// providing discovered cluster replication states in each request.
	// More information about eventual consistency in Vault can be found here
	// https://www.vaultproject.io/docs/enterprise/consistency
	ReadYourWrites pulumi.BoolPtrInput `pulumi:"readYourWrites"`
	// Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
	Server pulumi.StringPtrInput                          `pulumi:"server"`
	Tls    VaultDynamicSecretSpecProviderTlsPatchPtrInput `pulumi:"tls"`
	// Version is the Vault KV secret engine version. This can be either "v1" or
	// "v2". Version defaults to "v2".
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (VaultDynamicSecretSpecProviderPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderPatchArgs) ToVaultDynamicSecretSpecProviderPatchOutput() VaultDynamicSecretSpecProviderPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderPatchArgs) ToVaultDynamicSecretSpecProviderPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderPatchOutput)
}

func (i VaultDynamicSecretSpecProviderPatchArgs) ToVaultDynamicSecretSpecProviderPatchPtrOutput() VaultDynamicSecretSpecProviderPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderPatchArgs) ToVaultDynamicSecretSpecProviderPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderPatchOutput).ToVaultDynamicSecretSpecProviderPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderPatchArgs, VaultDynamicSecretSpecProviderPatchPtr and VaultDynamicSecretSpecProviderPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderPatchPtrOutput() VaultDynamicSecretSpecProviderPatchPtrOutput
	ToVaultDynamicSecretSpecProviderPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderPatchPtrOutput
}

type vaultDynamicSecretSpecProviderPatchPtrType VaultDynamicSecretSpecProviderPatchArgs

func VaultDynamicSecretSpecProviderPatchPtr(v *VaultDynamicSecretSpecProviderPatchArgs) VaultDynamicSecretSpecProviderPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderPatchPtrType) ToVaultDynamicSecretSpecProviderPatchPtrOutput() VaultDynamicSecretSpecProviderPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderPatchPtrType) ToVaultDynamicSecretSpecProviderPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderPatchPtrOutput)
}

// Vault provider common spec
type VaultDynamicSecretSpecProviderPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderPatchOutput) ToVaultDynamicSecretSpecProviderPatchOutput() VaultDynamicSecretSpecProviderPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderPatchOutput) ToVaultDynamicSecretSpecProviderPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderPatchOutput) ToVaultDynamicSecretSpecProviderPatchPtrOutput() VaultDynamicSecretSpecProviderPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderPatchOutput) ToVaultDynamicSecretSpecProviderPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderPatch) *VaultDynamicSecretSpecProviderPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderPatchOutput) Auth() VaultDynamicSecretSpecProviderAuthPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderPatch) *VaultDynamicSecretSpecProviderAuthPatch { return v.Auth }).(VaultDynamicSecretSpecProviderAuthPatchPtrOutput)
}

// PEM encoded CA bundle used to validate Vault server certificate. Only used
// if the Server URL is using HTTPS protocol. This parameter is ignored for
// plain HTTP protocol connection. If not set the system root certificates
// are used to validate the TLS connection.
func (o VaultDynamicSecretSpecProviderPatchOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderPatch) *string { return v.CaBundle }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderPatchOutput) CaProvider() VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderPatch) *VaultDynamicSecretSpecProviderCaProviderPatch {
		return v.CaProvider
	}).(VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput)
}

// ForwardInconsistent tells Vault to forward read-after-write requests to the Vault
// leader instead of simply retrying within a loop. This can increase performance if
// the option is enabled serverside.
// https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header
func (o VaultDynamicSecretSpecProviderPatchOutput) ForwardInconsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderPatch) *bool { return v.ForwardInconsistent }).(pulumi.BoolPtrOutput)
}

// Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows
// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
func (o VaultDynamicSecretSpecProviderPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Path is the mount path of the Vault KV backend endpoint, e.g:
// "secret". The v2 KV secret engine version specific "/data" path suffix
// for fetching secrets from Vault is optional and will be appended
// if not present in specified path.
func (o VaultDynamicSecretSpecProviderPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// ReadYourWrites ensures isolated read-after-write semantics by
// providing discovered cluster replication states in each request.
// More information about eventual consistency in Vault can be found here
// https://www.vaultproject.io/docs/enterprise/consistency
func (o VaultDynamicSecretSpecProviderPatchOutput) ReadYourWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderPatch) *bool { return v.ReadYourWrites }).(pulumi.BoolPtrOutput)
}

// Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
func (o VaultDynamicSecretSpecProviderPatchOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderPatch) *string { return v.Server }).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderPatchOutput) Tls() VaultDynamicSecretSpecProviderTlsPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderPatch) *VaultDynamicSecretSpecProviderTlsPatch { return v.Tls }).(VaultDynamicSecretSpecProviderTlsPatchPtrOutput)
}

// Version is the Vault KV secret engine version. This can be either "v1" or
// "v2". Version defaults to "v2".
func (o VaultDynamicSecretSpecProviderPatchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderPatch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderPatchPtrOutput) ToVaultDynamicSecretSpecProviderPatchPtrOutput() VaultDynamicSecretSpecProviderPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderPatchPtrOutput) ToVaultDynamicSecretSpecProviderPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderPatch) VaultDynamicSecretSpecProviderPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderPatch
		return ret
	}).(VaultDynamicSecretSpecProviderPatchOutput)
}

func (o VaultDynamicSecretSpecProviderPatchPtrOutput) Auth() VaultDynamicSecretSpecProviderAuthPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderPatch) *VaultDynamicSecretSpecProviderAuthPatch {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(VaultDynamicSecretSpecProviderAuthPatchPtrOutput)
}

// PEM encoded CA bundle used to validate Vault server certificate. Only used
// if the Server URL is using HTTPS protocol. This parameter is ignored for
// plain HTTP protocol connection. If not set the system root certificates
// are used to validate the TLS connection.
func (o VaultDynamicSecretSpecProviderPatchPtrOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderPatch) *string {
		if v == nil {
			return nil
		}
		return v.CaBundle
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderPatchPtrOutput) CaProvider() VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderPatch) *VaultDynamicSecretSpecProviderCaProviderPatch {
		if v == nil {
			return nil
		}
		return v.CaProvider
	}).(VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput)
}

// ForwardInconsistent tells Vault to forward read-after-write requests to the Vault
// leader instead of simply retrying within a loop. This can increase performance if
// the option is enabled serverside.
// https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header
func (o VaultDynamicSecretSpecProviderPatchPtrOutput) ForwardInconsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ForwardInconsistent
	}).(pulumi.BoolPtrOutput)
}

// Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows
// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
func (o VaultDynamicSecretSpecProviderPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Path is the mount path of the Vault KV backend endpoint, e.g:
// "secret". The v2 KV secret engine version specific "/data" path suffix
// for fetching secrets from Vault is optional and will be appended
// if not present in specified path.
func (o VaultDynamicSecretSpecProviderPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// ReadYourWrites ensures isolated read-after-write semantics by
// providing discovered cluster replication states in each request.
// More information about eventual consistency in Vault can be found here
// https://www.vaultproject.io/docs/enterprise/consistency
func (o VaultDynamicSecretSpecProviderPatchPtrOutput) ReadYourWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadYourWrites
	}).(pulumi.BoolPtrOutput)
}

// Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
func (o VaultDynamicSecretSpecProviderPatchPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderPatch) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

func (o VaultDynamicSecretSpecProviderPatchPtrOutput) Tls() VaultDynamicSecretSpecProviderTlsPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderPatch) *VaultDynamicSecretSpecProviderTlsPatch {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(VaultDynamicSecretSpecProviderTlsPatchPtrOutput)
}

// Version is the Vault KV secret engine version. This can be either "v1" or
// "v2". Version defaults to "v2".
func (o VaultDynamicSecretSpecProviderPatchPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderPatch) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The configuration used for client side related TLS communication, when the Vault server
// requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
// This parameter is ignored for plain HTTP protocol connection.
// It's worth noting this configuration is different from the "TLS certificates auth method",
// which is available under the `auth.cert` section.
type VaultDynamicSecretSpecProviderTls struct {
	CertSecretRef *VaultDynamicSecretSpecProviderTlsCertSecretRef `pulumi:"certSecretRef"`
	KeySecretRef  *VaultDynamicSecretSpecProviderTlsKeySecretRef  `pulumi:"keySecretRef"`
}

// VaultDynamicSecretSpecProviderTlsInput is an input type that accepts VaultDynamicSecretSpecProviderTlsArgs and VaultDynamicSecretSpecProviderTlsOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsInput` via:
//
//	VaultDynamicSecretSpecProviderTlsArgs{...}
type VaultDynamicSecretSpecProviderTlsInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsOutput() VaultDynamicSecretSpecProviderTlsOutput
	ToVaultDynamicSecretSpecProviderTlsOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsOutput
}

// The configuration used for client side related TLS communication, when the Vault server
// requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
// This parameter is ignored for plain HTTP protocol connection.
// It's worth noting this configuration is different from the "TLS certificates auth method",
// which is available under the `auth.cert` section.
type VaultDynamicSecretSpecProviderTlsArgs struct {
	CertSecretRef VaultDynamicSecretSpecProviderTlsCertSecretRefPtrInput `pulumi:"certSecretRef"`
	KeySecretRef  VaultDynamicSecretSpecProviderTlsKeySecretRefPtrInput  `pulumi:"keySecretRef"`
}

func (VaultDynamicSecretSpecProviderTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTls)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderTlsArgs) ToVaultDynamicSecretSpecProviderTlsOutput() VaultDynamicSecretSpecProviderTlsOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsArgs) ToVaultDynamicSecretSpecProviderTlsOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsOutput)
}

func (i VaultDynamicSecretSpecProviderTlsArgs) ToVaultDynamicSecretSpecProviderTlsPtrOutput() VaultDynamicSecretSpecProviderTlsPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsArgs) ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsOutput).ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderTlsPtrInput is an input type that accepts VaultDynamicSecretSpecProviderTlsArgs, VaultDynamicSecretSpecProviderTlsPtr and VaultDynamicSecretSpecProviderTlsPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderTlsArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderTlsPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsPtrOutput() VaultDynamicSecretSpecProviderTlsPtrOutput
	ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsPtrOutput
}

type vaultDynamicSecretSpecProviderTlsPtrType VaultDynamicSecretSpecProviderTlsArgs

func VaultDynamicSecretSpecProviderTlsPtr(v *VaultDynamicSecretSpecProviderTlsArgs) VaultDynamicSecretSpecProviderTlsPtrInput {
	return (*vaultDynamicSecretSpecProviderTlsPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTls)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderTlsPtrType) ToVaultDynamicSecretSpecProviderTlsPtrOutput() VaultDynamicSecretSpecProviderTlsPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderTlsPtrType) ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsPtrOutput)
}

// The configuration used for client side related TLS communication, when the Vault server
// requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
// This parameter is ignored for plain HTTP protocol connection.
// It's worth noting this configuration is different from the "TLS certificates auth method",
// which is available under the `auth.cert` section.
type VaultDynamicSecretSpecProviderTlsOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTls)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsOutput) ToVaultDynamicSecretSpecProviderTlsOutput() VaultDynamicSecretSpecProviderTlsOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsOutput) ToVaultDynamicSecretSpecProviderTlsOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsOutput) ToVaultDynamicSecretSpecProviderTlsPtrOutput() VaultDynamicSecretSpecProviderTlsPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderTlsOutput) ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderTls) *VaultDynamicSecretSpecProviderTls {
		return &v
	}).(VaultDynamicSecretSpecProviderTlsPtrOutput)
}

func (o VaultDynamicSecretSpecProviderTlsOutput) CertSecretRef() VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTls) *VaultDynamicSecretSpecProviderTlsCertSecretRef {
		return v.CertSecretRef
	}).(VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput)
}

func (o VaultDynamicSecretSpecProviderTlsOutput) KeySecretRef() VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTls) *VaultDynamicSecretSpecProviderTlsKeySecretRef {
		return v.KeySecretRef
	}).(VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput)
}

type VaultDynamicSecretSpecProviderTlsPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTls)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsPtrOutput) ToVaultDynamicSecretSpecProviderTlsPtrOutput() VaultDynamicSecretSpecProviderTlsPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsPtrOutput) ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsPtrOutput) Elem() VaultDynamicSecretSpecProviderTlsOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTls) VaultDynamicSecretSpecProviderTls {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderTls
		return ret
	}).(VaultDynamicSecretSpecProviderTlsOutput)
}

func (o VaultDynamicSecretSpecProviderTlsPtrOutput) CertSecretRef() VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTls) *VaultDynamicSecretSpecProviderTlsCertSecretRef {
		if v == nil {
			return nil
		}
		return v.CertSecretRef
	}).(VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput)
}

func (o VaultDynamicSecretSpecProviderTlsPtrOutput) KeySecretRef() VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTls) *VaultDynamicSecretSpecProviderTlsKeySecretRef {
		if v == nil {
			return nil
		}
		return v.KeySecretRef
	}).(VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput)
}

// CertSecretRef is a certificate added to the transport layer
// when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.crt'.
type VaultDynamicSecretSpecProviderTlsCertSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderTlsCertSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderTlsCertSecretRefArgs and VaultDynamicSecretSpecProviderTlsCertSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsCertSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderTlsCertSecretRefArgs{...}
type VaultDynamicSecretSpecProviderTlsCertSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsCertSecretRefOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefOutput
	ToVaultDynamicSecretSpecProviderTlsCertSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefOutput
}

// CertSecretRef is a certificate added to the transport layer
// when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.crt'.
type VaultDynamicSecretSpecProviderTlsCertSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderTlsCertSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsCertSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderTlsCertSecretRefArgs) ToVaultDynamicSecretSpecProviderTlsCertSecretRefOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsCertSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsCertSecretRefArgs) ToVaultDynamicSecretSpecProviderTlsCertSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsCertSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderTlsCertSecretRefArgs) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsCertSecretRefArgs) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsCertSecretRefOutput).ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderTlsCertSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderTlsCertSecretRefArgs, VaultDynamicSecretSpecProviderTlsCertSecretRefPtr and VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsCertSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderTlsCertSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderTlsCertSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderTlsCertSecretRefPtrType VaultDynamicSecretSpecProviderTlsCertSecretRefArgs

func VaultDynamicSecretSpecProviderTlsCertSecretRefPtr(v *VaultDynamicSecretSpecProviderTlsCertSecretRefArgs) VaultDynamicSecretSpecProviderTlsCertSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderTlsCertSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderTlsCertSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTlsCertSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderTlsCertSecretRefPtrType) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderTlsCertSecretRefPtrType) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput)
}

// CertSecretRef is a certificate added to the transport layer
// when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.crt'.
type VaultDynamicSecretSpecProviderTlsCertSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsCertSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderTlsCertSecretRef) *VaultDynamicSecretSpecProviderTlsCertSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsCertSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsCertSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsCertSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTlsCertSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderTlsCertSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsCertSecretRef) VaultDynamicSecretSpecProviderTlsCertSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderTlsCertSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderTlsCertSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// CertSecretRef is a certificate added to the transport layer
// when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.crt'.
type VaultDynamicSecretSpecProviderTlsCertSecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderTlsCertSecretRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderTlsCertSecretRefPatchArgs and VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsCertSecretRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderTlsCertSecretRefPatchArgs{...}
type VaultDynamicSecretSpecProviderTlsCertSecretRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput
	ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput
}

// CertSecretRef is a certificate added to the transport layer
// when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.crt'.
type VaultDynamicSecretSpecProviderTlsCertSecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderTlsCertSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsCertSecretRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderTlsCertSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsCertSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderTlsCertSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsCertSecretRefPatchArgs) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput).ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderTlsCertSecretRefPatchArgs, VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtr and VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderTlsCertSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrType VaultDynamicSecretSpecProviderTlsCertSecretRefPatchArgs

func VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtr(v *VaultDynamicSecretSpecProviderTlsCertSecretRefPatchArgs) VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTlsCertSecretRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput)
}

// CertSecretRef is a certificate added to the transport layer
// when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.crt'.
type VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsCertSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderTlsCertSecretRefPatch) *VaultDynamicSecretSpecProviderTlsCertSecretRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsCertSecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsCertSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsCertSecretRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTlsCertSecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsCertSecretRefPatch) VaultDynamicSecretSpecProviderTlsCertSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderTlsCertSecretRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsCertSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsCertSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsCertSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// KeySecretRef to a key in a Secret resource containing client private key
// added to the transport layer when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.key'.
type VaultDynamicSecretSpecProviderTlsKeySecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderTlsKeySecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderTlsKeySecretRefArgs and VaultDynamicSecretSpecProviderTlsKeySecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsKeySecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderTlsKeySecretRefArgs{...}
type VaultDynamicSecretSpecProviderTlsKeySecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsKeySecretRefOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefOutput
	ToVaultDynamicSecretSpecProviderTlsKeySecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefOutput
}

// KeySecretRef to a key in a Secret resource containing client private key
// added to the transport layer when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.key'.
type VaultDynamicSecretSpecProviderTlsKeySecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderTlsKeySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsKeySecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderTlsKeySecretRefArgs) ToVaultDynamicSecretSpecProviderTlsKeySecretRefOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsKeySecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsKeySecretRefArgs) ToVaultDynamicSecretSpecProviderTlsKeySecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsKeySecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderTlsKeySecretRefArgs) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsKeySecretRefArgs) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsKeySecretRefOutput).ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderTlsKeySecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderTlsKeySecretRefArgs, VaultDynamicSecretSpecProviderTlsKeySecretRefPtr and VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsKeySecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderTlsKeySecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderTlsKeySecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderTlsKeySecretRefPtrType VaultDynamicSecretSpecProviderTlsKeySecretRefArgs

func VaultDynamicSecretSpecProviderTlsKeySecretRefPtr(v *VaultDynamicSecretSpecProviderTlsKeySecretRefArgs) VaultDynamicSecretSpecProviderTlsKeySecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderTlsKeySecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderTlsKeySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTlsKeySecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderTlsKeySecretRefPtrType) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderTlsKeySecretRefPtrType) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput)
}

// KeySecretRef to a key in a Secret resource containing client private key
// added to the transport layer when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.key'.
type VaultDynamicSecretSpecProviderTlsKeySecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsKeySecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderTlsKeySecretRef) *VaultDynamicSecretSpecProviderTlsKeySecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsKeySecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsKeySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsKeySecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTlsKeySecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderTlsKeySecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsKeySecretRef) VaultDynamicSecretSpecProviderTlsKeySecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderTlsKeySecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderTlsKeySecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// KeySecretRef to a key in a Secret resource containing client private key
// added to the transport layer when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.key'.
type VaultDynamicSecretSpecProviderTlsKeySecretRefPatch struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderTlsKeySecretRefPatchInput is an input type that accepts VaultDynamicSecretSpecProviderTlsKeySecretRefPatchArgs and VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsKeySecretRefPatchInput` via:
//
//	VaultDynamicSecretSpecProviderTlsKeySecretRefPatchArgs{...}
type VaultDynamicSecretSpecProviderTlsKeySecretRefPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput
	ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput
}

// KeySecretRef to a key in a Secret resource containing client private key
// added to the transport layer when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.key'.
type VaultDynamicSecretSpecProviderTlsKeySecretRefPatchArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderTlsKeySecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsKeySecretRefPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderTlsKeySecretRefPatchArgs) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsKeySecretRefPatchArgs) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput)
}

func (i VaultDynamicSecretSpecProviderTlsKeySecretRefPatchArgs) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsKeySecretRefPatchArgs) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput).ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderTlsKeySecretRefPatchArgs, VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtr and VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderTlsKeySecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput
	ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput
}

type vaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrType VaultDynamicSecretSpecProviderTlsKeySecretRefPatchArgs

func VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtr(v *VaultDynamicSecretSpecProviderTlsKeySecretRefPatchArgs) VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTlsKeySecretRefPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrType) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput)
}

// KeySecretRef to a key in a Secret resource containing client private key
// added to the transport layer when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.key'.
type VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsKeySecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderTlsKeySecretRefPatch) *VaultDynamicSecretSpecProviderTlsKeySecretRefPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsKeySecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsKeySecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsKeySecretRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTlsKeySecretRefPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsKeySecretRefPatch) VaultDynamicSecretSpecProviderTlsKeySecretRefPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderTlsKeySecretRefPatch
		return ret
	}).(VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The configuration used for client side related TLS communication, when the Vault server
// requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
// This parameter is ignored for plain HTTP protocol connection.
// It's worth noting this configuration is different from the "TLS certificates auth method",
// which is available under the `auth.cert` section.
type VaultDynamicSecretSpecProviderTlsPatch struct {
	CertSecretRef *VaultDynamicSecretSpecProviderTlsCertSecretRefPatch `pulumi:"certSecretRef"`
	KeySecretRef  *VaultDynamicSecretSpecProviderTlsKeySecretRefPatch  `pulumi:"keySecretRef"`
}

// VaultDynamicSecretSpecProviderTlsPatchInput is an input type that accepts VaultDynamicSecretSpecProviderTlsPatchArgs and VaultDynamicSecretSpecProviderTlsPatchOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsPatchInput` via:
//
//	VaultDynamicSecretSpecProviderTlsPatchArgs{...}
type VaultDynamicSecretSpecProviderTlsPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsPatchOutput() VaultDynamicSecretSpecProviderTlsPatchOutput
	ToVaultDynamicSecretSpecProviderTlsPatchOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsPatchOutput
}

// The configuration used for client side related TLS communication, when the Vault server
// requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
// This parameter is ignored for plain HTTP protocol connection.
// It's worth noting this configuration is different from the "TLS certificates auth method",
// which is available under the `auth.cert` section.
type VaultDynamicSecretSpecProviderTlsPatchArgs struct {
	CertSecretRef VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrInput `pulumi:"certSecretRef"`
	KeySecretRef  VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrInput  `pulumi:"keySecretRef"`
}

func (VaultDynamicSecretSpecProviderTlsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsPatch)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderTlsPatchArgs) ToVaultDynamicSecretSpecProviderTlsPatchOutput() VaultDynamicSecretSpecProviderTlsPatchOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsPatchOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsPatchArgs) ToVaultDynamicSecretSpecProviderTlsPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsPatchOutput)
}

func (i VaultDynamicSecretSpecProviderTlsPatchArgs) ToVaultDynamicSecretSpecProviderTlsPatchPtrOutput() VaultDynamicSecretSpecProviderTlsPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsPatchPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsPatchArgs) ToVaultDynamicSecretSpecProviderTlsPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsPatchOutput).ToVaultDynamicSecretSpecProviderTlsPatchPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderTlsPatchPtrInput is an input type that accepts VaultDynamicSecretSpecProviderTlsPatchArgs, VaultDynamicSecretSpecProviderTlsPatchPtr and VaultDynamicSecretSpecProviderTlsPatchPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsPatchPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderTlsPatchArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderTlsPatchPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsPatchPtrOutput() VaultDynamicSecretSpecProviderTlsPatchPtrOutput
	ToVaultDynamicSecretSpecProviderTlsPatchPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsPatchPtrOutput
}

type vaultDynamicSecretSpecProviderTlsPatchPtrType VaultDynamicSecretSpecProviderTlsPatchArgs

func VaultDynamicSecretSpecProviderTlsPatchPtr(v *VaultDynamicSecretSpecProviderTlsPatchArgs) VaultDynamicSecretSpecProviderTlsPatchPtrInput {
	return (*vaultDynamicSecretSpecProviderTlsPatchPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderTlsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTlsPatch)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderTlsPatchPtrType) ToVaultDynamicSecretSpecProviderTlsPatchPtrOutput() VaultDynamicSecretSpecProviderTlsPatchPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsPatchPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderTlsPatchPtrType) ToVaultDynamicSecretSpecProviderTlsPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsPatchPtrOutput)
}

// The configuration used for client side related TLS communication, when the Vault server
// requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
// This parameter is ignored for plain HTTP protocol connection.
// It's worth noting this configuration is different from the "TLS certificates auth method",
// which is available under the `auth.cert` section.
type VaultDynamicSecretSpecProviderTlsPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsPatchOutput) ToVaultDynamicSecretSpecProviderTlsPatchOutput() VaultDynamicSecretSpecProviderTlsPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsPatchOutput) ToVaultDynamicSecretSpecProviderTlsPatchOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsPatchOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsPatchOutput) ToVaultDynamicSecretSpecProviderTlsPatchPtrOutput() VaultDynamicSecretSpecProviderTlsPatchPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderTlsPatchPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderTlsPatchOutput) ToVaultDynamicSecretSpecProviderTlsPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderTlsPatch) *VaultDynamicSecretSpecProviderTlsPatch {
		return &v
	}).(VaultDynamicSecretSpecProviderTlsPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderTlsPatchOutput) CertSecretRef() VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsPatch) *VaultDynamicSecretSpecProviderTlsCertSecretRefPatch {
		return v.CertSecretRef
	}).(VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderTlsPatchOutput) KeySecretRef() VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsPatch) *VaultDynamicSecretSpecProviderTlsKeySecretRefPatch {
		return v.KeySecretRef
	}).(VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput)
}

type VaultDynamicSecretSpecProviderTlsPatchPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTlsPatch)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsPatchPtrOutput) ToVaultDynamicSecretSpecProviderTlsPatchPtrOutput() VaultDynamicSecretSpecProviderTlsPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsPatchPtrOutput) ToVaultDynamicSecretSpecProviderTlsPatchPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsPatchPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsPatchPtrOutput) Elem() VaultDynamicSecretSpecProviderTlsPatchOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsPatch) VaultDynamicSecretSpecProviderTlsPatch {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderTlsPatch
		return ret
	}).(VaultDynamicSecretSpecProviderTlsPatchOutput)
}

func (o VaultDynamicSecretSpecProviderTlsPatchPtrOutput) CertSecretRef() VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsPatch) *VaultDynamicSecretSpecProviderTlsCertSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.CertSecretRef
	}).(VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput)
}

func (o VaultDynamicSecretSpecProviderTlsPatchPtrOutput) KeySecretRef() VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsPatch) *VaultDynamicSecretSpecProviderTlsKeySecretRefPatch {
		if v == nil {
			return nil
		}
		return v.KeySecretRef
	}).(VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput)
}

// Webhook connects to a third party API server to handle the secrets generation
// configuration parameters in spec.
// You can specify the server, the token, and additional body parameters.
// See documentation for the full API specification for requests and responses.
type WebhookType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *WebhookSpec       `pulumi:"spec"`
}

// WebhookTypeInput is an input type that accepts WebhookTypeArgs and WebhookTypeOutput values.
// You can construct a concrete instance of `WebhookTypeInput` via:
//
//	WebhookTypeArgs{...}
type WebhookTypeInput interface {
	pulumi.Input

	ToWebhookTypeOutput() WebhookTypeOutput
	ToWebhookTypeOutputWithContext(context.Context) WebhookTypeOutput
}

// Webhook connects to a third party API server to handle the secrets generation
// configuration parameters in spec.
// You can specify the server, the token, and additional body parameters.
// See documentation for the full API specification for requests and responses.
type WebhookTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     WebhookSpecPtrInput       `pulumi:"spec"`
}

func (WebhookTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookType)(nil)).Elem()
}

func (i WebhookTypeArgs) ToWebhookTypeOutput() WebhookTypeOutput {
	return i.ToWebhookTypeOutputWithContext(context.Background())
}

func (i WebhookTypeArgs) ToWebhookTypeOutputWithContext(ctx context.Context) WebhookTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookTypeOutput)
}

// WebhookTypeArrayInput is an input type that accepts WebhookTypeArray and WebhookTypeArrayOutput values.
// You can construct a concrete instance of `WebhookTypeArrayInput` via:
//
//	WebhookTypeArray{ WebhookTypeArgs{...} }
type WebhookTypeArrayInput interface {
	pulumi.Input

	ToWebhookTypeArrayOutput() WebhookTypeArrayOutput
	ToWebhookTypeArrayOutputWithContext(context.Context) WebhookTypeArrayOutput
}

type WebhookTypeArray []WebhookTypeInput

func (WebhookTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookType)(nil)).Elem()
}

func (i WebhookTypeArray) ToWebhookTypeArrayOutput() WebhookTypeArrayOutput {
	return i.ToWebhookTypeArrayOutputWithContext(context.Background())
}

func (i WebhookTypeArray) ToWebhookTypeArrayOutputWithContext(ctx context.Context) WebhookTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookTypeArrayOutput)
}

// Webhook connects to a third party API server to handle the secrets generation
// configuration parameters in spec.
// You can specify the server, the token, and additional body parameters.
// See documentation for the full API specification for requests and responses.
type WebhookTypeOutput struct{ *pulumi.OutputState }

func (WebhookTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookType)(nil)).Elem()
}

func (o WebhookTypeOutput) ToWebhookTypeOutput() WebhookTypeOutput {
	return o
}

func (o WebhookTypeOutput) ToWebhookTypeOutputWithContext(ctx context.Context) WebhookTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o WebhookTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o WebhookTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o WebhookTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v WebhookType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o WebhookTypeOutput) Spec() WebhookSpecPtrOutput {
	return o.ApplyT(func(v WebhookType) *WebhookSpec { return v.Spec }).(WebhookSpecPtrOutput)
}

type WebhookTypeArrayOutput struct{ *pulumi.OutputState }

func (WebhookTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookType)(nil)).Elem()
}

func (o WebhookTypeArrayOutput) ToWebhookTypeArrayOutput() WebhookTypeArrayOutput {
	return o
}

func (o WebhookTypeArrayOutput) ToWebhookTypeArrayOutputWithContext(ctx context.Context) WebhookTypeArrayOutput {
	return o
}

func (o WebhookTypeArrayOutput) Index(i pulumi.IntInput) WebhookTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookType {
		return vs[0].([]WebhookType)[vs[1].(int)]
	}).(WebhookTypeOutput)
}

// WebhookList is a list of Webhook
type WebhookListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of webhooks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []WebhookType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// WebhookListTypeInput is an input type that accepts WebhookListTypeArgs and WebhookListTypeOutput values.
// You can construct a concrete instance of `WebhookListTypeInput` via:
//
//	WebhookListTypeArgs{...}
type WebhookListTypeInput interface {
	pulumi.Input

	ToWebhookListTypeOutput() WebhookListTypeOutput
	ToWebhookListTypeOutputWithContext(context.Context) WebhookListTypeOutput
}

// WebhookList is a list of Webhook
type WebhookListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of webhooks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items WebhookTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (WebhookListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookListType)(nil)).Elem()
}

func (i WebhookListTypeArgs) ToWebhookListTypeOutput() WebhookListTypeOutput {
	return i.ToWebhookListTypeOutputWithContext(context.Background())
}

func (i WebhookListTypeArgs) ToWebhookListTypeOutputWithContext(ctx context.Context) WebhookListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookListTypeOutput)
}

// WebhookList is a list of Webhook
type WebhookListTypeOutput struct{ *pulumi.OutputState }

func (WebhookListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookListType)(nil)).Elem()
}

func (o WebhookListTypeOutput) ToWebhookListTypeOutput() WebhookListTypeOutput {
	return o
}

func (o WebhookListTypeOutput) ToWebhookListTypeOutputWithContext(ctx context.Context) WebhookListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o WebhookListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of webhooks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o WebhookListTypeOutput) Items() WebhookTypeArrayOutput {
	return o.ApplyT(func(v WebhookListType) []WebhookType { return v.Items }).(WebhookTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o WebhookListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o WebhookListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v WebhookListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Webhook connects to a third party API server to handle the secrets generation
// configuration parameters in spec.
// You can specify the server, the token, and additional body parameters.
// See documentation for the full API specification for requests and responses.
type WebhookPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *WebhookSpecPatch       `pulumi:"spec"`
}

// WebhookPatchTypeInput is an input type that accepts WebhookPatchTypeArgs and WebhookPatchTypeOutput values.
// You can construct a concrete instance of `WebhookPatchTypeInput` via:
//
//	WebhookPatchTypeArgs{...}
type WebhookPatchTypeInput interface {
	pulumi.Input

	ToWebhookPatchTypeOutput() WebhookPatchTypeOutput
	ToWebhookPatchTypeOutputWithContext(context.Context) WebhookPatchTypeOutput
}

// Webhook connects to a third party API server to handle the secrets generation
// configuration parameters in spec.
// You can specify the server, the token, and additional body parameters.
// See documentation for the full API specification for requests and responses.
type WebhookPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     WebhookSpecPatchPtrInput       `pulumi:"spec"`
}

func (WebhookPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookPatchType)(nil)).Elem()
}

func (i WebhookPatchTypeArgs) ToWebhookPatchTypeOutput() WebhookPatchTypeOutput {
	return i.ToWebhookPatchTypeOutputWithContext(context.Background())
}

func (i WebhookPatchTypeArgs) ToWebhookPatchTypeOutputWithContext(ctx context.Context) WebhookPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookPatchTypeOutput)
}

// Webhook connects to a third party API server to handle the secrets generation
// configuration parameters in spec.
// You can specify the server, the token, and additional body parameters.
// See documentation for the full API specification for requests and responses.
type WebhookPatchTypeOutput struct{ *pulumi.OutputState }

func (WebhookPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookPatchType)(nil)).Elem()
}

func (o WebhookPatchTypeOutput) ToWebhookPatchTypeOutput() WebhookPatchTypeOutput {
	return o
}

func (o WebhookPatchTypeOutput) ToWebhookPatchTypeOutputWithContext(ctx context.Context) WebhookPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o WebhookPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o WebhookPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o WebhookPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v WebhookPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o WebhookPatchTypeOutput) Spec() WebhookSpecPatchPtrOutput {
	return o.ApplyT(func(v WebhookPatchType) *WebhookSpecPatch { return v.Spec }).(WebhookSpecPatchPtrOutput)
}

// WebhookSpec controls the behavior of the external generator. Any body parameters should be passed to the server through the parameters field.
type WebhookSpec struct {
	// Body
	Body *string `pulumi:"body"`
	// PEM encoded CA bundle used to validate webhook server certificate. Only used
	// if the Server URL is using HTTPS protocol. This parameter is ignored for
	// plain HTTP protocol connection. If not set the system root certificates
	// are used to validate the TLS connection.
	CaBundle   *string                `pulumi:"caBundle"`
	CaProvider *WebhookSpecCaProvider `pulumi:"caProvider"`
	// Headers
	Headers map[string]string `pulumi:"headers"`
	// Webhook Method
	Method *string            `pulumi:"method"`
	Result *WebhookSpecResult `pulumi:"result"`
	// Secrets to fill in templates
	// These secrets will be passed to the templating function as key value pairs under the given name
	Secrets []WebhookSpecSecrets `pulumi:"secrets"`
	// Timeout
	Timeout *string `pulumi:"timeout"`
	// Webhook url to call
	Url *string `pulumi:"url"`
}

// WebhookSpecInput is an input type that accepts WebhookSpecArgs and WebhookSpecOutput values.
// You can construct a concrete instance of `WebhookSpecInput` via:
//
//	WebhookSpecArgs{...}
type WebhookSpecInput interface {
	pulumi.Input

	ToWebhookSpecOutput() WebhookSpecOutput
	ToWebhookSpecOutputWithContext(context.Context) WebhookSpecOutput
}

// WebhookSpec controls the behavior of the external generator. Any body parameters should be passed to the server through the parameters field.
type WebhookSpecArgs struct {
	// Body
	Body pulumi.StringPtrInput `pulumi:"body"`
	// PEM encoded CA bundle used to validate webhook server certificate. Only used
	// if the Server URL is using HTTPS protocol. This parameter is ignored for
	// plain HTTP protocol connection. If not set the system root certificates
	// are used to validate the TLS connection.
	CaBundle   pulumi.StringPtrInput         `pulumi:"caBundle"`
	CaProvider WebhookSpecCaProviderPtrInput `pulumi:"caProvider"`
	// Headers
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// Webhook Method
	Method pulumi.StringPtrInput     `pulumi:"method"`
	Result WebhookSpecResultPtrInput `pulumi:"result"`
	// Secrets to fill in templates
	// These secrets will be passed to the templating function as key value pairs under the given name
	Secrets WebhookSpecSecretsArrayInput `pulumi:"secrets"`
	// Timeout
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Webhook url to call
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (WebhookSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpec)(nil)).Elem()
}

func (i WebhookSpecArgs) ToWebhookSpecOutput() WebhookSpecOutput {
	return i.ToWebhookSpecOutputWithContext(context.Background())
}

func (i WebhookSpecArgs) ToWebhookSpecOutputWithContext(ctx context.Context) WebhookSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecOutput)
}

func (i WebhookSpecArgs) ToWebhookSpecPtrOutput() WebhookSpecPtrOutput {
	return i.ToWebhookSpecPtrOutputWithContext(context.Background())
}

func (i WebhookSpecArgs) ToWebhookSpecPtrOutputWithContext(ctx context.Context) WebhookSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecOutput).ToWebhookSpecPtrOutputWithContext(ctx)
}

// WebhookSpecPtrInput is an input type that accepts WebhookSpecArgs, WebhookSpecPtr and WebhookSpecPtrOutput values.
// You can construct a concrete instance of `WebhookSpecPtrInput` via:
//
//	        WebhookSpecArgs{...}
//
//	or:
//
//	        nil
type WebhookSpecPtrInput interface {
	pulumi.Input

	ToWebhookSpecPtrOutput() WebhookSpecPtrOutput
	ToWebhookSpecPtrOutputWithContext(context.Context) WebhookSpecPtrOutput
}

type webhookSpecPtrType WebhookSpecArgs

func WebhookSpecPtr(v *WebhookSpecArgs) WebhookSpecPtrInput {
	return (*webhookSpecPtrType)(v)
}

func (*webhookSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpec)(nil)).Elem()
}

func (i *webhookSpecPtrType) ToWebhookSpecPtrOutput() WebhookSpecPtrOutput {
	return i.ToWebhookSpecPtrOutputWithContext(context.Background())
}

func (i *webhookSpecPtrType) ToWebhookSpecPtrOutputWithContext(ctx context.Context) WebhookSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecPtrOutput)
}

// WebhookSpec controls the behavior of the external generator. Any body parameters should be passed to the server through the parameters field.
type WebhookSpecOutput struct{ *pulumi.OutputState }

func (WebhookSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpec)(nil)).Elem()
}

func (o WebhookSpecOutput) ToWebhookSpecOutput() WebhookSpecOutput {
	return o
}

func (o WebhookSpecOutput) ToWebhookSpecOutputWithContext(ctx context.Context) WebhookSpecOutput {
	return o
}

func (o WebhookSpecOutput) ToWebhookSpecPtrOutput() WebhookSpecPtrOutput {
	return o.ToWebhookSpecPtrOutputWithContext(context.Background())
}

func (o WebhookSpecOutput) ToWebhookSpecPtrOutputWithContext(ctx context.Context) WebhookSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebhookSpec) *WebhookSpec {
		return &v
	}).(WebhookSpecPtrOutput)
}

// Body
func (o WebhookSpecOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpec) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// PEM encoded CA bundle used to validate webhook server certificate. Only used
// if the Server URL is using HTTPS protocol. This parameter is ignored for
// plain HTTP protocol connection. If not set the system root certificates
// are used to validate the TLS connection.
func (o WebhookSpecOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpec) *string { return v.CaBundle }).(pulumi.StringPtrOutput)
}

func (o WebhookSpecOutput) CaProvider() WebhookSpecCaProviderPtrOutput {
	return o.ApplyT(func(v WebhookSpec) *WebhookSpecCaProvider { return v.CaProvider }).(WebhookSpecCaProviderPtrOutput)
}

// Headers
func (o WebhookSpecOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v WebhookSpec) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// Webhook Method
func (o WebhookSpecOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpec) *string { return v.Method }).(pulumi.StringPtrOutput)
}

func (o WebhookSpecOutput) Result() WebhookSpecResultPtrOutput {
	return o.ApplyT(func(v WebhookSpec) *WebhookSpecResult { return v.Result }).(WebhookSpecResultPtrOutput)
}

// Secrets to fill in templates
// These secrets will be passed to the templating function as key value pairs under the given name
func (o WebhookSpecOutput) Secrets() WebhookSpecSecretsArrayOutput {
	return o.ApplyT(func(v WebhookSpec) []WebhookSpecSecrets { return v.Secrets }).(WebhookSpecSecretsArrayOutput)
}

// Timeout
func (o WebhookSpecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Webhook url to call
func (o WebhookSpecOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpec) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type WebhookSpecPtrOutput struct{ *pulumi.OutputState }

func (WebhookSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpec)(nil)).Elem()
}

func (o WebhookSpecPtrOutput) ToWebhookSpecPtrOutput() WebhookSpecPtrOutput {
	return o
}

func (o WebhookSpecPtrOutput) ToWebhookSpecPtrOutputWithContext(ctx context.Context) WebhookSpecPtrOutput {
	return o
}

func (o WebhookSpecPtrOutput) Elem() WebhookSpecOutput {
	return o.ApplyT(func(v *WebhookSpec) WebhookSpec {
		if v != nil {
			return *v
		}
		var ret WebhookSpec
		return ret
	}).(WebhookSpecOutput)
}

// Body
func (o WebhookSpecPtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpec) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// PEM encoded CA bundle used to validate webhook server certificate. Only used
// if the Server URL is using HTTPS protocol. This parameter is ignored for
// plain HTTP protocol connection. If not set the system root certificates
// are used to validate the TLS connection.
func (o WebhookSpecPtrOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpec) *string {
		if v == nil {
			return nil
		}
		return v.CaBundle
	}).(pulumi.StringPtrOutput)
}

func (o WebhookSpecPtrOutput) CaProvider() WebhookSpecCaProviderPtrOutput {
	return o.ApplyT(func(v *WebhookSpec) *WebhookSpecCaProvider {
		if v == nil {
			return nil
		}
		return v.CaProvider
	}).(WebhookSpecCaProviderPtrOutput)
}

// Headers
func (o WebhookSpecPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WebhookSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// Webhook Method
func (o WebhookSpecPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpec) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

func (o WebhookSpecPtrOutput) Result() WebhookSpecResultPtrOutput {
	return o.ApplyT(func(v *WebhookSpec) *WebhookSpecResult {
		if v == nil {
			return nil
		}
		return v.Result
	}).(WebhookSpecResultPtrOutput)
}

// Secrets to fill in templates
// These secrets will be passed to the templating function as key value pairs under the given name
func (o WebhookSpecPtrOutput) Secrets() WebhookSpecSecretsArrayOutput {
	return o.ApplyT(func(v *WebhookSpec) []WebhookSpecSecrets {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(WebhookSpecSecretsArrayOutput)
}

// Timeout
func (o WebhookSpecPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpec) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Webhook url to call
func (o WebhookSpecPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpec) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// The provider for the CA bundle to use to validate webhook server certificate.
type WebhookSpecCaProvider struct {
	// The key the value inside of the provider type to use, only used with "Secret" type
	Key *string `pulumi:"key"`
	// The name of the object located at the provider type.
	Name *string `pulumi:"name"`
	// The namespace the Provider type is in.
	Namespace *string `pulumi:"namespace"`
	// The type of provider to use such as "Secret", or "ConfigMap".
	Type *string `pulumi:"type"`
}

// WebhookSpecCaProviderInput is an input type that accepts WebhookSpecCaProviderArgs and WebhookSpecCaProviderOutput values.
// You can construct a concrete instance of `WebhookSpecCaProviderInput` via:
//
//	WebhookSpecCaProviderArgs{...}
type WebhookSpecCaProviderInput interface {
	pulumi.Input

	ToWebhookSpecCaProviderOutput() WebhookSpecCaProviderOutput
	ToWebhookSpecCaProviderOutputWithContext(context.Context) WebhookSpecCaProviderOutput
}

// The provider for the CA bundle to use to validate webhook server certificate.
type WebhookSpecCaProviderArgs struct {
	// The key the value inside of the provider type to use, only used with "Secret" type
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the object located at the provider type.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace the Provider type is in.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The type of provider to use such as "Secret", or "ConfigMap".
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (WebhookSpecCaProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecCaProvider)(nil)).Elem()
}

func (i WebhookSpecCaProviderArgs) ToWebhookSpecCaProviderOutput() WebhookSpecCaProviderOutput {
	return i.ToWebhookSpecCaProviderOutputWithContext(context.Background())
}

func (i WebhookSpecCaProviderArgs) ToWebhookSpecCaProviderOutputWithContext(ctx context.Context) WebhookSpecCaProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecCaProviderOutput)
}

func (i WebhookSpecCaProviderArgs) ToWebhookSpecCaProviderPtrOutput() WebhookSpecCaProviderPtrOutput {
	return i.ToWebhookSpecCaProviderPtrOutputWithContext(context.Background())
}

func (i WebhookSpecCaProviderArgs) ToWebhookSpecCaProviderPtrOutputWithContext(ctx context.Context) WebhookSpecCaProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecCaProviderOutput).ToWebhookSpecCaProviderPtrOutputWithContext(ctx)
}

// WebhookSpecCaProviderPtrInput is an input type that accepts WebhookSpecCaProviderArgs, WebhookSpecCaProviderPtr and WebhookSpecCaProviderPtrOutput values.
// You can construct a concrete instance of `WebhookSpecCaProviderPtrInput` via:
//
//	        WebhookSpecCaProviderArgs{...}
//
//	or:
//
//	        nil
type WebhookSpecCaProviderPtrInput interface {
	pulumi.Input

	ToWebhookSpecCaProviderPtrOutput() WebhookSpecCaProviderPtrOutput
	ToWebhookSpecCaProviderPtrOutputWithContext(context.Context) WebhookSpecCaProviderPtrOutput
}

type webhookSpecCaProviderPtrType WebhookSpecCaProviderArgs

func WebhookSpecCaProviderPtr(v *WebhookSpecCaProviderArgs) WebhookSpecCaProviderPtrInput {
	return (*webhookSpecCaProviderPtrType)(v)
}

func (*webhookSpecCaProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecCaProvider)(nil)).Elem()
}

func (i *webhookSpecCaProviderPtrType) ToWebhookSpecCaProviderPtrOutput() WebhookSpecCaProviderPtrOutput {
	return i.ToWebhookSpecCaProviderPtrOutputWithContext(context.Background())
}

func (i *webhookSpecCaProviderPtrType) ToWebhookSpecCaProviderPtrOutputWithContext(ctx context.Context) WebhookSpecCaProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecCaProviderPtrOutput)
}

// The provider for the CA bundle to use to validate webhook server certificate.
type WebhookSpecCaProviderOutput struct{ *pulumi.OutputState }

func (WebhookSpecCaProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecCaProvider)(nil)).Elem()
}

func (o WebhookSpecCaProviderOutput) ToWebhookSpecCaProviderOutput() WebhookSpecCaProviderOutput {
	return o
}

func (o WebhookSpecCaProviderOutput) ToWebhookSpecCaProviderOutputWithContext(ctx context.Context) WebhookSpecCaProviderOutput {
	return o
}

func (o WebhookSpecCaProviderOutput) ToWebhookSpecCaProviderPtrOutput() WebhookSpecCaProviderPtrOutput {
	return o.ToWebhookSpecCaProviderPtrOutputWithContext(context.Background())
}

func (o WebhookSpecCaProviderOutput) ToWebhookSpecCaProviderPtrOutputWithContext(ctx context.Context) WebhookSpecCaProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebhookSpecCaProvider) *WebhookSpecCaProvider {
		return &v
	}).(WebhookSpecCaProviderPtrOutput)
}

// The key the value inside of the provider type to use, only used with "Secret" type
func (o WebhookSpecCaProviderOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecCaProvider) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the object located at the provider type.
func (o WebhookSpecCaProviderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecCaProvider) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace the Provider type is in.
func (o WebhookSpecCaProviderOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecCaProvider) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The type of provider to use such as "Secret", or "ConfigMap".
func (o WebhookSpecCaProviderOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecCaProvider) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type WebhookSpecCaProviderPtrOutput struct{ *pulumi.OutputState }

func (WebhookSpecCaProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecCaProvider)(nil)).Elem()
}

func (o WebhookSpecCaProviderPtrOutput) ToWebhookSpecCaProviderPtrOutput() WebhookSpecCaProviderPtrOutput {
	return o
}

func (o WebhookSpecCaProviderPtrOutput) ToWebhookSpecCaProviderPtrOutputWithContext(ctx context.Context) WebhookSpecCaProviderPtrOutput {
	return o
}

func (o WebhookSpecCaProviderPtrOutput) Elem() WebhookSpecCaProviderOutput {
	return o.ApplyT(func(v *WebhookSpecCaProvider) WebhookSpecCaProvider {
		if v != nil {
			return *v
		}
		var ret WebhookSpecCaProvider
		return ret
	}).(WebhookSpecCaProviderOutput)
}

// The key the value inside of the provider type to use, only used with "Secret" type
func (o WebhookSpecCaProviderPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecCaProvider) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the object located at the provider type.
func (o WebhookSpecCaProviderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecCaProvider) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace the Provider type is in.
func (o WebhookSpecCaProviderPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecCaProvider) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The type of provider to use such as "Secret", or "ConfigMap".
func (o WebhookSpecCaProviderPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecCaProvider) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The provider for the CA bundle to use to validate webhook server certificate.
type WebhookSpecCaProviderPatch struct {
	// The key the value inside of the provider type to use, only used with "Secret" type
	Key *string `pulumi:"key"`
	// The name of the object located at the provider type.
	Name *string `pulumi:"name"`
	// The namespace the Provider type is in.
	Namespace *string `pulumi:"namespace"`
	// The type of provider to use such as "Secret", or "ConfigMap".
	Type *string `pulumi:"type"`
}

// WebhookSpecCaProviderPatchInput is an input type that accepts WebhookSpecCaProviderPatchArgs and WebhookSpecCaProviderPatchOutput values.
// You can construct a concrete instance of `WebhookSpecCaProviderPatchInput` via:
//
//	WebhookSpecCaProviderPatchArgs{...}
type WebhookSpecCaProviderPatchInput interface {
	pulumi.Input

	ToWebhookSpecCaProviderPatchOutput() WebhookSpecCaProviderPatchOutput
	ToWebhookSpecCaProviderPatchOutputWithContext(context.Context) WebhookSpecCaProviderPatchOutput
}

// The provider for the CA bundle to use to validate webhook server certificate.
type WebhookSpecCaProviderPatchArgs struct {
	// The key the value inside of the provider type to use, only used with "Secret" type
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the object located at the provider type.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace the Provider type is in.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The type of provider to use such as "Secret", or "ConfigMap".
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (WebhookSpecCaProviderPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecCaProviderPatch)(nil)).Elem()
}

func (i WebhookSpecCaProviderPatchArgs) ToWebhookSpecCaProviderPatchOutput() WebhookSpecCaProviderPatchOutput {
	return i.ToWebhookSpecCaProviderPatchOutputWithContext(context.Background())
}

func (i WebhookSpecCaProviderPatchArgs) ToWebhookSpecCaProviderPatchOutputWithContext(ctx context.Context) WebhookSpecCaProviderPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecCaProviderPatchOutput)
}

func (i WebhookSpecCaProviderPatchArgs) ToWebhookSpecCaProviderPatchPtrOutput() WebhookSpecCaProviderPatchPtrOutput {
	return i.ToWebhookSpecCaProviderPatchPtrOutputWithContext(context.Background())
}

func (i WebhookSpecCaProviderPatchArgs) ToWebhookSpecCaProviderPatchPtrOutputWithContext(ctx context.Context) WebhookSpecCaProviderPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecCaProviderPatchOutput).ToWebhookSpecCaProviderPatchPtrOutputWithContext(ctx)
}

// WebhookSpecCaProviderPatchPtrInput is an input type that accepts WebhookSpecCaProviderPatchArgs, WebhookSpecCaProviderPatchPtr and WebhookSpecCaProviderPatchPtrOutput values.
// You can construct a concrete instance of `WebhookSpecCaProviderPatchPtrInput` via:
//
//	        WebhookSpecCaProviderPatchArgs{...}
//
//	or:
//
//	        nil
type WebhookSpecCaProviderPatchPtrInput interface {
	pulumi.Input

	ToWebhookSpecCaProviderPatchPtrOutput() WebhookSpecCaProviderPatchPtrOutput
	ToWebhookSpecCaProviderPatchPtrOutputWithContext(context.Context) WebhookSpecCaProviderPatchPtrOutput
}

type webhookSpecCaProviderPatchPtrType WebhookSpecCaProviderPatchArgs

func WebhookSpecCaProviderPatchPtr(v *WebhookSpecCaProviderPatchArgs) WebhookSpecCaProviderPatchPtrInput {
	return (*webhookSpecCaProviderPatchPtrType)(v)
}

func (*webhookSpecCaProviderPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecCaProviderPatch)(nil)).Elem()
}

func (i *webhookSpecCaProviderPatchPtrType) ToWebhookSpecCaProviderPatchPtrOutput() WebhookSpecCaProviderPatchPtrOutput {
	return i.ToWebhookSpecCaProviderPatchPtrOutputWithContext(context.Background())
}

func (i *webhookSpecCaProviderPatchPtrType) ToWebhookSpecCaProviderPatchPtrOutputWithContext(ctx context.Context) WebhookSpecCaProviderPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecCaProviderPatchPtrOutput)
}

// The provider for the CA bundle to use to validate webhook server certificate.
type WebhookSpecCaProviderPatchOutput struct{ *pulumi.OutputState }

func (WebhookSpecCaProviderPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecCaProviderPatch)(nil)).Elem()
}

func (o WebhookSpecCaProviderPatchOutput) ToWebhookSpecCaProviderPatchOutput() WebhookSpecCaProviderPatchOutput {
	return o
}

func (o WebhookSpecCaProviderPatchOutput) ToWebhookSpecCaProviderPatchOutputWithContext(ctx context.Context) WebhookSpecCaProviderPatchOutput {
	return o
}

func (o WebhookSpecCaProviderPatchOutput) ToWebhookSpecCaProviderPatchPtrOutput() WebhookSpecCaProviderPatchPtrOutput {
	return o.ToWebhookSpecCaProviderPatchPtrOutputWithContext(context.Background())
}

func (o WebhookSpecCaProviderPatchOutput) ToWebhookSpecCaProviderPatchPtrOutputWithContext(ctx context.Context) WebhookSpecCaProviderPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebhookSpecCaProviderPatch) *WebhookSpecCaProviderPatch {
		return &v
	}).(WebhookSpecCaProviderPatchPtrOutput)
}

// The key the value inside of the provider type to use, only used with "Secret" type
func (o WebhookSpecCaProviderPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecCaProviderPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the object located at the provider type.
func (o WebhookSpecCaProviderPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecCaProviderPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace the Provider type is in.
func (o WebhookSpecCaProviderPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecCaProviderPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The type of provider to use such as "Secret", or "ConfigMap".
func (o WebhookSpecCaProviderPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecCaProviderPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type WebhookSpecCaProviderPatchPtrOutput struct{ *pulumi.OutputState }

func (WebhookSpecCaProviderPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecCaProviderPatch)(nil)).Elem()
}

func (o WebhookSpecCaProviderPatchPtrOutput) ToWebhookSpecCaProviderPatchPtrOutput() WebhookSpecCaProviderPatchPtrOutput {
	return o
}

func (o WebhookSpecCaProviderPatchPtrOutput) ToWebhookSpecCaProviderPatchPtrOutputWithContext(ctx context.Context) WebhookSpecCaProviderPatchPtrOutput {
	return o
}

func (o WebhookSpecCaProviderPatchPtrOutput) Elem() WebhookSpecCaProviderPatchOutput {
	return o.ApplyT(func(v *WebhookSpecCaProviderPatch) WebhookSpecCaProviderPatch {
		if v != nil {
			return *v
		}
		var ret WebhookSpecCaProviderPatch
		return ret
	}).(WebhookSpecCaProviderPatchOutput)
}

// The key the value inside of the provider type to use, only used with "Secret" type
func (o WebhookSpecCaProviderPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecCaProviderPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the object located at the provider type.
func (o WebhookSpecCaProviderPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecCaProviderPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace the Provider type is in.
func (o WebhookSpecCaProviderPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecCaProviderPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The type of provider to use such as "Secret", or "ConfigMap".
func (o WebhookSpecCaProviderPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecCaProviderPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// WebhookSpec controls the behavior of the external generator. Any body parameters should be passed to the server through the parameters field.
type WebhookSpecPatch struct {
	// Body
	Body *string `pulumi:"body"`
	// PEM encoded CA bundle used to validate webhook server certificate. Only used
	// if the Server URL is using HTTPS protocol. This parameter is ignored for
	// plain HTTP protocol connection. If not set the system root certificates
	// are used to validate the TLS connection.
	CaBundle   *string                     `pulumi:"caBundle"`
	CaProvider *WebhookSpecCaProviderPatch `pulumi:"caProvider"`
	// Headers
	Headers map[string]string `pulumi:"headers"`
	// Webhook Method
	Method *string                 `pulumi:"method"`
	Result *WebhookSpecResultPatch `pulumi:"result"`
	// Secrets to fill in templates
	// These secrets will be passed to the templating function as key value pairs under the given name
	Secrets []WebhookSpecSecretsPatch `pulumi:"secrets"`
	// Timeout
	Timeout *string `pulumi:"timeout"`
	// Webhook url to call
	Url *string `pulumi:"url"`
}

// WebhookSpecPatchInput is an input type that accepts WebhookSpecPatchArgs and WebhookSpecPatchOutput values.
// You can construct a concrete instance of `WebhookSpecPatchInput` via:
//
//	WebhookSpecPatchArgs{...}
type WebhookSpecPatchInput interface {
	pulumi.Input

	ToWebhookSpecPatchOutput() WebhookSpecPatchOutput
	ToWebhookSpecPatchOutputWithContext(context.Context) WebhookSpecPatchOutput
}

// WebhookSpec controls the behavior of the external generator. Any body parameters should be passed to the server through the parameters field.
type WebhookSpecPatchArgs struct {
	// Body
	Body pulumi.StringPtrInput `pulumi:"body"`
	// PEM encoded CA bundle used to validate webhook server certificate. Only used
	// if the Server URL is using HTTPS protocol. This parameter is ignored for
	// plain HTTP protocol connection. If not set the system root certificates
	// are used to validate the TLS connection.
	CaBundle   pulumi.StringPtrInput              `pulumi:"caBundle"`
	CaProvider WebhookSpecCaProviderPatchPtrInput `pulumi:"caProvider"`
	// Headers
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// Webhook Method
	Method pulumi.StringPtrInput          `pulumi:"method"`
	Result WebhookSpecResultPatchPtrInput `pulumi:"result"`
	// Secrets to fill in templates
	// These secrets will be passed to the templating function as key value pairs under the given name
	Secrets WebhookSpecSecretsPatchArrayInput `pulumi:"secrets"`
	// Timeout
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Webhook url to call
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (WebhookSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecPatch)(nil)).Elem()
}

func (i WebhookSpecPatchArgs) ToWebhookSpecPatchOutput() WebhookSpecPatchOutput {
	return i.ToWebhookSpecPatchOutputWithContext(context.Background())
}

func (i WebhookSpecPatchArgs) ToWebhookSpecPatchOutputWithContext(ctx context.Context) WebhookSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecPatchOutput)
}

func (i WebhookSpecPatchArgs) ToWebhookSpecPatchPtrOutput() WebhookSpecPatchPtrOutput {
	return i.ToWebhookSpecPatchPtrOutputWithContext(context.Background())
}

func (i WebhookSpecPatchArgs) ToWebhookSpecPatchPtrOutputWithContext(ctx context.Context) WebhookSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecPatchOutput).ToWebhookSpecPatchPtrOutputWithContext(ctx)
}

// WebhookSpecPatchPtrInput is an input type that accepts WebhookSpecPatchArgs, WebhookSpecPatchPtr and WebhookSpecPatchPtrOutput values.
// You can construct a concrete instance of `WebhookSpecPatchPtrInput` via:
//
//	        WebhookSpecPatchArgs{...}
//
//	or:
//
//	        nil
type WebhookSpecPatchPtrInput interface {
	pulumi.Input

	ToWebhookSpecPatchPtrOutput() WebhookSpecPatchPtrOutput
	ToWebhookSpecPatchPtrOutputWithContext(context.Context) WebhookSpecPatchPtrOutput
}

type webhookSpecPatchPtrType WebhookSpecPatchArgs

func WebhookSpecPatchPtr(v *WebhookSpecPatchArgs) WebhookSpecPatchPtrInput {
	return (*webhookSpecPatchPtrType)(v)
}

func (*webhookSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecPatch)(nil)).Elem()
}

func (i *webhookSpecPatchPtrType) ToWebhookSpecPatchPtrOutput() WebhookSpecPatchPtrOutput {
	return i.ToWebhookSpecPatchPtrOutputWithContext(context.Background())
}

func (i *webhookSpecPatchPtrType) ToWebhookSpecPatchPtrOutputWithContext(ctx context.Context) WebhookSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecPatchPtrOutput)
}

// WebhookSpec controls the behavior of the external generator. Any body parameters should be passed to the server through the parameters field.
type WebhookSpecPatchOutput struct{ *pulumi.OutputState }

func (WebhookSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecPatch)(nil)).Elem()
}

func (o WebhookSpecPatchOutput) ToWebhookSpecPatchOutput() WebhookSpecPatchOutput {
	return o
}

func (o WebhookSpecPatchOutput) ToWebhookSpecPatchOutputWithContext(ctx context.Context) WebhookSpecPatchOutput {
	return o
}

func (o WebhookSpecPatchOutput) ToWebhookSpecPatchPtrOutput() WebhookSpecPatchPtrOutput {
	return o.ToWebhookSpecPatchPtrOutputWithContext(context.Background())
}

func (o WebhookSpecPatchOutput) ToWebhookSpecPatchPtrOutputWithContext(ctx context.Context) WebhookSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebhookSpecPatch) *WebhookSpecPatch {
		return &v
	}).(WebhookSpecPatchPtrOutput)
}

// Body
func (o WebhookSpecPatchOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecPatch) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// PEM encoded CA bundle used to validate webhook server certificate. Only used
// if the Server URL is using HTTPS protocol. This parameter is ignored for
// plain HTTP protocol connection. If not set the system root certificates
// are used to validate the TLS connection.
func (o WebhookSpecPatchOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecPatch) *string { return v.CaBundle }).(pulumi.StringPtrOutput)
}

func (o WebhookSpecPatchOutput) CaProvider() WebhookSpecCaProviderPatchPtrOutput {
	return o.ApplyT(func(v WebhookSpecPatch) *WebhookSpecCaProviderPatch { return v.CaProvider }).(WebhookSpecCaProviderPatchPtrOutput)
}

// Headers
func (o WebhookSpecPatchOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v WebhookSpecPatch) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// Webhook Method
func (o WebhookSpecPatchOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecPatch) *string { return v.Method }).(pulumi.StringPtrOutput)
}

func (o WebhookSpecPatchOutput) Result() WebhookSpecResultPatchPtrOutput {
	return o.ApplyT(func(v WebhookSpecPatch) *WebhookSpecResultPatch { return v.Result }).(WebhookSpecResultPatchPtrOutput)
}

// Secrets to fill in templates
// These secrets will be passed to the templating function as key value pairs under the given name
func (o WebhookSpecPatchOutput) Secrets() WebhookSpecSecretsPatchArrayOutput {
	return o.ApplyT(func(v WebhookSpecPatch) []WebhookSpecSecretsPatch { return v.Secrets }).(WebhookSpecSecretsPatchArrayOutput)
}

// Timeout
func (o WebhookSpecPatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecPatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Webhook url to call
func (o WebhookSpecPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type WebhookSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (WebhookSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecPatch)(nil)).Elem()
}

func (o WebhookSpecPatchPtrOutput) ToWebhookSpecPatchPtrOutput() WebhookSpecPatchPtrOutput {
	return o
}

func (o WebhookSpecPatchPtrOutput) ToWebhookSpecPatchPtrOutputWithContext(ctx context.Context) WebhookSpecPatchPtrOutput {
	return o
}

func (o WebhookSpecPatchPtrOutput) Elem() WebhookSpecPatchOutput {
	return o.ApplyT(func(v *WebhookSpecPatch) WebhookSpecPatch {
		if v != nil {
			return *v
		}
		var ret WebhookSpecPatch
		return ret
	}).(WebhookSpecPatchOutput)
}

// Body
func (o WebhookSpecPatchPtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// PEM encoded CA bundle used to validate webhook server certificate. Only used
// if the Server URL is using HTTPS protocol. This parameter is ignored for
// plain HTTP protocol connection. If not set the system root certificates
// are used to validate the TLS connection.
func (o WebhookSpecPatchPtrOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.CaBundle
	}).(pulumi.StringPtrOutput)
}

func (o WebhookSpecPatchPtrOutput) CaProvider() WebhookSpecCaProviderPatchPtrOutput {
	return o.ApplyT(func(v *WebhookSpecPatch) *WebhookSpecCaProviderPatch {
		if v == nil {
			return nil
		}
		return v.CaProvider
	}).(WebhookSpecCaProviderPatchPtrOutput)
}

// Headers
func (o WebhookSpecPatchPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WebhookSpecPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// Webhook Method
func (o WebhookSpecPatchPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

func (o WebhookSpecPatchPtrOutput) Result() WebhookSpecResultPatchPtrOutput {
	return o.ApplyT(func(v *WebhookSpecPatch) *WebhookSpecResultPatch {
		if v == nil {
			return nil
		}
		return v.Result
	}).(WebhookSpecResultPatchPtrOutput)
}

// Secrets to fill in templates
// These secrets will be passed to the templating function as key value pairs under the given name
func (o WebhookSpecPatchPtrOutput) Secrets() WebhookSpecSecretsPatchArrayOutput {
	return o.ApplyT(func(v *WebhookSpecPatch) []WebhookSpecSecretsPatch {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(WebhookSpecSecretsPatchArrayOutput)
}

// Timeout
func (o WebhookSpecPatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Webhook url to call
func (o WebhookSpecPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Result formatting
type WebhookSpecResult struct {
	// Json path of return value
	JsonPath *string `pulumi:"jsonPath"`
}

// WebhookSpecResultInput is an input type that accepts WebhookSpecResultArgs and WebhookSpecResultOutput values.
// You can construct a concrete instance of `WebhookSpecResultInput` via:
//
//	WebhookSpecResultArgs{...}
type WebhookSpecResultInput interface {
	pulumi.Input

	ToWebhookSpecResultOutput() WebhookSpecResultOutput
	ToWebhookSpecResultOutputWithContext(context.Context) WebhookSpecResultOutput
}

// Result formatting
type WebhookSpecResultArgs struct {
	// Json path of return value
	JsonPath pulumi.StringPtrInput `pulumi:"jsonPath"`
}

func (WebhookSpecResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecResult)(nil)).Elem()
}

func (i WebhookSpecResultArgs) ToWebhookSpecResultOutput() WebhookSpecResultOutput {
	return i.ToWebhookSpecResultOutputWithContext(context.Background())
}

func (i WebhookSpecResultArgs) ToWebhookSpecResultOutputWithContext(ctx context.Context) WebhookSpecResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecResultOutput)
}

func (i WebhookSpecResultArgs) ToWebhookSpecResultPtrOutput() WebhookSpecResultPtrOutput {
	return i.ToWebhookSpecResultPtrOutputWithContext(context.Background())
}

func (i WebhookSpecResultArgs) ToWebhookSpecResultPtrOutputWithContext(ctx context.Context) WebhookSpecResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecResultOutput).ToWebhookSpecResultPtrOutputWithContext(ctx)
}

// WebhookSpecResultPtrInput is an input type that accepts WebhookSpecResultArgs, WebhookSpecResultPtr and WebhookSpecResultPtrOutput values.
// You can construct a concrete instance of `WebhookSpecResultPtrInput` via:
//
//	        WebhookSpecResultArgs{...}
//
//	or:
//
//	        nil
type WebhookSpecResultPtrInput interface {
	pulumi.Input

	ToWebhookSpecResultPtrOutput() WebhookSpecResultPtrOutput
	ToWebhookSpecResultPtrOutputWithContext(context.Context) WebhookSpecResultPtrOutput
}

type webhookSpecResultPtrType WebhookSpecResultArgs

func WebhookSpecResultPtr(v *WebhookSpecResultArgs) WebhookSpecResultPtrInput {
	return (*webhookSpecResultPtrType)(v)
}

func (*webhookSpecResultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecResult)(nil)).Elem()
}

func (i *webhookSpecResultPtrType) ToWebhookSpecResultPtrOutput() WebhookSpecResultPtrOutput {
	return i.ToWebhookSpecResultPtrOutputWithContext(context.Background())
}

func (i *webhookSpecResultPtrType) ToWebhookSpecResultPtrOutputWithContext(ctx context.Context) WebhookSpecResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecResultPtrOutput)
}

// Result formatting
type WebhookSpecResultOutput struct{ *pulumi.OutputState }

func (WebhookSpecResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecResult)(nil)).Elem()
}

func (o WebhookSpecResultOutput) ToWebhookSpecResultOutput() WebhookSpecResultOutput {
	return o
}

func (o WebhookSpecResultOutput) ToWebhookSpecResultOutputWithContext(ctx context.Context) WebhookSpecResultOutput {
	return o
}

func (o WebhookSpecResultOutput) ToWebhookSpecResultPtrOutput() WebhookSpecResultPtrOutput {
	return o.ToWebhookSpecResultPtrOutputWithContext(context.Background())
}

func (o WebhookSpecResultOutput) ToWebhookSpecResultPtrOutputWithContext(ctx context.Context) WebhookSpecResultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebhookSpecResult) *WebhookSpecResult {
		return &v
	}).(WebhookSpecResultPtrOutput)
}

// Json path of return value
func (o WebhookSpecResultOutput) JsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecResult) *string { return v.JsonPath }).(pulumi.StringPtrOutput)
}

type WebhookSpecResultPtrOutput struct{ *pulumi.OutputState }

func (WebhookSpecResultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecResult)(nil)).Elem()
}

func (o WebhookSpecResultPtrOutput) ToWebhookSpecResultPtrOutput() WebhookSpecResultPtrOutput {
	return o
}

func (o WebhookSpecResultPtrOutput) ToWebhookSpecResultPtrOutputWithContext(ctx context.Context) WebhookSpecResultPtrOutput {
	return o
}

func (o WebhookSpecResultPtrOutput) Elem() WebhookSpecResultOutput {
	return o.ApplyT(func(v *WebhookSpecResult) WebhookSpecResult {
		if v != nil {
			return *v
		}
		var ret WebhookSpecResult
		return ret
	}).(WebhookSpecResultOutput)
}

// Json path of return value
func (o WebhookSpecResultPtrOutput) JsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecResult) *string {
		if v == nil {
			return nil
		}
		return v.JsonPath
	}).(pulumi.StringPtrOutput)
}

// Result formatting
type WebhookSpecResultPatch struct {
	// Json path of return value
	JsonPath *string `pulumi:"jsonPath"`
}

// WebhookSpecResultPatchInput is an input type that accepts WebhookSpecResultPatchArgs and WebhookSpecResultPatchOutput values.
// You can construct a concrete instance of `WebhookSpecResultPatchInput` via:
//
//	WebhookSpecResultPatchArgs{...}
type WebhookSpecResultPatchInput interface {
	pulumi.Input

	ToWebhookSpecResultPatchOutput() WebhookSpecResultPatchOutput
	ToWebhookSpecResultPatchOutputWithContext(context.Context) WebhookSpecResultPatchOutput
}

// Result formatting
type WebhookSpecResultPatchArgs struct {
	// Json path of return value
	JsonPath pulumi.StringPtrInput `pulumi:"jsonPath"`
}

func (WebhookSpecResultPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecResultPatch)(nil)).Elem()
}

func (i WebhookSpecResultPatchArgs) ToWebhookSpecResultPatchOutput() WebhookSpecResultPatchOutput {
	return i.ToWebhookSpecResultPatchOutputWithContext(context.Background())
}

func (i WebhookSpecResultPatchArgs) ToWebhookSpecResultPatchOutputWithContext(ctx context.Context) WebhookSpecResultPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecResultPatchOutput)
}

func (i WebhookSpecResultPatchArgs) ToWebhookSpecResultPatchPtrOutput() WebhookSpecResultPatchPtrOutput {
	return i.ToWebhookSpecResultPatchPtrOutputWithContext(context.Background())
}

func (i WebhookSpecResultPatchArgs) ToWebhookSpecResultPatchPtrOutputWithContext(ctx context.Context) WebhookSpecResultPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecResultPatchOutput).ToWebhookSpecResultPatchPtrOutputWithContext(ctx)
}

// WebhookSpecResultPatchPtrInput is an input type that accepts WebhookSpecResultPatchArgs, WebhookSpecResultPatchPtr and WebhookSpecResultPatchPtrOutput values.
// You can construct a concrete instance of `WebhookSpecResultPatchPtrInput` via:
//
//	        WebhookSpecResultPatchArgs{...}
//
//	or:
//
//	        nil
type WebhookSpecResultPatchPtrInput interface {
	pulumi.Input

	ToWebhookSpecResultPatchPtrOutput() WebhookSpecResultPatchPtrOutput
	ToWebhookSpecResultPatchPtrOutputWithContext(context.Context) WebhookSpecResultPatchPtrOutput
}

type webhookSpecResultPatchPtrType WebhookSpecResultPatchArgs

func WebhookSpecResultPatchPtr(v *WebhookSpecResultPatchArgs) WebhookSpecResultPatchPtrInput {
	return (*webhookSpecResultPatchPtrType)(v)
}

func (*webhookSpecResultPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecResultPatch)(nil)).Elem()
}

func (i *webhookSpecResultPatchPtrType) ToWebhookSpecResultPatchPtrOutput() WebhookSpecResultPatchPtrOutput {
	return i.ToWebhookSpecResultPatchPtrOutputWithContext(context.Background())
}

func (i *webhookSpecResultPatchPtrType) ToWebhookSpecResultPatchPtrOutputWithContext(ctx context.Context) WebhookSpecResultPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecResultPatchPtrOutput)
}

// Result formatting
type WebhookSpecResultPatchOutput struct{ *pulumi.OutputState }

func (WebhookSpecResultPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecResultPatch)(nil)).Elem()
}

func (o WebhookSpecResultPatchOutput) ToWebhookSpecResultPatchOutput() WebhookSpecResultPatchOutput {
	return o
}

func (o WebhookSpecResultPatchOutput) ToWebhookSpecResultPatchOutputWithContext(ctx context.Context) WebhookSpecResultPatchOutput {
	return o
}

func (o WebhookSpecResultPatchOutput) ToWebhookSpecResultPatchPtrOutput() WebhookSpecResultPatchPtrOutput {
	return o.ToWebhookSpecResultPatchPtrOutputWithContext(context.Background())
}

func (o WebhookSpecResultPatchOutput) ToWebhookSpecResultPatchPtrOutputWithContext(ctx context.Context) WebhookSpecResultPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebhookSpecResultPatch) *WebhookSpecResultPatch {
		return &v
	}).(WebhookSpecResultPatchPtrOutput)
}

// Json path of return value
func (o WebhookSpecResultPatchOutput) JsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecResultPatch) *string { return v.JsonPath }).(pulumi.StringPtrOutput)
}

type WebhookSpecResultPatchPtrOutput struct{ *pulumi.OutputState }

func (WebhookSpecResultPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecResultPatch)(nil)).Elem()
}

func (o WebhookSpecResultPatchPtrOutput) ToWebhookSpecResultPatchPtrOutput() WebhookSpecResultPatchPtrOutput {
	return o
}

func (o WebhookSpecResultPatchPtrOutput) ToWebhookSpecResultPatchPtrOutputWithContext(ctx context.Context) WebhookSpecResultPatchPtrOutput {
	return o
}

func (o WebhookSpecResultPatchPtrOutput) Elem() WebhookSpecResultPatchOutput {
	return o.ApplyT(func(v *WebhookSpecResultPatch) WebhookSpecResultPatch {
		if v != nil {
			return *v
		}
		var ret WebhookSpecResultPatch
		return ret
	}).(WebhookSpecResultPatchOutput)
}

// Json path of return value
func (o WebhookSpecResultPatchPtrOutput) JsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecResultPatch) *string {
		if v == nil {
			return nil
		}
		return v.JsonPath
	}).(pulumi.StringPtrOutput)
}

type WebhookSpecSecrets struct {
	// Name of this secret in templates
	Name      *string                      `pulumi:"name"`
	SecretRef *WebhookSpecSecretsSecretRef `pulumi:"secretRef"`
}

// WebhookSpecSecretsInput is an input type that accepts WebhookSpecSecretsArgs and WebhookSpecSecretsOutput values.
// You can construct a concrete instance of `WebhookSpecSecretsInput` via:
//
//	WebhookSpecSecretsArgs{...}
type WebhookSpecSecretsInput interface {
	pulumi.Input

	ToWebhookSpecSecretsOutput() WebhookSpecSecretsOutput
	ToWebhookSpecSecretsOutputWithContext(context.Context) WebhookSpecSecretsOutput
}

type WebhookSpecSecretsArgs struct {
	// Name of this secret in templates
	Name      pulumi.StringPtrInput               `pulumi:"name"`
	SecretRef WebhookSpecSecretsSecretRefPtrInput `pulumi:"secretRef"`
}

func (WebhookSpecSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecSecrets)(nil)).Elem()
}

func (i WebhookSpecSecretsArgs) ToWebhookSpecSecretsOutput() WebhookSpecSecretsOutput {
	return i.ToWebhookSpecSecretsOutputWithContext(context.Background())
}

func (i WebhookSpecSecretsArgs) ToWebhookSpecSecretsOutputWithContext(ctx context.Context) WebhookSpecSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecSecretsOutput)
}

// WebhookSpecSecretsArrayInput is an input type that accepts WebhookSpecSecretsArray and WebhookSpecSecretsArrayOutput values.
// You can construct a concrete instance of `WebhookSpecSecretsArrayInput` via:
//
//	WebhookSpecSecretsArray{ WebhookSpecSecretsArgs{...} }
type WebhookSpecSecretsArrayInput interface {
	pulumi.Input

	ToWebhookSpecSecretsArrayOutput() WebhookSpecSecretsArrayOutput
	ToWebhookSpecSecretsArrayOutputWithContext(context.Context) WebhookSpecSecretsArrayOutput
}

type WebhookSpecSecretsArray []WebhookSpecSecretsInput

func (WebhookSpecSecretsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookSpecSecrets)(nil)).Elem()
}

func (i WebhookSpecSecretsArray) ToWebhookSpecSecretsArrayOutput() WebhookSpecSecretsArrayOutput {
	return i.ToWebhookSpecSecretsArrayOutputWithContext(context.Background())
}

func (i WebhookSpecSecretsArray) ToWebhookSpecSecretsArrayOutputWithContext(ctx context.Context) WebhookSpecSecretsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecSecretsArrayOutput)
}

type WebhookSpecSecretsOutput struct{ *pulumi.OutputState }

func (WebhookSpecSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecSecrets)(nil)).Elem()
}

func (o WebhookSpecSecretsOutput) ToWebhookSpecSecretsOutput() WebhookSpecSecretsOutput {
	return o
}

func (o WebhookSpecSecretsOutput) ToWebhookSpecSecretsOutputWithContext(ctx context.Context) WebhookSpecSecretsOutput {
	return o
}

// Name of this secret in templates
func (o WebhookSpecSecretsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecSecrets) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o WebhookSpecSecretsOutput) SecretRef() WebhookSpecSecretsSecretRefPtrOutput {
	return o.ApplyT(func(v WebhookSpecSecrets) *WebhookSpecSecretsSecretRef { return v.SecretRef }).(WebhookSpecSecretsSecretRefPtrOutput)
}

type WebhookSpecSecretsArrayOutput struct{ *pulumi.OutputState }

func (WebhookSpecSecretsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookSpecSecrets)(nil)).Elem()
}

func (o WebhookSpecSecretsArrayOutput) ToWebhookSpecSecretsArrayOutput() WebhookSpecSecretsArrayOutput {
	return o
}

func (o WebhookSpecSecretsArrayOutput) ToWebhookSpecSecretsArrayOutputWithContext(ctx context.Context) WebhookSpecSecretsArrayOutput {
	return o
}

func (o WebhookSpecSecretsArrayOutput) Index(i pulumi.IntInput) WebhookSpecSecretsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookSpecSecrets {
		return vs[0].([]WebhookSpecSecrets)[vs[1].(int)]
	}).(WebhookSpecSecretsOutput)
}

type WebhookSpecSecretsPatch struct {
	// Name of this secret in templates
	Name      *string                           `pulumi:"name"`
	SecretRef *WebhookSpecSecretsSecretRefPatch `pulumi:"secretRef"`
}

// WebhookSpecSecretsPatchInput is an input type that accepts WebhookSpecSecretsPatchArgs and WebhookSpecSecretsPatchOutput values.
// You can construct a concrete instance of `WebhookSpecSecretsPatchInput` via:
//
//	WebhookSpecSecretsPatchArgs{...}
type WebhookSpecSecretsPatchInput interface {
	pulumi.Input

	ToWebhookSpecSecretsPatchOutput() WebhookSpecSecretsPatchOutput
	ToWebhookSpecSecretsPatchOutputWithContext(context.Context) WebhookSpecSecretsPatchOutput
}

type WebhookSpecSecretsPatchArgs struct {
	// Name of this secret in templates
	Name      pulumi.StringPtrInput                    `pulumi:"name"`
	SecretRef WebhookSpecSecretsSecretRefPatchPtrInput `pulumi:"secretRef"`
}

func (WebhookSpecSecretsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecSecretsPatch)(nil)).Elem()
}

func (i WebhookSpecSecretsPatchArgs) ToWebhookSpecSecretsPatchOutput() WebhookSpecSecretsPatchOutput {
	return i.ToWebhookSpecSecretsPatchOutputWithContext(context.Background())
}

func (i WebhookSpecSecretsPatchArgs) ToWebhookSpecSecretsPatchOutputWithContext(ctx context.Context) WebhookSpecSecretsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecSecretsPatchOutput)
}

// WebhookSpecSecretsPatchArrayInput is an input type that accepts WebhookSpecSecretsPatchArray and WebhookSpecSecretsPatchArrayOutput values.
// You can construct a concrete instance of `WebhookSpecSecretsPatchArrayInput` via:
//
//	WebhookSpecSecretsPatchArray{ WebhookSpecSecretsPatchArgs{...} }
type WebhookSpecSecretsPatchArrayInput interface {
	pulumi.Input

	ToWebhookSpecSecretsPatchArrayOutput() WebhookSpecSecretsPatchArrayOutput
	ToWebhookSpecSecretsPatchArrayOutputWithContext(context.Context) WebhookSpecSecretsPatchArrayOutput
}

type WebhookSpecSecretsPatchArray []WebhookSpecSecretsPatchInput

func (WebhookSpecSecretsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookSpecSecretsPatch)(nil)).Elem()
}

func (i WebhookSpecSecretsPatchArray) ToWebhookSpecSecretsPatchArrayOutput() WebhookSpecSecretsPatchArrayOutput {
	return i.ToWebhookSpecSecretsPatchArrayOutputWithContext(context.Background())
}

func (i WebhookSpecSecretsPatchArray) ToWebhookSpecSecretsPatchArrayOutputWithContext(ctx context.Context) WebhookSpecSecretsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecSecretsPatchArrayOutput)
}

type WebhookSpecSecretsPatchOutput struct{ *pulumi.OutputState }

func (WebhookSpecSecretsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecSecretsPatch)(nil)).Elem()
}

func (o WebhookSpecSecretsPatchOutput) ToWebhookSpecSecretsPatchOutput() WebhookSpecSecretsPatchOutput {
	return o
}

func (o WebhookSpecSecretsPatchOutput) ToWebhookSpecSecretsPatchOutputWithContext(ctx context.Context) WebhookSpecSecretsPatchOutput {
	return o
}

// Name of this secret in templates
func (o WebhookSpecSecretsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecSecretsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o WebhookSpecSecretsPatchOutput) SecretRef() WebhookSpecSecretsSecretRefPatchPtrOutput {
	return o.ApplyT(func(v WebhookSpecSecretsPatch) *WebhookSpecSecretsSecretRefPatch { return v.SecretRef }).(WebhookSpecSecretsSecretRefPatchPtrOutput)
}

type WebhookSpecSecretsPatchArrayOutput struct{ *pulumi.OutputState }

func (WebhookSpecSecretsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookSpecSecretsPatch)(nil)).Elem()
}

func (o WebhookSpecSecretsPatchArrayOutput) ToWebhookSpecSecretsPatchArrayOutput() WebhookSpecSecretsPatchArrayOutput {
	return o
}

func (o WebhookSpecSecretsPatchArrayOutput) ToWebhookSpecSecretsPatchArrayOutputWithContext(ctx context.Context) WebhookSpecSecretsPatchArrayOutput {
	return o
}

func (o WebhookSpecSecretsPatchArrayOutput) Index(i pulumi.IntInput) WebhookSpecSecretsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookSpecSecretsPatch {
		return vs[0].([]WebhookSpecSecretsPatch)[vs[1].(int)]
	}).(WebhookSpecSecretsPatchOutput)
}

// Secret ref to fill in credentials
type WebhookSpecSecretsSecretRef struct {
	// The key where the token is found.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
}

// WebhookSpecSecretsSecretRefInput is an input type that accepts WebhookSpecSecretsSecretRefArgs and WebhookSpecSecretsSecretRefOutput values.
// You can construct a concrete instance of `WebhookSpecSecretsSecretRefInput` via:
//
//	WebhookSpecSecretsSecretRefArgs{...}
type WebhookSpecSecretsSecretRefInput interface {
	pulumi.Input

	ToWebhookSpecSecretsSecretRefOutput() WebhookSpecSecretsSecretRefOutput
	ToWebhookSpecSecretsSecretRefOutputWithContext(context.Context) WebhookSpecSecretsSecretRefOutput
}

// Secret ref to fill in credentials
type WebhookSpecSecretsSecretRefArgs struct {
	// The key where the token is found.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (WebhookSpecSecretsSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecSecretsSecretRef)(nil)).Elem()
}

func (i WebhookSpecSecretsSecretRefArgs) ToWebhookSpecSecretsSecretRefOutput() WebhookSpecSecretsSecretRefOutput {
	return i.ToWebhookSpecSecretsSecretRefOutputWithContext(context.Background())
}

func (i WebhookSpecSecretsSecretRefArgs) ToWebhookSpecSecretsSecretRefOutputWithContext(ctx context.Context) WebhookSpecSecretsSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecSecretsSecretRefOutput)
}

func (i WebhookSpecSecretsSecretRefArgs) ToWebhookSpecSecretsSecretRefPtrOutput() WebhookSpecSecretsSecretRefPtrOutput {
	return i.ToWebhookSpecSecretsSecretRefPtrOutputWithContext(context.Background())
}

func (i WebhookSpecSecretsSecretRefArgs) ToWebhookSpecSecretsSecretRefPtrOutputWithContext(ctx context.Context) WebhookSpecSecretsSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecSecretsSecretRefOutput).ToWebhookSpecSecretsSecretRefPtrOutputWithContext(ctx)
}

// WebhookSpecSecretsSecretRefPtrInput is an input type that accepts WebhookSpecSecretsSecretRefArgs, WebhookSpecSecretsSecretRefPtr and WebhookSpecSecretsSecretRefPtrOutput values.
// You can construct a concrete instance of `WebhookSpecSecretsSecretRefPtrInput` via:
//
//	        WebhookSpecSecretsSecretRefArgs{...}
//
//	or:
//
//	        nil
type WebhookSpecSecretsSecretRefPtrInput interface {
	pulumi.Input

	ToWebhookSpecSecretsSecretRefPtrOutput() WebhookSpecSecretsSecretRefPtrOutput
	ToWebhookSpecSecretsSecretRefPtrOutputWithContext(context.Context) WebhookSpecSecretsSecretRefPtrOutput
}

type webhookSpecSecretsSecretRefPtrType WebhookSpecSecretsSecretRefArgs

func WebhookSpecSecretsSecretRefPtr(v *WebhookSpecSecretsSecretRefArgs) WebhookSpecSecretsSecretRefPtrInput {
	return (*webhookSpecSecretsSecretRefPtrType)(v)
}

func (*webhookSpecSecretsSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecSecretsSecretRef)(nil)).Elem()
}

func (i *webhookSpecSecretsSecretRefPtrType) ToWebhookSpecSecretsSecretRefPtrOutput() WebhookSpecSecretsSecretRefPtrOutput {
	return i.ToWebhookSpecSecretsSecretRefPtrOutputWithContext(context.Background())
}

func (i *webhookSpecSecretsSecretRefPtrType) ToWebhookSpecSecretsSecretRefPtrOutputWithContext(ctx context.Context) WebhookSpecSecretsSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecSecretsSecretRefPtrOutput)
}

// Secret ref to fill in credentials
type WebhookSpecSecretsSecretRefOutput struct{ *pulumi.OutputState }

func (WebhookSpecSecretsSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecSecretsSecretRef)(nil)).Elem()
}

func (o WebhookSpecSecretsSecretRefOutput) ToWebhookSpecSecretsSecretRefOutput() WebhookSpecSecretsSecretRefOutput {
	return o
}

func (o WebhookSpecSecretsSecretRefOutput) ToWebhookSpecSecretsSecretRefOutputWithContext(ctx context.Context) WebhookSpecSecretsSecretRefOutput {
	return o
}

func (o WebhookSpecSecretsSecretRefOutput) ToWebhookSpecSecretsSecretRefPtrOutput() WebhookSpecSecretsSecretRefPtrOutput {
	return o.ToWebhookSpecSecretsSecretRefPtrOutputWithContext(context.Background())
}

func (o WebhookSpecSecretsSecretRefOutput) ToWebhookSpecSecretsSecretRefPtrOutputWithContext(ctx context.Context) WebhookSpecSecretsSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebhookSpecSecretsSecretRef) *WebhookSpecSecretsSecretRef {
		return &v
	}).(WebhookSpecSecretsSecretRefPtrOutput)
}

// The key where the token is found.
func (o WebhookSpecSecretsSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecSecretsSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o WebhookSpecSecretsSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecSecretsSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type WebhookSpecSecretsSecretRefPtrOutput struct{ *pulumi.OutputState }

func (WebhookSpecSecretsSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecSecretsSecretRef)(nil)).Elem()
}

func (o WebhookSpecSecretsSecretRefPtrOutput) ToWebhookSpecSecretsSecretRefPtrOutput() WebhookSpecSecretsSecretRefPtrOutput {
	return o
}

func (o WebhookSpecSecretsSecretRefPtrOutput) ToWebhookSpecSecretsSecretRefPtrOutputWithContext(ctx context.Context) WebhookSpecSecretsSecretRefPtrOutput {
	return o
}

func (o WebhookSpecSecretsSecretRefPtrOutput) Elem() WebhookSpecSecretsSecretRefOutput {
	return o.ApplyT(func(v *WebhookSpecSecretsSecretRef) WebhookSpecSecretsSecretRef {
		if v != nil {
			return *v
		}
		var ret WebhookSpecSecretsSecretRef
		return ret
	}).(WebhookSpecSecretsSecretRefOutput)
}

// The key where the token is found.
func (o WebhookSpecSecretsSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecSecretsSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o WebhookSpecSecretsSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecSecretsSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Secret ref to fill in credentials
type WebhookSpecSecretsSecretRefPatch struct {
	// The key where the token is found.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
}

// WebhookSpecSecretsSecretRefPatchInput is an input type that accepts WebhookSpecSecretsSecretRefPatchArgs and WebhookSpecSecretsSecretRefPatchOutput values.
// You can construct a concrete instance of `WebhookSpecSecretsSecretRefPatchInput` via:
//
//	WebhookSpecSecretsSecretRefPatchArgs{...}
type WebhookSpecSecretsSecretRefPatchInput interface {
	pulumi.Input

	ToWebhookSpecSecretsSecretRefPatchOutput() WebhookSpecSecretsSecretRefPatchOutput
	ToWebhookSpecSecretsSecretRefPatchOutputWithContext(context.Context) WebhookSpecSecretsSecretRefPatchOutput
}

// Secret ref to fill in credentials
type WebhookSpecSecretsSecretRefPatchArgs struct {
	// The key where the token is found.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (WebhookSpecSecretsSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecSecretsSecretRefPatch)(nil)).Elem()
}

func (i WebhookSpecSecretsSecretRefPatchArgs) ToWebhookSpecSecretsSecretRefPatchOutput() WebhookSpecSecretsSecretRefPatchOutput {
	return i.ToWebhookSpecSecretsSecretRefPatchOutputWithContext(context.Background())
}

func (i WebhookSpecSecretsSecretRefPatchArgs) ToWebhookSpecSecretsSecretRefPatchOutputWithContext(ctx context.Context) WebhookSpecSecretsSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecSecretsSecretRefPatchOutput)
}

func (i WebhookSpecSecretsSecretRefPatchArgs) ToWebhookSpecSecretsSecretRefPatchPtrOutput() WebhookSpecSecretsSecretRefPatchPtrOutput {
	return i.ToWebhookSpecSecretsSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i WebhookSpecSecretsSecretRefPatchArgs) ToWebhookSpecSecretsSecretRefPatchPtrOutputWithContext(ctx context.Context) WebhookSpecSecretsSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecSecretsSecretRefPatchOutput).ToWebhookSpecSecretsSecretRefPatchPtrOutputWithContext(ctx)
}

// WebhookSpecSecretsSecretRefPatchPtrInput is an input type that accepts WebhookSpecSecretsSecretRefPatchArgs, WebhookSpecSecretsSecretRefPatchPtr and WebhookSpecSecretsSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `WebhookSpecSecretsSecretRefPatchPtrInput` via:
//
//	        WebhookSpecSecretsSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type WebhookSpecSecretsSecretRefPatchPtrInput interface {
	pulumi.Input

	ToWebhookSpecSecretsSecretRefPatchPtrOutput() WebhookSpecSecretsSecretRefPatchPtrOutput
	ToWebhookSpecSecretsSecretRefPatchPtrOutputWithContext(context.Context) WebhookSpecSecretsSecretRefPatchPtrOutput
}

type webhookSpecSecretsSecretRefPatchPtrType WebhookSpecSecretsSecretRefPatchArgs

func WebhookSpecSecretsSecretRefPatchPtr(v *WebhookSpecSecretsSecretRefPatchArgs) WebhookSpecSecretsSecretRefPatchPtrInput {
	return (*webhookSpecSecretsSecretRefPatchPtrType)(v)
}

func (*webhookSpecSecretsSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecSecretsSecretRefPatch)(nil)).Elem()
}

func (i *webhookSpecSecretsSecretRefPatchPtrType) ToWebhookSpecSecretsSecretRefPatchPtrOutput() WebhookSpecSecretsSecretRefPatchPtrOutput {
	return i.ToWebhookSpecSecretsSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *webhookSpecSecretsSecretRefPatchPtrType) ToWebhookSpecSecretsSecretRefPatchPtrOutputWithContext(ctx context.Context) WebhookSpecSecretsSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecSecretsSecretRefPatchPtrOutput)
}

// Secret ref to fill in credentials
type WebhookSpecSecretsSecretRefPatchOutput struct{ *pulumi.OutputState }

func (WebhookSpecSecretsSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecSecretsSecretRefPatch)(nil)).Elem()
}

func (o WebhookSpecSecretsSecretRefPatchOutput) ToWebhookSpecSecretsSecretRefPatchOutput() WebhookSpecSecretsSecretRefPatchOutput {
	return o
}

func (o WebhookSpecSecretsSecretRefPatchOutput) ToWebhookSpecSecretsSecretRefPatchOutputWithContext(ctx context.Context) WebhookSpecSecretsSecretRefPatchOutput {
	return o
}

func (o WebhookSpecSecretsSecretRefPatchOutput) ToWebhookSpecSecretsSecretRefPatchPtrOutput() WebhookSpecSecretsSecretRefPatchPtrOutput {
	return o.ToWebhookSpecSecretsSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o WebhookSpecSecretsSecretRefPatchOutput) ToWebhookSpecSecretsSecretRefPatchPtrOutputWithContext(ctx context.Context) WebhookSpecSecretsSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebhookSpecSecretsSecretRefPatch) *WebhookSpecSecretsSecretRefPatch {
		return &v
	}).(WebhookSpecSecretsSecretRefPatchPtrOutput)
}

// The key where the token is found.
func (o WebhookSpecSecretsSecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecSecretsSecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o WebhookSpecSecretsSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecSecretsSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type WebhookSpecSecretsSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (WebhookSpecSecretsSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecSecretsSecretRefPatch)(nil)).Elem()
}

func (o WebhookSpecSecretsSecretRefPatchPtrOutput) ToWebhookSpecSecretsSecretRefPatchPtrOutput() WebhookSpecSecretsSecretRefPatchPtrOutput {
	return o
}

func (o WebhookSpecSecretsSecretRefPatchPtrOutput) ToWebhookSpecSecretsSecretRefPatchPtrOutputWithContext(ctx context.Context) WebhookSpecSecretsSecretRefPatchPtrOutput {
	return o
}

func (o WebhookSpecSecretsSecretRefPatchPtrOutput) Elem() WebhookSpecSecretsSecretRefPatchOutput {
	return o.ApplyT(func(v *WebhookSpecSecretsSecretRefPatch) WebhookSpecSecretsSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret WebhookSpecSecretsSecretRefPatch
		return ret
	}).(WebhookSpecSecretsSecretRefPatchOutput)
}

// The key where the token is found.
func (o WebhookSpecSecretsSecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecSecretsSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o WebhookSpecSecretsSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecSecretsSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenTypeInput)(nil)).Elem(), ACRAccessTokenTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenTypeArrayInput)(nil)).Elem(), ACRAccessTokenTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenListTypeInput)(nil)).Elem(), ACRAccessTokenListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenPatchTypeInput)(nil)).Elem(), ACRAccessTokenPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecInput)(nil)).Elem(), ACRAccessTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecPtrInput)(nil)).Elem(), ACRAccessTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthInput)(nil)).Elem(), ACRAccessTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthManagedIdentityInput)(nil)).Elem(), ACRAccessTokenSpecAuthManagedIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthManagedIdentityPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthManagedIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthManagedIdentityPatchInput)(nil)).Elem(), ACRAccessTokenSpecAuthManagedIdentityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthManagedIdentityPatchPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthManagedIdentityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthPatchInput)(nil)).Elem(), ACRAccessTokenSpecAuthPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthPatchPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalPatchInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalPatchPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityInput)(nil)).Elem(), ACRAccessTokenSpecAuthWorkloadIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthWorkloadIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityPatchInput)(nil)).Elem(), ACRAccessTokenSpecAuthWorkloadIdentityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthWorkloadIdentityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput)(nil)).Elem(), ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchInput)(nil)).Elem(), ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecPatchInput)(nil)).Elem(), ACRAccessTokenSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecPatchPtrInput)(nil)).Elem(), ACRAccessTokenSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenTypeInput)(nil)).Elem(), ECRAuthorizationTokenTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenTypeArrayInput)(nil)).Elem(), ECRAuthorizationTokenTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenListTypeInput)(nil)).Elem(), ECRAuthorizationTokenListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenPatchTypeInput)(nil)).Elem(), ECRAuthorizationTokenPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecInput)(nil)).Elem(), ECRAuthorizationTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthJwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthJwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtPatchInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthJwtPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtPatchPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthJwtPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtServiceAccountRefInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthPatchInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthPatchPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefPatchInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefPatchPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecPatchInput)(nil)).Elem(), ECRAuthorizationTokenSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecPatchPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakeTypeInput)(nil)).Elem(), FakeTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakeTypeArrayInput)(nil)).Elem(), FakeTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakeListTypeInput)(nil)).Elem(), FakeListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakePatchTypeInput)(nil)).Elem(), FakePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakeSpecInput)(nil)).Elem(), FakeSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakeSpecPtrInput)(nil)).Elem(), FakeSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakeSpecPatchInput)(nil)).Elem(), FakeSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakeSpecPatchPtrInput)(nil)).Elem(), FakeSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenTypeInput)(nil)).Elem(), GCRAccessTokenTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenTypeArrayInput)(nil)).Elem(), GCRAccessTokenTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenListTypeInput)(nil)).Elem(), GCRAccessTokenListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenPatchTypeInput)(nil)).Elem(), GCRAccessTokenPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecInput)(nil)).Elem(), GCRAccessTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecPtrInput)(nil)).Elem(), GCRAccessTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthInput)(nil)).Elem(), GCRAccessTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthPtrInput)(nil)).Elem(), GCRAccessTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthPatchInput)(nil)).Elem(), GCRAccessTokenSpecAuthPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthPatchPtrInput)(nil)).Elem(), GCRAccessTokenSpecAuthPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefInput)(nil)).Elem(), GCRAccessTokenSpecAuthSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefPtrInput)(nil)).Elem(), GCRAccessTokenSpecAuthSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefPatchInput)(nil)).Elem(), GCRAccessTokenSpecAuthSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefPatchPtrInput)(nil)).Elem(), GCRAccessTokenSpecAuthSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefInput)(nil)).Elem(), GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput)(nil)).Elem(), GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchInput)(nil)).Elem(), GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrInput)(nil)).Elem(), GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityInput)(nil)).Elem(), GCRAccessTokenSpecAuthWorkloadIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityPtrInput)(nil)).Elem(), GCRAccessTokenSpecAuthWorkloadIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityPatchInput)(nil)).Elem(), GCRAccessTokenSpecAuthWorkloadIdentityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrInput)(nil)).Elem(), GCRAccessTokenSpecAuthWorkloadIdentityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput)(nil)).Elem(), GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput)(nil)).Elem(), GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchInput)(nil)).Elem(), GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrInput)(nil)).Elem(), GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecPatchInput)(nil)).Elem(), GCRAccessTokenSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecPatchPtrInput)(nil)).Elem(), GCRAccessTokenSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenTypeInput)(nil)).Elem(), GithubAccessTokenTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenTypeArrayInput)(nil)).Elem(), GithubAccessTokenTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenListTypeInput)(nil)).Elem(), GithubAccessTokenListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenPatchTypeInput)(nil)).Elem(), GithubAccessTokenPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecInput)(nil)).Elem(), GithubAccessTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecPtrInput)(nil)).Elem(), GithubAccessTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthInput)(nil)).Elem(), GithubAccessTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPtrInput)(nil)).Elem(), GithubAccessTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPatchInput)(nil)).Elem(), GithubAccessTokenSpecAuthPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPatchPtrInput)(nil)).Elem(), GithubAccessTokenSpecAuthPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeyInput)(nil)).Elem(), GithubAccessTokenSpecAuthPrivateKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeyPtrInput)(nil)).Elem(), GithubAccessTokenSpecAuthPrivateKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeyPatchInput)(nil)).Elem(), GithubAccessTokenSpecAuthPrivateKeyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeyPatchPtrInput)(nil)).Elem(), GithubAccessTokenSpecAuthPrivateKeyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeySecretRefInput)(nil)).Elem(), GithubAccessTokenSpecAuthPrivateKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeySecretRefPtrInput)(nil)).Elem(), GithubAccessTokenSpecAuthPrivateKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeySecretRefPatchInput)(nil)).Elem(), GithubAccessTokenSpecAuthPrivateKeySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrInput)(nil)).Elem(), GithubAccessTokenSpecAuthPrivateKeySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecPatchInput)(nil)).Elem(), GithubAccessTokenSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecPatchPtrInput)(nil)).Elem(), GithubAccessTokenSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordTypeInput)(nil)).Elem(), PasswordTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordTypeArrayInput)(nil)).Elem(), PasswordTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordListTypeInput)(nil)).Elem(), PasswordListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordPatchTypeInput)(nil)).Elem(), PasswordPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordSpecInput)(nil)).Elem(), PasswordSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordSpecPtrInput)(nil)).Elem(), PasswordSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordSpecPatchInput)(nil)).Elem(), PasswordSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordSpecPatchPtrInput)(nil)).Elem(), PasswordSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretTypeInput)(nil)).Elem(), VaultDynamicSecretTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretTypeArrayInput)(nil)).Elem(), VaultDynamicSecretTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretListTypeInput)(nil)).Elem(), VaultDynamicSecretListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretPatchTypeInput)(nil)).Elem(), VaultDynamicSecretPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecInput)(nil)).Elem(), VaultDynamicSecretSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecPtrInput)(nil)).Elem(), VaultDynamicSecretSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecPatchInput)(nil)).Elem(), VaultDynamicSecretSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderInput)(nil)).Elem(), VaultDynamicSecretSpecProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRolePtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRolePatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRolePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRolePatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRolePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleRoleRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertClientCertInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertClientCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertClientCertPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertClientCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertClientCertPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertClientCertPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertClientCertPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertSecretRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamJwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamJwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamJwtPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamJwtPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthLdapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthLdapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthLdapPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthLdapPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthTokenSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthUserPassArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthUserPassArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthUserPassPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthUserPassPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderCaProviderInput)(nil)).Elem(), VaultDynamicSecretSpecProviderCaProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderCaProviderPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderCaProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderCaProviderPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderCaProviderPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderCaProviderPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderCaProviderPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsCertSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsCertSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsCertSecretRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsKeySecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsKeySecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsKeySecretRefPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsKeySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsKeySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsPatchInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsPatchPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookTypeInput)(nil)).Elem(), WebhookTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookTypeArrayInput)(nil)).Elem(), WebhookTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookListTypeInput)(nil)).Elem(), WebhookListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookPatchTypeInput)(nil)).Elem(), WebhookPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecInput)(nil)).Elem(), WebhookSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecPtrInput)(nil)).Elem(), WebhookSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecCaProviderInput)(nil)).Elem(), WebhookSpecCaProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecCaProviderPtrInput)(nil)).Elem(), WebhookSpecCaProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecCaProviderPatchInput)(nil)).Elem(), WebhookSpecCaProviderPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecCaProviderPatchPtrInput)(nil)).Elem(), WebhookSpecCaProviderPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecPatchInput)(nil)).Elem(), WebhookSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecPatchPtrInput)(nil)).Elem(), WebhookSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecResultInput)(nil)).Elem(), WebhookSpecResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecResultPtrInput)(nil)).Elem(), WebhookSpecResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecResultPatchInput)(nil)).Elem(), WebhookSpecResultPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecResultPatchPtrInput)(nil)).Elem(), WebhookSpecResultPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecSecretsInput)(nil)).Elem(), WebhookSpecSecretsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecSecretsArrayInput)(nil)).Elem(), WebhookSpecSecretsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecSecretsPatchInput)(nil)).Elem(), WebhookSpecSecretsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecSecretsPatchArrayInput)(nil)).Elem(), WebhookSpecSecretsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecSecretsSecretRefInput)(nil)).Elem(), WebhookSpecSecretsSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecSecretsSecretRefPtrInput)(nil)).Elem(), WebhookSpecSecretsSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecSecretsSecretRefPatchInput)(nil)).Elem(), WebhookSpecSecretsSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecSecretsSecretRefPatchPtrInput)(nil)).Elem(), WebhookSpecSecretsSecretRefPatchArgs{})
	pulumi.RegisterOutputType(ACRAccessTokenTypeOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenTypeArrayOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenListTypeOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenPatchTypeOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthManagedIdentityOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthManagedIdentityPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthManagedIdentityPatchOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthManagedIdentityPatchPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthPatchOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthPatchPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalPatchOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalPatchPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPatchPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPatchPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthWorkloadIdentityOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthWorkloadIdentityPatchOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecPatchOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenTypeOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenTypeArrayOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenListTypeOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenPatchTypeOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthJwtOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthJwtPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthJwtPatchOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthJwtPatchPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthPatchOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthPatchPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecPatchOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(FakeTypeOutput{})
	pulumi.RegisterOutputType(FakeTypeArrayOutput{})
	pulumi.RegisterOutputType(FakeListTypeOutput{})
	pulumi.RegisterOutputType(FakePatchTypeOutput{})
	pulumi.RegisterOutputType(FakeSpecOutput{})
	pulumi.RegisterOutputType(FakeSpecPtrOutput{})
	pulumi.RegisterOutputType(FakeSpecPatchOutput{})
	pulumi.RegisterOutputType(FakeSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenTypeOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenTypeArrayOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenListTypeOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenPatchTypeOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthPatchOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthPatchPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthSecretRefOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthSecretRefPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthSecretRefPatchOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthWorkloadIdentityOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthWorkloadIdentityPatchOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthWorkloadIdentityPatchPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecPatchOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenTypeOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenTypeArrayOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenListTypeOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenPatchTypeOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecPtrOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPtrOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPatchOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPatchPtrOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPrivateKeyOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPrivateKeyPtrOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPrivateKeyPatchOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPrivateKeyPatchPtrOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPrivateKeySecretRefOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPrivateKeySecretRefPatchOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPrivateKeySecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecPatchOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(PasswordTypeOutput{})
	pulumi.RegisterOutputType(PasswordTypeArrayOutput{})
	pulumi.RegisterOutputType(PasswordListTypeOutput{})
	pulumi.RegisterOutputType(PasswordPatchTypeOutput{})
	pulumi.RegisterOutputType(PasswordSpecOutput{})
	pulumi.RegisterOutputType(PasswordSpecPtrOutput{})
	pulumi.RegisterOutputType(PasswordSpecPatchOutput{})
	pulumi.RegisterOutputType(PasswordSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretTypeOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretTypeArrayOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretListTypeOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretPatchTypeOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRoleOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRolePtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRolePatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRolePatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertClientCertOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertClientCertPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertClientCertPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertSecretRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamJwtOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamJwtPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamJwtPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthLdapOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthLdapPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthLdapPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthLdapPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthLdapSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthTokenSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthUserPassOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthUserPassPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthUserPassPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthUserPassPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderCaProviderOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderCaProviderPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderCaProviderPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderCaProviderPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsCertSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsCertSecretRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsCertSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsKeySecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsKeySecretRefPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsKeySecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsPatchPtrOutput{})
	pulumi.RegisterOutputType(WebhookTypeOutput{})
	pulumi.RegisterOutputType(WebhookTypeArrayOutput{})
	pulumi.RegisterOutputType(WebhookListTypeOutput{})
	pulumi.RegisterOutputType(WebhookPatchTypeOutput{})
	pulumi.RegisterOutputType(WebhookSpecOutput{})
	pulumi.RegisterOutputType(WebhookSpecPtrOutput{})
	pulumi.RegisterOutputType(WebhookSpecCaProviderOutput{})
	pulumi.RegisterOutputType(WebhookSpecCaProviderPtrOutput{})
	pulumi.RegisterOutputType(WebhookSpecCaProviderPatchOutput{})
	pulumi.RegisterOutputType(WebhookSpecCaProviderPatchPtrOutput{})
	pulumi.RegisterOutputType(WebhookSpecPatchOutput{})
	pulumi.RegisterOutputType(WebhookSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(WebhookSpecResultOutput{})
	pulumi.RegisterOutputType(WebhookSpecResultPtrOutput{})
	pulumi.RegisterOutputType(WebhookSpecResultPatchOutput{})
	pulumi.RegisterOutputType(WebhookSpecResultPatchPtrOutput{})
	pulumi.RegisterOutputType(WebhookSpecSecretsOutput{})
	pulumi.RegisterOutputType(WebhookSpecSecretsArrayOutput{})
	pulumi.RegisterOutputType(WebhookSpecSecretsPatchOutput{})
	pulumi.RegisterOutputType(WebhookSpecSecretsPatchArrayOutput{})
	pulumi.RegisterOutputType(WebhookSpecSecretsSecretRefOutput{})
	pulumi.RegisterOutputType(WebhookSpecSecretsSecretRefPtrOutput{})
	pulumi.RegisterOutputType(WebhookSpecSecretsSecretRefPatchOutput{})
	pulumi.RegisterOutputType(WebhookSpecSecretsSecretRefPatchPtrOutput{})
}
