// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GCRAccessToken generates an GCP access token
// that can be used to authenticate with GCR.
type GCRAccessToken struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput  `pulumi:"metadata"`
	Spec     GCRAccessTokenSpecOutput `pulumi:"spec"`
}

// NewGCRAccessToken registers a new resource with the given unique name, arguments, and options.
func NewGCRAccessToken(ctx *pulumi.Context,
	name string, args *GCRAccessTokenArgs, opts ...pulumi.ResourceOption) (*GCRAccessToken, error) {
	if args == nil {
		args = &GCRAccessTokenArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("generators.external-secrets.io/v1alpha1")
	args.Kind = pulumi.StringPtr("GCRAccessToken")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GCRAccessToken
	err := ctx.RegisterResource("kubernetes:generators.external-secrets.io/v1alpha1:GCRAccessToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGCRAccessToken gets an existing GCRAccessToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGCRAccessToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GCRAccessTokenState, opts ...pulumi.ResourceOption) (*GCRAccessToken, error) {
	var resource GCRAccessToken
	err := ctx.ReadResource("kubernetes:generators.external-secrets.io/v1alpha1:GCRAccessToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GCRAccessToken resources.
type gcraccessTokenState struct {
}

type GCRAccessTokenState struct {
}

func (GCRAccessTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcraccessTokenState)(nil)).Elem()
}

type gcraccessTokenArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec     *GCRAccessTokenSpec `pulumi:"spec"`
}

// The set of arguments for constructing a GCRAccessToken resource.
type GCRAccessTokenArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     GCRAccessTokenSpecPtrInput
}

func (GCRAccessTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcraccessTokenArgs)(nil)).Elem()
}

type GCRAccessTokenInput interface {
	pulumi.Input

	ToGCRAccessTokenOutput() GCRAccessTokenOutput
	ToGCRAccessTokenOutputWithContext(ctx context.Context) GCRAccessTokenOutput
}

func (*GCRAccessToken) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessToken)(nil)).Elem()
}

func (i *GCRAccessToken) ToGCRAccessTokenOutput() GCRAccessTokenOutput {
	return i.ToGCRAccessTokenOutputWithContext(context.Background())
}

func (i *GCRAccessToken) ToGCRAccessTokenOutputWithContext(ctx context.Context) GCRAccessTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenOutput)
}

// GCRAccessTokenArrayInput is an input type that accepts GCRAccessTokenArray and GCRAccessTokenArrayOutput values.
// You can construct a concrete instance of `GCRAccessTokenArrayInput` via:
//
//	GCRAccessTokenArray{ GCRAccessTokenArgs{...} }
type GCRAccessTokenArrayInput interface {
	pulumi.Input

	ToGCRAccessTokenArrayOutput() GCRAccessTokenArrayOutput
	ToGCRAccessTokenArrayOutputWithContext(context.Context) GCRAccessTokenArrayOutput
}

type GCRAccessTokenArray []GCRAccessTokenInput

func (GCRAccessTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GCRAccessToken)(nil)).Elem()
}

func (i GCRAccessTokenArray) ToGCRAccessTokenArrayOutput() GCRAccessTokenArrayOutput {
	return i.ToGCRAccessTokenArrayOutputWithContext(context.Background())
}

func (i GCRAccessTokenArray) ToGCRAccessTokenArrayOutputWithContext(ctx context.Context) GCRAccessTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenArrayOutput)
}

// GCRAccessTokenMapInput is an input type that accepts GCRAccessTokenMap and GCRAccessTokenMapOutput values.
// You can construct a concrete instance of `GCRAccessTokenMapInput` via:
//
//	GCRAccessTokenMap{ "key": GCRAccessTokenArgs{...} }
type GCRAccessTokenMapInput interface {
	pulumi.Input

	ToGCRAccessTokenMapOutput() GCRAccessTokenMapOutput
	ToGCRAccessTokenMapOutputWithContext(context.Context) GCRAccessTokenMapOutput
}

type GCRAccessTokenMap map[string]GCRAccessTokenInput

func (GCRAccessTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GCRAccessToken)(nil)).Elem()
}

func (i GCRAccessTokenMap) ToGCRAccessTokenMapOutput() GCRAccessTokenMapOutput {
	return i.ToGCRAccessTokenMapOutputWithContext(context.Background())
}

func (i GCRAccessTokenMap) ToGCRAccessTokenMapOutputWithContext(ctx context.Context) GCRAccessTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenMapOutput)
}

type GCRAccessTokenOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessToken)(nil)).Elem()
}

func (o GCRAccessTokenOutput) ToGCRAccessTokenOutput() GCRAccessTokenOutput {
	return o
}

func (o GCRAccessTokenOutput) ToGCRAccessTokenOutputWithContext(ctx context.Context) GCRAccessTokenOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GCRAccessTokenOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *GCRAccessToken) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GCRAccessTokenOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *GCRAccessToken) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GCRAccessTokenOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *GCRAccessToken) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o GCRAccessTokenOutput) Spec() GCRAccessTokenSpecOutput {
	return o.ApplyT(func(v *GCRAccessToken) GCRAccessTokenSpecOutput { return v.Spec }).(GCRAccessTokenSpecOutput)
}

type GCRAccessTokenArrayOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GCRAccessToken)(nil)).Elem()
}

func (o GCRAccessTokenArrayOutput) ToGCRAccessTokenArrayOutput() GCRAccessTokenArrayOutput {
	return o
}

func (o GCRAccessTokenArrayOutput) ToGCRAccessTokenArrayOutputWithContext(ctx context.Context) GCRAccessTokenArrayOutput {
	return o
}

func (o GCRAccessTokenArrayOutput) Index(i pulumi.IntInput) GCRAccessTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GCRAccessToken {
		return vs[0].([]*GCRAccessToken)[vs[1].(int)]
	}).(GCRAccessTokenOutput)
}

type GCRAccessTokenMapOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GCRAccessToken)(nil)).Elem()
}

func (o GCRAccessTokenMapOutput) ToGCRAccessTokenMapOutput() GCRAccessTokenMapOutput {
	return o
}

func (o GCRAccessTokenMapOutput) ToGCRAccessTokenMapOutputWithContext(ctx context.Context) GCRAccessTokenMapOutput {
	return o
}

func (o GCRAccessTokenMapOutput) MapIndex(k pulumi.StringInput) GCRAccessTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GCRAccessToken {
		return vs[0].(map[string]*GCRAccessToken)[vs[1].(string)]
	}).(GCRAccessTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenInput)(nil)).Elem(), &GCRAccessToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenArrayInput)(nil)).Elem(), GCRAccessTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenMapInput)(nil)).Elem(), GCRAccessTokenMap{})
	pulumi.RegisterOutputType(GCRAccessTokenOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenArrayOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenMapOutput{})
}
