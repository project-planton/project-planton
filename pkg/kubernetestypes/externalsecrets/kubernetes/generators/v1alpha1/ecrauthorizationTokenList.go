// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ECRAuthorizationTokenList is a list of ECRAuthorizationToken
type ECRAuthorizationTokenList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of ecrauthorizationtokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ECRAuthorizationTokenTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewECRAuthorizationTokenList registers a new resource with the given unique name, arguments, and options.
func NewECRAuthorizationTokenList(ctx *pulumi.Context,
	name string, args *ECRAuthorizationTokenListArgs, opts ...pulumi.ResourceOption) (*ECRAuthorizationTokenList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("generators.external-secrets.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ECRAuthorizationTokenList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ECRAuthorizationTokenList
	err := ctx.RegisterResource("kubernetes:generators.external-secrets.io/v1alpha1:ECRAuthorizationTokenList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetECRAuthorizationTokenList gets an existing ECRAuthorizationTokenList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetECRAuthorizationTokenList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ECRAuthorizationTokenListState, opts ...pulumi.ResourceOption) (*ECRAuthorizationTokenList, error) {
	var resource ECRAuthorizationTokenList
	err := ctx.ReadResource("kubernetes:generators.external-secrets.io/v1alpha1:ECRAuthorizationTokenList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ECRAuthorizationTokenList resources.
type ecrauthorizationTokenListState struct {
}

type ECRAuthorizationTokenListState struct {
}

func (ECRAuthorizationTokenListState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecrauthorizationTokenListState)(nil)).Elem()
}

type ecrauthorizationTokenListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of ecrauthorizationtokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ECRAuthorizationTokenType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ECRAuthorizationTokenList resource.
type ECRAuthorizationTokenListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of ecrauthorizationtokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ECRAuthorizationTokenTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ECRAuthorizationTokenListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecrauthorizationTokenListArgs)(nil)).Elem()
}

type ECRAuthorizationTokenListInput interface {
	pulumi.Input

	ToECRAuthorizationTokenListOutput() ECRAuthorizationTokenListOutput
	ToECRAuthorizationTokenListOutputWithContext(ctx context.Context) ECRAuthorizationTokenListOutput
}

func (*ECRAuthorizationTokenList) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenList)(nil)).Elem()
}

func (i *ECRAuthorizationTokenList) ToECRAuthorizationTokenListOutput() ECRAuthorizationTokenListOutput {
	return i.ToECRAuthorizationTokenListOutputWithContext(context.Background())
}

func (i *ECRAuthorizationTokenList) ToECRAuthorizationTokenListOutputWithContext(ctx context.Context) ECRAuthorizationTokenListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenListOutput)
}

// ECRAuthorizationTokenListArrayInput is an input type that accepts ECRAuthorizationTokenListArray and ECRAuthorizationTokenListArrayOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenListArrayInput` via:
//
//	ECRAuthorizationTokenListArray{ ECRAuthorizationTokenListArgs{...} }
type ECRAuthorizationTokenListArrayInput interface {
	pulumi.Input

	ToECRAuthorizationTokenListArrayOutput() ECRAuthorizationTokenListArrayOutput
	ToECRAuthorizationTokenListArrayOutputWithContext(context.Context) ECRAuthorizationTokenListArrayOutput
}

type ECRAuthorizationTokenListArray []ECRAuthorizationTokenListInput

func (ECRAuthorizationTokenListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ECRAuthorizationTokenList)(nil)).Elem()
}

func (i ECRAuthorizationTokenListArray) ToECRAuthorizationTokenListArrayOutput() ECRAuthorizationTokenListArrayOutput {
	return i.ToECRAuthorizationTokenListArrayOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenListArray) ToECRAuthorizationTokenListArrayOutputWithContext(ctx context.Context) ECRAuthorizationTokenListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenListArrayOutput)
}

// ECRAuthorizationTokenListMapInput is an input type that accepts ECRAuthorizationTokenListMap and ECRAuthorizationTokenListMapOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenListMapInput` via:
//
//	ECRAuthorizationTokenListMap{ "key": ECRAuthorizationTokenListArgs{...} }
type ECRAuthorizationTokenListMapInput interface {
	pulumi.Input

	ToECRAuthorizationTokenListMapOutput() ECRAuthorizationTokenListMapOutput
	ToECRAuthorizationTokenListMapOutputWithContext(context.Context) ECRAuthorizationTokenListMapOutput
}

type ECRAuthorizationTokenListMap map[string]ECRAuthorizationTokenListInput

func (ECRAuthorizationTokenListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ECRAuthorizationTokenList)(nil)).Elem()
}

func (i ECRAuthorizationTokenListMap) ToECRAuthorizationTokenListMapOutput() ECRAuthorizationTokenListMapOutput {
	return i.ToECRAuthorizationTokenListMapOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenListMap) ToECRAuthorizationTokenListMapOutputWithContext(ctx context.Context) ECRAuthorizationTokenListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenListMapOutput)
}

type ECRAuthorizationTokenListOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenList)(nil)).Elem()
}

func (o ECRAuthorizationTokenListOutput) ToECRAuthorizationTokenListOutput() ECRAuthorizationTokenListOutput {
	return o
}

func (o ECRAuthorizationTokenListOutput) ToECRAuthorizationTokenListOutputWithContext(ctx context.Context) ECRAuthorizationTokenListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ECRAuthorizationTokenListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of ecrauthorizationtokens. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ECRAuthorizationTokenListOutput) Items() ECRAuthorizationTokenTypeArrayOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenList) ECRAuthorizationTokenTypeArrayOutput { return v.Items }).(ECRAuthorizationTokenTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ECRAuthorizationTokenListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ECRAuthorizationTokenListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ECRAuthorizationTokenListArrayOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ECRAuthorizationTokenList)(nil)).Elem()
}

func (o ECRAuthorizationTokenListArrayOutput) ToECRAuthorizationTokenListArrayOutput() ECRAuthorizationTokenListArrayOutput {
	return o
}

func (o ECRAuthorizationTokenListArrayOutput) ToECRAuthorizationTokenListArrayOutputWithContext(ctx context.Context) ECRAuthorizationTokenListArrayOutput {
	return o
}

func (o ECRAuthorizationTokenListArrayOutput) Index(i pulumi.IntInput) ECRAuthorizationTokenListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ECRAuthorizationTokenList {
		return vs[0].([]*ECRAuthorizationTokenList)[vs[1].(int)]
	}).(ECRAuthorizationTokenListOutput)
}

type ECRAuthorizationTokenListMapOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ECRAuthorizationTokenList)(nil)).Elem()
}

func (o ECRAuthorizationTokenListMapOutput) ToECRAuthorizationTokenListMapOutput() ECRAuthorizationTokenListMapOutput {
	return o
}

func (o ECRAuthorizationTokenListMapOutput) ToECRAuthorizationTokenListMapOutputWithContext(ctx context.Context) ECRAuthorizationTokenListMapOutput {
	return o
}

func (o ECRAuthorizationTokenListMapOutput) MapIndex(k pulumi.StringInput) ECRAuthorizationTokenListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ECRAuthorizationTokenList {
		return vs[0].(map[string]*ECRAuthorizationTokenList)[vs[1].(string)]
	}).(ECRAuthorizationTokenListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenListInput)(nil)).Elem(), &ECRAuthorizationTokenList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenListArrayInput)(nil)).Elem(), ECRAuthorizationTokenListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenListMapInput)(nil)).Elem(), ECRAuthorizationTokenListMap{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenListOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenListArrayOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenListMapOutput{})
}
