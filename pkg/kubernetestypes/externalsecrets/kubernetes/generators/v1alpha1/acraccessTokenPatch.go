// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// ACRAccessToken returns a Azure Container Registry token
// that can be used for pushing/pulling images.
// Note: by default it will return an ACR Refresh Token with full access
// (depending on the identity).
// This can be scoped down to the repository level using .spec.scope.
// In case scope is defined it will return an ACR Access Token.
//
// See docs: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md
type ACRAccessTokenPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput  `pulumi:"metadata"`
	Spec     ACRAccessTokenSpecPatchPtrOutput `pulumi:"spec"`
}

// NewACRAccessTokenPatch registers a new resource with the given unique name, arguments, and options.
func NewACRAccessTokenPatch(ctx *pulumi.Context,
	name string, args *ACRAccessTokenPatchArgs, opts ...pulumi.ResourceOption) (*ACRAccessTokenPatch, error) {
	if args == nil {
		args = &ACRAccessTokenPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("generators.external-secrets.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ACRAccessToken")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ACRAccessTokenPatch
	err := ctx.RegisterResource("kubernetes:generators.external-secrets.io/v1alpha1:ACRAccessTokenPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetACRAccessTokenPatch gets an existing ACRAccessTokenPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetACRAccessTokenPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ACRAccessTokenPatchState, opts ...pulumi.ResourceOption) (*ACRAccessTokenPatch, error) {
	var resource ACRAccessTokenPatch
	err := ctx.ReadResource("kubernetes:generators.external-secrets.io/v1alpha1:ACRAccessTokenPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ACRAccessTokenPatch resources.
type acraccessTokenPatchState struct {
}

type ACRAccessTokenPatchState struct {
}

func (ACRAccessTokenPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*acraccessTokenPatchState)(nil)).Elem()
}

type acraccessTokenPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch  `pulumi:"metadata"`
	Spec     *ACRAccessTokenSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a ACRAccessTokenPatch resource.
type ACRAccessTokenPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ACRAccessTokenSpecPatchPtrInput
}

func (ACRAccessTokenPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*acraccessTokenPatchArgs)(nil)).Elem()
}

type ACRAccessTokenPatchInput interface {
	pulumi.Input

	ToACRAccessTokenPatchOutput() ACRAccessTokenPatchOutput
	ToACRAccessTokenPatchOutputWithContext(ctx context.Context) ACRAccessTokenPatchOutput
}

func (*ACRAccessTokenPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenPatch)(nil)).Elem()
}

func (i *ACRAccessTokenPatch) ToACRAccessTokenPatchOutput() ACRAccessTokenPatchOutput {
	return i.ToACRAccessTokenPatchOutputWithContext(context.Background())
}

func (i *ACRAccessTokenPatch) ToACRAccessTokenPatchOutputWithContext(ctx context.Context) ACRAccessTokenPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenPatchOutput)
}

// ACRAccessTokenPatchArrayInput is an input type that accepts ACRAccessTokenPatchArray and ACRAccessTokenPatchArrayOutput values.
// You can construct a concrete instance of `ACRAccessTokenPatchArrayInput` via:
//
//	ACRAccessTokenPatchArray{ ACRAccessTokenPatchArgs{...} }
type ACRAccessTokenPatchArrayInput interface {
	pulumi.Input

	ToACRAccessTokenPatchArrayOutput() ACRAccessTokenPatchArrayOutput
	ToACRAccessTokenPatchArrayOutputWithContext(context.Context) ACRAccessTokenPatchArrayOutput
}

type ACRAccessTokenPatchArray []ACRAccessTokenPatchInput

func (ACRAccessTokenPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ACRAccessTokenPatch)(nil)).Elem()
}

func (i ACRAccessTokenPatchArray) ToACRAccessTokenPatchArrayOutput() ACRAccessTokenPatchArrayOutput {
	return i.ToACRAccessTokenPatchArrayOutputWithContext(context.Background())
}

func (i ACRAccessTokenPatchArray) ToACRAccessTokenPatchArrayOutputWithContext(ctx context.Context) ACRAccessTokenPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenPatchArrayOutput)
}

// ACRAccessTokenPatchMapInput is an input type that accepts ACRAccessTokenPatchMap and ACRAccessTokenPatchMapOutput values.
// You can construct a concrete instance of `ACRAccessTokenPatchMapInput` via:
//
//	ACRAccessTokenPatchMap{ "key": ACRAccessTokenPatchArgs{...} }
type ACRAccessTokenPatchMapInput interface {
	pulumi.Input

	ToACRAccessTokenPatchMapOutput() ACRAccessTokenPatchMapOutput
	ToACRAccessTokenPatchMapOutputWithContext(context.Context) ACRAccessTokenPatchMapOutput
}

type ACRAccessTokenPatchMap map[string]ACRAccessTokenPatchInput

func (ACRAccessTokenPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ACRAccessTokenPatch)(nil)).Elem()
}

func (i ACRAccessTokenPatchMap) ToACRAccessTokenPatchMapOutput() ACRAccessTokenPatchMapOutput {
	return i.ToACRAccessTokenPatchMapOutputWithContext(context.Background())
}

func (i ACRAccessTokenPatchMap) ToACRAccessTokenPatchMapOutputWithContext(ctx context.Context) ACRAccessTokenPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenPatchMapOutput)
}

type ACRAccessTokenPatchOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenPatch)(nil)).Elem()
}

func (o ACRAccessTokenPatchOutput) ToACRAccessTokenPatchOutput() ACRAccessTokenPatchOutput {
	return o
}

func (o ACRAccessTokenPatchOutput) ToACRAccessTokenPatchOutputWithContext(ctx context.Context) ACRAccessTokenPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ACRAccessTokenPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ACRAccessTokenPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ACRAccessTokenPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ACRAccessTokenPatchOutput) Spec() ACRAccessTokenSpecPatchPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenPatch) ACRAccessTokenSpecPatchPtrOutput { return v.Spec }).(ACRAccessTokenSpecPatchPtrOutput)
}

type ACRAccessTokenPatchArrayOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ACRAccessTokenPatch)(nil)).Elem()
}

func (o ACRAccessTokenPatchArrayOutput) ToACRAccessTokenPatchArrayOutput() ACRAccessTokenPatchArrayOutput {
	return o
}

func (o ACRAccessTokenPatchArrayOutput) ToACRAccessTokenPatchArrayOutputWithContext(ctx context.Context) ACRAccessTokenPatchArrayOutput {
	return o
}

func (o ACRAccessTokenPatchArrayOutput) Index(i pulumi.IntInput) ACRAccessTokenPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ACRAccessTokenPatch {
		return vs[0].([]*ACRAccessTokenPatch)[vs[1].(int)]
	}).(ACRAccessTokenPatchOutput)
}

type ACRAccessTokenPatchMapOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ACRAccessTokenPatch)(nil)).Elem()
}

func (o ACRAccessTokenPatchMapOutput) ToACRAccessTokenPatchMapOutput() ACRAccessTokenPatchMapOutput {
	return o
}

func (o ACRAccessTokenPatchMapOutput) ToACRAccessTokenPatchMapOutputWithContext(ctx context.Context) ACRAccessTokenPatchMapOutput {
	return o
}

func (o ACRAccessTokenPatchMapOutput) MapIndex(k pulumi.StringInput) ACRAccessTokenPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ACRAccessTokenPatch {
		return vs[0].(map[string]*ACRAccessTokenPatch)[vs[1].(string)]
	}).(ACRAccessTokenPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenPatchInput)(nil)).Elem(), &ACRAccessTokenPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenPatchArrayInput)(nil)).Elem(), ACRAccessTokenPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenPatchMapInput)(nil)).Elem(), ACRAccessTokenPatchMap{})
	pulumi.RegisterOutputType(ACRAccessTokenPatchOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenPatchArrayOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenPatchMapOutput{})
}
