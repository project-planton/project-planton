// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A CertificateRequest is used to request a signed certificate from one of the
// configured issuers.
//
// All fields within the CertificateRequest's `spec` are immutable after creation.
// A CertificateRequest will either succeed or fail, as denoted by its `Ready` status
// condition and its `status.failureTime` field.
//
// A CertificateRequest is a one-shot resource, meaning it represents a single
// point in time request for a certificate and cannot be re-used.
type CertificateRequest struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput           `pulumi:"metadata"`
	Spec     CertificateRequestSpecOutput      `pulumi:"spec"`
	Status   CertificateRequestStatusPtrOutput `pulumi:"status"`
}

// NewCertificateRequest registers a new resource with the given unique name, arguments, and options.
func NewCertificateRequest(ctx *pulumi.Context,
	name string, args *CertificateRequestArgs, opts ...pulumi.ResourceOption) (*CertificateRequest, error) {
	if args == nil {
		args = &CertificateRequestArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("cert-manager.io/v1")
	args.Kind = pulumi.StringPtr("CertificateRequest")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource CertificateRequest
	err := ctx.RegisterResource("kubernetes:cert-manager.io/v1:CertificateRequest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateRequest gets an existing CertificateRequest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateRequest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateRequestState, opts ...pulumi.ResourceOption) (*CertificateRequest, error) {
	var resource CertificateRequest
	err := ctx.ReadResource("kubernetes:cert-manager.io/v1:CertificateRequest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateRequest resources.
type certificateRequestState struct {
}

type CertificateRequestState struct {
}

func (CertificateRequestState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateRequestState)(nil)).Elem()
}

type certificateRequestArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta      `pulumi:"metadata"`
	Spec     *CertificateRequestSpec `pulumi:"spec"`
}

// The set of arguments for constructing a CertificateRequest resource.
type CertificateRequestArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     CertificateRequestSpecPtrInput
}

func (CertificateRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateRequestArgs)(nil)).Elem()
}

type CertificateRequestInput interface {
	pulumi.Input

	ToCertificateRequestOutput() CertificateRequestOutput
	ToCertificateRequestOutputWithContext(ctx context.Context) CertificateRequestOutput
}

func (*CertificateRequest) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateRequest)(nil)).Elem()
}

func (i *CertificateRequest) ToCertificateRequestOutput() CertificateRequestOutput {
	return i.ToCertificateRequestOutputWithContext(context.Background())
}

func (i *CertificateRequest) ToCertificateRequestOutputWithContext(ctx context.Context) CertificateRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestOutput)
}

// CertificateRequestArrayInput is an input type that accepts CertificateRequestArray and CertificateRequestArrayOutput values.
// You can construct a concrete instance of `CertificateRequestArrayInput` via:
//
//	CertificateRequestArray{ CertificateRequestArgs{...} }
type CertificateRequestArrayInput interface {
	pulumi.Input

	ToCertificateRequestArrayOutput() CertificateRequestArrayOutput
	ToCertificateRequestArrayOutputWithContext(context.Context) CertificateRequestArrayOutput
}

type CertificateRequestArray []CertificateRequestInput

func (CertificateRequestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateRequest)(nil)).Elem()
}

func (i CertificateRequestArray) ToCertificateRequestArrayOutput() CertificateRequestArrayOutput {
	return i.ToCertificateRequestArrayOutputWithContext(context.Background())
}

func (i CertificateRequestArray) ToCertificateRequestArrayOutputWithContext(ctx context.Context) CertificateRequestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestArrayOutput)
}

// CertificateRequestMapInput is an input type that accepts CertificateRequestMap and CertificateRequestMapOutput values.
// You can construct a concrete instance of `CertificateRequestMapInput` via:
//
//	CertificateRequestMap{ "key": CertificateRequestArgs{...} }
type CertificateRequestMapInput interface {
	pulumi.Input

	ToCertificateRequestMapOutput() CertificateRequestMapOutput
	ToCertificateRequestMapOutputWithContext(context.Context) CertificateRequestMapOutput
}

type CertificateRequestMap map[string]CertificateRequestInput

func (CertificateRequestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateRequest)(nil)).Elem()
}

func (i CertificateRequestMap) ToCertificateRequestMapOutput() CertificateRequestMapOutput {
	return i.ToCertificateRequestMapOutputWithContext(context.Background())
}

func (i CertificateRequestMap) ToCertificateRequestMapOutputWithContext(ctx context.Context) CertificateRequestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestMapOutput)
}

type CertificateRequestOutput struct{ *pulumi.OutputState }

func (CertificateRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateRequest)(nil)).Elem()
}

func (o CertificateRequestOutput) ToCertificateRequestOutput() CertificateRequestOutput {
	return o
}

func (o CertificateRequestOutput) ToCertificateRequestOutputWithContext(ctx context.Context) CertificateRequestOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CertificateRequestOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateRequest) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CertificateRequestOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateRequest) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CertificateRequestOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *CertificateRequest) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o CertificateRequestOutput) Spec() CertificateRequestSpecOutput {
	return o.ApplyT(func(v *CertificateRequest) CertificateRequestSpecOutput { return v.Spec }).(CertificateRequestSpecOutput)
}

func (o CertificateRequestOutput) Status() CertificateRequestStatusPtrOutput {
	return o.ApplyT(func(v *CertificateRequest) CertificateRequestStatusPtrOutput { return v.Status }).(CertificateRequestStatusPtrOutput)
}

type CertificateRequestArrayOutput struct{ *pulumi.OutputState }

func (CertificateRequestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateRequest)(nil)).Elem()
}

func (o CertificateRequestArrayOutput) ToCertificateRequestArrayOutput() CertificateRequestArrayOutput {
	return o
}

func (o CertificateRequestArrayOutput) ToCertificateRequestArrayOutputWithContext(ctx context.Context) CertificateRequestArrayOutput {
	return o
}

func (o CertificateRequestArrayOutput) Index(i pulumi.IntInput) CertificateRequestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateRequest {
		return vs[0].([]*CertificateRequest)[vs[1].(int)]
	}).(CertificateRequestOutput)
}

type CertificateRequestMapOutput struct{ *pulumi.OutputState }

func (CertificateRequestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateRequest)(nil)).Elem()
}

func (o CertificateRequestMapOutput) ToCertificateRequestMapOutput() CertificateRequestMapOutput {
	return o
}

func (o CertificateRequestMapOutput) ToCertificateRequestMapOutputWithContext(ctx context.Context) CertificateRequestMapOutput {
	return o
}

func (o CertificateRequestMapOutput) MapIndex(k pulumi.StringInput) CertificateRequestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateRequest {
		return vs[0].(map[string]*CertificateRequest)[vs[1].(string)]
	}).(CertificateRequestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateRequestInput)(nil)).Elem(), &CertificateRequest{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateRequestArrayInput)(nil)).Elem(), CertificateRequestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateRequestMapInput)(nil)).Elem(), CertificateRequestMap{})
	pulumi.RegisterOutputType(CertificateRequestOutput{})
	pulumi.RegisterOutputType(CertificateRequestArrayOutput{})
	pulumi.RegisterOutputType(CertificateRequestMapOutput{})
}
