// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// CertificateList is a list of Certificate
type CertificateList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of certificates. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items CertificateTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewCertificateList registers a new resource with the given unique name, arguments, and options.
func NewCertificateList(ctx *pulumi.Context,
	name string, args *CertificateListArgs, opts ...pulumi.ResourceOption) (*CertificateList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("cert-manager.io/v1")
	args.Kind = pulumi.StringPtr("CertificateList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource CertificateList
	err := ctx.RegisterResource("kubernetes:cert-manager.io/v1:CertificateList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateList gets an existing CertificateList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateListState, opts ...pulumi.ResourceOption) (*CertificateList, error) {
	var resource CertificateList
	err := ctx.ReadResource("kubernetes:cert-manager.io/v1:CertificateList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateList resources.
type certificateListState struct {
}

type CertificateListState struct {
}

func (CertificateListState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateListState)(nil)).Elem()
}

type certificateListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of certificates. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []CertificateType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a CertificateList resource.
type CertificateListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of certificates. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items CertificateTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (CertificateListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateListArgs)(nil)).Elem()
}

type CertificateListInput interface {
	pulumi.Input

	ToCertificateListOutput() CertificateListOutput
	ToCertificateListOutputWithContext(ctx context.Context) CertificateListOutput
}

func (*CertificateList) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateList)(nil)).Elem()
}

func (i *CertificateList) ToCertificateListOutput() CertificateListOutput {
	return i.ToCertificateListOutputWithContext(context.Background())
}

func (i *CertificateList) ToCertificateListOutputWithContext(ctx context.Context) CertificateListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateListOutput)
}

// CertificateListArrayInput is an input type that accepts CertificateListArray and CertificateListArrayOutput values.
// You can construct a concrete instance of `CertificateListArrayInput` via:
//
//	CertificateListArray{ CertificateListArgs{...} }
type CertificateListArrayInput interface {
	pulumi.Input

	ToCertificateListArrayOutput() CertificateListArrayOutput
	ToCertificateListArrayOutputWithContext(context.Context) CertificateListArrayOutput
}

type CertificateListArray []CertificateListInput

func (CertificateListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateList)(nil)).Elem()
}

func (i CertificateListArray) ToCertificateListArrayOutput() CertificateListArrayOutput {
	return i.ToCertificateListArrayOutputWithContext(context.Background())
}

func (i CertificateListArray) ToCertificateListArrayOutputWithContext(ctx context.Context) CertificateListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateListArrayOutput)
}

// CertificateListMapInput is an input type that accepts CertificateListMap and CertificateListMapOutput values.
// You can construct a concrete instance of `CertificateListMapInput` via:
//
//	CertificateListMap{ "key": CertificateListArgs{...} }
type CertificateListMapInput interface {
	pulumi.Input

	ToCertificateListMapOutput() CertificateListMapOutput
	ToCertificateListMapOutputWithContext(context.Context) CertificateListMapOutput
}

type CertificateListMap map[string]CertificateListInput

func (CertificateListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateList)(nil)).Elem()
}

func (i CertificateListMap) ToCertificateListMapOutput() CertificateListMapOutput {
	return i.ToCertificateListMapOutputWithContext(context.Background())
}

func (i CertificateListMap) ToCertificateListMapOutputWithContext(ctx context.Context) CertificateListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateListMapOutput)
}

type CertificateListOutput struct{ *pulumi.OutputState }

func (CertificateListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateList)(nil)).Elem()
}

func (o CertificateListOutput) ToCertificateListOutput() CertificateListOutput {
	return o
}

func (o CertificateListOutput) ToCertificateListOutputWithContext(ctx context.Context) CertificateListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CertificateListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of certificates. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o CertificateListOutput) Items() CertificateTypeArrayOutput {
	return o.ApplyT(func(v *CertificateList) CertificateTypeArrayOutput { return v.Items }).(CertificateTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CertificateListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CertificateListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *CertificateList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type CertificateListArrayOutput struct{ *pulumi.OutputState }

func (CertificateListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateList)(nil)).Elem()
}

func (o CertificateListArrayOutput) ToCertificateListArrayOutput() CertificateListArrayOutput {
	return o
}

func (o CertificateListArrayOutput) ToCertificateListArrayOutputWithContext(ctx context.Context) CertificateListArrayOutput {
	return o
}

func (o CertificateListArrayOutput) Index(i pulumi.IntInput) CertificateListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateList {
		return vs[0].([]*CertificateList)[vs[1].(int)]
	}).(CertificateListOutput)
}

type CertificateListMapOutput struct{ *pulumi.OutputState }

func (CertificateListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateList)(nil)).Elem()
}

func (o CertificateListMapOutput) ToCertificateListMapOutput() CertificateListMapOutput {
	return o
}

func (o CertificateListMapOutput) ToCertificateListMapOutputWithContext(ctx context.Context) CertificateListMapOutput {
	return o
}

func (o CertificateListMapOutput) MapIndex(k pulumi.StringInput) CertificateListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateList {
		return vs[0].(map[string]*CertificateList)[vs[1].(string)]
	}).(CertificateListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateListInput)(nil)).Elem(), &CertificateList{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateListArrayInput)(nil)).Elem(), CertificateListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateListMapInput)(nil)).Elem(), CertificateListMap{})
	pulumi.RegisterOutputType(CertificateListOutput{})
	pulumi.RegisterOutputType(CertificateListArrayOutput{})
	pulumi.RegisterOutputType(CertificateListMapOutput{})
}
