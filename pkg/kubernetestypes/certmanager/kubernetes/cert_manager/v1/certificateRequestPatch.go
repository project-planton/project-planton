// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// A CertificateRequest is used to request a signed certificate from one of the
// configured issuers.
//
// All fields within the CertificateRequest's `spec` are immutable after creation.
// A CertificateRequest will either succeed or fail, as denoted by its `Ready` status
// condition and its `status.failureTime` field.
//
// A CertificateRequest is a one-shot resource, meaning it represents a single
// point in time request for a certificate and cannot be re-used.
type CertificateRequestPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput        `pulumi:"metadata"`
	Spec     CertificateRequestSpecPatchPtrOutput   `pulumi:"spec"`
	Status   CertificateRequestStatusPatchPtrOutput `pulumi:"status"`
}

// NewCertificateRequestPatch registers a new resource with the given unique name, arguments, and options.
func NewCertificateRequestPatch(ctx *pulumi.Context,
	name string, args *CertificateRequestPatchArgs, opts ...pulumi.ResourceOption) (*CertificateRequestPatch, error) {
	if args == nil {
		args = &CertificateRequestPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("cert-manager.io/v1")
	args.Kind = pulumi.StringPtr("CertificateRequest")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource CertificateRequestPatch
	err := ctx.RegisterResource("kubernetes:cert-manager.io/v1:CertificateRequestPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateRequestPatch gets an existing CertificateRequestPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateRequestPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateRequestPatchState, opts ...pulumi.ResourceOption) (*CertificateRequestPatch, error) {
	var resource CertificateRequestPatch
	err := ctx.ReadResource("kubernetes:cert-manager.io/v1:CertificateRequestPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateRequestPatch resources.
type certificateRequestPatchState struct {
}

type CertificateRequestPatchState struct {
}

func (CertificateRequestPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateRequestPatchState)(nil)).Elem()
}

type certificateRequestPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch      `pulumi:"metadata"`
	Spec     *CertificateRequestSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a CertificateRequestPatch resource.
type CertificateRequestPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     CertificateRequestSpecPatchPtrInput
}

func (CertificateRequestPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateRequestPatchArgs)(nil)).Elem()
}

type CertificateRequestPatchInput interface {
	pulumi.Input

	ToCertificateRequestPatchOutput() CertificateRequestPatchOutput
	ToCertificateRequestPatchOutputWithContext(ctx context.Context) CertificateRequestPatchOutput
}

func (*CertificateRequestPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateRequestPatch)(nil)).Elem()
}

func (i *CertificateRequestPatch) ToCertificateRequestPatchOutput() CertificateRequestPatchOutput {
	return i.ToCertificateRequestPatchOutputWithContext(context.Background())
}

func (i *CertificateRequestPatch) ToCertificateRequestPatchOutputWithContext(ctx context.Context) CertificateRequestPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestPatchOutput)
}

// CertificateRequestPatchArrayInput is an input type that accepts CertificateRequestPatchArray and CertificateRequestPatchArrayOutput values.
// You can construct a concrete instance of `CertificateRequestPatchArrayInput` via:
//
//	CertificateRequestPatchArray{ CertificateRequestPatchArgs{...} }
type CertificateRequestPatchArrayInput interface {
	pulumi.Input

	ToCertificateRequestPatchArrayOutput() CertificateRequestPatchArrayOutput
	ToCertificateRequestPatchArrayOutputWithContext(context.Context) CertificateRequestPatchArrayOutput
}

type CertificateRequestPatchArray []CertificateRequestPatchInput

func (CertificateRequestPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateRequestPatch)(nil)).Elem()
}

func (i CertificateRequestPatchArray) ToCertificateRequestPatchArrayOutput() CertificateRequestPatchArrayOutput {
	return i.ToCertificateRequestPatchArrayOutputWithContext(context.Background())
}

func (i CertificateRequestPatchArray) ToCertificateRequestPatchArrayOutputWithContext(ctx context.Context) CertificateRequestPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestPatchArrayOutput)
}

// CertificateRequestPatchMapInput is an input type that accepts CertificateRequestPatchMap and CertificateRequestPatchMapOutput values.
// You can construct a concrete instance of `CertificateRequestPatchMapInput` via:
//
//	CertificateRequestPatchMap{ "key": CertificateRequestPatchArgs{...} }
type CertificateRequestPatchMapInput interface {
	pulumi.Input

	ToCertificateRequestPatchMapOutput() CertificateRequestPatchMapOutput
	ToCertificateRequestPatchMapOutputWithContext(context.Context) CertificateRequestPatchMapOutput
}

type CertificateRequestPatchMap map[string]CertificateRequestPatchInput

func (CertificateRequestPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateRequestPatch)(nil)).Elem()
}

func (i CertificateRequestPatchMap) ToCertificateRequestPatchMapOutput() CertificateRequestPatchMapOutput {
	return i.ToCertificateRequestPatchMapOutputWithContext(context.Background())
}

func (i CertificateRequestPatchMap) ToCertificateRequestPatchMapOutputWithContext(ctx context.Context) CertificateRequestPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestPatchMapOutput)
}

type CertificateRequestPatchOutput struct{ *pulumi.OutputState }

func (CertificateRequestPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateRequestPatch)(nil)).Elem()
}

func (o CertificateRequestPatchOutput) ToCertificateRequestPatchOutput() CertificateRequestPatchOutput {
	return o
}

func (o CertificateRequestPatchOutput) ToCertificateRequestPatchOutputWithContext(ctx context.Context) CertificateRequestPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CertificateRequestPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateRequestPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CertificateRequestPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateRequestPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CertificateRequestPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *CertificateRequestPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o CertificateRequestPatchOutput) Spec() CertificateRequestSpecPatchPtrOutput {
	return o.ApplyT(func(v *CertificateRequestPatch) CertificateRequestSpecPatchPtrOutput { return v.Spec }).(CertificateRequestSpecPatchPtrOutput)
}

func (o CertificateRequestPatchOutput) Status() CertificateRequestStatusPatchPtrOutput {
	return o.ApplyT(func(v *CertificateRequestPatch) CertificateRequestStatusPatchPtrOutput { return v.Status }).(CertificateRequestStatusPatchPtrOutput)
}

type CertificateRequestPatchArrayOutput struct{ *pulumi.OutputState }

func (CertificateRequestPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateRequestPatch)(nil)).Elem()
}

func (o CertificateRequestPatchArrayOutput) ToCertificateRequestPatchArrayOutput() CertificateRequestPatchArrayOutput {
	return o
}

func (o CertificateRequestPatchArrayOutput) ToCertificateRequestPatchArrayOutputWithContext(ctx context.Context) CertificateRequestPatchArrayOutput {
	return o
}

func (o CertificateRequestPatchArrayOutput) Index(i pulumi.IntInput) CertificateRequestPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateRequestPatch {
		return vs[0].([]*CertificateRequestPatch)[vs[1].(int)]
	}).(CertificateRequestPatchOutput)
}

type CertificateRequestPatchMapOutput struct{ *pulumi.OutputState }

func (CertificateRequestPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateRequestPatch)(nil)).Elem()
}

func (o CertificateRequestPatchMapOutput) ToCertificateRequestPatchMapOutput() CertificateRequestPatchMapOutput {
	return o
}

func (o CertificateRequestPatchMapOutput) ToCertificateRequestPatchMapOutputWithContext(ctx context.Context) CertificateRequestPatchMapOutput {
	return o
}

func (o CertificateRequestPatchMapOutput) MapIndex(k pulumi.StringInput) CertificateRequestPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateRequestPatch {
		return vs[0].(map[string]*CertificateRequestPatch)[vs[1].(string)]
	}).(CertificateRequestPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateRequestPatchInput)(nil)).Elem(), &CertificateRequestPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateRequestPatchArrayInput)(nil)).Elem(), CertificateRequestPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateRequestPatchMapInput)(nil)).Elem(), CertificateRequestPatchMap{})
	pulumi.RegisterOutputType(CertificateRequestPatchOutput{})
	pulumi.RegisterOutputType(CertificateRequestPatchArrayOutput{})
	pulumi.RegisterOutputType(CertificateRequestPatchMapOutput{})
}
