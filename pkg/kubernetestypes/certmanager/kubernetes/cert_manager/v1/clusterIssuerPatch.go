// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// A ClusterIssuer represents a certificate issuing authority which can be
// referenced as part of `issuerRef` fields.
// It is similar to an Issuer, however it is cluster-scoped and therefore can
// be referenced by resources that exist in *any* namespace, not just the same
// namespace as the referent.
type ClusterIssuerPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput   `pulumi:"metadata"`
	Spec     ClusterIssuerSpecPatchPtrOutput   `pulumi:"spec"`
	Status   ClusterIssuerStatusPatchPtrOutput `pulumi:"status"`
}

// NewClusterIssuerPatch registers a new resource with the given unique name, arguments, and options.
func NewClusterIssuerPatch(ctx *pulumi.Context,
	name string, args *ClusterIssuerPatchArgs, opts ...pulumi.ResourceOption) (*ClusterIssuerPatch, error) {
	if args == nil {
		args = &ClusterIssuerPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("cert-manager.io/v1")
	args.Kind = pulumi.StringPtr("ClusterIssuer")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ClusterIssuerPatch
	err := ctx.RegisterResource("kubernetes:cert-manager.io/v1:ClusterIssuerPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterIssuerPatch gets an existing ClusterIssuerPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterIssuerPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterIssuerPatchState, opts ...pulumi.ResourceOption) (*ClusterIssuerPatch, error) {
	var resource ClusterIssuerPatch
	err := ctx.ReadResource("kubernetes:cert-manager.io/v1:ClusterIssuerPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterIssuerPatch resources.
type clusterIssuerPatchState struct {
}

type ClusterIssuerPatchState struct {
}

func (ClusterIssuerPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterIssuerPatchState)(nil)).Elem()
}

type clusterIssuerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ClusterIssuerSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a ClusterIssuerPatch resource.
type ClusterIssuerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ClusterIssuerSpecPatchPtrInput
}

func (ClusterIssuerPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterIssuerPatchArgs)(nil)).Elem()
}

type ClusterIssuerPatchInput interface {
	pulumi.Input

	ToClusterIssuerPatchOutput() ClusterIssuerPatchOutput
	ToClusterIssuerPatchOutputWithContext(ctx context.Context) ClusterIssuerPatchOutput
}

func (*ClusterIssuerPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterIssuerPatch)(nil)).Elem()
}

func (i *ClusterIssuerPatch) ToClusterIssuerPatchOutput() ClusterIssuerPatchOutput {
	return i.ToClusterIssuerPatchOutputWithContext(context.Background())
}

func (i *ClusterIssuerPatch) ToClusterIssuerPatchOutputWithContext(ctx context.Context) ClusterIssuerPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIssuerPatchOutput)
}

// ClusterIssuerPatchArrayInput is an input type that accepts ClusterIssuerPatchArray and ClusterIssuerPatchArrayOutput values.
// You can construct a concrete instance of `ClusterIssuerPatchArrayInput` via:
//
//	ClusterIssuerPatchArray{ ClusterIssuerPatchArgs{...} }
type ClusterIssuerPatchArrayInput interface {
	pulumi.Input

	ToClusterIssuerPatchArrayOutput() ClusterIssuerPatchArrayOutput
	ToClusterIssuerPatchArrayOutputWithContext(context.Context) ClusterIssuerPatchArrayOutput
}

type ClusterIssuerPatchArray []ClusterIssuerPatchInput

func (ClusterIssuerPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterIssuerPatch)(nil)).Elem()
}

func (i ClusterIssuerPatchArray) ToClusterIssuerPatchArrayOutput() ClusterIssuerPatchArrayOutput {
	return i.ToClusterIssuerPatchArrayOutputWithContext(context.Background())
}

func (i ClusterIssuerPatchArray) ToClusterIssuerPatchArrayOutputWithContext(ctx context.Context) ClusterIssuerPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIssuerPatchArrayOutput)
}

// ClusterIssuerPatchMapInput is an input type that accepts ClusterIssuerPatchMap and ClusterIssuerPatchMapOutput values.
// You can construct a concrete instance of `ClusterIssuerPatchMapInput` via:
//
//	ClusterIssuerPatchMap{ "key": ClusterIssuerPatchArgs{...} }
type ClusterIssuerPatchMapInput interface {
	pulumi.Input

	ToClusterIssuerPatchMapOutput() ClusterIssuerPatchMapOutput
	ToClusterIssuerPatchMapOutputWithContext(context.Context) ClusterIssuerPatchMapOutput
}

type ClusterIssuerPatchMap map[string]ClusterIssuerPatchInput

func (ClusterIssuerPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterIssuerPatch)(nil)).Elem()
}

func (i ClusterIssuerPatchMap) ToClusterIssuerPatchMapOutput() ClusterIssuerPatchMapOutput {
	return i.ToClusterIssuerPatchMapOutputWithContext(context.Background())
}

func (i ClusterIssuerPatchMap) ToClusterIssuerPatchMapOutputWithContext(ctx context.Context) ClusterIssuerPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIssuerPatchMapOutput)
}

type ClusterIssuerPatchOutput struct{ *pulumi.OutputState }

func (ClusterIssuerPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterIssuerPatch)(nil)).Elem()
}

func (o ClusterIssuerPatchOutput) ToClusterIssuerPatchOutput() ClusterIssuerPatchOutput {
	return o
}

func (o ClusterIssuerPatchOutput) ToClusterIssuerPatchOutputWithContext(ctx context.Context) ClusterIssuerPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterIssuerPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterIssuerPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterIssuerPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterIssuerPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClusterIssuerPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ClusterIssuerPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ClusterIssuerPatchOutput) Spec() ClusterIssuerSpecPatchPtrOutput {
	return o.ApplyT(func(v *ClusterIssuerPatch) ClusterIssuerSpecPatchPtrOutput { return v.Spec }).(ClusterIssuerSpecPatchPtrOutput)
}

func (o ClusterIssuerPatchOutput) Status() ClusterIssuerStatusPatchPtrOutput {
	return o.ApplyT(func(v *ClusterIssuerPatch) ClusterIssuerStatusPatchPtrOutput { return v.Status }).(ClusterIssuerStatusPatchPtrOutput)
}

type ClusterIssuerPatchArrayOutput struct{ *pulumi.OutputState }

func (ClusterIssuerPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterIssuerPatch)(nil)).Elem()
}

func (o ClusterIssuerPatchArrayOutput) ToClusterIssuerPatchArrayOutput() ClusterIssuerPatchArrayOutput {
	return o
}

func (o ClusterIssuerPatchArrayOutput) ToClusterIssuerPatchArrayOutputWithContext(ctx context.Context) ClusterIssuerPatchArrayOutput {
	return o
}

func (o ClusterIssuerPatchArrayOutput) Index(i pulumi.IntInput) ClusterIssuerPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterIssuerPatch {
		return vs[0].([]*ClusterIssuerPatch)[vs[1].(int)]
	}).(ClusterIssuerPatchOutput)
}

type ClusterIssuerPatchMapOutput struct{ *pulumi.OutputState }

func (ClusterIssuerPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterIssuerPatch)(nil)).Elem()
}

func (o ClusterIssuerPatchMapOutput) ToClusterIssuerPatchMapOutput() ClusterIssuerPatchMapOutput {
	return o
}

func (o ClusterIssuerPatchMapOutput) ToClusterIssuerPatchMapOutputWithContext(ctx context.Context) ClusterIssuerPatchMapOutput {
	return o
}

func (o ClusterIssuerPatchMapOutput) MapIndex(k pulumi.StringInput) ClusterIssuerPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterIssuerPatch {
		return vs[0].(map[string]*ClusterIssuerPatch)[vs[1].(string)]
	}).(ClusterIssuerPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterIssuerPatchInput)(nil)).Elem(), &ClusterIssuerPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterIssuerPatchArrayInput)(nil)).Elem(), ClusterIssuerPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterIssuerPatchMapInput)(nil)).Elem(), ClusterIssuerPatchMap{})
	pulumi.RegisterOutputType(ClusterIssuerPatchOutput{})
	pulumi.RegisterOutputType(ClusterIssuerPatchArrayOutput{})
	pulumi.RegisterOutputType(ClusterIssuerPatchMapOutput{})
}
