// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// A Certificate resource should be created to ensure an up to date and signed
// X.509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`.
//
// The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).
type CertificatePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     CertificateSpecPatchPtrOutput   `pulumi:"spec"`
	Status   CertificateStatusPatchPtrOutput `pulumi:"status"`
}

// NewCertificatePatch registers a new resource with the given unique name, arguments, and options.
func NewCertificatePatch(ctx *pulumi.Context,
	name string, args *CertificatePatchArgs, opts ...pulumi.ResourceOption) (*CertificatePatch, error) {
	if args == nil {
		args = &CertificatePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("cert-manager.io/v1")
	args.Kind = pulumi.StringPtr("Certificate")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource CertificatePatch
	err := ctx.RegisterResource("kubernetes:cert-manager.io/v1:CertificatePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificatePatch gets an existing CertificatePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificatePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificatePatchState, opts ...pulumi.ResourceOption) (*CertificatePatch, error) {
	var resource CertificatePatch
	err := ctx.ReadResource("kubernetes:cert-manager.io/v1:CertificatePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificatePatch resources.
type certificatePatchState struct {
}

type CertificatePatchState struct {
}

func (CertificatePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificatePatchState)(nil)).Elem()
}

type certificatePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *CertificateSpecPatch   `pulumi:"spec"`
}

// The set of arguments for constructing a CertificatePatch resource.
type CertificatePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     CertificateSpecPatchPtrInput
}

func (CertificatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificatePatchArgs)(nil)).Elem()
}

type CertificatePatchInput interface {
	pulumi.Input

	ToCertificatePatchOutput() CertificatePatchOutput
	ToCertificatePatchOutputWithContext(ctx context.Context) CertificatePatchOutput
}

func (*CertificatePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificatePatch)(nil)).Elem()
}

func (i *CertificatePatch) ToCertificatePatchOutput() CertificatePatchOutput {
	return i.ToCertificatePatchOutputWithContext(context.Background())
}

func (i *CertificatePatch) ToCertificatePatchOutputWithContext(ctx context.Context) CertificatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePatchOutput)
}

// CertificatePatchArrayInput is an input type that accepts CertificatePatchArray and CertificatePatchArrayOutput values.
// You can construct a concrete instance of `CertificatePatchArrayInput` via:
//
//	CertificatePatchArray{ CertificatePatchArgs{...} }
type CertificatePatchArrayInput interface {
	pulumi.Input

	ToCertificatePatchArrayOutput() CertificatePatchArrayOutput
	ToCertificatePatchArrayOutputWithContext(context.Context) CertificatePatchArrayOutput
}

type CertificatePatchArray []CertificatePatchInput

func (CertificatePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificatePatch)(nil)).Elem()
}

func (i CertificatePatchArray) ToCertificatePatchArrayOutput() CertificatePatchArrayOutput {
	return i.ToCertificatePatchArrayOutputWithContext(context.Background())
}

func (i CertificatePatchArray) ToCertificatePatchArrayOutputWithContext(ctx context.Context) CertificatePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePatchArrayOutput)
}

// CertificatePatchMapInput is an input type that accepts CertificatePatchMap and CertificatePatchMapOutput values.
// You can construct a concrete instance of `CertificatePatchMapInput` via:
//
//	CertificatePatchMap{ "key": CertificatePatchArgs{...} }
type CertificatePatchMapInput interface {
	pulumi.Input

	ToCertificatePatchMapOutput() CertificatePatchMapOutput
	ToCertificatePatchMapOutputWithContext(context.Context) CertificatePatchMapOutput
}

type CertificatePatchMap map[string]CertificatePatchInput

func (CertificatePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificatePatch)(nil)).Elem()
}

func (i CertificatePatchMap) ToCertificatePatchMapOutput() CertificatePatchMapOutput {
	return i.ToCertificatePatchMapOutputWithContext(context.Background())
}

func (i CertificatePatchMap) ToCertificatePatchMapOutputWithContext(ctx context.Context) CertificatePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePatchMapOutput)
}

type CertificatePatchOutput struct{ *pulumi.OutputState }

func (CertificatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificatePatch)(nil)).Elem()
}

func (o CertificatePatchOutput) ToCertificatePatchOutput() CertificatePatchOutput {
	return o
}

func (o CertificatePatchOutput) ToCertificatePatchOutputWithContext(ctx context.Context) CertificatePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o CertificatePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificatePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o CertificatePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificatePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o CertificatePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *CertificatePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o CertificatePatchOutput) Spec() CertificateSpecPatchPtrOutput {
	return o.ApplyT(func(v *CertificatePatch) CertificateSpecPatchPtrOutput { return v.Spec }).(CertificateSpecPatchPtrOutput)
}

func (o CertificatePatchOutput) Status() CertificateStatusPatchPtrOutput {
	return o.ApplyT(func(v *CertificatePatch) CertificateStatusPatchPtrOutput { return v.Status }).(CertificateStatusPatchPtrOutput)
}

type CertificatePatchArrayOutput struct{ *pulumi.OutputState }

func (CertificatePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificatePatch)(nil)).Elem()
}

func (o CertificatePatchArrayOutput) ToCertificatePatchArrayOutput() CertificatePatchArrayOutput {
	return o
}

func (o CertificatePatchArrayOutput) ToCertificatePatchArrayOutputWithContext(ctx context.Context) CertificatePatchArrayOutput {
	return o
}

func (o CertificatePatchArrayOutput) Index(i pulumi.IntInput) CertificatePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificatePatch {
		return vs[0].([]*CertificatePatch)[vs[1].(int)]
	}).(CertificatePatchOutput)
}

type CertificatePatchMapOutput struct{ *pulumi.OutputState }

func (CertificatePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificatePatch)(nil)).Elem()
}

func (o CertificatePatchMapOutput) ToCertificatePatchMapOutput() CertificatePatchMapOutput {
	return o
}

func (o CertificatePatchMapOutput) ToCertificatePatchMapOutputWithContext(ctx context.Context) CertificatePatchMapOutput {
	return o
}

func (o CertificatePatchMapOutput) MapIndex(k pulumi.StringInput) CertificatePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificatePatch {
		return vs[0].(map[string]*CertificatePatch)[vs[1].(string)]
	}).(CertificatePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatePatchInput)(nil)).Elem(), &CertificatePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatePatchArrayInput)(nil)).Elem(), CertificatePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatePatchMapInput)(nil)).Elem(), CertificatePatchMap{})
	pulumi.RegisterOutputType(CertificatePatchOutput{})
	pulumi.RegisterOutputType(CertificatePatchArrayOutput{})
	pulumi.RegisterOutputType(CertificatePatchMapOutput{})
}
