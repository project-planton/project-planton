// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// An Issuer represents a certificate issuing authority which can be
// referenced as part of `issuerRef` fields.
// It is scoped to a single namespace and can therefore only be referenced by
// resources within the same namespace.
type IssuerPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     IssuerSpecPatchPtrOutput        `pulumi:"spec"`
	Status   IssuerStatusPatchPtrOutput      `pulumi:"status"`
}

// NewIssuerPatch registers a new resource with the given unique name, arguments, and options.
func NewIssuerPatch(ctx *pulumi.Context,
	name string, args *IssuerPatchArgs, opts ...pulumi.ResourceOption) (*IssuerPatch, error) {
	if args == nil {
		args = &IssuerPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("cert-manager.io/v1")
	args.Kind = pulumi.StringPtr("Issuer")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource IssuerPatch
	err := ctx.RegisterResource("kubernetes:cert-manager.io/v1:IssuerPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIssuerPatch gets an existing IssuerPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIssuerPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IssuerPatchState, opts ...pulumi.ResourceOption) (*IssuerPatch, error) {
	var resource IssuerPatch
	err := ctx.ReadResource("kubernetes:cert-manager.io/v1:IssuerPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IssuerPatch resources.
type issuerPatchState struct {
}

type IssuerPatchState struct {
}

func (IssuerPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*issuerPatchState)(nil)).Elem()
}

type issuerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *IssuerSpecPatch        `pulumi:"spec"`
}

// The set of arguments for constructing a IssuerPatch resource.
type IssuerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     IssuerSpecPatchPtrInput
}

func (IssuerPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*issuerPatchArgs)(nil)).Elem()
}

type IssuerPatchInput interface {
	pulumi.Input

	ToIssuerPatchOutput() IssuerPatchOutput
	ToIssuerPatchOutputWithContext(ctx context.Context) IssuerPatchOutput
}

func (*IssuerPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuerPatch)(nil)).Elem()
}

func (i *IssuerPatch) ToIssuerPatchOutput() IssuerPatchOutput {
	return i.ToIssuerPatchOutputWithContext(context.Background())
}

func (i *IssuerPatch) ToIssuerPatchOutputWithContext(ctx context.Context) IssuerPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuerPatchOutput)
}

// IssuerPatchArrayInput is an input type that accepts IssuerPatchArray and IssuerPatchArrayOutput values.
// You can construct a concrete instance of `IssuerPatchArrayInput` via:
//
//	IssuerPatchArray{ IssuerPatchArgs{...} }
type IssuerPatchArrayInput interface {
	pulumi.Input

	ToIssuerPatchArrayOutput() IssuerPatchArrayOutput
	ToIssuerPatchArrayOutputWithContext(context.Context) IssuerPatchArrayOutput
}

type IssuerPatchArray []IssuerPatchInput

func (IssuerPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IssuerPatch)(nil)).Elem()
}

func (i IssuerPatchArray) ToIssuerPatchArrayOutput() IssuerPatchArrayOutput {
	return i.ToIssuerPatchArrayOutputWithContext(context.Background())
}

func (i IssuerPatchArray) ToIssuerPatchArrayOutputWithContext(ctx context.Context) IssuerPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuerPatchArrayOutput)
}

// IssuerPatchMapInput is an input type that accepts IssuerPatchMap and IssuerPatchMapOutput values.
// You can construct a concrete instance of `IssuerPatchMapInput` via:
//
//	IssuerPatchMap{ "key": IssuerPatchArgs{...} }
type IssuerPatchMapInput interface {
	pulumi.Input

	ToIssuerPatchMapOutput() IssuerPatchMapOutput
	ToIssuerPatchMapOutputWithContext(context.Context) IssuerPatchMapOutput
}

type IssuerPatchMap map[string]IssuerPatchInput

func (IssuerPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IssuerPatch)(nil)).Elem()
}

func (i IssuerPatchMap) ToIssuerPatchMapOutput() IssuerPatchMapOutput {
	return i.ToIssuerPatchMapOutputWithContext(context.Background())
}

func (i IssuerPatchMap) ToIssuerPatchMapOutputWithContext(ctx context.Context) IssuerPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuerPatchMapOutput)
}

type IssuerPatchOutput struct{ *pulumi.OutputState }

func (IssuerPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuerPatch)(nil)).Elem()
}

func (o IssuerPatchOutput) ToIssuerPatchOutput() IssuerPatchOutput {
	return o
}

func (o IssuerPatchOutput) ToIssuerPatchOutputWithContext(ctx context.Context) IssuerPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o IssuerPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IssuerPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o IssuerPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IssuerPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o IssuerPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *IssuerPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o IssuerPatchOutput) Spec() IssuerSpecPatchPtrOutput {
	return o.ApplyT(func(v *IssuerPatch) IssuerSpecPatchPtrOutput { return v.Spec }).(IssuerSpecPatchPtrOutput)
}

func (o IssuerPatchOutput) Status() IssuerStatusPatchPtrOutput {
	return o.ApplyT(func(v *IssuerPatch) IssuerStatusPatchPtrOutput { return v.Status }).(IssuerStatusPatchPtrOutput)
}

type IssuerPatchArrayOutput struct{ *pulumi.OutputState }

func (IssuerPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IssuerPatch)(nil)).Elem()
}

func (o IssuerPatchArrayOutput) ToIssuerPatchArrayOutput() IssuerPatchArrayOutput {
	return o
}

func (o IssuerPatchArrayOutput) ToIssuerPatchArrayOutputWithContext(ctx context.Context) IssuerPatchArrayOutput {
	return o
}

func (o IssuerPatchArrayOutput) Index(i pulumi.IntInput) IssuerPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IssuerPatch {
		return vs[0].([]*IssuerPatch)[vs[1].(int)]
	}).(IssuerPatchOutput)
}

type IssuerPatchMapOutput struct{ *pulumi.OutputState }

func (IssuerPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IssuerPatch)(nil)).Elem()
}

func (o IssuerPatchMapOutput) ToIssuerPatchMapOutput() IssuerPatchMapOutput {
	return o
}

func (o IssuerPatchMapOutput) ToIssuerPatchMapOutputWithContext(ctx context.Context) IssuerPatchMapOutput {
	return o
}

func (o IssuerPatchMapOutput) MapIndex(k pulumi.StringInput) IssuerPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IssuerPatch {
		return vs[0].(map[string]*IssuerPatch)[vs[1].(string)]
	}).(IssuerPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IssuerPatchInput)(nil)).Elem(), &IssuerPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*IssuerPatchArrayInput)(nil)).Elem(), IssuerPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IssuerPatchMapInput)(nil)).Elem(), IssuerPatchMap{})
	pulumi.RegisterOutputType(IssuerPatchOutput{})
	pulumi.RegisterOutputType(IssuerPatchArrayOutput{})
	pulumi.RegisterOutputType(IssuerPatchMapOutput{})
}
