// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Challenge is a type to represent a Challenge request with an ACME server
type ChallengePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ChallengeSpecPatchPtrOutput     `pulumi:"spec"`
	Status   ChallengeStatusPatchPtrOutput   `pulumi:"status"`
}

// NewChallengePatch registers a new resource with the given unique name, arguments, and options.
func NewChallengePatch(ctx *pulumi.Context,
	name string, args *ChallengePatchArgs, opts ...pulumi.ResourceOption) (*ChallengePatch, error) {
	if args == nil {
		args = &ChallengePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("acme.cert-manager.io/v1")
	args.Kind = pulumi.StringPtr("Challenge")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ChallengePatch
	err := ctx.RegisterResource("kubernetes:acme.cert-manager.io/v1:ChallengePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChallengePatch gets an existing ChallengePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChallengePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChallengePatchState, opts ...pulumi.ResourceOption) (*ChallengePatch, error) {
	var resource ChallengePatch
	err := ctx.ReadResource("kubernetes:acme.cert-manager.io/v1:ChallengePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChallengePatch resources.
type challengePatchState struct {
}

type ChallengePatchState struct {
}

func (ChallengePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*challengePatchState)(nil)).Elem()
}

type challengePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ChallengeSpecPatch     `pulumi:"spec"`
}

// The set of arguments for constructing a ChallengePatch resource.
type ChallengePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ChallengeSpecPatchPtrInput
}

func (ChallengePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*challengePatchArgs)(nil)).Elem()
}

type ChallengePatchInput interface {
	pulumi.Input

	ToChallengePatchOutput() ChallengePatchOutput
	ToChallengePatchOutputWithContext(ctx context.Context) ChallengePatchOutput
}

func (*ChallengePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengePatch)(nil)).Elem()
}

func (i *ChallengePatch) ToChallengePatchOutput() ChallengePatchOutput {
	return i.ToChallengePatchOutputWithContext(context.Background())
}

func (i *ChallengePatch) ToChallengePatchOutputWithContext(ctx context.Context) ChallengePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengePatchOutput)
}

// ChallengePatchArrayInput is an input type that accepts ChallengePatchArray and ChallengePatchArrayOutput values.
// You can construct a concrete instance of `ChallengePatchArrayInput` via:
//
//	ChallengePatchArray{ ChallengePatchArgs{...} }
type ChallengePatchArrayInput interface {
	pulumi.Input

	ToChallengePatchArrayOutput() ChallengePatchArrayOutput
	ToChallengePatchArrayOutputWithContext(context.Context) ChallengePatchArrayOutput
}

type ChallengePatchArray []ChallengePatchInput

func (ChallengePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChallengePatch)(nil)).Elem()
}

func (i ChallengePatchArray) ToChallengePatchArrayOutput() ChallengePatchArrayOutput {
	return i.ToChallengePatchArrayOutputWithContext(context.Background())
}

func (i ChallengePatchArray) ToChallengePatchArrayOutputWithContext(ctx context.Context) ChallengePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengePatchArrayOutput)
}

// ChallengePatchMapInput is an input type that accepts ChallengePatchMap and ChallengePatchMapOutput values.
// You can construct a concrete instance of `ChallengePatchMapInput` via:
//
//	ChallengePatchMap{ "key": ChallengePatchArgs{...} }
type ChallengePatchMapInput interface {
	pulumi.Input

	ToChallengePatchMapOutput() ChallengePatchMapOutput
	ToChallengePatchMapOutputWithContext(context.Context) ChallengePatchMapOutput
}

type ChallengePatchMap map[string]ChallengePatchInput

func (ChallengePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChallengePatch)(nil)).Elem()
}

func (i ChallengePatchMap) ToChallengePatchMapOutput() ChallengePatchMapOutput {
	return i.ToChallengePatchMapOutputWithContext(context.Background())
}

func (i ChallengePatchMap) ToChallengePatchMapOutputWithContext(ctx context.Context) ChallengePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengePatchMapOutput)
}

type ChallengePatchOutput struct{ *pulumi.OutputState }

func (ChallengePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengePatch)(nil)).Elem()
}

func (o ChallengePatchOutput) ToChallengePatchOutput() ChallengePatchOutput {
	return o
}

func (o ChallengePatchOutput) ToChallengePatchOutputWithContext(ctx context.Context) ChallengePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ChallengePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChallengePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ChallengePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChallengePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ChallengePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ChallengePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ChallengePatchOutput) Spec() ChallengeSpecPatchPtrOutput {
	return o.ApplyT(func(v *ChallengePatch) ChallengeSpecPatchPtrOutput { return v.Spec }).(ChallengeSpecPatchPtrOutput)
}

func (o ChallengePatchOutput) Status() ChallengeStatusPatchPtrOutput {
	return o.ApplyT(func(v *ChallengePatch) ChallengeStatusPatchPtrOutput { return v.Status }).(ChallengeStatusPatchPtrOutput)
}

type ChallengePatchArrayOutput struct{ *pulumi.OutputState }

func (ChallengePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChallengePatch)(nil)).Elem()
}

func (o ChallengePatchArrayOutput) ToChallengePatchArrayOutput() ChallengePatchArrayOutput {
	return o
}

func (o ChallengePatchArrayOutput) ToChallengePatchArrayOutputWithContext(ctx context.Context) ChallengePatchArrayOutput {
	return o
}

func (o ChallengePatchArrayOutput) Index(i pulumi.IntInput) ChallengePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChallengePatch {
		return vs[0].([]*ChallengePatch)[vs[1].(int)]
	}).(ChallengePatchOutput)
}

type ChallengePatchMapOutput struct{ *pulumi.OutputState }

func (ChallengePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChallengePatch)(nil)).Elem()
}

func (o ChallengePatchMapOutput) ToChallengePatchMapOutput() ChallengePatchMapOutput {
	return o
}

func (o ChallengePatchMapOutput) ToChallengePatchMapOutputWithContext(ctx context.Context) ChallengePatchMapOutput {
	return o
}

func (o ChallengePatchMapOutput) MapIndex(k pulumi.StringInput) ChallengePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChallengePatch {
		return vs[0].(map[string]*ChallengePatch)[vs[1].(string)]
	}).(ChallengePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengePatchInput)(nil)).Elem(), &ChallengePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengePatchArrayInput)(nil)).Elem(), ChallengePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengePatchMapInput)(nil)).Elem(), ChallengePatchMap{})
	pulumi.RegisterOutputType(ChallengePatchOutput{})
	pulumi.RegisterOutputType(ChallengePatchArrayOutput{})
	pulumi.RegisterOutputType(ChallengePatchMapOutput{})
}
