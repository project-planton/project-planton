// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// OrderList is a list of Order
type OrderList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of orders. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items OrderTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewOrderList registers a new resource with the given unique name, arguments, and options.
func NewOrderList(ctx *pulumi.Context,
	name string, args *OrderListArgs, opts ...pulumi.ResourceOption) (*OrderList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("acme.cert-manager.io/v1")
	args.Kind = pulumi.StringPtr("OrderList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource OrderList
	err := ctx.RegisterResource("kubernetes:acme.cert-manager.io/v1:OrderList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrderList gets an existing OrderList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrderList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrderListState, opts ...pulumi.ResourceOption) (*OrderList, error) {
	var resource OrderList
	err := ctx.ReadResource("kubernetes:acme.cert-manager.io/v1:OrderList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrderList resources.
type orderListState struct {
}

type OrderListState struct {
}

func (OrderListState) ElementType() reflect.Type {
	return reflect.TypeOf((*orderListState)(nil)).Elem()
}

type orderListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of orders. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []OrderType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a OrderList resource.
type OrderListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of orders. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items OrderTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (OrderListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orderListArgs)(nil)).Elem()
}

type OrderListInput interface {
	pulumi.Input

	ToOrderListOutput() OrderListOutput
	ToOrderListOutputWithContext(ctx context.Context) OrderListOutput
}

func (*OrderList) ElementType() reflect.Type {
	return reflect.TypeOf((**OrderList)(nil)).Elem()
}

func (i *OrderList) ToOrderListOutput() OrderListOutput {
	return i.ToOrderListOutputWithContext(context.Background())
}

func (i *OrderList) ToOrderListOutputWithContext(ctx context.Context) OrderListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderListOutput)
}

// OrderListArrayInput is an input type that accepts OrderListArray and OrderListArrayOutput values.
// You can construct a concrete instance of `OrderListArrayInput` via:
//
//	OrderListArray{ OrderListArgs{...} }
type OrderListArrayInput interface {
	pulumi.Input

	ToOrderListArrayOutput() OrderListArrayOutput
	ToOrderListArrayOutputWithContext(context.Context) OrderListArrayOutput
}

type OrderListArray []OrderListInput

func (OrderListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrderList)(nil)).Elem()
}

func (i OrderListArray) ToOrderListArrayOutput() OrderListArrayOutput {
	return i.ToOrderListArrayOutputWithContext(context.Background())
}

func (i OrderListArray) ToOrderListArrayOutputWithContext(ctx context.Context) OrderListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderListArrayOutput)
}

// OrderListMapInput is an input type that accepts OrderListMap and OrderListMapOutput values.
// You can construct a concrete instance of `OrderListMapInput` via:
//
//	OrderListMap{ "key": OrderListArgs{...} }
type OrderListMapInput interface {
	pulumi.Input

	ToOrderListMapOutput() OrderListMapOutput
	ToOrderListMapOutputWithContext(context.Context) OrderListMapOutput
}

type OrderListMap map[string]OrderListInput

func (OrderListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrderList)(nil)).Elem()
}

func (i OrderListMap) ToOrderListMapOutput() OrderListMapOutput {
	return i.ToOrderListMapOutputWithContext(context.Background())
}

func (i OrderListMap) ToOrderListMapOutputWithContext(ctx context.Context) OrderListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderListMapOutput)
}

type OrderListOutput struct{ *pulumi.OutputState }

func (OrderListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrderList)(nil)).Elem()
}

func (o OrderListOutput) ToOrderListOutput() OrderListOutput {
	return o
}

func (o OrderListOutput) ToOrderListOutputWithContext(ctx context.Context) OrderListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o OrderListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *OrderList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of orders. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o OrderListOutput) Items() OrderTypeArrayOutput {
	return o.ApplyT(func(v *OrderList) OrderTypeArrayOutput { return v.Items }).(OrderTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OrderListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *OrderList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OrderListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *OrderList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type OrderListArrayOutput struct{ *pulumi.OutputState }

func (OrderListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrderList)(nil)).Elem()
}

func (o OrderListArrayOutput) ToOrderListArrayOutput() OrderListArrayOutput {
	return o
}

func (o OrderListArrayOutput) ToOrderListArrayOutputWithContext(ctx context.Context) OrderListArrayOutput {
	return o
}

func (o OrderListArrayOutput) Index(i pulumi.IntInput) OrderListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrderList {
		return vs[0].([]*OrderList)[vs[1].(int)]
	}).(OrderListOutput)
}

type OrderListMapOutput struct{ *pulumi.OutputState }

func (OrderListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrderList)(nil)).Elem()
}

func (o OrderListMapOutput) ToOrderListMapOutput() OrderListMapOutput {
	return o
}

func (o OrderListMapOutput) ToOrderListMapOutputWithContext(ctx context.Context) OrderListMapOutput {
	return o
}

func (o OrderListMapOutput) MapIndex(k pulumi.StringInput) OrderListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrderList {
		return vs[0].(map[string]*OrderList)[vs[1].(string)]
	}).(OrderListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrderListInput)(nil)).Elem(), &OrderList{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrderListArrayInput)(nil)).Elem(), OrderListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrderListMapInput)(nil)).Elem(), OrderListMap{})
	pulumi.RegisterOutputType(OrderListOutput{})
	pulumi.RegisterOutputType(OrderListArrayOutput{})
	pulumi.RegisterOutputType(OrderListMapOutput{})
}
