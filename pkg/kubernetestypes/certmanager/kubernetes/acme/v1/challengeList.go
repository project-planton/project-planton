// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ChallengeList is a list of Challenge
type ChallengeList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of challenges. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ChallengeTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewChallengeList registers a new resource with the given unique name, arguments, and options.
func NewChallengeList(ctx *pulumi.Context,
	name string, args *ChallengeListArgs, opts ...pulumi.ResourceOption) (*ChallengeList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("acme.cert-manager.io/v1")
	args.Kind = pulumi.StringPtr("ChallengeList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ChallengeList
	err := ctx.RegisterResource("kubernetes:acme.cert-manager.io/v1:ChallengeList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChallengeList gets an existing ChallengeList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChallengeList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChallengeListState, opts ...pulumi.ResourceOption) (*ChallengeList, error) {
	var resource ChallengeList
	err := ctx.ReadResource("kubernetes:acme.cert-manager.io/v1:ChallengeList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChallengeList resources.
type challengeListState struct {
}

type ChallengeListState struct {
}

func (ChallengeListState) ElementType() reflect.Type {
	return reflect.TypeOf((*challengeListState)(nil)).Elem()
}

type challengeListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of challenges. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ChallengeType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ChallengeList resource.
type ChallengeListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of challenges. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ChallengeTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ChallengeListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*challengeListArgs)(nil)).Elem()
}

type ChallengeListInput interface {
	pulumi.Input

	ToChallengeListOutput() ChallengeListOutput
	ToChallengeListOutputWithContext(ctx context.Context) ChallengeListOutput
}

func (*ChallengeList) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengeList)(nil)).Elem()
}

func (i *ChallengeList) ToChallengeListOutput() ChallengeListOutput {
	return i.ToChallengeListOutputWithContext(context.Background())
}

func (i *ChallengeList) ToChallengeListOutputWithContext(ctx context.Context) ChallengeListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeListOutput)
}

// ChallengeListArrayInput is an input type that accepts ChallengeListArray and ChallengeListArrayOutput values.
// You can construct a concrete instance of `ChallengeListArrayInput` via:
//
//	ChallengeListArray{ ChallengeListArgs{...} }
type ChallengeListArrayInput interface {
	pulumi.Input

	ToChallengeListArrayOutput() ChallengeListArrayOutput
	ToChallengeListArrayOutputWithContext(context.Context) ChallengeListArrayOutput
}

type ChallengeListArray []ChallengeListInput

func (ChallengeListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChallengeList)(nil)).Elem()
}

func (i ChallengeListArray) ToChallengeListArrayOutput() ChallengeListArrayOutput {
	return i.ToChallengeListArrayOutputWithContext(context.Background())
}

func (i ChallengeListArray) ToChallengeListArrayOutputWithContext(ctx context.Context) ChallengeListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeListArrayOutput)
}

// ChallengeListMapInput is an input type that accepts ChallengeListMap and ChallengeListMapOutput values.
// You can construct a concrete instance of `ChallengeListMapInput` via:
//
//	ChallengeListMap{ "key": ChallengeListArgs{...} }
type ChallengeListMapInput interface {
	pulumi.Input

	ToChallengeListMapOutput() ChallengeListMapOutput
	ToChallengeListMapOutputWithContext(context.Context) ChallengeListMapOutput
}

type ChallengeListMap map[string]ChallengeListInput

func (ChallengeListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChallengeList)(nil)).Elem()
}

func (i ChallengeListMap) ToChallengeListMapOutput() ChallengeListMapOutput {
	return i.ToChallengeListMapOutputWithContext(context.Background())
}

func (i ChallengeListMap) ToChallengeListMapOutputWithContext(ctx context.Context) ChallengeListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeListMapOutput)
}

type ChallengeListOutput struct{ *pulumi.OutputState }

func (ChallengeListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengeList)(nil)).Elem()
}

func (o ChallengeListOutput) ToChallengeListOutput() ChallengeListOutput {
	return o
}

func (o ChallengeListOutput) ToChallengeListOutputWithContext(ctx context.Context) ChallengeListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ChallengeListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of challenges. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ChallengeListOutput) Items() ChallengeTypeArrayOutput {
	return o.ApplyT(func(v *ChallengeList) ChallengeTypeArrayOutput { return v.Items }).(ChallengeTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ChallengeListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ChallengeListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ChallengeList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ChallengeListArrayOutput struct{ *pulumi.OutputState }

func (ChallengeListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChallengeList)(nil)).Elem()
}

func (o ChallengeListArrayOutput) ToChallengeListArrayOutput() ChallengeListArrayOutput {
	return o
}

func (o ChallengeListArrayOutput) ToChallengeListArrayOutputWithContext(ctx context.Context) ChallengeListArrayOutput {
	return o
}

func (o ChallengeListArrayOutput) Index(i pulumi.IntInput) ChallengeListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChallengeList {
		return vs[0].([]*ChallengeList)[vs[1].(int)]
	}).(ChallengeListOutput)
}

type ChallengeListMapOutput struct{ *pulumi.OutputState }

func (ChallengeListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChallengeList)(nil)).Elem()
}

func (o ChallengeListMapOutput) ToChallengeListMapOutput() ChallengeListMapOutput {
	return o
}

func (o ChallengeListMapOutput) ToChallengeListMapOutputWithContext(ctx context.Context) ChallengeListMapOutput {
	return o
}

func (o ChallengeListMapOutput) MapIndex(k pulumi.StringInput) ChallengeListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChallengeList {
		return vs[0].(map[string]*ChallengeList)[vs[1].(string)]
	}).(ChallengeListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeListInput)(nil)).Elem(), &ChallengeList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeListArrayInput)(nil)).Elem(), ChallengeListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeListMapInput)(nil)).Elem(), ChallengeListMap{})
	pulumi.RegisterOutputType(ChallengeListOutput{})
	pulumi.RegisterOutputType(ChallengeListArrayOutput{})
	pulumi.RegisterOutputType(ChallengeListMapOutput{})
}
