// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// postgresqlList is a list of postgresql
type PostgresqlList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of postgresqls. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PostgresqlTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewPostgresqlList registers a new resource with the given unique name, arguments, and options.
func NewPostgresqlList(ctx *pulumi.Context,
	name string, args *PostgresqlListArgs, opts ...pulumi.ResourceOption) (*PostgresqlList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("acid.zalan.do/v1")
	args.Kind = pulumi.StringPtr("postgresqlList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PostgresqlList
	err := ctx.RegisterResource("kubernetes:acid.zalan.do/v1:postgresqlList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresqlList gets an existing PostgresqlList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresqlList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresqlListState, opts ...pulumi.ResourceOption) (*PostgresqlList, error) {
	var resource PostgresqlList
	err := ctx.ReadResource("kubernetes:acid.zalan.do/v1:postgresqlList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresqlList resources.
type postgresqlListState struct {
}

type PostgresqlListState struct {
}

func (PostgresqlListState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresqlListState)(nil)).Elem()
}

type postgresqlListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of postgresqls. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []PostgresqlType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a PostgresqlList resource.
type PostgresqlListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of postgresqls. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PostgresqlTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (PostgresqlListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresqlListArgs)(nil)).Elem()
}

type PostgresqlListInput interface {
	pulumi.Input

	ToPostgresqlListOutput() PostgresqlListOutput
	ToPostgresqlListOutputWithContext(ctx context.Context) PostgresqlListOutput
}

func (*PostgresqlList) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlList)(nil)).Elem()
}

func (i *PostgresqlList) ToPostgresqlListOutput() PostgresqlListOutput {
	return i.ToPostgresqlListOutputWithContext(context.Background())
}

func (i *PostgresqlList) ToPostgresqlListOutputWithContext(ctx context.Context) PostgresqlListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlListOutput)
}

// PostgresqlListArrayInput is an input type that accepts PostgresqlListArray and PostgresqlListArrayOutput values.
// You can construct a concrete instance of `PostgresqlListArrayInput` via:
//
//	PostgresqlListArray{ PostgresqlListArgs{...} }
type PostgresqlListArrayInput interface {
	pulumi.Input

	ToPostgresqlListArrayOutput() PostgresqlListArrayOutput
	ToPostgresqlListArrayOutputWithContext(context.Context) PostgresqlListArrayOutput
}

type PostgresqlListArray []PostgresqlListInput

func (PostgresqlListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresqlList)(nil)).Elem()
}

func (i PostgresqlListArray) ToPostgresqlListArrayOutput() PostgresqlListArrayOutput {
	return i.ToPostgresqlListArrayOutputWithContext(context.Background())
}

func (i PostgresqlListArray) ToPostgresqlListArrayOutputWithContext(ctx context.Context) PostgresqlListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlListArrayOutput)
}

// PostgresqlListMapInput is an input type that accepts PostgresqlListMap and PostgresqlListMapOutput values.
// You can construct a concrete instance of `PostgresqlListMapInput` via:
//
//	PostgresqlListMap{ "key": PostgresqlListArgs{...} }
type PostgresqlListMapInput interface {
	pulumi.Input

	ToPostgresqlListMapOutput() PostgresqlListMapOutput
	ToPostgresqlListMapOutputWithContext(context.Context) PostgresqlListMapOutput
}

type PostgresqlListMap map[string]PostgresqlListInput

func (PostgresqlListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresqlList)(nil)).Elem()
}

func (i PostgresqlListMap) ToPostgresqlListMapOutput() PostgresqlListMapOutput {
	return i.ToPostgresqlListMapOutputWithContext(context.Background())
}

func (i PostgresqlListMap) ToPostgresqlListMapOutputWithContext(ctx context.Context) PostgresqlListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlListMapOutput)
}

type PostgresqlListOutput struct{ *pulumi.OutputState }

func (PostgresqlListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlList)(nil)).Elem()
}

func (o PostgresqlListOutput) ToPostgresqlListOutput() PostgresqlListOutput {
	return o
}

func (o PostgresqlListOutput) ToPostgresqlListOutputWithContext(ctx context.Context) PostgresqlListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PostgresqlListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresqlList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of postgresqls. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o PostgresqlListOutput) Items() PostgresqlTypeArrayOutput {
	return o.ApplyT(func(v *PostgresqlList) PostgresqlTypeArrayOutput { return v.Items }).(PostgresqlTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgresqlListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresqlList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgresqlListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *PostgresqlList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type PostgresqlListArrayOutput struct{ *pulumi.OutputState }

func (PostgresqlListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresqlList)(nil)).Elem()
}

func (o PostgresqlListArrayOutput) ToPostgresqlListArrayOutput() PostgresqlListArrayOutput {
	return o
}

func (o PostgresqlListArrayOutput) ToPostgresqlListArrayOutputWithContext(ctx context.Context) PostgresqlListArrayOutput {
	return o
}

func (o PostgresqlListArrayOutput) Index(i pulumi.IntInput) PostgresqlListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostgresqlList {
		return vs[0].([]*PostgresqlList)[vs[1].(int)]
	}).(PostgresqlListOutput)
}

type PostgresqlListMapOutput struct{ *pulumi.OutputState }

func (PostgresqlListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresqlList)(nil)).Elem()
}

func (o PostgresqlListMapOutput) ToPostgresqlListMapOutput() PostgresqlListMapOutput {
	return o
}

func (o PostgresqlListMapOutput) ToPostgresqlListMapOutputWithContext(ctx context.Context) PostgresqlListMapOutput {
	return o
}

func (o PostgresqlListMapOutput) MapIndex(k pulumi.StringInput) PostgresqlListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostgresqlList {
		return vs[0].(map[string]*PostgresqlList)[vs[1].(string)]
	}).(PostgresqlListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlListInput)(nil)).Elem(), &PostgresqlList{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlListArrayInput)(nil)).Elem(), PostgresqlListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlListMapInput)(nil)).Elem(), PostgresqlListMap{})
	pulumi.RegisterOutputType(PostgresqlListOutput{})
	pulumi.RegisterOutputType(PostgresqlListArrayOutput{})
	pulumi.RegisterOutputType(PostgresqlListMapOutput{})
}
