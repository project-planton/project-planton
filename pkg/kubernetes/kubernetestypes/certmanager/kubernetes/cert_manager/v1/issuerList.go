// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IssuerList is a list of Issuer
type IssuerList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of issuers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items IssuerTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewIssuerList registers a new resource with the given unique name, arguments, and options.
func NewIssuerList(ctx *pulumi.Context,
	name string, args *IssuerListArgs, opts ...pulumi.ResourceOption) (*IssuerList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("cert-manager.io/v1")
	args.Kind = pulumi.StringPtr("IssuerList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource IssuerList
	err := ctx.RegisterResource("kubernetes:cert-manager.io/v1:IssuerList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIssuerList gets an existing IssuerList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIssuerList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IssuerListState, opts ...pulumi.ResourceOption) (*IssuerList, error) {
	var resource IssuerList
	err := ctx.ReadResource("kubernetes:cert-manager.io/v1:IssuerList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IssuerList resources.
type issuerListState struct {
}

type IssuerListState struct {
}

func (IssuerListState) ElementType() reflect.Type {
	return reflect.TypeOf((*issuerListState)(nil)).Elem()
}

type issuerListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of issuers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []IssuerType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a IssuerList resource.
type IssuerListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of issuers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items IssuerTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (IssuerListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*issuerListArgs)(nil)).Elem()
}

type IssuerListInput interface {
	pulumi.Input

	ToIssuerListOutput() IssuerListOutput
	ToIssuerListOutputWithContext(ctx context.Context) IssuerListOutput
}

func (*IssuerList) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuerList)(nil)).Elem()
}

func (i *IssuerList) ToIssuerListOutput() IssuerListOutput {
	return i.ToIssuerListOutputWithContext(context.Background())
}

func (i *IssuerList) ToIssuerListOutputWithContext(ctx context.Context) IssuerListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuerListOutput)
}

// IssuerListArrayInput is an input type that accepts IssuerListArray and IssuerListArrayOutput values.
// You can construct a concrete instance of `IssuerListArrayInput` via:
//
//	IssuerListArray{ IssuerListArgs{...} }
type IssuerListArrayInput interface {
	pulumi.Input

	ToIssuerListArrayOutput() IssuerListArrayOutput
	ToIssuerListArrayOutputWithContext(context.Context) IssuerListArrayOutput
}

type IssuerListArray []IssuerListInput

func (IssuerListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IssuerList)(nil)).Elem()
}

func (i IssuerListArray) ToIssuerListArrayOutput() IssuerListArrayOutput {
	return i.ToIssuerListArrayOutputWithContext(context.Background())
}

func (i IssuerListArray) ToIssuerListArrayOutputWithContext(ctx context.Context) IssuerListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuerListArrayOutput)
}

// IssuerListMapInput is an input type that accepts IssuerListMap and IssuerListMapOutput values.
// You can construct a concrete instance of `IssuerListMapInput` via:
//
//	IssuerListMap{ "key": IssuerListArgs{...} }
type IssuerListMapInput interface {
	pulumi.Input

	ToIssuerListMapOutput() IssuerListMapOutput
	ToIssuerListMapOutputWithContext(context.Context) IssuerListMapOutput
}

type IssuerListMap map[string]IssuerListInput

func (IssuerListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IssuerList)(nil)).Elem()
}

func (i IssuerListMap) ToIssuerListMapOutput() IssuerListMapOutput {
	return i.ToIssuerListMapOutputWithContext(context.Background())
}

func (i IssuerListMap) ToIssuerListMapOutputWithContext(ctx context.Context) IssuerListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuerListMapOutput)
}

type IssuerListOutput struct{ *pulumi.OutputState }

func (IssuerListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuerList)(nil)).Elem()
}

func (o IssuerListOutput) ToIssuerListOutput() IssuerListOutput {
	return o
}

func (o IssuerListOutput) ToIssuerListOutputWithContext(ctx context.Context) IssuerListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o IssuerListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *IssuerList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of issuers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o IssuerListOutput) Items() IssuerTypeArrayOutput {
	return o.ApplyT(func(v *IssuerList) IssuerTypeArrayOutput { return v.Items }).(IssuerTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o IssuerListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *IssuerList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o IssuerListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *IssuerList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type IssuerListArrayOutput struct{ *pulumi.OutputState }

func (IssuerListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IssuerList)(nil)).Elem()
}

func (o IssuerListArrayOutput) ToIssuerListArrayOutput() IssuerListArrayOutput {
	return o
}

func (o IssuerListArrayOutput) ToIssuerListArrayOutputWithContext(ctx context.Context) IssuerListArrayOutput {
	return o
}

func (o IssuerListArrayOutput) Index(i pulumi.IntInput) IssuerListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IssuerList {
		return vs[0].([]*IssuerList)[vs[1].(int)]
	}).(IssuerListOutput)
}

type IssuerListMapOutput struct{ *pulumi.OutputState }

func (IssuerListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IssuerList)(nil)).Elem()
}

func (o IssuerListMapOutput) ToIssuerListMapOutput() IssuerListMapOutput {
	return o
}

func (o IssuerListMapOutput) ToIssuerListMapOutputWithContext(ctx context.Context) IssuerListMapOutput {
	return o
}

func (o IssuerListMapOutput) MapIndex(k pulumi.StringInput) IssuerListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IssuerList {
		return vs[0].(map[string]*IssuerList)[vs[1].(string)]
	}).(IssuerListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IssuerListInput)(nil)).Elem(), &IssuerList{})
	pulumi.RegisterInputType(reflect.TypeOf((*IssuerListArrayInput)(nil)).Elem(), IssuerListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IssuerListMapInput)(nil)).Elem(), IssuerListMap{})
	pulumi.RegisterOutputType(IssuerListOutput{})
	pulumi.RegisterOutputType(IssuerListArrayOutput{})
	pulumi.RegisterOutputType(IssuerListMapOutput{})
}
