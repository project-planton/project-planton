// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Issuer represents a certificate issuing authority which can be
// referenced as part of `issuerRef` fields.
// It is scoped to a single namespace and can therefore only be referenced by
// resources within the same namespace.
type Issuer struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     IssuerSpecOutput        `pulumi:"spec"`
	Status   IssuerStatusPtrOutput   `pulumi:"status"`
}

// NewIssuer registers a new resource with the given unique name, arguments, and options.
func NewIssuer(ctx *pulumi.Context,
	name string, args *IssuerArgs, opts ...pulumi.ResourceOption) (*Issuer, error) {
	if args == nil {
		args = &IssuerArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("cert-manager.io/v1")
	args.Kind = pulumi.StringPtr("Issuer")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Issuer
	err := ctx.RegisterResource("kubernetes:cert-manager.io/v1:Issuer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIssuer gets an existing Issuer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIssuer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IssuerState, opts ...pulumi.ResourceOption) (*Issuer, error) {
	var resource Issuer
	err := ctx.ReadResource("kubernetes:cert-manager.io/v1:Issuer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Issuer resources.
type issuerState struct {
}

type IssuerState struct {
}

func (IssuerState) ElementType() reflect.Type {
	return reflect.TypeOf((*issuerState)(nil)).Elem()
}

type issuerArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *IssuerSpec        `pulumi:"spec"`
}

// The set of arguments for constructing a Issuer resource.
type IssuerArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     IssuerSpecPtrInput
}

func (IssuerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*issuerArgs)(nil)).Elem()
}

type IssuerInput interface {
	pulumi.Input

	ToIssuerOutput() IssuerOutput
	ToIssuerOutputWithContext(ctx context.Context) IssuerOutput
}

func (*Issuer) ElementType() reflect.Type {
	return reflect.TypeOf((**Issuer)(nil)).Elem()
}

func (i *Issuer) ToIssuerOutput() IssuerOutput {
	return i.ToIssuerOutputWithContext(context.Background())
}

func (i *Issuer) ToIssuerOutputWithContext(ctx context.Context) IssuerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuerOutput)
}

// IssuerArrayInput is an input type that accepts IssuerArray and IssuerArrayOutput values.
// You can construct a concrete instance of `IssuerArrayInput` via:
//
//	IssuerArray{ IssuerArgs{...} }
type IssuerArrayInput interface {
	pulumi.Input

	ToIssuerArrayOutput() IssuerArrayOutput
	ToIssuerArrayOutputWithContext(context.Context) IssuerArrayOutput
}

type IssuerArray []IssuerInput

func (IssuerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Issuer)(nil)).Elem()
}

func (i IssuerArray) ToIssuerArrayOutput() IssuerArrayOutput {
	return i.ToIssuerArrayOutputWithContext(context.Background())
}

func (i IssuerArray) ToIssuerArrayOutputWithContext(ctx context.Context) IssuerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuerArrayOutput)
}

// IssuerMapInput is an input type that accepts IssuerMap and IssuerMapOutput values.
// You can construct a concrete instance of `IssuerMapInput` via:
//
//	IssuerMap{ "key": IssuerArgs{...} }
type IssuerMapInput interface {
	pulumi.Input

	ToIssuerMapOutput() IssuerMapOutput
	ToIssuerMapOutputWithContext(context.Context) IssuerMapOutput
}

type IssuerMap map[string]IssuerInput

func (IssuerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Issuer)(nil)).Elem()
}

func (i IssuerMap) ToIssuerMapOutput() IssuerMapOutput {
	return i.ToIssuerMapOutputWithContext(context.Background())
}

func (i IssuerMap) ToIssuerMapOutputWithContext(ctx context.Context) IssuerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuerMapOutput)
}

type IssuerOutput struct{ *pulumi.OutputState }

func (IssuerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Issuer)(nil)).Elem()
}

func (o IssuerOutput) ToIssuerOutput() IssuerOutput {
	return o
}

func (o IssuerOutput) ToIssuerOutputWithContext(ctx context.Context) IssuerOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o IssuerOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Issuer) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o IssuerOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Issuer) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o IssuerOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Issuer) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o IssuerOutput) Spec() IssuerSpecOutput {
	return o.ApplyT(func(v *Issuer) IssuerSpecOutput { return v.Spec }).(IssuerSpecOutput)
}

func (o IssuerOutput) Status() IssuerStatusPtrOutput {
	return o.ApplyT(func(v *Issuer) IssuerStatusPtrOutput { return v.Status }).(IssuerStatusPtrOutput)
}

type IssuerArrayOutput struct{ *pulumi.OutputState }

func (IssuerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Issuer)(nil)).Elem()
}

func (o IssuerArrayOutput) ToIssuerArrayOutput() IssuerArrayOutput {
	return o
}

func (o IssuerArrayOutput) ToIssuerArrayOutputWithContext(ctx context.Context) IssuerArrayOutput {
	return o
}

func (o IssuerArrayOutput) Index(i pulumi.IntInput) IssuerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Issuer {
		return vs[0].([]*Issuer)[vs[1].(int)]
	}).(IssuerOutput)
}

type IssuerMapOutput struct{ *pulumi.OutputState }

func (IssuerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Issuer)(nil)).Elem()
}

func (o IssuerMapOutput) ToIssuerMapOutput() IssuerMapOutput {
	return o
}

func (o IssuerMapOutput) ToIssuerMapOutputWithContext(ctx context.Context) IssuerMapOutput {
	return o
}

func (o IssuerMapOutput) MapIndex(k pulumi.StringInput) IssuerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Issuer {
		return vs[0].(map[string]*Issuer)[vs[1].(string)]
	}).(IssuerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IssuerInput)(nil)).Elem(), &Issuer{})
	pulumi.RegisterInputType(reflect.TypeOf((*IssuerArrayInput)(nil)).Elem(), IssuerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IssuerMapInput)(nil)).Elem(), IssuerMap{})
	pulumi.RegisterOutputType(IssuerOutput{})
	pulumi.RegisterOutputType(IssuerArrayOutput{})
	pulumi.RegisterOutputType(IssuerMapOutput{})
}
