// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Order is a type to represent an Order with an ACME server
type Order struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     OrderSpecOutput         `pulumi:"spec"`
	Status   OrderStatusPtrOutput    `pulumi:"status"`
}

// NewOrder registers a new resource with the given unique name, arguments, and options.
func NewOrder(ctx *pulumi.Context,
	name string, args *OrderArgs, opts ...pulumi.ResourceOption) (*Order, error) {
	if args == nil {
		args = &OrderArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("acme.cert-manager.io/v1")
	args.Kind = pulumi.StringPtr("Order")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Order
	err := ctx.RegisterResource("kubernetes:acme.cert-manager.io/v1:Order", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrder gets an existing Order resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrderState, opts ...pulumi.ResourceOption) (*Order, error) {
	var resource Order
	err := ctx.ReadResource("kubernetes:acme.cert-manager.io/v1:Order", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Order resources.
type orderState struct {
}

type OrderState struct {
}

func (OrderState) ElementType() reflect.Type {
	return reflect.TypeOf((*orderState)(nil)).Elem()
}

type orderArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *OrderSpec         `pulumi:"spec"`
}

// The set of arguments for constructing a Order resource.
type OrderArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     OrderSpecPtrInput
}

func (OrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orderArgs)(nil)).Elem()
}

type OrderInput interface {
	pulumi.Input

	ToOrderOutput() OrderOutput
	ToOrderOutputWithContext(ctx context.Context) OrderOutput
}

func (*Order) ElementType() reflect.Type {
	return reflect.TypeOf((**Order)(nil)).Elem()
}

func (i *Order) ToOrderOutput() OrderOutput {
	return i.ToOrderOutputWithContext(context.Background())
}

func (i *Order) ToOrderOutputWithContext(ctx context.Context) OrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderOutput)
}

// OrderArrayInput is an input type that accepts OrderArray and OrderArrayOutput values.
// You can construct a concrete instance of `OrderArrayInput` via:
//
//	OrderArray{ OrderArgs{...} }
type OrderArrayInput interface {
	pulumi.Input

	ToOrderArrayOutput() OrderArrayOutput
	ToOrderArrayOutputWithContext(context.Context) OrderArrayOutput
}

type OrderArray []OrderInput

func (OrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Order)(nil)).Elem()
}

func (i OrderArray) ToOrderArrayOutput() OrderArrayOutput {
	return i.ToOrderArrayOutputWithContext(context.Background())
}

func (i OrderArray) ToOrderArrayOutputWithContext(ctx context.Context) OrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderArrayOutput)
}

// OrderMapInput is an input type that accepts OrderMap and OrderMapOutput values.
// You can construct a concrete instance of `OrderMapInput` via:
//
//	OrderMap{ "key": OrderArgs{...} }
type OrderMapInput interface {
	pulumi.Input

	ToOrderMapOutput() OrderMapOutput
	ToOrderMapOutputWithContext(context.Context) OrderMapOutput
}

type OrderMap map[string]OrderInput

func (OrderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Order)(nil)).Elem()
}

func (i OrderMap) ToOrderMapOutput() OrderMapOutput {
	return i.ToOrderMapOutputWithContext(context.Background())
}

func (i OrderMap) ToOrderMapOutputWithContext(ctx context.Context) OrderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderMapOutput)
}

type OrderOutput struct{ *pulumi.OutputState }

func (OrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Order)(nil)).Elem()
}

func (o OrderOutput) ToOrderOutput() OrderOutput {
	return o
}

func (o OrderOutput) ToOrderOutputWithContext(ctx context.Context) OrderOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o OrderOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Order) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OrderOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Order) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o OrderOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Order) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o OrderOutput) Spec() OrderSpecOutput {
	return o.ApplyT(func(v *Order) OrderSpecOutput { return v.Spec }).(OrderSpecOutput)
}

func (o OrderOutput) Status() OrderStatusPtrOutput {
	return o.ApplyT(func(v *Order) OrderStatusPtrOutput { return v.Status }).(OrderStatusPtrOutput)
}

type OrderArrayOutput struct{ *pulumi.OutputState }

func (OrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Order)(nil)).Elem()
}

func (o OrderArrayOutput) ToOrderArrayOutput() OrderArrayOutput {
	return o
}

func (o OrderArrayOutput) ToOrderArrayOutputWithContext(ctx context.Context) OrderArrayOutput {
	return o
}

func (o OrderArrayOutput) Index(i pulumi.IntInput) OrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Order {
		return vs[0].([]*Order)[vs[1].(int)]
	}).(OrderOutput)
}

type OrderMapOutput struct{ *pulumi.OutputState }

func (OrderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Order)(nil)).Elem()
}

func (o OrderMapOutput) ToOrderMapOutput() OrderMapOutput {
	return o
}

func (o OrderMapOutput) ToOrderMapOutputWithContext(ctx context.Context) OrderMapOutput {
	return o
}

func (o OrderMapOutput) MapIndex(k pulumi.StringInput) OrderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Order {
		return vs[0].(map[string]*Order)[vs[1].(string)]
	}).(OrderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrderInput)(nil)).Elem(), &Order{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrderArrayInput)(nil)).Elem(), OrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrderMapInput)(nil)).Elem(), OrderMap{})
	pulumi.RegisterOutputType(OrderOutput{})
	pulumi.RegisterOutputType(OrderArrayOutput{})
	pulumi.RegisterOutputType(OrderMapOutput{})
}
