// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// HTTPRoute provides a way to route HTTP requests. This includes the capability
// to match requests by hostname, path, header, or query param. Filters can be
// used to specify additional processing steps. Backends specify where matching
// requests should be routed.
type HTTPRoutePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     HTTPRouteSpecPatchPtrOutput     `pulumi:"spec"`
	Status   HTTPRouteStatusPatchPtrOutput   `pulumi:"status"`
}

// NewHTTPRoutePatch registers a new resource with the given unique name, arguments, and options.
func NewHTTPRoutePatch(ctx *pulumi.Context,
	name string, args *HTTPRoutePatchArgs, opts ...pulumi.ResourceOption) (*HTTPRoutePatch, error) {
	if args == nil {
		args = &HTTPRoutePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1")
	args.Kind = pulumi.StringPtr("HTTPRoute")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:gateway.networking.k8s.io/v1beta1:HTTPRoutePatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource HTTPRoutePatch
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1:HTTPRoutePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHTTPRoutePatch gets an existing HTTPRoutePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHTTPRoutePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HTTPRoutePatchState, opts ...pulumi.ResourceOption) (*HTTPRoutePatch, error) {
	var resource HTTPRoutePatch
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1:HTTPRoutePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HTTPRoutePatch resources.
type httproutePatchState struct {
}

type HTTPRoutePatchState struct {
}

func (HTTPRoutePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*httproutePatchState)(nil)).Elem()
}

type httproutePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *HTTPRouteSpecPatch     `pulumi:"spec"`
}

// The set of arguments for constructing a HTTPRoutePatch resource.
type HTTPRoutePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     HTTPRouteSpecPatchPtrInput
}

func (HTTPRoutePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httproutePatchArgs)(nil)).Elem()
}

type HTTPRoutePatchInput interface {
	pulumi.Input

	ToHTTPRoutePatchOutput() HTTPRoutePatchOutput
	ToHTTPRoutePatchOutputWithContext(ctx context.Context) HTTPRoutePatchOutput
}

func (*HTTPRoutePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPRoutePatch)(nil)).Elem()
}

func (i *HTTPRoutePatch) ToHTTPRoutePatchOutput() HTTPRoutePatchOutput {
	return i.ToHTTPRoutePatchOutputWithContext(context.Background())
}

func (i *HTTPRoutePatch) ToHTTPRoutePatchOutputWithContext(ctx context.Context) HTTPRoutePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPRoutePatchOutput)
}

// HTTPRoutePatchArrayInput is an input type that accepts HTTPRoutePatchArray and HTTPRoutePatchArrayOutput values.
// You can construct a concrete instance of `HTTPRoutePatchArrayInput` via:
//
//	HTTPRoutePatchArray{ HTTPRoutePatchArgs{...} }
type HTTPRoutePatchArrayInput interface {
	pulumi.Input

	ToHTTPRoutePatchArrayOutput() HTTPRoutePatchArrayOutput
	ToHTTPRoutePatchArrayOutputWithContext(context.Context) HTTPRoutePatchArrayOutput
}

type HTTPRoutePatchArray []HTTPRoutePatchInput

func (HTTPRoutePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HTTPRoutePatch)(nil)).Elem()
}

func (i HTTPRoutePatchArray) ToHTTPRoutePatchArrayOutput() HTTPRoutePatchArrayOutput {
	return i.ToHTTPRoutePatchArrayOutputWithContext(context.Background())
}

func (i HTTPRoutePatchArray) ToHTTPRoutePatchArrayOutputWithContext(ctx context.Context) HTTPRoutePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPRoutePatchArrayOutput)
}

// HTTPRoutePatchMapInput is an input type that accepts HTTPRoutePatchMap and HTTPRoutePatchMapOutput values.
// You can construct a concrete instance of `HTTPRoutePatchMapInput` via:
//
//	HTTPRoutePatchMap{ "key": HTTPRoutePatchArgs{...} }
type HTTPRoutePatchMapInput interface {
	pulumi.Input

	ToHTTPRoutePatchMapOutput() HTTPRoutePatchMapOutput
	ToHTTPRoutePatchMapOutputWithContext(context.Context) HTTPRoutePatchMapOutput
}

type HTTPRoutePatchMap map[string]HTTPRoutePatchInput

func (HTTPRoutePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HTTPRoutePatch)(nil)).Elem()
}

func (i HTTPRoutePatchMap) ToHTTPRoutePatchMapOutput() HTTPRoutePatchMapOutput {
	return i.ToHTTPRoutePatchMapOutputWithContext(context.Background())
}

func (i HTTPRoutePatchMap) ToHTTPRoutePatchMapOutputWithContext(ctx context.Context) HTTPRoutePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPRoutePatchMapOutput)
}

type HTTPRoutePatchOutput struct{ *pulumi.OutputState }

func (HTTPRoutePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPRoutePatch)(nil)).Elem()
}

func (o HTTPRoutePatchOutput) ToHTTPRoutePatchOutput() HTTPRoutePatchOutput {
	return o
}

func (o HTTPRoutePatchOutput) ToHTTPRoutePatchOutputWithContext(ctx context.Context) HTTPRoutePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HTTPRoutePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPRoutePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HTTPRoutePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPRoutePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HTTPRoutePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *HTTPRoutePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o HTTPRoutePatchOutput) Spec() HTTPRouteSpecPatchPtrOutput {
	return o.ApplyT(func(v *HTTPRoutePatch) HTTPRouteSpecPatchPtrOutput { return v.Spec }).(HTTPRouteSpecPatchPtrOutput)
}

func (o HTTPRoutePatchOutput) Status() HTTPRouteStatusPatchPtrOutput {
	return o.ApplyT(func(v *HTTPRoutePatch) HTTPRouteStatusPatchPtrOutput { return v.Status }).(HTTPRouteStatusPatchPtrOutput)
}

type HTTPRoutePatchArrayOutput struct{ *pulumi.OutputState }

func (HTTPRoutePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HTTPRoutePatch)(nil)).Elem()
}

func (o HTTPRoutePatchArrayOutput) ToHTTPRoutePatchArrayOutput() HTTPRoutePatchArrayOutput {
	return o
}

func (o HTTPRoutePatchArrayOutput) ToHTTPRoutePatchArrayOutputWithContext(ctx context.Context) HTTPRoutePatchArrayOutput {
	return o
}

func (o HTTPRoutePatchArrayOutput) Index(i pulumi.IntInput) HTTPRoutePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HTTPRoutePatch {
		return vs[0].([]*HTTPRoutePatch)[vs[1].(int)]
	}).(HTTPRoutePatchOutput)
}

type HTTPRoutePatchMapOutput struct{ *pulumi.OutputState }

func (HTTPRoutePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HTTPRoutePatch)(nil)).Elem()
}

func (o HTTPRoutePatchMapOutput) ToHTTPRoutePatchMapOutput() HTTPRoutePatchMapOutput {
	return o
}

func (o HTTPRoutePatchMapOutput) ToHTTPRoutePatchMapOutputWithContext(ctx context.Context) HTTPRoutePatchMapOutput {
	return o
}

func (o HTTPRoutePatchMapOutput) MapIndex(k pulumi.StringInput) HTTPRoutePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HTTPRoutePatch {
		return vs[0].(map[string]*HTTPRoutePatch)[vs[1].(string)]
	}).(HTTPRoutePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPRoutePatchInput)(nil)).Elem(), &HTTPRoutePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPRoutePatchArrayInput)(nil)).Elem(), HTTPRoutePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPRoutePatchMapInput)(nil)).Elem(), HTTPRoutePatchMap{})
	pulumi.RegisterOutputType(HTTPRoutePatchOutput{})
	pulumi.RegisterOutputType(HTTPRoutePatchArrayOutput{})
	pulumi.RegisterOutputType(HTTPRoutePatchMapOutput{})
}
