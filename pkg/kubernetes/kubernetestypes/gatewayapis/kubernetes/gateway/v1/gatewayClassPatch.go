// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// GatewayClass describes a class of Gateways available to the user for creating
// Gateway resources.
//
// It is recommended that this resource be used as a template for Gateways. This
// means that a Gateway is based on the state of the GatewayClass at the time it
// was created and changes to the GatewayClass or associated parameters are not
// propagated down to existing Gateways. This recommendation is intended to
// limit the blast radius of changes to GatewayClass or associated parameters.
// If implementations choose to propagate GatewayClass changes to existing
// Gateways, that MUST be clearly documented by the implementation.
//
// Whenever one or more Gateways are using a GatewayClass, implementations SHOULD
// add the `gateway-exists-finalizer.gateway.networking.k8s.io` finalizer on the
// associated GatewayClass. This ensures that a GatewayClass associated with a
// Gateway is not deleted while in use.
//
// GatewayClass is a Cluster level resource.
type GatewayClassPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput  `pulumi:"metadata"`
	Spec     GatewayClassSpecPatchPtrOutput   `pulumi:"spec"`
	Status   GatewayClassStatusPatchPtrOutput `pulumi:"status"`
}

// NewGatewayClassPatch registers a new resource with the given unique name, arguments, and options.
func NewGatewayClassPatch(ctx *pulumi.Context,
	name string, args *GatewayClassPatchArgs, opts ...pulumi.ResourceOption) (*GatewayClassPatch, error) {
	if args == nil {
		args = &GatewayClassPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1")
	args.Kind = pulumi.StringPtr("GatewayClass")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:gateway.networking.k8s.io/v1beta1:GatewayClassPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GatewayClassPatch
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1:GatewayClassPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayClassPatch gets an existing GatewayClassPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayClassPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayClassPatchState, opts ...pulumi.ResourceOption) (*GatewayClassPatch, error) {
	var resource GatewayClassPatch
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1:GatewayClassPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayClassPatch resources.
type gatewayClassPatchState struct {
}

type GatewayClassPatchState struct {
}

func (GatewayClassPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayClassPatchState)(nil)).Elem()
}

type gatewayClassPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *GatewayClassSpecPatch  `pulumi:"spec"`
}

// The set of arguments for constructing a GatewayClassPatch resource.
type GatewayClassPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     GatewayClassSpecPatchPtrInput
}

func (GatewayClassPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayClassPatchArgs)(nil)).Elem()
}

type GatewayClassPatchInput interface {
	pulumi.Input

	ToGatewayClassPatchOutput() GatewayClassPatchOutput
	ToGatewayClassPatchOutputWithContext(ctx context.Context) GatewayClassPatchOutput
}

func (*GatewayClassPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayClassPatch)(nil)).Elem()
}

func (i *GatewayClassPatch) ToGatewayClassPatchOutput() GatewayClassPatchOutput {
	return i.ToGatewayClassPatchOutputWithContext(context.Background())
}

func (i *GatewayClassPatch) ToGatewayClassPatchOutputWithContext(ctx context.Context) GatewayClassPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayClassPatchOutput)
}

// GatewayClassPatchArrayInput is an input type that accepts GatewayClassPatchArray and GatewayClassPatchArrayOutput values.
// You can construct a concrete instance of `GatewayClassPatchArrayInput` via:
//
//	GatewayClassPatchArray{ GatewayClassPatchArgs{...} }
type GatewayClassPatchArrayInput interface {
	pulumi.Input

	ToGatewayClassPatchArrayOutput() GatewayClassPatchArrayOutput
	ToGatewayClassPatchArrayOutputWithContext(context.Context) GatewayClassPatchArrayOutput
}

type GatewayClassPatchArray []GatewayClassPatchInput

func (GatewayClassPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayClassPatch)(nil)).Elem()
}

func (i GatewayClassPatchArray) ToGatewayClassPatchArrayOutput() GatewayClassPatchArrayOutput {
	return i.ToGatewayClassPatchArrayOutputWithContext(context.Background())
}

func (i GatewayClassPatchArray) ToGatewayClassPatchArrayOutputWithContext(ctx context.Context) GatewayClassPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayClassPatchArrayOutput)
}

// GatewayClassPatchMapInput is an input type that accepts GatewayClassPatchMap and GatewayClassPatchMapOutput values.
// You can construct a concrete instance of `GatewayClassPatchMapInput` via:
//
//	GatewayClassPatchMap{ "key": GatewayClassPatchArgs{...} }
type GatewayClassPatchMapInput interface {
	pulumi.Input

	ToGatewayClassPatchMapOutput() GatewayClassPatchMapOutput
	ToGatewayClassPatchMapOutputWithContext(context.Context) GatewayClassPatchMapOutput
}

type GatewayClassPatchMap map[string]GatewayClassPatchInput

func (GatewayClassPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayClassPatch)(nil)).Elem()
}

func (i GatewayClassPatchMap) ToGatewayClassPatchMapOutput() GatewayClassPatchMapOutput {
	return i.ToGatewayClassPatchMapOutputWithContext(context.Background())
}

func (i GatewayClassPatchMap) ToGatewayClassPatchMapOutputWithContext(ctx context.Context) GatewayClassPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayClassPatchMapOutput)
}

type GatewayClassPatchOutput struct{ *pulumi.OutputState }

func (GatewayClassPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayClassPatch)(nil)).Elem()
}

func (o GatewayClassPatchOutput) ToGatewayClassPatchOutput() GatewayClassPatchOutput {
	return o
}

func (o GatewayClassPatchOutput) ToGatewayClassPatchOutputWithContext(ctx context.Context) GatewayClassPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GatewayClassPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayClassPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GatewayClassPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayClassPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GatewayClassPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *GatewayClassPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o GatewayClassPatchOutput) Spec() GatewayClassSpecPatchPtrOutput {
	return o.ApplyT(func(v *GatewayClassPatch) GatewayClassSpecPatchPtrOutput { return v.Spec }).(GatewayClassSpecPatchPtrOutput)
}

func (o GatewayClassPatchOutput) Status() GatewayClassStatusPatchPtrOutput {
	return o.ApplyT(func(v *GatewayClassPatch) GatewayClassStatusPatchPtrOutput { return v.Status }).(GatewayClassStatusPatchPtrOutput)
}

type GatewayClassPatchArrayOutput struct{ *pulumi.OutputState }

func (GatewayClassPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayClassPatch)(nil)).Elem()
}

func (o GatewayClassPatchArrayOutput) ToGatewayClassPatchArrayOutput() GatewayClassPatchArrayOutput {
	return o
}

func (o GatewayClassPatchArrayOutput) ToGatewayClassPatchArrayOutputWithContext(ctx context.Context) GatewayClassPatchArrayOutput {
	return o
}

func (o GatewayClassPatchArrayOutput) Index(i pulumi.IntInput) GatewayClassPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayClassPatch {
		return vs[0].([]*GatewayClassPatch)[vs[1].(int)]
	}).(GatewayClassPatchOutput)
}

type GatewayClassPatchMapOutput struct{ *pulumi.OutputState }

func (GatewayClassPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayClassPatch)(nil)).Elem()
}

func (o GatewayClassPatchMapOutput) ToGatewayClassPatchMapOutput() GatewayClassPatchMapOutput {
	return o
}

func (o GatewayClassPatchMapOutput) ToGatewayClassPatchMapOutputWithContext(ctx context.Context) GatewayClassPatchMapOutput {
	return o
}

func (o GatewayClassPatchMapOutput) MapIndex(k pulumi.StringInput) GatewayClassPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayClassPatch {
		return vs[0].(map[string]*GatewayClassPatch)[vs[1].(string)]
	}).(GatewayClassPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayClassPatchInput)(nil)).Elem(), &GatewayClassPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayClassPatchArrayInput)(nil)).Elem(), GatewayClassPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayClassPatchMapInput)(nil)).Elem(), GatewayClassPatchMap{})
	pulumi.RegisterOutputType(GatewayClassPatchOutput{})
	pulumi.RegisterOutputType(GatewayClassPatchArrayOutput{})
	pulumi.RegisterOutputType(GatewayClassPatchMapOutput{})
}
