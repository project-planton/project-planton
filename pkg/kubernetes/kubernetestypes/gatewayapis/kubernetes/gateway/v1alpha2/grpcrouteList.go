// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GRPCRouteList is a list of GRPCRoute
type GRPCRouteList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of grpcroutes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items GRPCRouteTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewGRPCRouteList registers a new resource with the given unique name, arguments, and options.
func NewGRPCRouteList(ctx *pulumi.Context,
	name string, args *GRPCRouteListArgs, opts ...pulumi.ResourceOption) (*GRPCRouteList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1alpha2")
	args.Kind = pulumi.StringPtr("GRPCRouteList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GRPCRouteList
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1alpha2:GRPCRouteList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGRPCRouteList gets an existing GRPCRouteList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGRPCRouteList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GRPCRouteListState, opts ...pulumi.ResourceOption) (*GRPCRouteList, error) {
	var resource GRPCRouteList
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1alpha2:GRPCRouteList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GRPCRouteList resources.
type grpcrouteListState struct {
}

type GRPCRouteListState struct {
}

func (GRPCRouteListState) ElementType() reflect.Type {
	return reflect.TypeOf((*grpcrouteListState)(nil)).Elem()
}

type grpcrouteListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of grpcroutes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []GRPCRouteType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a GRPCRouteList resource.
type GRPCRouteListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of grpcroutes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items GRPCRouteTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (GRPCRouteListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grpcrouteListArgs)(nil)).Elem()
}

type GRPCRouteListInput interface {
	pulumi.Input

	ToGRPCRouteListOutput() GRPCRouteListOutput
	ToGRPCRouteListOutputWithContext(ctx context.Context) GRPCRouteListOutput
}

func (*GRPCRouteList) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteList)(nil)).Elem()
}

func (i *GRPCRouteList) ToGRPCRouteListOutput() GRPCRouteListOutput {
	return i.ToGRPCRouteListOutputWithContext(context.Background())
}

func (i *GRPCRouteList) ToGRPCRouteListOutputWithContext(ctx context.Context) GRPCRouteListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteListOutput)
}

// GRPCRouteListArrayInput is an input type that accepts GRPCRouteListArray and GRPCRouteListArrayOutput values.
// You can construct a concrete instance of `GRPCRouteListArrayInput` via:
//
//	GRPCRouteListArray{ GRPCRouteListArgs{...} }
type GRPCRouteListArrayInput interface {
	pulumi.Input

	ToGRPCRouteListArrayOutput() GRPCRouteListArrayOutput
	ToGRPCRouteListArrayOutputWithContext(context.Context) GRPCRouteListArrayOutput
}

type GRPCRouteListArray []GRPCRouteListInput

func (GRPCRouteListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GRPCRouteList)(nil)).Elem()
}

func (i GRPCRouteListArray) ToGRPCRouteListArrayOutput() GRPCRouteListArrayOutput {
	return i.ToGRPCRouteListArrayOutputWithContext(context.Background())
}

func (i GRPCRouteListArray) ToGRPCRouteListArrayOutputWithContext(ctx context.Context) GRPCRouteListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteListArrayOutput)
}

// GRPCRouteListMapInput is an input type that accepts GRPCRouteListMap and GRPCRouteListMapOutput values.
// You can construct a concrete instance of `GRPCRouteListMapInput` via:
//
//	GRPCRouteListMap{ "key": GRPCRouteListArgs{...} }
type GRPCRouteListMapInput interface {
	pulumi.Input

	ToGRPCRouteListMapOutput() GRPCRouteListMapOutput
	ToGRPCRouteListMapOutputWithContext(context.Context) GRPCRouteListMapOutput
}

type GRPCRouteListMap map[string]GRPCRouteListInput

func (GRPCRouteListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GRPCRouteList)(nil)).Elem()
}

func (i GRPCRouteListMap) ToGRPCRouteListMapOutput() GRPCRouteListMapOutput {
	return i.ToGRPCRouteListMapOutputWithContext(context.Background())
}

func (i GRPCRouteListMap) ToGRPCRouteListMapOutputWithContext(ctx context.Context) GRPCRouteListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteListMapOutput)
}

type GRPCRouteListOutput struct{ *pulumi.OutputState }

func (GRPCRouteListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteList)(nil)).Elem()
}

func (o GRPCRouteListOutput) ToGRPCRouteListOutput() GRPCRouteListOutput {
	return o
}

func (o GRPCRouteListOutput) ToGRPCRouteListOutputWithContext(ctx context.Context) GRPCRouteListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GRPCRouteListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *GRPCRouteList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of grpcroutes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o GRPCRouteListOutput) Items() GRPCRouteTypeArrayOutput {
	return o.ApplyT(func(v *GRPCRouteList) GRPCRouteTypeArrayOutput { return v.Items }).(GRPCRouteTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GRPCRouteListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *GRPCRouteList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GRPCRouteListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *GRPCRouteList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type GRPCRouteListArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GRPCRouteList)(nil)).Elem()
}

func (o GRPCRouteListArrayOutput) ToGRPCRouteListArrayOutput() GRPCRouteListArrayOutput {
	return o
}

func (o GRPCRouteListArrayOutput) ToGRPCRouteListArrayOutputWithContext(ctx context.Context) GRPCRouteListArrayOutput {
	return o
}

func (o GRPCRouteListArrayOutput) Index(i pulumi.IntInput) GRPCRouteListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GRPCRouteList {
		return vs[0].([]*GRPCRouteList)[vs[1].(int)]
	}).(GRPCRouteListOutput)
}

type GRPCRouteListMapOutput struct{ *pulumi.OutputState }

func (GRPCRouteListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GRPCRouteList)(nil)).Elem()
}

func (o GRPCRouteListMapOutput) ToGRPCRouteListMapOutput() GRPCRouteListMapOutput {
	return o
}

func (o GRPCRouteListMapOutput) ToGRPCRouteListMapOutputWithContext(ctx context.Context) GRPCRouteListMapOutput {
	return o
}

func (o GRPCRouteListMapOutput) MapIndex(k pulumi.StringInput) GRPCRouteListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GRPCRouteList {
		return vs[0].(map[string]*GRPCRouteList)[vs[1].(string)]
	}).(GRPCRouteListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteListInput)(nil)).Elem(), &GRPCRouteList{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteListArrayInput)(nil)).Elem(), GRPCRouteListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteListMapInput)(nil)).Elem(), GRPCRouteListMap{})
	pulumi.RegisterOutputType(GRPCRouteListOutput{})
	pulumi.RegisterOutputType(GRPCRouteListArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteListMapOutput{})
}
