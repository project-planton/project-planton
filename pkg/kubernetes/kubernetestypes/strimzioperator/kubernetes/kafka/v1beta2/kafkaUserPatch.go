// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type KafkaUserPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     KafkaUserSpecPatchPtrOutput     `pulumi:"spec"`
	Status   KafkaUserStatusPatchPtrOutput   `pulumi:"status"`
}

// NewKafkaUserPatch registers a new resource with the given unique name, arguments, and options.
func NewKafkaUserPatch(ctx *pulumi.Context,
	name string, args *KafkaUserPatchArgs, opts ...pulumi.ResourceOption) (*KafkaUserPatch, error) {
	if args == nil {
		args = &KafkaUserPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaUser")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:kafka.strimzi.io/v1alpha1:KafkaUserPatch"),
		},
		{
			Type: pulumi.String("kubernetes:kafka.strimzi.io/v1beta1:KafkaUserPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaUserPatch
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaUserPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaUserPatch gets an existing KafkaUserPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaUserPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaUserPatchState, opts ...pulumi.ResourceOption) (*KafkaUserPatch, error) {
	var resource KafkaUserPatch
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaUserPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaUserPatch resources.
type kafkaUserPatchState struct {
}

type KafkaUserPatchState struct {
}

func (KafkaUserPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaUserPatchState)(nil)).Elem()
}

type kafkaUserPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *KafkaUserSpecPatch     `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaUserPatch resource.
type KafkaUserPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     KafkaUserSpecPatchPtrInput
}

func (KafkaUserPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaUserPatchArgs)(nil)).Elem()
}

type KafkaUserPatchInput interface {
	pulumi.Input

	ToKafkaUserPatchOutput() KafkaUserPatchOutput
	ToKafkaUserPatchOutputWithContext(ctx context.Context) KafkaUserPatchOutput
}

func (*KafkaUserPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserPatch)(nil)).Elem()
}

func (i *KafkaUserPatch) ToKafkaUserPatchOutput() KafkaUserPatchOutput {
	return i.ToKafkaUserPatchOutputWithContext(context.Background())
}

func (i *KafkaUserPatch) ToKafkaUserPatchOutputWithContext(ctx context.Context) KafkaUserPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserPatchOutput)
}

// KafkaUserPatchArrayInput is an input type that accepts KafkaUserPatchArray and KafkaUserPatchArrayOutput values.
// You can construct a concrete instance of `KafkaUserPatchArrayInput` via:
//
//	KafkaUserPatchArray{ KafkaUserPatchArgs{...} }
type KafkaUserPatchArrayInput interface {
	pulumi.Input

	ToKafkaUserPatchArrayOutput() KafkaUserPatchArrayOutput
	ToKafkaUserPatchArrayOutputWithContext(context.Context) KafkaUserPatchArrayOutput
}

type KafkaUserPatchArray []KafkaUserPatchInput

func (KafkaUserPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaUserPatch)(nil)).Elem()
}

func (i KafkaUserPatchArray) ToKafkaUserPatchArrayOutput() KafkaUserPatchArrayOutput {
	return i.ToKafkaUserPatchArrayOutputWithContext(context.Background())
}

func (i KafkaUserPatchArray) ToKafkaUserPatchArrayOutputWithContext(ctx context.Context) KafkaUserPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserPatchArrayOutput)
}

// KafkaUserPatchMapInput is an input type that accepts KafkaUserPatchMap and KafkaUserPatchMapOutput values.
// You can construct a concrete instance of `KafkaUserPatchMapInput` via:
//
//	KafkaUserPatchMap{ "key": KafkaUserPatchArgs{...} }
type KafkaUserPatchMapInput interface {
	pulumi.Input

	ToKafkaUserPatchMapOutput() KafkaUserPatchMapOutput
	ToKafkaUserPatchMapOutputWithContext(context.Context) KafkaUserPatchMapOutput
}

type KafkaUserPatchMap map[string]KafkaUserPatchInput

func (KafkaUserPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaUserPatch)(nil)).Elem()
}

func (i KafkaUserPatchMap) ToKafkaUserPatchMapOutput() KafkaUserPatchMapOutput {
	return i.ToKafkaUserPatchMapOutputWithContext(context.Background())
}

func (i KafkaUserPatchMap) ToKafkaUserPatchMapOutputWithContext(ctx context.Context) KafkaUserPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserPatchMapOutput)
}

type KafkaUserPatchOutput struct{ *pulumi.OutputState }

func (KafkaUserPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserPatch)(nil)).Elem()
}

func (o KafkaUserPatchOutput) ToKafkaUserPatchOutput() KafkaUserPatchOutput {
	return o
}

func (o KafkaUserPatchOutput) ToKafkaUserPatchOutputWithContext(ctx context.Context) KafkaUserPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaUserPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaUserPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaUserPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *KafkaUserPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o KafkaUserPatchOutput) Spec() KafkaUserSpecPatchPtrOutput {
	return o.ApplyT(func(v *KafkaUserPatch) KafkaUserSpecPatchPtrOutput { return v.Spec }).(KafkaUserSpecPatchPtrOutput)
}

func (o KafkaUserPatchOutput) Status() KafkaUserStatusPatchPtrOutput {
	return o.ApplyT(func(v *KafkaUserPatch) KafkaUserStatusPatchPtrOutput { return v.Status }).(KafkaUserStatusPatchPtrOutput)
}

type KafkaUserPatchArrayOutput struct{ *pulumi.OutputState }

func (KafkaUserPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaUserPatch)(nil)).Elem()
}

func (o KafkaUserPatchArrayOutput) ToKafkaUserPatchArrayOutput() KafkaUserPatchArrayOutput {
	return o
}

func (o KafkaUserPatchArrayOutput) ToKafkaUserPatchArrayOutputWithContext(ctx context.Context) KafkaUserPatchArrayOutput {
	return o
}

func (o KafkaUserPatchArrayOutput) Index(i pulumi.IntInput) KafkaUserPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaUserPatch {
		return vs[0].([]*KafkaUserPatch)[vs[1].(int)]
	}).(KafkaUserPatchOutput)
}

type KafkaUserPatchMapOutput struct{ *pulumi.OutputState }

func (KafkaUserPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaUserPatch)(nil)).Elem()
}

func (o KafkaUserPatchMapOutput) ToKafkaUserPatchMapOutput() KafkaUserPatchMapOutput {
	return o
}

func (o KafkaUserPatchMapOutput) ToKafkaUserPatchMapOutputWithContext(ctx context.Context) KafkaUserPatchMapOutput {
	return o
}

func (o KafkaUserPatchMapOutput) MapIndex(k pulumi.StringInput) KafkaUserPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaUserPatch {
		return vs[0].(map[string]*KafkaUserPatch)[vs[1].(string)]
	}).(KafkaUserPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserPatchInput)(nil)).Elem(), &KafkaUserPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserPatchArrayInput)(nil)).Elem(), KafkaUserPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserPatchMapInput)(nil)).Elem(), KafkaUserPatchMap{})
	pulumi.RegisterOutputType(KafkaUserPatchOutput{})
	pulumi.RegisterOutputType(KafkaUserPatchArrayOutput{})
	pulumi.RegisterOutputType(KafkaUserPatchMapOutput{})
}
