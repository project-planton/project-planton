// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type KafkaRebalancePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput    `pulumi:"metadata"`
	Spec     KafkaRebalanceSpecPatchPtrOutput   `pulumi:"spec"`
	Status   KafkaRebalanceStatusPatchPtrOutput `pulumi:"status"`
}

// NewKafkaRebalancePatch registers a new resource with the given unique name, arguments, and options.
func NewKafkaRebalancePatch(ctx *pulumi.Context,
	name string, args *KafkaRebalancePatchArgs, opts ...pulumi.ResourceOption) (*KafkaRebalancePatch, error) {
	if args == nil {
		args = &KafkaRebalancePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaRebalance")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaRebalancePatch
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaRebalancePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaRebalancePatch gets an existing KafkaRebalancePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaRebalancePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaRebalancePatchState, opts ...pulumi.ResourceOption) (*KafkaRebalancePatch, error) {
	var resource KafkaRebalancePatch
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaRebalancePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaRebalancePatch resources.
type kafkaRebalancePatchState struct {
}

type KafkaRebalancePatchState struct {
}

func (KafkaRebalancePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaRebalancePatchState)(nil)).Elem()
}

type kafkaRebalancePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch  `pulumi:"metadata"`
	Spec     *KafkaRebalanceSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaRebalancePatch resource.
type KafkaRebalancePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     KafkaRebalanceSpecPatchPtrInput
}

func (KafkaRebalancePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaRebalancePatchArgs)(nil)).Elem()
}

type KafkaRebalancePatchInput interface {
	pulumi.Input

	ToKafkaRebalancePatchOutput() KafkaRebalancePatchOutput
	ToKafkaRebalancePatchOutputWithContext(ctx context.Context) KafkaRebalancePatchOutput
}

func (*KafkaRebalancePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaRebalancePatch)(nil)).Elem()
}

func (i *KafkaRebalancePatch) ToKafkaRebalancePatchOutput() KafkaRebalancePatchOutput {
	return i.ToKafkaRebalancePatchOutputWithContext(context.Background())
}

func (i *KafkaRebalancePatch) ToKafkaRebalancePatchOutputWithContext(ctx context.Context) KafkaRebalancePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRebalancePatchOutput)
}

// KafkaRebalancePatchArrayInput is an input type that accepts KafkaRebalancePatchArray and KafkaRebalancePatchArrayOutput values.
// You can construct a concrete instance of `KafkaRebalancePatchArrayInput` via:
//
//	KafkaRebalancePatchArray{ KafkaRebalancePatchArgs{...} }
type KafkaRebalancePatchArrayInput interface {
	pulumi.Input

	ToKafkaRebalancePatchArrayOutput() KafkaRebalancePatchArrayOutput
	ToKafkaRebalancePatchArrayOutputWithContext(context.Context) KafkaRebalancePatchArrayOutput
}

type KafkaRebalancePatchArray []KafkaRebalancePatchInput

func (KafkaRebalancePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaRebalancePatch)(nil)).Elem()
}

func (i KafkaRebalancePatchArray) ToKafkaRebalancePatchArrayOutput() KafkaRebalancePatchArrayOutput {
	return i.ToKafkaRebalancePatchArrayOutputWithContext(context.Background())
}

func (i KafkaRebalancePatchArray) ToKafkaRebalancePatchArrayOutputWithContext(ctx context.Context) KafkaRebalancePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRebalancePatchArrayOutput)
}

// KafkaRebalancePatchMapInput is an input type that accepts KafkaRebalancePatchMap and KafkaRebalancePatchMapOutput values.
// You can construct a concrete instance of `KafkaRebalancePatchMapInput` via:
//
//	KafkaRebalancePatchMap{ "key": KafkaRebalancePatchArgs{...} }
type KafkaRebalancePatchMapInput interface {
	pulumi.Input

	ToKafkaRebalancePatchMapOutput() KafkaRebalancePatchMapOutput
	ToKafkaRebalancePatchMapOutputWithContext(context.Context) KafkaRebalancePatchMapOutput
}

type KafkaRebalancePatchMap map[string]KafkaRebalancePatchInput

func (KafkaRebalancePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaRebalancePatch)(nil)).Elem()
}

func (i KafkaRebalancePatchMap) ToKafkaRebalancePatchMapOutput() KafkaRebalancePatchMapOutput {
	return i.ToKafkaRebalancePatchMapOutputWithContext(context.Background())
}

func (i KafkaRebalancePatchMap) ToKafkaRebalancePatchMapOutputWithContext(ctx context.Context) KafkaRebalancePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRebalancePatchMapOutput)
}

type KafkaRebalancePatchOutput struct{ *pulumi.OutputState }

func (KafkaRebalancePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaRebalancePatch)(nil)).Elem()
}

func (o KafkaRebalancePatchOutput) ToKafkaRebalancePatchOutput() KafkaRebalancePatchOutput {
	return o
}

func (o KafkaRebalancePatchOutput) ToKafkaRebalancePatchOutputWithContext(ctx context.Context) KafkaRebalancePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaRebalancePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaRebalancePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaRebalancePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaRebalancePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaRebalancePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *KafkaRebalancePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o KafkaRebalancePatchOutput) Spec() KafkaRebalanceSpecPatchPtrOutput {
	return o.ApplyT(func(v *KafkaRebalancePatch) KafkaRebalanceSpecPatchPtrOutput { return v.Spec }).(KafkaRebalanceSpecPatchPtrOutput)
}

func (o KafkaRebalancePatchOutput) Status() KafkaRebalanceStatusPatchPtrOutput {
	return o.ApplyT(func(v *KafkaRebalancePatch) KafkaRebalanceStatusPatchPtrOutput { return v.Status }).(KafkaRebalanceStatusPatchPtrOutput)
}

type KafkaRebalancePatchArrayOutput struct{ *pulumi.OutputState }

func (KafkaRebalancePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaRebalancePatch)(nil)).Elem()
}

func (o KafkaRebalancePatchArrayOutput) ToKafkaRebalancePatchArrayOutput() KafkaRebalancePatchArrayOutput {
	return o
}

func (o KafkaRebalancePatchArrayOutput) ToKafkaRebalancePatchArrayOutputWithContext(ctx context.Context) KafkaRebalancePatchArrayOutput {
	return o
}

func (o KafkaRebalancePatchArrayOutput) Index(i pulumi.IntInput) KafkaRebalancePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaRebalancePatch {
		return vs[0].([]*KafkaRebalancePatch)[vs[1].(int)]
	}).(KafkaRebalancePatchOutput)
}

type KafkaRebalancePatchMapOutput struct{ *pulumi.OutputState }

func (KafkaRebalancePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaRebalancePatch)(nil)).Elem()
}

func (o KafkaRebalancePatchMapOutput) ToKafkaRebalancePatchMapOutput() KafkaRebalancePatchMapOutput {
	return o
}

func (o KafkaRebalancePatchMapOutput) ToKafkaRebalancePatchMapOutputWithContext(ctx context.Context) KafkaRebalancePatchMapOutput {
	return o
}

func (o KafkaRebalancePatchMapOutput) MapIndex(k pulumi.StringInput) KafkaRebalancePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaRebalancePatch {
		return vs[0].(map[string]*KafkaRebalancePatch)[vs[1].(string)]
	}).(KafkaRebalancePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaRebalancePatchInput)(nil)).Elem(), &KafkaRebalancePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaRebalancePatchArrayInput)(nil)).Elem(), KafkaRebalancePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaRebalancePatchMapInput)(nil)).Elem(), KafkaRebalancePatchMap{})
	pulumi.RegisterOutputType(KafkaRebalancePatchOutput{})
	pulumi.RegisterOutputType(KafkaRebalancePatchArrayOutput{})
	pulumi.RegisterOutputType(KafkaRebalancePatchMapOutput{})
}
