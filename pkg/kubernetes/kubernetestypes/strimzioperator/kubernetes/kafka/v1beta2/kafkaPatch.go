// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type KafkaPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     KafkaSpecPatchPtrOutput         `pulumi:"spec"`
	Status   KafkaStatusPatchPtrOutput       `pulumi:"status"`
}

// NewKafkaPatch registers a new resource with the given unique name, arguments, and options.
func NewKafkaPatch(ctx *pulumi.Context,
	name string, args *KafkaPatchArgs, opts ...pulumi.ResourceOption) (*KafkaPatch, error) {
	if args == nil {
		args = &KafkaPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("Kafka")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaPatch
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaPatch gets an existing KafkaPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaPatchState, opts ...pulumi.ResourceOption) (*KafkaPatch, error) {
	var resource KafkaPatch
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaPatch resources.
type kafkaPatchState struct {
}

type KafkaPatchState struct {
}

func (KafkaPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaPatchState)(nil)).Elem()
}

type kafkaPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *KafkaSpecPatch         `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaPatch resource.
type KafkaPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     KafkaSpecPatchPtrInput
}

func (KafkaPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaPatchArgs)(nil)).Elem()
}

type KafkaPatchInput interface {
	pulumi.Input

	ToKafkaPatchOutput() KafkaPatchOutput
	ToKafkaPatchOutputWithContext(ctx context.Context) KafkaPatchOutput
}

func (*KafkaPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaPatch)(nil)).Elem()
}

func (i *KafkaPatch) ToKafkaPatchOutput() KafkaPatchOutput {
	return i.ToKafkaPatchOutputWithContext(context.Background())
}

func (i *KafkaPatch) ToKafkaPatchOutputWithContext(ctx context.Context) KafkaPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaPatchOutput)
}

// KafkaPatchArrayInput is an input type that accepts KafkaPatchArray and KafkaPatchArrayOutput values.
// You can construct a concrete instance of `KafkaPatchArrayInput` via:
//
//	KafkaPatchArray{ KafkaPatchArgs{...} }
type KafkaPatchArrayInput interface {
	pulumi.Input

	ToKafkaPatchArrayOutput() KafkaPatchArrayOutput
	ToKafkaPatchArrayOutputWithContext(context.Context) KafkaPatchArrayOutput
}

type KafkaPatchArray []KafkaPatchInput

func (KafkaPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaPatch)(nil)).Elem()
}

func (i KafkaPatchArray) ToKafkaPatchArrayOutput() KafkaPatchArrayOutput {
	return i.ToKafkaPatchArrayOutputWithContext(context.Background())
}

func (i KafkaPatchArray) ToKafkaPatchArrayOutputWithContext(ctx context.Context) KafkaPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaPatchArrayOutput)
}

// KafkaPatchMapInput is an input type that accepts KafkaPatchMap and KafkaPatchMapOutput values.
// You can construct a concrete instance of `KafkaPatchMapInput` via:
//
//	KafkaPatchMap{ "key": KafkaPatchArgs{...} }
type KafkaPatchMapInput interface {
	pulumi.Input

	ToKafkaPatchMapOutput() KafkaPatchMapOutput
	ToKafkaPatchMapOutputWithContext(context.Context) KafkaPatchMapOutput
}

type KafkaPatchMap map[string]KafkaPatchInput

func (KafkaPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaPatch)(nil)).Elem()
}

func (i KafkaPatchMap) ToKafkaPatchMapOutput() KafkaPatchMapOutput {
	return i.ToKafkaPatchMapOutputWithContext(context.Background())
}

func (i KafkaPatchMap) ToKafkaPatchMapOutputWithContext(ctx context.Context) KafkaPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaPatchMapOutput)
}

type KafkaPatchOutput struct{ *pulumi.OutputState }

func (KafkaPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaPatch)(nil)).Elem()
}

func (o KafkaPatchOutput) ToKafkaPatchOutput() KafkaPatchOutput {
	return o
}

func (o KafkaPatchOutput) ToKafkaPatchOutputWithContext(ctx context.Context) KafkaPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *KafkaPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o KafkaPatchOutput) Spec() KafkaSpecPatchPtrOutput {
	return o.ApplyT(func(v *KafkaPatch) KafkaSpecPatchPtrOutput { return v.Spec }).(KafkaSpecPatchPtrOutput)
}

func (o KafkaPatchOutput) Status() KafkaStatusPatchPtrOutput {
	return o.ApplyT(func(v *KafkaPatch) KafkaStatusPatchPtrOutput { return v.Status }).(KafkaStatusPatchPtrOutput)
}

type KafkaPatchArrayOutput struct{ *pulumi.OutputState }

func (KafkaPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaPatch)(nil)).Elem()
}

func (o KafkaPatchArrayOutput) ToKafkaPatchArrayOutput() KafkaPatchArrayOutput {
	return o
}

func (o KafkaPatchArrayOutput) ToKafkaPatchArrayOutputWithContext(ctx context.Context) KafkaPatchArrayOutput {
	return o
}

func (o KafkaPatchArrayOutput) Index(i pulumi.IntInput) KafkaPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaPatch {
		return vs[0].([]*KafkaPatch)[vs[1].(int)]
	}).(KafkaPatchOutput)
}

type KafkaPatchMapOutput struct{ *pulumi.OutputState }

func (KafkaPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaPatch)(nil)).Elem()
}

func (o KafkaPatchMapOutput) ToKafkaPatchMapOutput() KafkaPatchMapOutput {
	return o
}

func (o KafkaPatchMapOutput) ToKafkaPatchMapOutputWithContext(ctx context.Context) KafkaPatchMapOutput {
	return o
}

func (o KafkaPatchMapOutput) MapIndex(k pulumi.StringInput) KafkaPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaPatch {
		return vs[0].(map[string]*KafkaPatch)[vs[1].(string)]
	}).(KafkaPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaPatchInput)(nil)).Elem(), &KafkaPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaPatchArrayInput)(nil)).Elem(), KafkaPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaPatchMapInput)(nil)).Elem(), KafkaPatchMap{})
	pulumi.RegisterOutputType(KafkaPatchOutput{})
	pulumi.RegisterOutputType(KafkaPatchArrayOutput{})
	pulumi.RegisterOutputType(KafkaPatchMapOutput{})
}
