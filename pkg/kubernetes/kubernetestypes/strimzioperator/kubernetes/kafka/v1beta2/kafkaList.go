// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// KafkaList is a list of Kafka
type KafkaList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of kafkas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewKafkaList registers a new resource with the given unique name, arguments, and options.
func NewKafkaList(ctx *pulumi.Context,
	name string, args *KafkaListArgs, opts ...pulumi.ResourceOption) (*KafkaList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaList
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaList gets an existing KafkaList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaListState, opts ...pulumi.ResourceOption) (*KafkaList, error) {
	var resource KafkaList
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaList resources.
type kafkaListState struct {
}

type KafkaListState struct {
}

func (KafkaListState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaListState)(nil)).Elem()
}

type kafkaListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of kafkas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []KafkaType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a KafkaList resource.
type KafkaListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of kafkas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (KafkaListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaListArgs)(nil)).Elem()
}

type KafkaListInput interface {
	pulumi.Input

	ToKafkaListOutput() KafkaListOutput
	ToKafkaListOutputWithContext(ctx context.Context) KafkaListOutput
}

func (*KafkaList) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaList)(nil)).Elem()
}

func (i *KafkaList) ToKafkaListOutput() KafkaListOutput {
	return i.ToKafkaListOutputWithContext(context.Background())
}

func (i *KafkaList) ToKafkaListOutputWithContext(ctx context.Context) KafkaListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaListOutput)
}

// KafkaListArrayInput is an input type that accepts KafkaListArray and KafkaListArrayOutput values.
// You can construct a concrete instance of `KafkaListArrayInput` via:
//
//	KafkaListArray{ KafkaListArgs{...} }
type KafkaListArrayInput interface {
	pulumi.Input

	ToKafkaListArrayOutput() KafkaListArrayOutput
	ToKafkaListArrayOutputWithContext(context.Context) KafkaListArrayOutput
}

type KafkaListArray []KafkaListInput

func (KafkaListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaList)(nil)).Elem()
}

func (i KafkaListArray) ToKafkaListArrayOutput() KafkaListArrayOutput {
	return i.ToKafkaListArrayOutputWithContext(context.Background())
}

func (i KafkaListArray) ToKafkaListArrayOutputWithContext(ctx context.Context) KafkaListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaListArrayOutput)
}

// KafkaListMapInput is an input type that accepts KafkaListMap and KafkaListMapOutput values.
// You can construct a concrete instance of `KafkaListMapInput` via:
//
//	KafkaListMap{ "key": KafkaListArgs{...} }
type KafkaListMapInput interface {
	pulumi.Input

	ToKafkaListMapOutput() KafkaListMapOutput
	ToKafkaListMapOutputWithContext(context.Context) KafkaListMapOutput
}

type KafkaListMap map[string]KafkaListInput

func (KafkaListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaList)(nil)).Elem()
}

func (i KafkaListMap) ToKafkaListMapOutput() KafkaListMapOutput {
	return i.ToKafkaListMapOutputWithContext(context.Background())
}

func (i KafkaListMap) ToKafkaListMapOutputWithContext(ctx context.Context) KafkaListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaListMapOutput)
}

type KafkaListOutput struct{ *pulumi.OutputState }

func (KafkaListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaList)(nil)).Elem()
}

func (o KafkaListOutput) ToKafkaListOutput() KafkaListOutput {
	return o
}

func (o KafkaListOutput) ToKafkaListOutputWithContext(ctx context.Context) KafkaListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of kafkas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o KafkaListOutput) Items() KafkaTypeArrayOutput {
	return o.ApplyT(func(v *KafkaList) KafkaTypeArrayOutput { return v.Items }).(KafkaTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *KafkaList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type KafkaListArrayOutput struct{ *pulumi.OutputState }

func (KafkaListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaList)(nil)).Elem()
}

func (o KafkaListArrayOutput) ToKafkaListArrayOutput() KafkaListArrayOutput {
	return o
}

func (o KafkaListArrayOutput) ToKafkaListArrayOutputWithContext(ctx context.Context) KafkaListArrayOutput {
	return o
}

func (o KafkaListArrayOutput) Index(i pulumi.IntInput) KafkaListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaList {
		return vs[0].([]*KafkaList)[vs[1].(int)]
	}).(KafkaListOutput)
}

type KafkaListMapOutput struct{ *pulumi.OutputState }

func (KafkaListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaList)(nil)).Elem()
}

func (o KafkaListMapOutput) ToKafkaListMapOutput() KafkaListMapOutput {
	return o
}

func (o KafkaListMapOutput) ToKafkaListMapOutputWithContext(ctx context.Context) KafkaListMapOutput {
	return o
}

func (o KafkaListMapOutput) MapIndex(k pulumi.StringInput) KafkaListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaList {
		return vs[0].(map[string]*KafkaList)[vs[1].(string)]
	}).(KafkaListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaListInput)(nil)).Elem(), &KafkaList{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaListArrayInput)(nil)).Elem(), KafkaListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaListMapInput)(nil)).Elem(), KafkaListMap{})
	pulumi.RegisterOutputType(KafkaListOutput{})
	pulumi.RegisterOutputType(KafkaListArrayOutput{})
	pulumi.RegisterOutputType(KafkaListMapOutput{})
}
