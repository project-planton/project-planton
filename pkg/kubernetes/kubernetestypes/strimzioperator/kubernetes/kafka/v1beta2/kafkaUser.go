// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaUser struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput  `pulumi:"metadata"`
	Spec     KafkaUserSpecOutput      `pulumi:"spec"`
	Status   KafkaUserStatusPtrOutput `pulumi:"status"`
}

// NewKafkaUser registers a new resource with the given unique name, arguments, and options.
func NewKafkaUser(ctx *pulumi.Context,
	name string, args *KafkaUserArgs, opts ...pulumi.ResourceOption) (*KafkaUser, error) {
	if args == nil {
		args = &KafkaUserArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaUser")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:kafka.strimzi.io/v1alpha1:KafkaUser"),
		},
		{
			Type: pulumi.String("kubernetes:kafka.strimzi.io/v1beta1:KafkaUser"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaUser
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaUser gets an existing KafkaUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaUserState, opts ...pulumi.ResourceOption) (*KafkaUser, error) {
	var resource KafkaUser
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaUser resources.
type kafkaUserState struct {
}

type KafkaUserState struct {
}

func (KafkaUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaUserState)(nil)).Elem()
}

type kafkaUserArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *KafkaUserSpec     `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaUser resource.
type KafkaUserArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     KafkaUserSpecPtrInput
}

func (KafkaUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaUserArgs)(nil)).Elem()
}

type KafkaUserInput interface {
	pulumi.Input

	ToKafkaUserOutput() KafkaUserOutput
	ToKafkaUserOutputWithContext(ctx context.Context) KafkaUserOutput
}

func (*KafkaUser) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUser)(nil)).Elem()
}

func (i *KafkaUser) ToKafkaUserOutput() KafkaUserOutput {
	return i.ToKafkaUserOutputWithContext(context.Background())
}

func (i *KafkaUser) ToKafkaUserOutputWithContext(ctx context.Context) KafkaUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserOutput)
}

// KafkaUserArrayInput is an input type that accepts KafkaUserArray and KafkaUserArrayOutput values.
// You can construct a concrete instance of `KafkaUserArrayInput` via:
//
//	KafkaUserArray{ KafkaUserArgs{...} }
type KafkaUserArrayInput interface {
	pulumi.Input

	ToKafkaUserArrayOutput() KafkaUserArrayOutput
	ToKafkaUserArrayOutputWithContext(context.Context) KafkaUserArrayOutput
}

type KafkaUserArray []KafkaUserInput

func (KafkaUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaUser)(nil)).Elem()
}

func (i KafkaUserArray) ToKafkaUserArrayOutput() KafkaUserArrayOutput {
	return i.ToKafkaUserArrayOutputWithContext(context.Background())
}

func (i KafkaUserArray) ToKafkaUserArrayOutputWithContext(ctx context.Context) KafkaUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserArrayOutput)
}

// KafkaUserMapInput is an input type that accepts KafkaUserMap and KafkaUserMapOutput values.
// You can construct a concrete instance of `KafkaUserMapInput` via:
//
//	KafkaUserMap{ "key": KafkaUserArgs{...} }
type KafkaUserMapInput interface {
	pulumi.Input

	ToKafkaUserMapOutput() KafkaUserMapOutput
	ToKafkaUserMapOutputWithContext(context.Context) KafkaUserMapOutput
}

type KafkaUserMap map[string]KafkaUserInput

func (KafkaUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaUser)(nil)).Elem()
}

func (i KafkaUserMap) ToKafkaUserMapOutput() KafkaUserMapOutput {
	return i.ToKafkaUserMapOutputWithContext(context.Background())
}

func (i KafkaUserMap) ToKafkaUserMapOutputWithContext(ctx context.Context) KafkaUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserMapOutput)
}

type KafkaUserOutput struct{ *pulumi.OutputState }

func (KafkaUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUser)(nil)).Elem()
}

func (o KafkaUserOutput) ToKafkaUserOutput() KafkaUserOutput {
	return o
}

func (o KafkaUserOutput) ToKafkaUserOutputWithContext(ctx context.Context) KafkaUserOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaUserOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaUserOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaUserOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *KafkaUser) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o KafkaUserOutput) Spec() KafkaUserSpecOutput {
	return o.ApplyT(func(v *KafkaUser) KafkaUserSpecOutput { return v.Spec }).(KafkaUserSpecOutput)
}

func (o KafkaUserOutput) Status() KafkaUserStatusPtrOutput {
	return o.ApplyT(func(v *KafkaUser) KafkaUserStatusPtrOutput { return v.Status }).(KafkaUserStatusPtrOutput)
}

type KafkaUserArrayOutput struct{ *pulumi.OutputState }

func (KafkaUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaUser)(nil)).Elem()
}

func (o KafkaUserArrayOutput) ToKafkaUserArrayOutput() KafkaUserArrayOutput {
	return o
}

func (o KafkaUserArrayOutput) ToKafkaUserArrayOutputWithContext(ctx context.Context) KafkaUserArrayOutput {
	return o
}

func (o KafkaUserArrayOutput) Index(i pulumi.IntInput) KafkaUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaUser {
		return vs[0].([]*KafkaUser)[vs[1].(int)]
	}).(KafkaUserOutput)
}

type KafkaUserMapOutput struct{ *pulumi.OutputState }

func (KafkaUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaUser)(nil)).Elem()
}

func (o KafkaUserMapOutput) ToKafkaUserMapOutput() KafkaUserMapOutput {
	return o
}

func (o KafkaUserMapOutput) ToKafkaUserMapOutputWithContext(ctx context.Context) KafkaUserMapOutput {
	return o
}

func (o KafkaUserMapOutput) MapIndex(k pulumi.StringInput) KafkaUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaUser {
		return vs[0].(map[string]*KafkaUser)[vs[1].(string)]
	}).(KafkaUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserInput)(nil)).Elem(), &KafkaUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserArrayInput)(nil)).Elem(), KafkaUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserMapInput)(nil)).Elem(), KafkaUserMap{})
	pulumi.RegisterOutputType(KafkaUserOutput{})
	pulumi.RegisterOutputType(KafkaUserArrayOutput{})
	pulumi.RegisterOutputType(KafkaUserMapOutput{})
}
