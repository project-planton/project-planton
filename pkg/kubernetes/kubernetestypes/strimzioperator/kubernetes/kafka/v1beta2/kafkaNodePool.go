// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaNodePool struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput      `pulumi:"metadata"`
	Spec     KafkaNodePoolSpecOutput      `pulumi:"spec"`
	Status   KafkaNodePoolStatusPtrOutput `pulumi:"status"`
}

// NewKafkaNodePool registers a new resource with the given unique name, arguments, and options.
func NewKafkaNodePool(ctx *pulumi.Context,
	name string, args *KafkaNodePoolArgs, opts ...pulumi.ResourceOption) (*KafkaNodePool, error) {
	if args == nil {
		args = &KafkaNodePoolArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaNodePool")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaNodePool
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaNodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaNodePool gets an existing KafkaNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaNodePoolState, opts ...pulumi.ResourceOption) (*KafkaNodePool, error) {
	var resource KafkaNodePool
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaNodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaNodePool resources.
type kafkaNodePoolState struct {
}

type KafkaNodePoolState struct {
}

func (KafkaNodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaNodePoolState)(nil)).Elem()
}

type kafkaNodePoolArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *KafkaNodePoolSpec `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaNodePool resource.
type KafkaNodePoolArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     KafkaNodePoolSpecPtrInput
}

func (KafkaNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaNodePoolArgs)(nil)).Elem()
}

type KafkaNodePoolInput interface {
	pulumi.Input

	ToKafkaNodePoolOutput() KafkaNodePoolOutput
	ToKafkaNodePoolOutputWithContext(ctx context.Context) KafkaNodePoolOutput
}

func (*KafkaNodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaNodePool)(nil)).Elem()
}

func (i *KafkaNodePool) ToKafkaNodePoolOutput() KafkaNodePoolOutput {
	return i.ToKafkaNodePoolOutputWithContext(context.Background())
}

func (i *KafkaNodePool) ToKafkaNodePoolOutputWithContext(ctx context.Context) KafkaNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaNodePoolOutput)
}

// KafkaNodePoolArrayInput is an input type that accepts KafkaNodePoolArray and KafkaNodePoolArrayOutput values.
// You can construct a concrete instance of `KafkaNodePoolArrayInput` via:
//
//	KafkaNodePoolArray{ KafkaNodePoolArgs{...} }
type KafkaNodePoolArrayInput interface {
	pulumi.Input

	ToKafkaNodePoolArrayOutput() KafkaNodePoolArrayOutput
	ToKafkaNodePoolArrayOutputWithContext(context.Context) KafkaNodePoolArrayOutput
}

type KafkaNodePoolArray []KafkaNodePoolInput

func (KafkaNodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaNodePool)(nil)).Elem()
}

func (i KafkaNodePoolArray) ToKafkaNodePoolArrayOutput() KafkaNodePoolArrayOutput {
	return i.ToKafkaNodePoolArrayOutputWithContext(context.Background())
}

func (i KafkaNodePoolArray) ToKafkaNodePoolArrayOutputWithContext(ctx context.Context) KafkaNodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaNodePoolArrayOutput)
}

// KafkaNodePoolMapInput is an input type that accepts KafkaNodePoolMap and KafkaNodePoolMapOutput values.
// You can construct a concrete instance of `KafkaNodePoolMapInput` via:
//
//	KafkaNodePoolMap{ "key": KafkaNodePoolArgs{...} }
type KafkaNodePoolMapInput interface {
	pulumi.Input

	ToKafkaNodePoolMapOutput() KafkaNodePoolMapOutput
	ToKafkaNodePoolMapOutputWithContext(context.Context) KafkaNodePoolMapOutput
}

type KafkaNodePoolMap map[string]KafkaNodePoolInput

func (KafkaNodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaNodePool)(nil)).Elem()
}

func (i KafkaNodePoolMap) ToKafkaNodePoolMapOutput() KafkaNodePoolMapOutput {
	return i.ToKafkaNodePoolMapOutputWithContext(context.Background())
}

func (i KafkaNodePoolMap) ToKafkaNodePoolMapOutputWithContext(ctx context.Context) KafkaNodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaNodePoolMapOutput)
}

type KafkaNodePoolOutput struct{ *pulumi.OutputState }

func (KafkaNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaNodePool)(nil)).Elem()
}

func (o KafkaNodePoolOutput) ToKafkaNodePoolOutput() KafkaNodePoolOutput {
	return o
}

func (o KafkaNodePoolOutput) ToKafkaNodePoolOutputWithContext(ctx context.Context) KafkaNodePoolOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaNodePoolOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaNodePool) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaNodePoolOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaNodePool) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaNodePoolOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *KafkaNodePool) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o KafkaNodePoolOutput) Spec() KafkaNodePoolSpecOutput {
	return o.ApplyT(func(v *KafkaNodePool) KafkaNodePoolSpecOutput { return v.Spec }).(KafkaNodePoolSpecOutput)
}

func (o KafkaNodePoolOutput) Status() KafkaNodePoolStatusPtrOutput {
	return o.ApplyT(func(v *KafkaNodePool) KafkaNodePoolStatusPtrOutput { return v.Status }).(KafkaNodePoolStatusPtrOutput)
}

type KafkaNodePoolArrayOutput struct{ *pulumi.OutputState }

func (KafkaNodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaNodePool)(nil)).Elem()
}

func (o KafkaNodePoolArrayOutput) ToKafkaNodePoolArrayOutput() KafkaNodePoolArrayOutput {
	return o
}

func (o KafkaNodePoolArrayOutput) ToKafkaNodePoolArrayOutputWithContext(ctx context.Context) KafkaNodePoolArrayOutput {
	return o
}

func (o KafkaNodePoolArrayOutput) Index(i pulumi.IntInput) KafkaNodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaNodePool {
		return vs[0].([]*KafkaNodePool)[vs[1].(int)]
	}).(KafkaNodePoolOutput)
}

type KafkaNodePoolMapOutput struct{ *pulumi.OutputState }

func (KafkaNodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaNodePool)(nil)).Elem()
}

func (o KafkaNodePoolMapOutput) ToKafkaNodePoolMapOutput() KafkaNodePoolMapOutput {
	return o
}

func (o KafkaNodePoolMapOutput) ToKafkaNodePoolMapOutputWithContext(ctx context.Context) KafkaNodePoolMapOutput {
	return o
}

func (o KafkaNodePoolMapOutput) MapIndex(k pulumi.StringInput) KafkaNodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaNodePool {
		return vs[0].(map[string]*KafkaNodePool)[vs[1].(string)]
	}).(KafkaNodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaNodePoolInput)(nil)).Elem(), &KafkaNodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaNodePoolArrayInput)(nil)).Elem(), KafkaNodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaNodePoolMapInput)(nil)).Elem(), KafkaNodePoolMap{})
	pulumi.RegisterOutputType(KafkaNodePoolOutput{})
	pulumi.RegisterOutputType(KafkaNodePoolArrayOutput{})
	pulumi.RegisterOutputType(KafkaNodePoolMapOutput{})
}
