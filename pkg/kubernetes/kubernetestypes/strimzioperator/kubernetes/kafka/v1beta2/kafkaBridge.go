// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaBridge struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput    `pulumi:"metadata"`
	Spec     KafkaBridgeSpecOutput      `pulumi:"spec"`
	Status   KafkaBridgeStatusPtrOutput `pulumi:"status"`
}

// NewKafkaBridge registers a new resource with the given unique name, arguments, and options.
func NewKafkaBridge(ctx *pulumi.Context,
	name string, args *KafkaBridgeArgs, opts ...pulumi.ResourceOption) (*KafkaBridge, error) {
	if args == nil {
		args = &KafkaBridgeArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaBridge")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaBridge
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaBridge", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaBridge gets an existing KafkaBridge resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaBridge(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaBridgeState, opts ...pulumi.ResourceOption) (*KafkaBridge, error) {
	var resource KafkaBridge
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaBridge", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaBridge resources.
type kafkaBridgeState struct {
}

type KafkaBridgeState struct {
}

func (KafkaBridgeState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaBridgeState)(nil)).Elem()
}

type kafkaBridgeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *KafkaBridgeSpec   `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaBridge resource.
type KafkaBridgeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     KafkaBridgeSpecPtrInput
}

func (KafkaBridgeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaBridgeArgs)(nil)).Elem()
}

type KafkaBridgeInput interface {
	pulumi.Input

	ToKafkaBridgeOutput() KafkaBridgeOutput
	ToKafkaBridgeOutputWithContext(ctx context.Context) KafkaBridgeOutput
}

func (*KafkaBridge) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaBridge)(nil)).Elem()
}

func (i *KafkaBridge) ToKafkaBridgeOutput() KafkaBridgeOutput {
	return i.ToKafkaBridgeOutputWithContext(context.Background())
}

func (i *KafkaBridge) ToKafkaBridgeOutputWithContext(ctx context.Context) KafkaBridgeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaBridgeOutput)
}

// KafkaBridgeArrayInput is an input type that accepts KafkaBridgeArray and KafkaBridgeArrayOutput values.
// You can construct a concrete instance of `KafkaBridgeArrayInput` via:
//
//	KafkaBridgeArray{ KafkaBridgeArgs{...} }
type KafkaBridgeArrayInput interface {
	pulumi.Input

	ToKafkaBridgeArrayOutput() KafkaBridgeArrayOutput
	ToKafkaBridgeArrayOutputWithContext(context.Context) KafkaBridgeArrayOutput
}

type KafkaBridgeArray []KafkaBridgeInput

func (KafkaBridgeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaBridge)(nil)).Elem()
}

func (i KafkaBridgeArray) ToKafkaBridgeArrayOutput() KafkaBridgeArrayOutput {
	return i.ToKafkaBridgeArrayOutputWithContext(context.Background())
}

func (i KafkaBridgeArray) ToKafkaBridgeArrayOutputWithContext(ctx context.Context) KafkaBridgeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaBridgeArrayOutput)
}

// KafkaBridgeMapInput is an input type that accepts KafkaBridgeMap and KafkaBridgeMapOutput values.
// You can construct a concrete instance of `KafkaBridgeMapInput` via:
//
//	KafkaBridgeMap{ "key": KafkaBridgeArgs{...} }
type KafkaBridgeMapInput interface {
	pulumi.Input

	ToKafkaBridgeMapOutput() KafkaBridgeMapOutput
	ToKafkaBridgeMapOutputWithContext(context.Context) KafkaBridgeMapOutput
}

type KafkaBridgeMap map[string]KafkaBridgeInput

func (KafkaBridgeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaBridge)(nil)).Elem()
}

func (i KafkaBridgeMap) ToKafkaBridgeMapOutput() KafkaBridgeMapOutput {
	return i.ToKafkaBridgeMapOutputWithContext(context.Background())
}

func (i KafkaBridgeMap) ToKafkaBridgeMapOutputWithContext(ctx context.Context) KafkaBridgeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaBridgeMapOutput)
}

type KafkaBridgeOutput struct{ *pulumi.OutputState }

func (KafkaBridgeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaBridge)(nil)).Elem()
}

func (o KafkaBridgeOutput) ToKafkaBridgeOutput() KafkaBridgeOutput {
	return o
}

func (o KafkaBridgeOutput) ToKafkaBridgeOutputWithContext(ctx context.Context) KafkaBridgeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaBridgeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaBridge) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaBridgeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaBridge) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaBridgeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *KafkaBridge) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o KafkaBridgeOutput) Spec() KafkaBridgeSpecOutput {
	return o.ApplyT(func(v *KafkaBridge) KafkaBridgeSpecOutput { return v.Spec }).(KafkaBridgeSpecOutput)
}

func (o KafkaBridgeOutput) Status() KafkaBridgeStatusPtrOutput {
	return o.ApplyT(func(v *KafkaBridge) KafkaBridgeStatusPtrOutput { return v.Status }).(KafkaBridgeStatusPtrOutput)
}

type KafkaBridgeArrayOutput struct{ *pulumi.OutputState }

func (KafkaBridgeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaBridge)(nil)).Elem()
}

func (o KafkaBridgeArrayOutput) ToKafkaBridgeArrayOutput() KafkaBridgeArrayOutput {
	return o
}

func (o KafkaBridgeArrayOutput) ToKafkaBridgeArrayOutputWithContext(ctx context.Context) KafkaBridgeArrayOutput {
	return o
}

func (o KafkaBridgeArrayOutput) Index(i pulumi.IntInput) KafkaBridgeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaBridge {
		return vs[0].([]*KafkaBridge)[vs[1].(int)]
	}).(KafkaBridgeOutput)
}

type KafkaBridgeMapOutput struct{ *pulumi.OutputState }

func (KafkaBridgeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaBridge)(nil)).Elem()
}

func (o KafkaBridgeMapOutput) ToKafkaBridgeMapOutput() KafkaBridgeMapOutput {
	return o
}

func (o KafkaBridgeMapOutput) ToKafkaBridgeMapOutputWithContext(ctx context.Context) KafkaBridgeMapOutput {
	return o
}

func (o KafkaBridgeMapOutput) MapIndex(k pulumi.StringInput) KafkaBridgeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaBridge {
		return vs[0].(map[string]*KafkaBridge)[vs[1].(string)]
	}).(KafkaBridgeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaBridgeInput)(nil)).Elem(), &KafkaBridge{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaBridgeArrayInput)(nil)).Elem(), KafkaBridgeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaBridgeMapInput)(nil)).Elem(), KafkaBridgeMap{})
	pulumi.RegisterOutputType(KafkaBridgeOutput{})
	pulumi.RegisterOutputType(KafkaBridgeArrayOutput{})
	pulumi.RegisterOutputType(KafkaBridgeMapOutput{})
}
