// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaConnector struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput       `pulumi:"metadata"`
	Spec     KafkaConnectorSpecOutput      `pulumi:"spec"`
	Status   KafkaConnectorStatusPtrOutput `pulumi:"status"`
}

// NewKafkaConnector registers a new resource with the given unique name, arguments, and options.
func NewKafkaConnector(ctx *pulumi.Context,
	name string, args *KafkaConnectorArgs, opts ...pulumi.ResourceOption) (*KafkaConnector, error) {
	if args == nil {
		args = &KafkaConnectorArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaConnector")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaConnector
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaConnector gets an existing KafkaConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaConnectorState, opts ...pulumi.ResourceOption) (*KafkaConnector, error) {
	var resource KafkaConnector
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaConnector resources.
type kafkaConnectorState struct {
}

type KafkaConnectorState struct {
}

func (KafkaConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorState)(nil)).Elem()
}

type kafkaConnectorArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec     *KafkaConnectorSpec `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaConnector resource.
type KafkaConnectorArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     KafkaConnectorSpecPtrInput
}

func (KafkaConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorArgs)(nil)).Elem()
}

type KafkaConnectorInput interface {
	pulumi.Input

	ToKafkaConnectorOutput() KafkaConnectorOutput
	ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput
}

func (*KafkaConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnector)(nil)).Elem()
}

func (i *KafkaConnector) ToKafkaConnectorOutput() KafkaConnectorOutput {
	return i.ToKafkaConnectorOutputWithContext(context.Background())
}

func (i *KafkaConnector) ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorOutput)
}

// KafkaConnectorArrayInput is an input type that accepts KafkaConnectorArray and KafkaConnectorArrayOutput values.
// You can construct a concrete instance of `KafkaConnectorArrayInput` via:
//
//	KafkaConnectorArray{ KafkaConnectorArgs{...} }
type KafkaConnectorArrayInput interface {
	pulumi.Input

	ToKafkaConnectorArrayOutput() KafkaConnectorArrayOutput
	ToKafkaConnectorArrayOutputWithContext(context.Context) KafkaConnectorArrayOutput
}

type KafkaConnectorArray []KafkaConnectorInput

func (KafkaConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnector)(nil)).Elem()
}

func (i KafkaConnectorArray) ToKafkaConnectorArrayOutput() KafkaConnectorArrayOutput {
	return i.ToKafkaConnectorArrayOutputWithContext(context.Background())
}

func (i KafkaConnectorArray) ToKafkaConnectorArrayOutputWithContext(ctx context.Context) KafkaConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorArrayOutput)
}

// KafkaConnectorMapInput is an input type that accepts KafkaConnectorMap and KafkaConnectorMapOutput values.
// You can construct a concrete instance of `KafkaConnectorMapInput` via:
//
//	KafkaConnectorMap{ "key": KafkaConnectorArgs{...} }
type KafkaConnectorMapInput interface {
	pulumi.Input

	ToKafkaConnectorMapOutput() KafkaConnectorMapOutput
	ToKafkaConnectorMapOutputWithContext(context.Context) KafkaConnectorMapOutput
}

type KafkaConnectorMap map[string]KafkaConnectorInput

func (KafkaConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnector)(nil)).Elem()
}

func (i KafkaConnectorMap) ToKafkaConnectorMapOutput() KafkaConnectorMapOutput {
	return i.ToKafkaConnectorMapOutputWithContext(context.Background())
}

func (i KafkaConnectorMap) ToKafkaConnectorMapOutputWithContext(ctx context.Context) KafkaConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorMapOutput)
}

type KafkaConnectorOutput struct{ *pulumi.OutputState }

func (KafkaConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnector)(nil)).Elem()
}

func (o KafkaConnectorOutput) ToKafkaConnectorOutput() KafkaConnectorOutput {
	return o
}

func (o KafkaConnectorOutput) ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaConnectorOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaConnectorOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaConnectorOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *KafkaConnector) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o KafkaConnectorOutput) Spec() KafkaConnectorSpecOutput {
	return o.ApplyT(func(v *KafkaConnector) KafkaConnectorSpecOutput { return v.Spec }).(KafkaConnectorSpecOutput)
}

func (o KafkaConnectorOutput) Status() KafkaConnectorStatusPtrOutput {
	return o.ApplyT(func(v *KafkaConnector) KafkaConnectorStatusPtrOutput { return v.Status }).(KafkaConnectorStatusPtrOutput)
}

type KafkaConnectorArrayOutput struct{ *pulumi.OutputState }

func (KafkaConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnector)(nil)).Elem()
}

func (o KafkaConnectorArrayOutput) ToKafkaConnectorArrayOutput() KafkaConnectorArrayOutput {
	return o
}

func (o KafkaConnectorArrayOutput) ToKafkaConnectorArrayOutputWithContext(ctx context.Context) KafkaConnectorArrayOutput {
	return o
}

func (o KafkaConnectorArrayOutput) Index(i pulumi.IntInput) KafkaConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaConnector {
		return vs[0].([]*KafkaConnector)[vs[1].(int)]
	}).(KafkaConnectorOutput)
}

type KafkaConnectorMapOutput struct{ *pulumi.OutputState }

func (KafkaConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnector)(nil)).Elem()
}

func (o KafkaConnectorMapOutput) ToKafkaConnectorMapOutput() KafkaConnectorMapOutput {
	return o
}

func (o KafkaConnectorMapOutput) ToKafkaConnectorMapOutputWithContext(ctx context.Context) KafkaConnectorMapOutput {
	return o
}

func (o KafkaConnectorMapOutput) MapIndex(k pulumi.StringInput) KafkaConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaConnector {
		return vs[0].(map[string]*KafkaConnector)[vs[1].(string)]
	}).(KafkaConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorInput)(nil)).Elem(), &KafkaConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorArrayInput)(nil)).Elem(), KafkaConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorMapInput)(nil)).Elem(), KafkaConnectorMap{})
	pulumi.RegisterOutputType(KafkaConnectorOutput{})
	pulumi.RegisterOutputType(KafkaConnectorArrayOutput{})
	pulumi.RegisterOutputType(KafkaConnectorMapOutput{})
}
