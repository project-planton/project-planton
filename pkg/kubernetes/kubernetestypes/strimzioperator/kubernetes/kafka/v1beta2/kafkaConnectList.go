// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// KafkaConnectList is a list of KafkaConnect
type KafkaConnectList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of kafkaconnects. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaConnectTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewKafkaConnectList registers a new resource with the given unique name, arguments, and options.
func NewKafkaConnectList(ctx *pulumi.Context,
	name string, args *KafkaConnectListArgs, opts ...pulumi.ResourceOption) (*KafkaConnectList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaConnectList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaConnectList
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaConnectList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaConnectList gets an existing KafkaConnectList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaConnectList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaConnectListState, opts ...pulumi.ResourceOption) (*KafkaConnectList, error) {
	var resource KafkaConnectList
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaConnectList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaConnectList resources.
type kafkaConnectListState struct {
}

type KafkaConnectListState struct {
}

func (KafkaConnectListState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectListState)(nil)).Elem()
}

type kafkaConnectListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of kafkaconnects. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []KafkaConnectType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a KafkaConnectList resource.
type KafkaConnectListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of kafkaconnects. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaConnectTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (KafkaConnectListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectListArgs)(nil)).Elem()
}

type KafkaConnectListInput interface {
	pulumi.Input

	ToKafkaConnectListOutput() KafkaConnectListOutput
	ToKafkaConnectListOutputWithContext(ctx context.Context) KafkaConnectListOutput
}

func (*KafkaConnectList) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnectList)(nil)).Elem()
}

func (i *KafkaConnectList) ToKafkaConnectListOutput() KafkaConnectListOutput {
	return i.ToKafkaConnectListOutputWithContext(context.Background())
}

func (i *KafkaConnectList) ToKafkaConnectListOutputWithContext(ctx context.Context) KafkaConnectListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectListOutput)
}

// KafkaConnectListArrayInput is an input type that accepts KafkaConnectListArray and KafkaConnectListArrayOutput values.
// You can construct a concrete instance of `KafkaConnectListArrayInput` via:
//
//	KafkaConnectListArray{ KafkaConnectListArgs{...} }
type KafkaConnectListArrayInput interface {
	pulumi.Input

	ToKafkaConnectListArrayOutput() KafkaConnectListArrayOutput
	ToKafkaConnectListArrayOutputWithContext(context.Context) KafkaConnectListArrayOutput
}

type KafkaConnectListArray []KafkaConnectListInput

func (KafkaConnectListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnectList)(nil)).Elem()
}

func (i KafkaConnectListArray) ToKafkaConnectListArrayOutput() KafkaConnectListArrayOutput {
	return i.ToKafkaConnectListArrayOutputWithContext(context.Background())
}

func (i KafkaConnectListArray) ToKafkaConnectListArrayOutputWithContext(ctx context.Context) KafkaConnectListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectListArrayOutput)
}

// KafkaConnectListMapInput is an input type that accepts KafkaConnectListMap and KafkaConnectListMapOutput values.
// You can construct a concrete instance of `KafkaConnectListMapInput` via:
//
//	KafkaConnectListMap{ "key": KafkaConnectListArgs{...} }
type KafkaConnectListMapInput interface {
	pulumi.Input

	ToKafkaConnectListMapOutput() KafkaConnectListMapOutput
	ToKafkaConnectListMapOutputWithContext(context.Context) KafkaConnectListMapOutput
}

type KafkaConnectListMap map[string]KafkaConnectListInput

func (KafkaConnectListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnectList)(nil)).Elem()
}

func (i KafkaConnectListMap) ToKafkaConnectListMapOutput() KafkaConnectListMapOutput {
	return i.ToKafkaConnectListMapOutputWithContext(context.Background())
}

func (i KafkaConnectListMap) ToKafkaConnectListMapOutputWithContext(ctx context.Context) KafkaConnectListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectListMapOutput)
}

type KafkaConnectListOutput struct{ *pulumi.OutputState }

func (KafkaConnectListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnectList)(nil)).Elem()
}

func (o KafkaConnectListOutput) ToKafkaConnectListOutput() KafkaConnectListOutput {
	return o
}

func (o KafkaConnectListOutput) ToKafkaConnectListOutputWithContext(ctx context.Context) KafkaConnectListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaConnectListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnectList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of kafkaconnects. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o KafkaConnectListOutput) Items() KafkaConnectTypeArrayOutput {
	return o.ApplyT(func(v *KafkaConnectList) KafkaConnectTypeArrayOutput { return v.Items }).(KafkaConnectTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaConnectListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnectList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaConnectListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *KafkaConnectList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type KafkaConnectListArrayOutput struct{ *pulumi.OutputState }

func (KafkaConnectListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnectList)(nil)).Elem()
}

func (o KafkaConnectListArrayOutput) ToKafkaConnectListArrayOutput() KafkaConnectListArrayOutput {
	return o
}

func (o KafkaConnectListArrayOutput) ToKafkaConnectListArrayOutputWithContext(ctx context.Context) KafkaConnectListArrayOutput {
	return o
}

func (o KafkaConnectListArrayOutput) Index(i pulumi.IntInput) KafkaConnectListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaConnectList {
		return vs[0].([]*KafkaConnectList)[vs[1].(int)]
	}).(KafkaConnectListOutput)
}

type KafkaConnectListMapOutput struct{ *pulumi.OutputState }

func (KafkaConnectListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnectList)(nil)).Elem()
}

func (o KafkaConnectListMapOutput) ToKafkaConnectListMapOutput() KafkaConnectListMapOutput {
	return o
}

func (o KafkaConnectListMapOutput) ToKafkaConnectListMapOutputWithContext(ctx context.Context) KafkaConnectListMapOutput {
	return o
}

func (o KafkaConnectListMapOutput) MapIndex(k pulumi.StringInput) KafkaConnectListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaConnectList {
		return vs[0].(map[string]*KafkaConnectList)[vs[1].(string)]
	}).(KafkaConnectListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectListInput)(nil)).Elem(), &KafkaConnectList{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectListArrayInput)(nil)).Elem(), KafkaConnectListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectListMapInput)(nil)).Elem(), KafkaConnectListMap{})
	pulumi.RegisterOutputType(KafkaConnectListOutput{})
	pulumi.RegisterOutputType(KafkaConnectListArrayOutput{})
	pulumi.RegisterOutputType(KafkaConnectListMapOutput{})
}
