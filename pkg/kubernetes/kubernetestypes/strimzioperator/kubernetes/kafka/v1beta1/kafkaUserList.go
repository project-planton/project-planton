// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// KafkaUserList is a list of KafkaUser
type KafkaUserList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of kafkausers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaUserTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewKafkaUserList registers a new resource with the given unique name, arguments, and options.
func NewKafkaUserList(ctx *pulumi.Context,
	name string, args *KafkaUserListArgs, opts ...pulumi.ResourceOption) (*KafkaUserList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta1")
	args.Kind = pulumi.StringPtr("KafkaUserList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaUserList
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta1:KafkaUserList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaUserList gets an existing KafkaUserList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaUserList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaUserListState, opts ...pulumi.ResourceOption) (*KafkaUserList, error) {
	var resource KafkaUserList
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta1:KafkaUserList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaUserList resources.
type kafkaUserListState struct {
}

type KafkaUserListState struct {
}

func (KafkaUserListState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaUserListState)(nil)).Elem()
}

type kafkaUserListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of kafkausers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []KafkaUserType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a KafkaUserList resource.
type KafkaUserListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of kafkausers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaUserTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (KafkaUserListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaUserListArgs)(nil)).Elem()
}

type KafkaUserListInput interface {
	pulumi.Input

	ToKafkaUserListOutput() KafkaUserListOutput
	ToKafkaUserListOutputWithContext(ctx context.Context) KafkaUserListOutput
}

func (*KafkaUserList) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserList)(nil)).Elem()
}

func (i *KafkaUserList) ToKafkaUserListOutput() KafkaUserListOutput {
	return i.ToKafkaUserListOutputWithContext(context.Background())
}

func (i *KafkaUserList) ToKafkaUserListOutputWithContext(ctx context.Context) KafkaUserListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserListOutput)
}

// KafkaUserListArrayInput is an input type that accepts KafkaUserListArray and KafkaUserListArrayOutput values.
// You can construct a concrete instance of `KafkaUserListArrayInput` via:
//
//	KafkaUserListArray{ KafkaUserListArgs{...} }
type KafkaUserListArrayInput interface {
	pulumi.Input

	ToKafkaUserListArrayOutput() KafkaUserListArrayOutput
	ToKafkaUserListArrayOutputWithContext(context.Context) KafkaUserListArrayOutput
}

type KafkaUserListArray []KafkaUserListInput

func (KafkaUserListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaUserList)(nil)).Elem()
}

func (i KafkaUserListArray) ToKafkaUserListArrayOutput() KafkaUserListArrayOutput {
	return i.ToKafkaUserListArrayOutputWithContext(context.Background())
}

func (i KafkaUserListArray) ToKafkaUserListArrayOutputWithContext(ctx context.Context) KafkaUserListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserListArrayOutput)
}

// KafkaUserListMapInput is an input type that accepts KafkaUserListMap and KafkaUserListMapOutput values.
// You can construct a concrete instance of `KafkaUserListMapInput` via:
//
//	KafkaUserListMap{ "key": KafkaUserListArgs{...} }
type KafkaUserListMapInput interface {
	pulumi.Input

	ToKafkaUserListMapOutput() KafkaUserListMapOutput
	ToKafkaUserListMapOutputWithContext(context.Context) KafkaUserListMapOutput
}

type KafkaUserListMap map[string]KafkaUserListInput

func (KafkaUserListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaUserList)(nil)).Elem()
}

func (i KafkaUserListMap) ToKafkaUserListMapOutput() KafkaUserListMapOutput {
	return i.ToKafkaUserListMapOutputWithContext(context.Background())
}

func (i KafkaUserListMap) ToKafkaUserListMapOutputWithContext(ctx context.Context) KafkaUserListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserListMapOutput)
}

type KafkaUserListOutput struct{ *pulumi.OutputState }

func (KafkaUserListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserList)(nil)).Elem()
}

func (o KafkaUserListOutput) ToKafkaUserListOutput() KafkaUserListOutput {
	return o
}

func (o KafkaUserListOutput) ToKafkaUserListOutputWithContext(ctx context.Context) KafkaUserListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaUserListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUserList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of kafkausers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o KafkaUserListOutput) Items() KafkaUserTypeArrayOutput {
	return o.ApplyT(func(v *KafkaUserList) KafkaUserTypeArrayOutput { return v.Items }).(KafkaUserTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaUserListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUserList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaUserListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *KafkaUserList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type KafkaUserListArrayOutput struct{ *pulumi.OutputState }

func (KafkaUserListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaUserList)(nil)).Elem()
}

func (o KafkaUserListArrayOutput) ToKafkaUserListArrayOutput() KafkaUserListArrayOutput {
	return o
}

func (o KafkaUserListArrayOutput) ToKafkaUserListArrayOutputWithContext(ctx context.Context) KafkaUserListArrayOutput {
	return o
}

func (o KafkaUserListArrayOutput) Index(i pulumi.IntInput) KafkaUserListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaUserList {
		return vs[0].([]*KafkaUserList)[vs[1].(int)]
	}).(KafkaUserListOutput)
}

type KafkaUserListMapOutput struct{ *pulumi.OutputState }

func (KafkaUserListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaUserList)(nil)).Elem()
}

func (o KafkaUserListMapOutput) ToKafkaUserListMapOutput() KafkaUserListMapOutput {
	return o
}

func (o KafkaUserListMapOutput) ToKafkaUserListMapOutputWithContext(ctx context.Context) KafkaUserListMapOutput {
	return o
}

func (o KafkaUserListMapOutput) MapIndex(k pulumi.StringInput) KafkaUserListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaUserList {
		return vs[0].(map[string]*KafkaUserList)[vs[1].(string)]
	}).(KafkaUserListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserListInput)(nil)).Elem(), &KafkaUserList{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserListArrayInput)(nil)).Elem(), KafkaUserListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserListMapInput)(nil)).Elem(), KafkaUserListMap{})
	pulumi.RegisterOutputType(KafkaUserListOutput{})
	pulumi.RegisterOutputType(KafkaUserListArrayOutput{})
	pulumi.RegisterOutputType(KafkaUserListMapOutput{})
}
