// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type KafkaTopicPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     KafkaTopicSpecPatchPtrOutput    `pulumi:"spec"`
	Status   KafkaTopicStatusPatchPtrOutput  `pulumi:"status"`
}

// NewKafkaTopicPatch registers a new resource with the given unique name, arguments, and options.
func NewKafkaTopicPatch(ctx *pulumi.Context,
	name string, args *KafkaTopicPatchArgs, opts ...pulumi.ResourceOption) (*KafkaTopicPatch, error) {
	if args == nil {
		args = &KafkaTopicPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta1")
	args.Kind = pulumi.StringPtr("KafkaTopic")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:kafka.strimzi.io/v1alpha1:KafkaTopicPatch"),
		},
		{
			Type: pulumi.String("kubernetes:kafka.strimzi.io/v1beta2:KafkaTopicPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaTopicPatch
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta1:KafkaTopicPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaTopicPatch gets an existing KafkaTopicPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaTopicPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaTopicPatchState, opts ...pulumi.ResourceOption) (*KafkaTopicPatch, error) {
	var resource KafkaTopicPatch
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta1:KafkaTopicPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaTopicPatch resources.
type kafkaTopicPatchState struct {
}

type KafkaTopicPatchState struct {
}

func (KafkaTopicPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicPatchState)(nil)).Elem()
}

type kafkaTopicPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *KafkaTopicSpecPatch    `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaTopicPatch resource.
type KafkaTopicPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     KafkaTopicSpecPatchPtrInput
}

func (KafkaTopicPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicPatchArgs)(nil)).Elem()
}

type KafkaTopicPatchInput interface {
	pulumi.Input

	ToKafkaTopicPatchOutput() KafkaTopicPatchOutput
	ToKafkaTopicPatchOutputWithContext(ctx context.Context) KafkaTopicPatchOutput
}

func (*KafkaTopicPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicPatch)(nil)).Elem()
}

func (i *KafkaTopicPatch) ToKafkaTopicPatchOutput() KafkaTopicPatchOutput {
	return i.ToKafkaTopicPatchOutputWithContext(context.Background())
}

func (i *KafkaTopicPatch) ToKafkaTopicPatchOutputWithContext(ctx context.Context) KafkaTopicPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicPatchOutput)
}

// KafkaTopicPatchArrayInput is an input type that accepts KafkaTopicPatchArray and KafkaTopicPatchArrayOutput values.
// You can construct a concrete instance of `KafkaTopicPatchArrayInput` via:
//
//	KafkaTopicPatchArray{ KafkaTopicPatchArgs{...} }
type KafkaTopicPatchArrayInput interface {
	pulumi.Input

	ToKafkaTopicPatchArrayOutput() KafkaTopicPatchArrayOutput
	ToKafkaTopicPatchArrayOutputWithContext(context.Context) KafkaTopicPatchArrayOutput
}

type KafkaTopicPatchArray []KafkaTopicPatchInput

func (KafkaTopicPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTopicPatch)(nil)).Elem()
}

func (i KafkaTopicPatchArray) ToKafkaTopicPatchArrayOutput() KafkaTopicPatchArrayOutput {
	return i.ToKafkaTopicPatchArrayOutputWithContext(context.Background())
}

func (i KafkaTopicPatchArray) ToKafkaTopicPatchArrayOutputWithContext(ctx context.Context) KafkaTopicPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicPatchArrayOutput)
}

// KafkaTopicPatchMapInput is an input type that accepts KafkaTopicPatchMap and KafkaTopicPatchMapOutput values.
// You can construct a concrete instance of `KafkaTopicPatchMapInput` via:
//
//	KafkaTopicPatchMap{ "key": KafkaTopicPatchArgs{...} }
type KafkaTopicPatchMapInput interface {
	pulumi.Input

	ToKafkaTopicPatchMapOutput() KafkaTopicPatchMapOutput
	ToKafkaTopicPatchMapOutputWithContext(context.Context) KafkaTopicPatchMapOutput
}

type KafkaTopicPatchMap map[string]KafkaTopicPatchInput

func (KafkaTopicPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTopicPatch)(nil)).Elem()
}

func (i KafkaTopicPatchMap) ToKafkaTopicPatchMapOutput() KafkaTopicPatchMapOutput {
	return i.ToKafkaTopicPatchMapOutputWithContext(context.Background())
}

func (i KafkaTopicPatchMap) ToKafkaTopicPatchMapOutputWithContext(ctx context.Context) KafkaTopicPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicPatchMapOutput)
}

type KafkaTopicPatchOutput struct{ *pulumi.OutputState }

func (KafkaTopicPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicPatch)(nil)).Elem()
}

func (o KafkaTopicPatchOutput) ToKafkaTopicPatchOutput() KafkaTopicPatchOutput {
	return o
}

func (o KafkaTopicPatchOutput) ToKafkaTopicPatchOutputWithContext(ctx context.Context) KafkaTopicPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaTopicPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaTopicPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaTopicPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *KafkaTopicPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o KafkaTopicPatchOutput) Spec() KafkaTopicSpecPatchPtrOutput {
	return o.ApplyT(func(v *KafkaTopicPatch) KafkaTopicSpecPatchPtrOutput { return v.Spec }).(KafkaTopicSpecPatchPtrOutput)
}

func (o KafkaTopicPatchOutput) Status() KafkaTopicStatusPatchPtrOutput {
	return o.ApplyT(func(v *KafkaTopicPatch) KafkaTopicStatusPatchPtrOutput { return v.Status }).(KafkaTopicStatusPatchPtrOutput)
}

type KafkaTopicPatchArrayOutput struct{ *pulumi.OutputState }

func (KafkaTopicPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTopicPatch)(nil)).Elem()
}

func (o KafkaTopicPatchArrayOutput) ToKafkaTopicPatchArrayOutput() KafkaTopicPatchArrayOutput {
	return o
}

func (o KafkaTopicPatchArrayOutput) ToKafkaTopicPatchArrayOutputWithContext(ctx context.Context) KafkaTopicPatchArrayOutput {
	return o
}

func (o KafkaTopicPatchArrayOutput) Index(i pulumi.IntInput) KafkaTopicPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaTopicPatch {
		return vs[0].([]*KafkaTopicPatch)[vs[1].(int)]
	}).(KafkaTopicPatchOutput)
}

type KafkaTopicPatchMapOutput struct{ *pulumi.OutputState }

func (KafkaTopicPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTopicPatch)(nil)).Elem()
}

func (o KafkaTopicPatchMapOutput) ToKafkaTopicPatchMapOutput() KafkaTopicPatchMapOutput {
	return o
}

func (o KafkaTopicPatchMapOutput) ToKafkaTopicPatchMapOutputWithContext(ctx context.Context) KafkaTopicPatchMapOutput {
	return o
}

func (o KafkaTopicPatchMapOutput) MapIndex(k pulumi.StringInput) KafkaTopicPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaTopicPatch {
		return vs[0].(map[string]*KafkaTopicPatch)[vs[1].(string)]
	}).(KafkaTopicPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicPatchInput)(nil)).Elem(), &KafkaTopicPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicPatchArrayInput)(nil)).Elem(), KafkaTopicPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicPatchMapInput)(nil)).Elem(), KafkaTopicPatchMap{})
	pulumi.RegisterOutputType(KafkaTopicPatchOutput{})
	pulumi.RegisterOutputType(KafkaTopicPatchArrayOutput{})
	pulumi.RegisterOutputType(KafkaTopicPatchMapOutput{})
}
