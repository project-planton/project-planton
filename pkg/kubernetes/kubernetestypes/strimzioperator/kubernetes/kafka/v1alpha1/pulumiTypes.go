// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

type KafkaTopicType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *KafkaTopicSpec    `pulumi:"spec"`
	Status   *KafkaTopicStatus  `pulumi:"status"`
}

// KafkaTopicTypeInput is an input type that accepts KafkaTopicTypeArgs and KafkaTopicTypeOutput values.
// You can construct a concrete instance of `KafkaTopicTypeInput` via:
//
//	KafkaTopicTypeArgs{...}
type KafkaTopicTypeInput interface {
	pulumi.Input

	ToKafkaTopicTypeOutput() KafkaTopicTypeOutput
	ToKafkaTopicTypeOutputWithContext(context.Context) KafkaTopicTypeOutput
}

type KafkaTopicTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     KafkaTopicSpecPtrInput    `pulumi:"spec"`
	Status   KafkaTopicStatusPtrInput  `pulumi:"status"`
}

func (KafkaTopicTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicType)(nil)).Elem()
}

func (i KafkaTopicTypeArgs) ToKafkaTopicTypeOutput() KafkaTopicTypeOutput {
	return i.ToKafkaTopicTypeOutputWithContext(context.Background())
}

func (i KafkaTopicTypeArgs) ToKafkaTopicTypeOutputWithContext(ctx context.Context) KafkaTopicTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicTypeOutput)
}

// KafkaTopicTypeArrayInput is an input type that accepts KafkaTopicTypeArray and KafkaTopicTypeArrayOutput values.
// You can construct a concrete instance of `KafkaTopicTypeArrayInput` via:
//
//	KafkaTopicTypeArray{ KafkaTopicTypeArgs{...} }
type KafkaTopicTypeArrayInput interface {
	pulumi.Input

	ToKafkaTopicTypeArrayOutput() KafkaTopicTypeArrayOutput
	ToKafkaTopicTypeArrayOutputWithContext(context.Context) KafkaTopicTypeArrayOutput
}

type KafkaTopicTypeArray []KafkaTopicTypeInput

func (KafkaTopicTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaTopicType)(nil)).Elem()
}

func (i KafkaTopicTypeArray) ToKafkaTopicTypeArrayOutput() KafkaTopicTypeArrayOutput {
	return i.ToKafkaTopicTypeArrayOutputWithContext(context.Background())
}

func (i KafkaTopicTypeArray) ToKafkaTopicTypeArrayOutputWithContext(ctx context.Context) KafkaTopicTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicTypeArrayOutput)
}

type KafkaTopicTypeOutput struct{ *pulumi.OutputState }

func (KafkaTopicTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicType)(nil)).Elem()
}

func (o KafkaTopicTypeOutput) ToKafkaTopicTypeOutput() KafkaTopicTypeOutput {
	return o
}

func (o KafkaTopicTypeOutput) ToKafkaTopicTypeOutputWithContext(ctx context.Context) KafkaTopicTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaTopicTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaTopicTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaTopicTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KafkaTopicType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o KafkaTopicTypeOutput) Spec() KafkaTopicSpecPtrOutput {
	return o.ApplyT(func(v KafkaTopicType) *KafkaTopicSpec { return v.Spec }).(KafkaTopicSpecPtrOutput)
}

func (o KafkaTopicTypeOutput) Status() KafkaTopicStatusPtrOutput {
	return o.ApplyT(func(v KafkaTopicType) *KafkaTopicStatus { return v.Status }).(KafkaTopicStatusPtrOutput)
}

type KafkaTopicTypeArrayOutput struct{ *pulumi.OutputState }

func (KafkaTopicTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaTopicType)(nil)).Elem()
}

func (o KafkaTopicTypeArrayOutput) ToKafkaTopicTypeArrayOutput() KafkaTopicTypeArrayOutput {
	return o
}

func (o KafkaTopicTypeArrayOutput) ToKafkaTopicTypeArrayOutputWithContext(ctx context.Context) KafkaTopicTypeArrayOutput {
	return o
}

func (o KafkaTopicTypeArrayOutput) Index(i pulumi.IntInput) KafkaTopicTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaTopicType {
		return vs[0].([]KafkaTopicType)[vs[1].(int)]
	}).(KafkaTopicTypeOutput)
}

// KafkaTopicList is a list of KafkaTopic
type KafkaTopicListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of kafkatopics. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []KafkaTopicType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// KafkaTopicListTypeInput is an input type that accepts KafkaTopicListTypeArgs and KafkaTopicListTypeOutput values.
// You can construct a concrete instance of `KafkaTopicListTypeInput` via:
//
//	KafkaTopicListTypeArgs{...}
type KafkaTopicListTypeInput interface {
	pulumi.Input

	ToKafkaTopicListTypeOutput() KafkaTopicListTypeOutput
	ToKafkaTopicListTypeOutputWithContext(context.Context) KafkaTopicListTypeOutput
}

// KafkaTopicList is a list of KafkaTopic
type KafkaTopicListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of kafkatopics. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaTopicTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (KafkaTopicListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicListType)(nil)).Elem()
}

func (i KafkaTopicListTypeArgs) ToKafkaTopicListTypeOutput() KafkaTopicListTypeOutput {
	return i.ToKafkaTopicListTypeOutputWithContext(context.Background())
}

func (i KafkaTopicListTypeArgs) ToKafkaTopicListTypeOutputWithContext(ctx context.Context) KafkaTopicListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicListTypeOutput)
}

// KafkaTopicList is a list of KafkaTopic
type KafkaTopicListTypeOutput struct{ *pulumi.OutputState }

func (KafkaTopicListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicListType)(nil)).Elem()
}

func (o KafkaTopicListTypeOutput) ToKafkaTopicListTypeOutput() KafkaTopicListTypeOutput {
	return o
}

func (o KafkaTopicListTypeOutput) ToKafkaTopicListTypeOutputWithContext(ctx context.Context) KafkaTopicListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaTopicListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of kafkatopics. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o KafkaTopicListTypeOutput) Items() KafkaTopicTypeArrayOutput {
	return o.ApplyT(func(v KafkaTopicListType) []KafkaTopicType { return v.Items }).(KafkaTopicTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaTopicListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaTopicListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v KafkaTopicListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

type KafkaTopicPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *KafkaTopicSpecPatch    `pulumi:"spec"`
	Status   *KafkaTopicStatusPatch  `pulumi:"status"`
}

// KafkaTopicPatchTypeInput is an input type that accepts KafkaTopicPatchTypeArgs and KafkaTopicPatchTypeOutput values.
// You can construct a concrete instance of `KafkaTopicPatchTypeInput` via:
//
//	KafkaTopicPatchTypeArgs{...}
type KafkaTopicPatchTypeInput interface {
	pulumi.Input

	ToKafkaTopicPatchTypeOutput() KafkaTopicPatchTypeOutput
	ToKafkaTopicPatchTypeOutputWithContext(context.Context) KafkaTopicPatchTypeOutput
}

type KafkaTopicPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     KafkaTopicSpecPatchPtrInput    `pulumi:"spec"`
	Status   KafkaTopicStatusPatchPtrInput  `pulumi:"status"`
}

func (KafkaTopicPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicPatchType)(nil)).Elem()
}

func (i KafkaTopicPatchTypeArgs) ToKafkaTopicPatchTypeOutput() KafkaTopicPatchTypeOutput {
	return i.ToKafkaTopicPatchTypeOutputWithContext(context.Background())
}

func (i KafkaTopicPatchTypeArgs) ToKafkaTopicPatchTypeOutputWithContext(ctx context.Context) KafkaTopicPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicPatchTypeOutput)
}

type KafkaTopicPatchTypeOutput struct{ *pulumi.OutputState }

func (KafkaTopicPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicPatchType)(nil)).Elem()
}

func (o KafkaTopicPatchTypeOutput) ToKafkaTopicPatchTypeOutput() KafkaTopicPatchTypeOutput {
	return o
}

func (o KafkaTopicPatchTypeOutput) ToKafkaTopicPatchTypeOutputWithContext(ctx context.Context) KafkaTopicPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaTopicPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaTopicPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaTopicPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v KafkaTopicPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o KafkaTopicPatchTypeOutput) Spec() KafkaTopicSpecPatchPtrOutput {
	return o.ApplyT(func(v KafkaTopicPatchType) *KafkaTopicSpecPatch { return v.Spec }).(KafkaTopicSpecPatchPtrOutput)
}

func (o KafkaTopicPatchTypeOutput) Status() KafkaTopicStatusPatchPtrOutput {
	return o.ApplyT(func(v KafkaTopicPatchType) *KafkaTopicStatusPatch { return v.Status }).(KafkaTopicStatusPatchPtrOutput)
}

// The specification of the topic.
type KafkaTopicSpec struct {
	// The topic configuration.
	Config map[string]interface{} `pulumi:"config"`
	// The number of partitions the topic should have. This cannot be decreased after topic creation. It can be increased after topic creation, but it is important to understand the consequences that has, especially for topics with semantic partitioning. When absent this will default to the broker configuration for `num.partitions`.
	Partitions *int `pulumi:"partitions"`
	// The number of replicas the topic should have. When absent this will default to the broker configuration for `default.replication.factor`.
	Replicas *int `pulumi:"replicas"`
	// The name of the topic. When absent this will default to the metadata.name of the topic. It is recommended to not set this unless the topic name is not a valid Kubernetes resource name.
	TopicName *string `pulumi:"topicName"`
}

// KafkaTopicSpecInput is an input type that accepts KafkaTopicSpecArgs and KafkaTopicSpecOutput values.
// You can construct a concrete instance of `KafkaTopicSpecInput` via:
//
//	KafkaTopicSpecArgs{...}
type KafkaTopicSpecInput interface {
	pulumi.Input

	ToKafkaTopicSpecOutput() KafkaTopicSpecOutput
	ToKafkaTopicSpecOutputWithContext(context.Context) KafkaTopicSpecOutput
}

// The specification of the topic.
type KafkaTopicSpecArgs struct {
	// The topic configuration.
	Config pulumi.MapInput `pulumi:"config"`
	// The number of partitions the topic should have. This cannot be decreased after topic creation. It can be increased after topic creation, but it is important to understand the consequences that has, especially for topics with semantic partitioning. When absent this will default to the broker configuration for `num.partitions`.
	Partitions pulumi.IntPtrInput `pulumi:"partitions"`
	// The number of replicas the topic should have. When absent this will default to the broker configuration for `default.replication.factor`.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// The name of the topic. When absent this will default to the metadata.name of the topic. It is recommended to not set this unless the topic name is not a valid Kubernetes resource name.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
}

func (KafkaTopicSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicSpec)(nil)).Elem()
}

func (i KafkaTopicSpecArgs) ToKafkaTopicSpecOutput() KafkaTopicSpecOutput {
	return i.ToKafkaTopicSpecOutputWithContext(context.Background())
}

func (i KafkaTopicSpecArgs) ToKafkaTopicSpecOutputWithContext(ctx context.Context) KafkaTopicSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicSpecOutput)
}

func (i KafkaTopicSpecArgs) ToKafkaTopicSpecPtrOutput() KafkaTopicSpecPtrOutput {
	return i.ToKafkaTopicSpecPtrOutputWithContext(context.Background())
}

func (i KafkaTopicSpecArgs) ToKafkaTopicSpecPtrOutputWithContext(ctx context.Context) KafkaTopicSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicSpecOutput).ToKafkaTopicSpecPtrOutputWithContext(ctx)
}

// KafkaTopicSpecPtrInput is an input type that accepts KafkaTopicSpecArgs, KafkaTopicSpecPtr and KafkaTopicSpecPtrOutput values.
// You can construct a concrete instance of `KafkaTopicSpecPtrInput` via:
//
//	        KafkaTopicSpecArgs{...}
//
//	or:
//
//	        nil
type KafkaTopicSpecPtrInput interface {
	pulumi.Input

	ToKafkaTopicSpecPtrOutput() KafkaTopicSpecPtrOutput
	ToKafkaTopicSpecPtrOutputWithContext(context.Context) KafkaTopicSpecPtrOutput
}

type kafkaTopicSpecPtrType KafkaTopicSpecArgs

func KafkaTopicSpecPtr(v *KafkaTopicSpecArgs) KafkaTopicSpecPtrInput {
	return (*kafkaTopicSpecPtrType)(v)
}

func (*kafkaTopicSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicSpec)(nil)).Elem()
}

func (i *kafkaTopicSpecPtrType) ToKafkaTopicSpecPtrOutput() KafkaTopicSpecPtrOutput {
	return i.ToKafkaTopicSpecPtrOutputWithContext(context.Background())
}

func (i *kafkaTopicSpecPtrType) ToKafkaTopicSpecPtrOutputWithContext(ctx context.Context) KafkaTopicSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicSpecPtrOutput)
}

// The specification of the topic.
type KafkaTopicSpecOutput struct{ *pulumi.OutputState }

func (KafkaTopicSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicSpec)(nil)).Elem()
}

func (o KafkaTopicSpecOutput) ToKafkaTopicSpecOutput() KafkaTopicSpecOutput {
	return o
}

func (o KafkaTopicSpecOutput) ToKafkaTopicSpecOutputWithContext(ctx context.Context) KafkaTopicSpecOutput {
	return o
}

func (o KafkaTopicSpecOutput) ToKafkaTopicSpecPtrOutput() KafkaTopicSpecPtrOutput {
	return o.ToKafkaTopicSpecPtrOutputWithContext(context.Background())
}

func (o KafkaTopicSpecOutput) ToKafkaTopicSpecPtrOutputWithContext(ctx context.Context) KafkaTopicSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaTopicSpec) *KafkaTopicSpec {
		return &v
	}).(KafkaTopicSpecPtrOutput)
}

// The topic configuration.
func (o KafkaTopicSpecOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v KafkaTopicSpec) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// The number of partitions the topic should have. This cannot be decreased after topic creation. It can be increased after topic creation, but it is important to understand the consequences that has, especially for topics with semantic partitioning. When absent this will default to the broker configuration for `num.partitions`.
func (o KafkaTopicSpecOutput) Partitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaTopicSpec) *int { return v.Partitions }).(pulumi.IntPtrOutput)
}

// The number of replicas the topic should have. When absent this will default to the broker configuration for `default.replication.factor`.
func (o KafkaTopicSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaTopicSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// The name of the topic. When absent this will default to the metadata.name of the topic. It is recommended to not set this unless the topic name is not a valid Kubernetes resource name.
func (o KafkaTopicSpecOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicSpec) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

type KafkaTopicSpecPtrOutput struct{ *pulumi.OutputState }

func (KafkaTopicSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicSpec)(nil)).Elem()
}

func (o KafkaTopicSpecPtrOutput) ToKafkaTopicSpecPtrOutput() KafkaTopicSpecPtrOutput {
	return o
}

func (o KafkaTopicSpecPtrOutput) ToKafkaTopicSpecPtrOutputWithContext(ctx context.Context) KafkaTopicSpecPtrOutput {
	return o
}

func (o KafkaTopicSpecPtrOutput) Elem() KafkaTopicSpecOutput {
	return o.ApplyT(func(v *KafkaTopicSpec) KafkaTopicSpec {
		if v != nil {
			return *v
		}
		var ret KafkaTopicSpec
		return ret
	}).(KafkaTopicSpecOutput)
}

// The topic configuration.
func (o KafkaTopicSpecPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *KafkaTopicSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// The number of partitions the topic should have. This cannot be decreased after topic creation. It can be increased after topic creation, but it is important to understand the consequences that has, especially for topics with semantic partitioning. When absent this will default to the broker configuration for `num.partitions`.
func (o KafkaTopicSpecPtrOutput) Partitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaTopicSpec) *int {
		if v == nil {
			return nil
		}
		return v.Partitions
	}).(pulumi.IntPtrOutput)
}

// The number of replicas the topic should have. When absent this will default to the broker configuration for `default.replication.factor`.
func (o KafkaTopicSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaTopicSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// The name of the topic. When absent this will default to the metadata.name of the topic. It is recommended to not set this unless the topic name is not a valid Kubernetes resource name.
func (o KafkaTopicSpecPtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicSpec) *string {
		if v == nil {
			return nil
		}
		return v.TopicName
	}).(pulumi.StringPtrOutput)
}

// The specification of the topic.
type KafkaTopicSpecPatch struct {
	// The topic configuration.
	Config map[string]interface{} `pulumi:"config"`
	// The number of partitions the topic should have. This cannot be decreased after topic creation. It can be increased after topic creation, but it is important to understand the consequences that has, especially for topics with semantic partitioning. When absent this will default to the broker configuration for `num.partitions`.
	Partitions *int `pulumi:"partitions"`
	// The number of replicas the topic should have. When absent this will default to the broker configuration for `default.replication.factor`.
	Replicas *int `pulumi:"replicas"`
	// The name of the topic. When absent this will default to the metadata.name of the topic. It is recommended to not set this unless the topic name is not a valid Kubernetes resource name.
	TopicName *string `pulumi:"topicName"`
}

// KafkaTopicSpecPatchInput is an input type that accepts KafkaTopicSpecPatchArgs and KafkaTopicSpecPatchOutput values.
// You can construct a concrete instance of `KafkaTopicSpecPatchInput` via:
//
//	KafkaTopicSpecPatchArgs{...}
type KafkaTopicSpecPatchInput interface {
	pulumi.Input

	ToKafkaTopicSpecPatchOutput() KafkaTopicSpecPatchOutput
	ToKafkaTopicSpecPatchOutputWithContext(context.Context) KafkaTopicSpecPatchOutput
}

// The specification of the topic.
type KafkaTopicSpecPatchArgs struct {
	// The topic configuration.
	Config pulumi.MapInput `pulumi:"config"`
	// The number of partitions the topic should have. This cannot be decreased after topic creation. It can be increased after topic creation, but it is important to understand the consequences that has, especially for topics with semantic partitioning. When absent this will default to the broker configuration for `num.partitions`.
	Partitions pulumi.IntPtrInput `pulumi:"partitions"`
	// The number of replicas the topic should have. When absent this will default to the broker configuration for `default.replication.factor`.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// The name of the topic. When absent this will default to the metadata.name of the topic. It is recommended to not set this unless the topic name is not a valid Kubernetes resource name.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
}

func (KafkaTopicSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicSpecPatch)(nil)).Elem()
}

func (i KafkaTopicSpecPatchArgs) ToKafkaTopicSpecPatchOutput() KafkaTopicSpecPatchOutput {
	return i.ToKafkaTopicSpecPatchOutputWithContext(context.Background())
}

func (i KafkaTopicSpecPatchArgs) ToKafkaTopicSpecPatchOutputWithContext(ctx context.Context) KafkaTopicSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicSpecPatchOutput)
}

func (i KafkaTopicSpecPatchArgs) ToKafkaTopicSpecPatchPtrOutput() KafkaTopicSpecPatchPtrOutput {
	return i.ToKafkaTopicSpecPatchPtrOutputWithContext(context.Background())
}

func (i KafkaTopicSpecPatchArgs) ToKafkaTopicSpecPatchPtrOutputWithContext(ctx context.Context) KafkaTopicSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicSpecPatchOutput).ToKafkaTopicSpecPatchPtrOutputWithContext(ctx)
}

// KafkaTopicSpecPatchPtrInput is an input type that accepts KafkaTopicSpecPatchArgs, KafkaTopicSpecPatchPtr and KafkaTopicSpecPatchPtrOutput values.
// You can construct a concrete instance of `KafkaTopicSpecPatchPtrInput` via:
//
//	        KafkaTopicSpecPatchArgs{...}
//
//	or:
//
//	        nil
type KafkaTopicSpecPatchPtrInput interface {
	pulumi.Input

	ToKafkaTopicSpecPatchPtrOutput() KafkaTopicSpecPatchPtrOutput
	ToKafkaTopicSpecPatchPtrOutputWithContext(context.Context) KafkaTopicSpecPatchPtrOutput
}

type kafkaTopicSpecPatchPtrType KafkaTopicSpecPatchArgs

func KafkaTopicSpecPatchPtr(v *KafkaTopicSpecPatchArgs) KafkaTopicSpecPatchPtrInput {
	return (*kafkaTopicSpecPatchPtrType)(v)
}

func (*kafkaTopicSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicSpecPatch)(nil)).Elem()
}

func (i *kafkaTopicSpecPatchPtrType) ToKafkaTopicSpecPatchPtrOutput() KafkaTopicSpecPatchPtrOutput {
	return i.ToKafkaTopicSpecPatchPtrOutputWithContext(context.Background())
}

func (i *kafkaTopicSpecPatchPtrType) ToKafkaTopicSpecPatchPtrOutputWithContext(ctx context.Context) KafkaTopicSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicSpecPatchPtrOutput)
}

// The specification of the topic.
type KafkaTopicSpecPatchOutput struct{ *pulumi.OutputState }

func (KafkaTopicSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicSpecPatch)(nil)).Elem()
}

func (o KafkaTopicSpecPatchOutput) ToKafkaTopicSpecPatchOutput() KafkaTopicSpecPatchOutput {
	return o
}

func (o KafkaTopicSpecPatchOutput) ToKafkaTopicSpecPatchOutputWithContext(ctx context.Context) KafkaTopicSpecPatchOutput {
	return o
}

func (o KafkaTopicSpecPatchOutput) ToKafkaTopicSpecPatchPtrOutput() KafkaTopicSpecPatchPtrOutput {
	return o.ToKafkaTopicSpecPatchPtrOutputWithContext(context.Background())
}

func (o KafkaTopicSpecPatchOutput) ToKafkaTopicSpecPatchPtrOutputWithContext(ctx context.Context) KafkaTopicSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaTopicSpecPatch) *KafkaTopicSpecPatch {
		return &v
	}).(KafkaTopicSpecPatchPtrOutput)
}

// The topic configuration.
func (o KafkaTopicSpecPatchOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v KafkaTopicSpecPatch) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// The number of partitions the topic should have. This cannot be decreased after topic creation. It can be increased after topic creation, but it is important to understand the consequences that has, especially for topics with semantic partitioning. When absent this will default to the broker configuration for `num.partitions`.
func (o KafkaTopicSpecPatchOutput) Partitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaTopicSpecPatch) *int { return v.Partitions }).(pulumi.IntPtrOutput)
}

// The number of replicas the topic should have. When absent this will default to the broker configuration for `default.replication.factor`.
func (o KafkaTopicSpecPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaTopicSpecPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// The name of the topic. When absent this will default to the metadata.name of the topic. It is recommended to not set this unless the topic name is not a valid Kubernetes resource name.
func (o KafkaTopicSpecPatchOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicSpecPatch) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

type KafkaTopicSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (KafkaTopicSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicSpecPatch)(nil)).Elem()
}

func (o KafkaTopicSpecPatchPtrOutput) ToKafkaTopicSpecPatchPtrOutput() KafkaTopicSpecPatchPtrOutput {
	return o
}

func (o KafkaTopicSpecPatchPtrOutput) ToKafkaTopicSpecPatchPtrOutputWithContext(ctx context.Context) KafkaTopicSpecPatchPtrOutput {
	return o
}

func (o KafkaTopicSpecPatchPtrOutput) Elem() KafkaTopicSpecPatchOutput {
	return o.ApplyT(func(v *KafkaTopicSpecPatch) KafkaTopicSpecPatch {
		if v != nil {
			return *v
		}
		var ret KafkaTopicSpecPatch
		return ret
	}).(KafkaTopicSpecPatchOutput)
}

// The topic configuration.
func (o KafkaTopicSpecPatchPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *KafkaTopicSpecPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// The number of partitions the topic should have. This cannot be decreased after topic creation. It can be increased after topic creation, but it is important to understand the consequences that has, especially for topics with semantic partitioning. When absent this will default to the broker configuration for `num.partitions`.
func (o KafkaTopicSpecPatchPtrOutput) Partitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaTopicSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Partitions
	}).(pulumi.IntPtrOutput)
}

// The number of replicas the topic should have. When absent this will default to the broker configuration for `default.replication.factor`.
func (o KafkaTopicSpecPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaTopicSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// The name of the topic. When absent this will default to the metadata.name of the topic. It is recommended to not set this unless the topic name is not a valid Kubernetes resource name.
func (o KafkaTopicSpecPatchPtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.TopicName
	}).(pulumi.StringPtrOutput)
}

// The status of the topic.
type KafkaTopicStatus struct {
	// List of status conditions.
	Conditions []KafkaTopicStatusConditions `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration *int                            `pulumi:"observedGeneration"`
	ReplicasChange     *KafkaTopicStatusReplicasChange `pulumi:"replicasChange"`
	// The topic's id. For a KafkaTopic with the ready condition, this will change only if the topic gets deleted and recreated with the same name.
	TopicId *string `pulumi:"topicId"`
	// Topic name.
	TopicName *string `pulumi:"topicName"`
}

// KafkaTopicStatusInput is an input type that accepts KafkaTopicStatusArgs and KafkaTopicStatusOutput values.
// You can construct a concrete instance of `KafkaTopicStatusInput` via:
//
//	KafkaTopicStatusArgs{...}
type KafkaTopicStatusInput interface {
	pulumi.Input

	ToKafkaTopicStatusOutput() KafkaTopicStatusOutput
	ToKafkaTopicStatusOutputWithContext(context.Context) KafkaTopicStatusOutput
}

// The status of the topic.
type KafkaTopicStatusArgs struct {
	// List of status conditions.
	Conditions KafkaTopicStatusConditionsArrayInput `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration pulumi.IntPtrInput                     `pulumi:"observedGeneration"`
	ReplicasChange     KafkaTopicStatusReplicasChangePtrInput `pulumi:"replicasChange"`
	// The topic's id. For a KafkaTopic with the ready condition, this will change only if the topic gets deleted and recreated with the same name.
	TopicId pulumi.StringPtrInput `pulumi:"topicId"`
	// Topic name.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
}

func (KafkaTopicStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatus)(nil)).Elem()
}

func (i KafkaTopicStatusArgs) ToKafkaTopicStatusOutput() KafkaTopicStatusOutput {
	return i.ToKafkaTopicStatusOutputWithContext(context.Background())
}

func (i KafkaTopicStatusArgs) ToKafkaTopicStatusOutputWithContext(ctx context.Context) KafkaTopicStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusOutput)
}

func (i KafkaTopicStatusArgs) ToKafkaTopicStatusPtrOutput() KafkaTopicStatusPtrOutput {
	return i.ToKafkaTopicStatusPtrOutputWithContext(context.Background())
}

func (i KafkaTopicStatusArgs) ToKafkaTopicStatusPtrOutputWithContext(ctx context.Context) KafkaTopicStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusOutput).ToKafkaTopicStatusPtrOutputWithContext(ctx)
}

// KafkaTopicStatusPtrInput is an input type that accepts KafkaTopicStatusArgs, KafkaTopicStatusPtr and KafkaTopicStatusPtrOutput values.
// You can construct a concrete instance of `KafkaTopicStatusPtrInput` via:
//
//	        KafkaTopicStatusArgs{...}
//
//	or:
//
//	        nil
type KafkaTopicStatusPtrInput interface {
	pulumi.Input

	ToKafkaTopicStatusPtrOutput() KafkaTopicStatusPtrOutput
	ToKafkaTopicStatusPtrOutputWithContext(context.Context) KafkaTopicStatusPtrOutput
}

type kafkaTopicStatusPtrType KafkaTopicStatusArgs

func KafkaTopicStatusPtr(v *KafkaTopicStatusArgs) KafkaTopicStatusPtrInput {
	return (*kafkaTopicStatusPtrType)(v)
}

func (*kafkaTopicStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicStatus)(nil)).Elem()
}

func (i *kafkaTopicStatusPtrType) ToKafkaTopicStatusPtrOutput() KafkaTopicStatusPtrOutput {
	return i.ToKafkaTopicStatusPtrOutputWithContext(context.Background())
}

func (i *kafkaTopicStatusPtrType) ToKafkaTopicStatusPtrOutputWithContext(ctx context.Context) KafkaTopicStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusPtrOutput)
}

// The status of the topic.
type KafkaTopicStatusOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatus)(nil)).Elem()
}

func (o KafkaTopicStatusOutput) ToKafkaTopicStatusOutput() KafkaTopicStatusOutput {
	return o
}

func (o KafkaTopicStatusOutput) ToKafkaTopicStatusOutputWithContext(ctx context.Context) KafkaTopicStatusOutput {
	return o
}

func (o KafkaTopicStatusOutput) ToKafkaTopicStatusPtrOutput() KafkaTopicStatusPtrOutput {
	return o.ToKafkaTopicStatusPtrOutputWithContext(context.Background())
}

func (o KafkaTopicStatusOutput) ToKafkaTopicStatusPtrOutputWithContext(ctx context.Context) KafkaTopicStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaTopicStatus) *KafkaTopicStatus {
		return &v
	}).(KafkaTopicStatusPtrOutput)
}

// List of status conditions.
func (o KafkaTopicStatusOutput) Conditions() KafkaTopicStatusConditionsArrayOutput {
	return o.ApplyT(func(v KafkaTopicStatus) []KafkaTopicStatusConditions { return v.Conditions }).(KafkaTopicStatusConditionsArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaTopicStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

func (o KafkaTopicStatusOutput) ReplicasChange() KafkaTopicStatusReplicasChangePtrOutput {
	return o.ApplyT(func(v KafkaTopicStatus) *KafkaTopicStatusReplicasChange { return v.ReplicasChange }).(KafkaTopicStatusReplicasChangePtrOutput)
}

// The topic's id. For a KafkaTopic with the ready condition, this will change only if the topic gets deleted and recreated with the same name.
func (o KafkaTopicStatusOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatus) *string { return v.TopicId }).(pulumi.StringPtrOutput)
}

// Topic name.
func (o KafkaTopicStatusOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatus) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

type KafkaTopicStatusPtrOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicStatus)(nil)).Elem()
}

func (o KafkaTopicStatusPtrOutput) ToKafkaTopicStatusPtrOutput() KafkaTopicStatusPtrOutput {
	return o
}

func (o KafkaTopicStatusPtrOutput) ToKafkaTopicStatusPtrOutputWithContext(ctx context.Context) KafkaTopicStatusPtrOutput {
	return o
}

func (o KafkaTopicStatusPtrOutput) Elem() KafkaTopicStatusOutput {
	return o.ApplyT(func(v *KafkaTopicStatus) KafkaTopicStatus {
		if v != nil {
			return *v
		}
		var ret KafkaTopicStatus
		return ret
	}).(KafkaTopicStatusOutput)
}

// List of status conditions.
func (o KafkaTopicStatusPtrOutput) Conditions() KafkaTopicStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KafkaTopicStatus) []KafkaTopicStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KafkaTopicStatusConditionsArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaTopicStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

func (o KafkaTopicStatusPtrOutput) ReplicasChange() KafkaTopicStatusReplicasChangePtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatus) *KafkaTopicStatusReplicasChange {
		if v == nil {
			return nil
		}
		return v.ReplicasChange
	}).(KafkaTopicStatusReplicasChangePtrOutput)
}

// The topic's id. For a KafkaTopic with the ready condition, this will change only if the topic gets deleted and recreated with the same name.
func (o KafkaTopicStatusPtrOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatus) *string {
		if v == nil {
			return nil
		}
		return v.TopicId
	}).(pulumi.StringPtrOutput)
}

// Topic name.
func (o KafkaTopicStatusPtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatus) *string {
		if v == nil {
			return nil
		}
		return v.TopicName
	}).(pulumi.StringPtrOutput)
}

type KafkaTopicStatusConditions struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason *string `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status *string `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type *string `pulumi:"type"`
}

// KafkaTopicStatusConditionsInput is an input type that accepts KafkaTopicStatusConditionsArgs and KafkaTopicStatusConditionsOutput values.
// You can construct a concrete instance of `KafkaTopicStatusConditionsInput` via:
//
//	KafkaTopicStatusConditionsArgs{...}
type KafkaTopicStatusConditionsInput interface {
	pulumi.Input

	ToKafkaTopicStatusConditionsOutput() KafkaTopicStatusConditionsOutput
	ToKafkaTopicStatusConditionsOutputWithContext(context.Context) KafkaTopicStatusConditionsOutput
}

type KafkaTopicStatusConditionsArgs struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaTopicStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatusConditions)(nil)).Elem()
}

func (i KafkaTopicStatusConditionsArgs) ToKafkaTopicStatusConditionsOutput() KafkaTopicStatusConditionsOutput {
	return i.ToKafkaTopicStatusConditionsOutputWithContext(context.Background())
}

func (i KafkaTopicStatusConditionsArgs) ToKafkaTopicStatusConditionsOutputWithContext(ctx context.Context) KafkaTopicStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusConditionsOutput)
}

// KafkaTopicStatusConditionsArrayInput is an input type that accepts KafkaTopicStatusConditionsArray and KafkaTopicStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KafkaTopicStatusConditionsArrayInput` via:
//
//	KafkaTopicStatusConditionsArray{ KafkaTopicStatusConditionsArgs{...} }
type KafkaTopicStatusConditionsArrayInput interface {
	pulumi.Input

	ToKafkaTopicStatusConditionsArrayOutput() KafkaTopicStatusConditionsArrayOutput
	ToKafkaTopicStatusConditionsArrayOutputWithContext(context.Context) KafkaTopicStatusConditionsArrayOutput
}

type KafkaTopicStatusConditionsArray []KafkaTopicStatusConditionsInput

func (KafkaTopicStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaTopicStatusConditions)(nil)).Elem()
}

func (i KafkaTopicStatusConditionsArray) ToKafkaTopicStatusConditionsArrayOutput() KafkaTopicStatusConditionsArrayOutput {
	return i.ToKafkaTopicStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KafkaTopicStatusConditionsArray) ToKafkaTopicStatusConditionsArrayOutputWithContext(ctx context.Context) KafkaTopicStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusConditionsArrayOutput)
}

type KafkaTopicStatusConditionsOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatusConditions)(nil)).Elem()
}

func (o KafkaTopicStatusConditionsOutput) ToKafkaTopicStatusConditionsOutput() KafkaTopicStatusConditionsOutput {
	return o
}

func (o KafkaTopicStatusConditionsOutput) ToKafkaTopicStatusConditionsOutputWithContext(ctx context.Context) KafkaTopicStatusConditionsOutput {
	return o
}

// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
func (o KafkaTopicStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human-readable message indicating details about the condition's last transition.
func (o KafkaTopicStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition (a single word in CamelCase).
func (o KafkaTopicStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// The status of the condition, either True, False or Unknown.
func (o KafkaTopicStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The unique identifier of a condition, used to distinguish between other conditions in the resource.
func (o KafkaTopicStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaTopicStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaTopicStatusConditions)(nil)).Elem()
}

func (o KafkaTopicStatusConditionsArrayOutput) ToKafkaTopicStatusConditionsArrayOutput() KafkaTopicStatusConditionsArrayOutput {
	return o
}

func (o KafkaTopicStatusConditionsArrayOutput) ToKafkaTopicStatusConditionsArrayOutputWithContext(ctx context.Context) KafkaTopicStatusConditionsArrayOutput {
	return o
}

func (o KafkaTopicStatusConditionsArrayOutput) Index(i pulumi.IntInput) KafkaTopicStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaTopicStatusConditions {
		return vs[0].([]KafkaTopicStatusConditions)[vs[1].(int)]
	}).(KafkaTopicStatusConditionsOutput)
}

type KafkaTopicStatusConditionsPatch struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason *string `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status *string `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type *string `pulumi:"type"`
}

// KafkaTopicStatusConditionsPatchInput is an input type that accepts KafkaTopicStatusConditionsPatchArgs and KafkaTopicStatusConditionsPatchOutput values.
// You can construct a concrete instance of `KafkaTopicStatusConditionsPatchInput` via:
//
//	KafkaTopicStatusConditionsPatchArgs{...}
type KafkaTopicStatusConditionsPatchInput interface {
	pulumi.Input

	ToKafkaTopicStatusConditionsPatchOutput() KafkaTopicStatusConditionsPatchOutput
	ToKafkaTopicStatusConditionsPatchOutputWithContext(context.Context) KafkaTopicStatusConditionsPatchOutput
}

type KafkaTopicStatusConditionsPatchArgs struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaTopicStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatusConditionsPatch)(nil)).Elem()
}

func (i KafkaTopicStatusConditionsPatchArgs) ToKafkaTopicStatusConditionsPatchOutput() KafkaTopicStatusConditionsPatchOutput {
	return i.ToKafkaTopicStatusConditionsPatchOutputWithContext(context.Background())
}

func (i KafkaTopicStatusConditionsPatchArgs) ToKafkaTopicStatusConditionsPatchOutputWithContext(ctx context.Context) KafkaTopicStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusConditionsPatchOutput)
}

// KafkaTopicStatusConditionsPatchArrayInput is an input type that accepts KafkaTopicStatusConditionsPatchArray and KafkaTopicStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `KafkaTopicStatusConditionsPatchArrayInput` via:
//
//	KafkaTopicStatusConditionsPatchArray{ KafkaTopicStatusConditionsPatchArgs{...} }
type KafkaTopicStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToKafkaTopicStatusConditionsPatchArrayOutput() KafkaTopicStatusConditionsPatchArrayOutput
	ToKafkaTopicStatusConditionsPatchArrayOutputWithContext(context.Context) KafkaTopicStatusConditionsPatchArrayOutput
}

type KafkaTopicStatusConditionsPatchArray []KafkaTopicStatusConditionsPatchInput

func (KafkaTopicStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaTopicStatusConditionsPatch)(nil)).Elem()
}

func (i KafkaTopicStatusConditionsPatchArray) ToKafkaTopicStatusConditionsPatchArrayOutput() KafkaTopicStatusConditionsPatchArrayOutput {
	return i.ToKafkaTopicStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i KafkaTopicStatusConditionsPatchArray) ToKafkaTopicStatusConditionsPatchArrayOutputWithContext(ctx context.Context) KafkaTopicStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusConditionsPatchArrayOutput)
}

type KafkaTopicStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatusConditionsPatch)(nil)).Elem()
}

func (o KafkaTopicStatusConditionsPatchOutput) ToKafkaTopicStatusConditionsPatchOutput() KafkaTopicStatusConditionsPatchOutput {
	return o
}

func (o KafkaTopicStatusConditionsPatchOutput) ToKafkaTopicStatusConditionsPatchOutputWithContext(ctx context.Context) KafkaTopicStatusConditionsPatchOutput {
	return o
}

// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
func (o KafkaTopicStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human-readable message indicating details about the condition's last transition.
func (o KafkaTopicStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition (a single word in CamelCase).
func (o KafkaTopicStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// The status of the condition, either True, False or Unknown.
func (o KafkaTopicStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The unique identifier of a condition, used to distinguish between other conditions in the resource.
func (o KafkaTopicStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaTopicStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaTopicStatusConditionsPatch)(nil)).Elem()
}

func (o KafkaTopicStatusConditionsPatchArrayOutput) ToKafkaTopicStatusConditionsPatchArrayOutput() KafkaTopicStatusConditionsPatchArrayOutput {
	return o
}

func (o KafkaTopicStatusConditionsPatchArrayOutput) ToKafkaTopicStatusConditionsPatchArrayOutputWithContext(ctx context.Context) KafkaTopicStatusConditionsPatchArrayOutput {
	return o
}

func (o KafkaTopicStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) KafkaTopicStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaTopicStatusConditionsPatch {
		return vs[0].([]KafkaTopicStatusConditionsPatch)[vs[1].(int)]
	}).(KafkaTopicStatusConditionsPatchOutput)
}

// The status of the topic.
type KafkaTopicStatusPatch struct {
	// List of status conditions.
	Conditions []KafkaTopicStatusConditionsPatch `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration *int                                 `pulumi:"observedGeneration"`
	ReplicasChange     *KafkaTopicStatusReplicasChangePatch `pulumi:"replicasChange"`
	// The topic's id. For a KafkaTopic with the ready condition, this will change only if the topic gets deleted and recreated with the same name.
	TopicId *string `pulumi:"topicId"`
	// Topic name.
	TopicName *string `pulumi:"topicName"`
}

// KafkaTopicStatusPatchInput is an input type that accepts KafkaTopicStatusPatchArgs and KafkaTopicStatusPatchOutput values.
// You can construct a concrete instance of `KafkaTopicStatusPatchInput` via:
//
//	KafkaTopicStatusPatchArgs{...}
type KafkaTopicStatusPatchInput interface {
	pulumi.Input

	ToKafkaTopicStatusPatchOutput() KafkaTopicStatusPatchOutput
	ToKafkaTopicStatusPatchOutputWithContext(context.Context) KafkaTopicStatusPatchOutput
}

// The status of the topic.
type KafkaTopicStatusPatchArgs struct {
	// List of status conditions.
	Conditions KafkaTopicStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration pulumi.IntPtrInput                          `pulumi:"observedGeneration"`
	ReplicasChange     KafkaTopicStatusReplicasChangePatchPtrInput `pulumi:"replicasChange"`
	// The topic's id. For a KafkaTopic with the ready condition, this will change only if the topic gets deleted and recreated with the same name.
	TopicId pulumi.StringPtrInput `pulumi:"topicId"`
	// Topic name.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
}

func (KafkaTopicStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatusPatch)(nil)).Elem()
}

func (i KafkaTopicStatusPatchArgs) ToKafkaTopicStatusPatchOutput() KafkaTopicStatusPatchOutput {
	return i.ToKafkaTopicStatusPatchOutputWithContext(context.Background())
}

func (i KafkaTopicStatusPatchArgs) ToKafkaTopicStatusPatchOutputWithContext(ctx context.Context) KafkaTopicStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusPatchOutput)
}

func (i KafkaTopicStatusPatchArgs) ToKafkaTopicStatusPatchPtrOutput() KafkaTopicStatusPatchPtrOutput {
	return i.ToKafkaTopicStatusPatchPtrOutputWithContext(context.Background())
}

func (i KafkaTopicStatusPatchArgs) ToKafkaTopicStatusPatchPtrOutputWithContext(ctx context.Context) KafkaTopicStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusPatchOutput).ToKafkaTopicStatusPatchPtrOutputWithContext(ctx)
}

// KafkaTopicStatusPatchPtrInput is an input type that accepts KafkaTopicStatusPatchArgs, KafkaTopicStatusPatchPtr and KafkaTopicStatusPatchPtrOutput values.
// You can construct a concrete instance of `KafkaTopicStatusPatchPtrInput` via:
//
//	        KafkaTopicStatusPatchArgs{...}
//
//	or:
//
//	        nil
type KafkaTopicStatusPatchPtrInput interface {
	pulumi.Input

	ToKafkaTopicStatusPatchPtrOutput() KafkaTopicStatusPatchPtrOutput
	ToKafkaTopicStatusPatchPtrOutputWithContext(context.Context) KafkaTopicStatusPatchPtrOutput
}

type kafkaTopicStatusPatchPtrType KafkaTopicStatusPatchArgs

func KafkaTopicStatusPatchPtr(v *KafkaTopicStatusPatchArgs) KafkaTopicStatusPatchPtrInput {
	return (*kafkaTopicStatusPatchPtrType)(v)
}

func (*kafkaTopicStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicStatusPatch)(nil)).Elem()
}

func (i *kafkaTopicStatusPatchPtrType) ToKafkaTopicStatusPatchPtrOutput() KafkaTopicStatusPatchPtrOutput {
	return i.ToKafkaTopicStatusPatchPtrOutputWithContext(context.Background())
}

func (i *kafkaTopicStatusPatchPtrType) ToKafkaTopicStatusPatchPtrOutputWithContext(ctx context.Context) KafkaTopicStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusPatchPtrOutput)
}

// The status of the topic.
type KafkaTopicStatusPatchOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatusPatch)(nil)).Elem()
}

func (o KafkaTopicStatusPatchOutput) ToKafkaTopicStatusPatchOutput() KafkaTopicStatusPatchOutput {
	return o
}

func (o KafkaTopicStatusPatchOutput) ToKafkaTopicStatusPatchOutputWithContext(ctx context.Context) KafkaTopicStatusPatchOutput {
	return o
}

func (o KafkaTopicStatusPatchOutput) ToKafkaTopicStatusPatchPtrOutput() KafkaTopicStatusPatchPtrOutput {
	return o.ToKafkaTopicStatusPatchPtrOutputWithContext(context.Background())
}

func (o KafkaTopicStatusPatchOutput) ToKafkaTopicStatusPatchPtrOutputWithContext(ctx context.Context) KafkaTopicStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaTopicStatusPatch) *KafkaTopicStatusPatch {
		return &v
	}).(KafkaTopicStatusPatchPtrOutput)
}

// List of status conditions.
func (o KafkaTopicStatusPatchOutput) Conditions() KafkaTopicStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v KafkaTopicStatusPatch) []KafkaTopicStatusConditionsPatch { return v.Conditions }).(KafkaTopicStatusConditionsPatchArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaTopicStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

func (o KafkaTopicStatusPatchOutput) ReplicasChange() KafkaTopicStatusReplicasChangePatchPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusPatch) *KafkaTopicStatusReplicasChangePatch { return v.ReplicasChange }).(KafkaTopicStatusReplicasChangePatchPtrOutput)
}

// The topic's id. For a KafkaTopic with the ready condition, this will change only if the topic gets deleted and recreated with the same name.
func (o KafkaTopicStatusPatchOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusPatch) *string { return v.TopicId }).(pulumi.StringPtrOutput)
}

// Topic name.
func (o KafkaTopicStatusPatchOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusPatch) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

type KafkaTopicStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicStatusPatch)(nil)).Elem()
}

func (o KafkaTopicStatusPatchPtrOutput) ToKafkaTopicStatusPatchPtrOutput() KafkaTopicStatusPatchPtrOutput {
	return o
}

func (o KafkaTopicStatusPatchPtrOutput) ToKafkaTopicStatusPatchPtrOutputWithContext(ctx context.Context) KafkaTopicStatusPatchPtrOutput {
	return o
}

func (o KafkaTopicStatusPatchPtrOutput) Elem() KafkaTopicStatusPatchOutput {
	return o.ApplyT(func(v *KafkaTopicStatusPatch) KafkaTopicStatusPatch {
		if v != nil {
			return *v
		}
		var ret KafkaTopicStatusPatch
		return ret
	}).(KafkaTopicStatusPatchOutput)
}

// List of status conditions.
func (o KafkaTopicStatusPatchPtrOutput) Conditions() KafkaTopicStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *KafkaTopicStatusPatch) []KafkaTopicStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KafkaTopicStatusConditionsPatchArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaTopicStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

func (o KafkaTopicStatusPatchPtrOutput) ReplicasChange() KafkaTopicStatusReplicasChangePatchPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusPatch) *KafkaTopicStatusReplicasChangePatch {
		if v == nil {
			return nil
		}
		return v.ReplicasChange
	}).(KafkaTopicStatusReplicasChangePatchPtrOutput)
}

// The topic's id. For a KafkaTopic with the ready condition, this will change only if the topic gets deleted and recreated with the same name.
func (o KafkaTopicStatusPatchPtrOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.TopicId
	}).(pulumi.StringPtrOutput)
}

// Topic name.
func (o KafkaTopicStatusPatchPtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.TopicName
	}).(pulumi.StringPtrOutput)
}

// Replication factor change status.
type KafkaTopicStatusReplicasChange struct {
	// Message for the user related to the replicas change request. This may contain transient error messages that would disappear on periodic reconciliations.
	Message *string `pulumi:"message"`
	// The session identifier for replicas change requests pertaining to this KafkaTopic resource. This is used by the Topic Operator to track the status of `ongoing` replicas change operations.
	SessionId *string `pulumi:"sessionId"`
	// Current state of the replicas change operation. This can be `pending`, when the change has been requested, or `ongoing`, when the change has been successfully submitted to Cruise Control.
	State *string `pulumi:"state"`
	// The target replicas value requested by the user. This may be different from .spec.replicas when a change is ongoing.
	TargetReplicas *int `pulumi:"targetReplicas"`
}

// KafkaTopicStatusReplicasChangeInput is an input type that accepts KafkaTopicStatusReplicasChangeArgs and KafkaTopicStatusReplicasChangeOutput values.
// You can construct a concrete instance of `KafkaTopicStatusReplicasChangeInput` via:
//
//	KafkaTopicStatusReplicasChangeArgs{...}
type KafkaTopicStatusReplicasChangeInput interface {
	pulumi.Input

	ToKafkaTopicStatusReplicasChangeOutput() KafkaTopicStatusReplicasChangeOutput
	ToKafkaTopicStatusReplicasChangeOutputWithContext(context.Context) KafkaTopicStatusReplicasChangeOutput
}

// Replication factor change status.
type KafkaTopicStatusReplicasChangeArgs struct {
	// Message for the user related to the replicas change request. This may contain transient error messages that would disappear on periodic reconciliations.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The session identifier for replicas change requests pertaining to this KafkaTopic resource. This is used by the Topic Operator to track the status of `ongoing` replicas change operations.
	SessionId pulumi.StringPtrInput `pulumi:"sessionId"`
	// Current state of the replicas change operation. This can be `pending`, when the change has been requested, or `ongoing`, when the change has been successfully submitted to Cruise Control.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The target replicas value requested by the user. This may be different from .spec.replicas when a change is ongoing.
	TargetReplicas pulumi.IntPtrInput `pulumi:"targetReplicas"`
}

func (KafkaTopicStatusReplicasChangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatusReplicasChange)(nil)).Elem()
}

func (i KafkaTopicStatusReplicasChangeArgs) ToKafkaTopicStatusReplicasChangeOutput() KafkaTopicStatusReplicasChangeOutput {
	return i.ToKafkaTopicStatusReplicasChangeOutputWithContext(context.Background())
}

func (i KafkaTopicStatusReplicasChangeArgs) ToKafkaTopicStatusReplicasChangeOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusReplicasChangeOutput)
}

func (i KafkaTopicStatusReplicasChangeArgs) ToKafkaTopicStatusReplicasChangePtrOutput() KafkaTopicStatusReplicasChangePtrOutput {
	return i.ToKafkaTopicStatusReplicasChangePtrOutputWithContext(context.Background())
}

func (i KafkaTopicStatusReplicasChangeArgs) ToKafkaTopicStatusReplicasChangePtrOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusReplicasChangeOutput).ToKafkaTopicStatusReplicasChangePtrOutputWithContext(ctx)
}

// KafkaTopicStatusReplicasChangePtrInput is an input type that accepts KafkaTopicStatusReplicasChangeArgs, KafkaTopicStatusReplicasChangePtr and KafkaTopicStatusReplicasChangePtrOutput values.
// You can construct a concrete instance of `KafkaTopicStatusReplicasChangePtrInput` via:
//
//	        KafkaTopicStatusReplicasChangeArgs{...}
//
//	or:
//
//	        nil
type KafkaTopicStatusReplicasChangePtrInput interface {
	pulumi.Input

	ToKafkaTopicStatusReplicasChangePtrOutput() KafkaTopicStatusReplicasChangePtrOutput
	ToKafkaTopicStatusReplicasChangePtrOutputWithContext(context.Context) KafkaTopicStatusReplicasChangePtrOutput
}

type kafkaTopicStatusReplicasChangePtrType KafkaTopicStatusReplicasChangeArgs

func KafkaTopicStatusReplicasChangePtr(v *KafkaTopicStatusReplicasChangeArgs) KafkaTopicStatusReplicasChangePtrInput {
	return (*kafkaTopicStatusReplicasChangePtrType)(v)
}

func (*kafkaTopicStatusReplicasChangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicStatusReplicasChange)(nil)).Elem()
}

func (i *kafkaTopicStatusReplicasChangePtrType) ToKafkaTopicStatusReplicasChangePtrOutput() KafkaTopicStatusReplicasChangePtrOutput {
	return i.ToKafkaTopicStatusReplicasChangePtrOutputWithContext(context.Background())
}

func (i *kafkaTopicStatusReplicasChangePtrType) ToKafkaTopicStatusReplicasChangePtrOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusReplicasChangePtrOutput)
}

// Replication factor change status.
type KafkaTopicStatusReplicasChangeOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusReplicasChangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatusReplicasChange)(nil)).Elem()
}

func (o KafkaTopicStatusReplicasChangeOutput) ToKafkaTopicStatusReplicasChangeOutput() KafkaTopicStatusReplicasChangeOutput {
	return o
}

func (o KafkaTopicStatusReplicasChangeOutput) ToKafkaTopicStatusReplicasChangeOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangeOutput {
	return o
}

func (o KafkaTopicStatusReplicasChangeOutput) ToKafkaTopicStatusReplicasChangePtrOutput() KafkaTopicStatusReplicasChangePtrOutput {
	return o.ToKafkaTopicStatusReplicasChangePtrOutputWithContext(context.Background())
}

func (o KafkaTopicStatusReplicasChangeOutput) ToKafkaTopicStatusReplicasChangePtrOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaTopicStatusReplicasChange) *KafkaTopicStatusReplicasChange {
		return &v
	}).(KafkaTopicStatusReplicasChangePtrOutput)
}

// Message for the user related to the replicas change request. This may contain transient error messages that would disappear on periodic reconciliations.
func (o KafkaTopicStatusReplicasChangeOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusReplicasChange) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The session identifier for replicas change requests pertaining to this KafkaTopic resource. This is used by the Topic Operator to track the status of `ongoing` replicas change operations.
func (o KafkaTopicStatusReplicasChangeOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusReplicasChange) *string { return v.SessionId }).(pulumi.StringPtrOutput)
}

// Current state of the replicas change operation. This can be `pending`, when the change has been requested, or `ongoing`, when the change has been successfully submitted to Cruise Control.
func (o KafkaTopicStatusReplicasChangeOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusReplicasChange) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The target replicas value requested by the user. This may be different from .spec.replicas when a change is ongoing.
func (o KafkaTopicStatusReplicasChangeOutput) TargetReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusReplicasChange) *int { return v.TargetReplicas }).(pulumi.IntPtrOutput)
}

type KafkaTopicStatusReplicasChangePtrOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusReplicasChangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicStatusReplicasChange)(nil)).Elem()
}

func (o KafkaTopicStatusReplicasChangePtrOutput) ToKafkaTopicStatusReplicasChangePtrOutput() KafkaTopicStatusReplicasChangePtrOutput {
	return o
}

func (o KafkaTopicStatusReplicasChangePtrOutput) ToKafkaTopicStatusReplicasChangePtrOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangePtrOutput {
	return o
}

func (o KafkaTopicStatusReplicasChangePtrOutput) Elem() KafkaTopicStatusReplicasChangeOutput {
	return o.ApplyT(func(v *KafkaTopicStatusReplicasChange) KafkaTopicStatusReplicasChange {
		if v != nil {
			return *v
		}
		var ret KafkaTopicStatusReplicasChange
		return ret
	}).(KafkaTopicStatusReplicasChangeOutput)
}

// Message for the user related to the replicas change request. This may contain transient error messages that would disappear on periodic reconciliations.
func (o KafkaTopicStatusReplicasChangePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusReplicasChange) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// The session identifier for replicas change requests pertaining to this KafkaTopic resource. This is used by the Topic Operator to track the status of `ongoing` replicas change operations.
func (o KafkaTopicStatusReplicasChangePtrOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusReplicasChange) *string {
		if v == nil {
			return nil
		}
		return v.SessionId
	}).(pulumi.StringPtrOutput)
}

// Current state of the replicas change operation. This can be `pending`, when the change has been requested, or `ongoing`, when the change has been successfully submitted to Cruise Control.
func (o KafkaTopicStatusReplicasChangePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusReplicasChange) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// The target replicas value requested by the user. This may be different from .spec.replicas when a change is ongoing.
func (o KafkaTopicStatusReplicasChangePtrOutput) TargetReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusReplicasChange) *int {
		if v == nil {
			return nil
		}
		return v.TargetReplicas
	}).(pulumi.IntPtrOutput)
}

// Replication factor change status.
type KafkaTopicStatusReplicasChangePatch struct {
	// Message for the user related to the replicas change request. This may contain transient error messages that would disappear on periodic reconciliations.
	Message *string `pulumi:"message"`
	// The session identifier for replicas change requests pertaining to this KafkaTopic resource. This is used by the Topic Operator to track the status of `ongoing` replicas change operations.
	SessionId *string `pulumi:"sessionId"`
	// Current state of the replicas change operation. This can be `pending`, when the change has been requested, or `ongoing`, when the change has been successfully submitted to Cruise Control.
	State *string `pulumi:"state"`
	// The target replicas value requested by the user. This may be different from .spec.replicas when a change is ongoing.
	TargetReplicas *int `pulumi:"targetReplicas"`
}

// KafkaTopicStatusReplicasChangePatchInput is an input type that accepts KafkaTopicStatusReplicasChangePatchArgs and KafkaTopicStatusReplicasChangePatchOutput values.
// You can construct a concrete instance of `KafkaTopicStatusReplicasChangePatchInput` via:
//
//	KafkaTopicStatusReplicasChangePatchArgs{...}
type KafkaTopicStatusReplicasChangePatchInput interface {
	pulumi.Input

	ToKafkaTopicStatusReplicasChangePatchOutput() KafkaTopicStatusReplicasChangePatchOutput
	ToKafkaTopicStatusReplicasChangePatchOutputWithContext(context.Context) KafkaTopicStatusReplicasChangePatchOutput
}

// Replication factor change status.
type KafkaTopicStatusReplicasChangePatchArgs struct {
	// Message for the user related to the replicas change request. This may contain transient error messages that would disappear on periodic reconciliations.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The session identifier for replicas change requests pertaining to this KafkaTopic resource. This is used by the Topic Operator to track the status of `ongoing` replicas change operations.
	SessionId pulumi.StringPtrInput `pulumi:"sessionId"`
	// Current state of the replicas change operation. This can be `pending`, when the change has been requested, or `ongoing`, when the change has been successfully submitted to Cruise Control.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The target replicas value requested by the user. This may be different from .spec.replicas when a change is ongoing.
	TargetReplicas pulumi.IntPtrInput `pulumi:"targetReplicas"`
}

func (KafkaTopicStatusReplicasChangePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatusReplicasChangePatch)(nil)).Elem()
}

func (i KafkaTopicStatusReplicasChangePatchArgs) ToKafkaTopicStatusReplicasChangePatchOutput() KafkaTopicStatusReplicasChangePatchOutput {
	return i.ToKafkaTopicStatusReplicasChangePatchOutputWithContext(context.Background())
}

func (i KafkaTopicStatusReplicasChangePatchArgs) ToKafkaTopicStatusReplicasChangePatchOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusReplicasChangePatchOutput)
}

func (i KafkaTopicStatusReplicasChangePatchArgs) ToKafkaTopicStatusReplicasChangePatchPtrOutput() KafkaTopicStatusReplicasChangePatchPtrOutput {
	return i.ToKafkaTopicStatusReplicasChangePatchPtrOutputWithContext(context.Background())
}

func (i KafkaTopicStatusReplicasChangePatchArgs) ToKafkaTopicStatusReplicasChangePatchPtrOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusReplicasChangePatchOutput).ToKafkaTopicStatusReplicasChangePatchPtrOutputWithContext(ctx)
}

// KafkaTopicStatusReplicasChangePatchPtrInput is an input type that accepts KafkaTopicStatusReplicasChangePatchArgs, KafkaTopicStatusReplicasChangePatchPtr and KafkaTopicStatusReplicasChangePatchPtrOutput values.
// You can construct a concrete instance of `KafkaTopicStatusReplicasChangePatchPtrInput` via:
//
//	        KafkaTopicStatusReplicasChangePatchArgs{...}
//
//	or:
//
//	        nil
type KafkaTopicStatusReplicasChangePatchPtrInput interface {
	pulumi.Input

	ToKafkaTopicStatusReplicasChangePatchPtrOutput() KafkaTopicStatusReplicasChangePatchPtrOutput
	ToKafkaTopicStatusReplicasChangePatchPtrOutputWithContext(context.Context) KafkaTopicStatusReplicasChangePatchPtrOutput
}

type kafkaTopicStatusReplicasChangePatchPtrType KafkaTopicStatusReplicasChangePatchArgs

func KafkaTopicStatusReplicasChangePatchPtr(v *KafkaTopicStatusReplicasChangePatchArgs) KafkaTopicStatusReplicasChangePatchPtrInput {
	return (*kafkaTopicStatusReplicasChangePatchPtrType)(v)
}

func (*kafkaTopicStatusReplicasChangePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicStatusReplicasChangePatch)(nil)).Elem()
}

func (i *kafkaTopicStatusReplicasChangePatchPtrType) ToKafkaTopicStatusReplicasChangePatchPtrOutput() KafkaTopicStatusReplicasChangePatchPtrOutput {
	return i.ToKafkaTopicStatusReplicasChangePatchPtrOutputWithContext(context.Background())
}

func (i *kafkaTopicStatusReplicasChangePatchPtrType) ToKafkaTopicStatusReplicasChangePatchPtrOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusReplicasChangePatchPtrOutput)
}

// Replication factor change status.
type KafkaTopicStatusReplicasChangePatchOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusReplicasChangePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatusReplicasChangePatch)(nil)).Elem()
}

func (o KafkaTopicStatusReplicasChangePatchOutput) ToKafkaTopicStatusReplicasChangePatchOutput() KafkaTopicStatusReplicasChangePatchOutput {
	return o
}

func (o KafkaTopicStatusReplicasChangePatchOutput) ToKafkaTopicStatusReplicasChangePatchOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangePatchOutput {
	return o
}

func (o KafkaTopicStatusReplicasChangePatchOutput) ToKafkaTopicStatusReplicasChangePatchPtrOutput() KafkaTopicStatusReplicasChangePatchPtrOutput {
	return o.ToKafkaTopicStatusReplicasChangePatchPtrOutputWithContext(context.Background())
}

func (o KafkaTopicStatusReplicasChangePatchOutput) ToKafkaTopicStatusReplicasChangePatchPtrOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaTopicStatusReplicasChangePatch) *KafkaTopicStatusReplicasChangePatch {
		return &v
	}).(KafkaTopicStatusReplicasChangePatchPtrOutput)
}

// Message for the user related to the replicas change request. This may contain transient error messages that would disappear on periodic reconciliations.
func (o KafkaTopicStatusReplicasChangePatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusReplicasChangePatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The session identifier for replicas change requests pertaining to this KafkaTopic resource. This is used by the Topic Operator to track the status of `ongoing` replicas change operations.
func (o KafkaTopicStatusReplicasChangePatchOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusReplicasChangePatch) *string { return v.SessionId }).(pulumi.StringPtrOutput)
}

// Current state of the replicas change operation. This can be `pending`, when the change has been requested, or `ongoing`, when the change has been successfully submitted to Cruise Control.
func (o KafkaTopicStatusReplicasChangePatchOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusReplicasChangePatch) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The target replicas value requested by the user. This may be different from .spec.replicas when a change is ongoing.
func (o KafkaTopicStatusReplicasChangePatchOutput) TargetReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusReplicasChangePatch) *int { return v.TargetReplicas }).(pulumi.IntPtrOutput)
}

type KafkaTopicStatusReplicasChangePatchPtrOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusReplicasChangePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicStatusReplicasChangePatch)(nil)).Elem()
}

func (o KafkaTopicStatusReplicasChangePatchPtrOutput) ToKafkaTopicStatusReplicasChangePatchPtrOutput() KafkaTopicStatusReplicasChangePatchPtrOutput {
	return o
}

func (o KafkaTopicStatusReplicasChangePatchPtrOutput) ToKafkaTopicStatusReplicasChangePatchPtrOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangePatchPtrOutput {
	return o
}

func (o KafkaTopicStatusReplicasChangePatchPtrOutput) Elem() KafkaTopicStatusReplicasChangePatchOutput {
	return o.ApplyT(func(v *KafkaTopicStatusReplicasChangePatch) KafkaTopicStatusReplicasChangePatch {
		if v != nil {
			return *v
		}
		var ret KafkaTopicStatusReplicasChangePatch
		return ret
	}).(KafkaTopicStatusReplicasChangePatchOutput)
}

// Message for the user related to the replicas change request. This may contain transient error messages that would disappear on periodic reconciliations.
func (o KafkaTopicStatusReplicasChangePatchPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusReplicasChangePatch) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// The session identifier for replicas change requests pertaining to this KafkaTopic resource. This is used by the Topic Operator to track the status of `ongoing` replicas change operations.
func (o KafkaTopicStatusReplicasChangePatchPtrOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusReplicasChangePatch) *string {
		if v == nil {
			return nil
		}
		return v.SessionId
	}).(pulumi.StringPtrOutput)
}

// Current state of the replicas change operation. This can be `pending`, when the change has been requested, or `ongoing`, when the change has been successfully submitted to Cruise Control.
func (o KafkaTopicStatusReplicasChangePatchPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusReplicasChangePatch) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// The target replicas value requested by the user. This may be different from .spec.replicas when a change is ongoing.
func (o KafkaTopicStatusReplicasChangePatchPtrOutput) TargetReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusReplicasChangePatch) *int {
		if v == nil {
			return nil
		}
		return v.TargetReplicas
	}).(pulumi.IntPtrOutput)
}

type KafkaUserType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *KafkaUserSpec     `pulumi:"spec"`
	Status   *KafkaUserStatus   `pulumi:"status"`
}

// KafkaUserTypeInput is an input type that accepts KafkaUserTypeArgs and KafkaUserTypeOutput values.
// You can construct a concrete instance of `KafkaUserTypeInput` via:
//
//	KafkaUserTypeArgs{...}
type KafkaUserTypeInput interface {
	pulumi.Input

	ToKafkaUserTypeOutput() KafkaUserTypeOutput
	ToKafkaUserTypeOutputWithContext(context.Context) KafkaUserTypeOutput
}

type KafkaUserTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     KafkaUserSpecPtrInput     `pulumi:"spec"`
	Status   KafkaUserStatusPtrInput   `pulumi:"status"`
}

func (KafkaUserTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserType)(nil)).Elem()
}

func (i KafkaUserTypeArgs) ToKafkaUserTypeOutput() KafkaUserTypeOutput {
	return i.ToKafkaUserTypeOutputWithContext(context.Background())
}

func (i KafkaUserTypeArgs) ToKafkaUserTypeOutputWithContext(ctx context.Context) KafkaUserTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserTypeOutput)
}

// KafkaUserTypeArrayInput is an input type that accepts KafkaUserTypeArray and KafkaUserTypeArrayOutput values.
// You can construct a concrete instance of `KafkaUserTypeArrayInput` via:
//
//	KafkaUserTypeArray{ KafkaUserTypeArgs{...} }
type KafkaUserTypeArrayInput interface {
	pulumi.Input

	ToKafkaUserTypeArrayOutput() KafkaUserTypeArrayOutput
	ToKafkaUserTypeArrayOutputWithContext(context.Context) KafkaUserTypeArrayOutput
}

type KafkaUserTypeArray []KafkaUserTypeInput

func (KafkaUserTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserType)(nil)).Elem()
}

func (i KafkaUserTypeArray) ToKafkaUserTypeArrayOutput() KafkaUserTypeArrayOutput {
	return i.ToKafkaUserTypeArrayOutputWithContext(context.Background())
}

func (i KafkaUserTypeArray) ToKafkaUserTypeArrayOutputWithContext(ctx context.Context) KafkaUserTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserTypeArrayOutput)
}

type KafkaUserTypeOutput struct{ *pulumi.OutputState }

func (KafkaUserTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserType)(nil)).Elem()
}

func (o KafkaUserTypeOutput) ToKafkaUserTypeOutput() KafkaUserTypeOutput {
	return o
}

func (o KafkaUserTypeOutput) ToKafkaUserTypeOutputWithContext(ctx context.Context) KafkaUserTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaUserTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaUserTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaUserTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KafkaUserType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o KafkaUserTypeOutput) Spec() KafkaUserSpecPtrOutput {
	return o.ApplyT(func(v KafkaUserType) *KafkaUserSpec { return v.Spec }).(KafkaUserSpecPtrOutput)
}

func (o KafkaUserTypeOutput) Status() KafkaUserStatusPtrOutput {
	return o.ApplyT(func(v KafkaUserType) *KafkaUserStatus { return v.Status }).(KafkaUserStatusPtrOutput)
}

type KafkaUserTypeArrayOutput struct{ *pulumi.OutputState }

func (KafkaUserTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserType)(nil)).Elem()
}

func (o KafkaUserTypeArrayOutput) ToKafkaUserTypeArrayOutput() KafkaUserTypeArrayOutput {
	return o
}

func (o KafkaUserTypeArrayOutput) ToKafkaUserTypeArrayOutputWithContext(ctx context.Context) KafkaUserTypeArrayOutput {
	return o
}

func (o KafkaUserTypeArrayOutput) Index(i pulumi.IntInput) KafkaUserTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaUserType {
		return vs[0].([]KafkaUserType)[vs[1].(int)]
	}).(KafkaUserTypeOutput)
}

// KafkaUserList is a list of KafkaUser
type KafkaUserListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of kafkausers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []KafkaUserType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// KafkaUserListTypeInput is an input type that accepts KafkaUserListTypeArgs and KafkaUserListTypeOutput values.
// You can construct a concrete instance of `KafkaUserListTypeInput` via:
//
//	KafkaUserListTypeArgs{...}
type KafkaUserListTypeInput interface {
	pulumi.Input

	ToKafkaUserListTypeOutput() KafkaUserListTypeOutput
	ToKafkaUserListTypeOutputWithContext(context.Context) KafkaUserListTypeOutput
}

// KafkaUserList is a list of KafkaUser
type KafkaUserListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of kafkausers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaUserTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (KafkaUserListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserListType)(nil)).Elem()
}

func (i KafkaUserListTypeArgs) ToKafkaUserListTypeOutput() KafkaUserListTypeOutput {
	return i.ToKafkaUserListTypeOutputWithContext(context.Background())
}

func (i KafkaUserListTypeArgs) ToKafkaUserListTypeOutputWithContext(ctx context.Context) KafkaUserListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserListTypeOutput)
}

// KafkaUserList is a list of KafkaUser
type KafkaUserListTypeOutput struct{ *pulumi.OutputState }

func (KafkaUserListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserListType)(nil)).Elem()
}

func (o KafkaUserListTypeOutput) ToKafkaUserListTypeOutput() KafkaUserListTypeOutput {
	return o
}

func (o KafkaUserListTypeOutput) ToKafkaUserListTypeOutputWithContext(ctx context.Context) KafkaUserListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaUserListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of kafkausers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o KafkaUserListTypeOutput) Items() KafkaUserTypeArrayOutput {
	return o.ApplyT(func(v KafkaUserListType) []KafkaUserType { return v.Items }).(KafkaUserTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaUserListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaUserListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v KafkaUserListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

type KafkaUserPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *KafkaUserSpecPatch     `pulumi:"spec"`
	Status   *KafkaUserStatusPatch   `pulumi:"status"`
}

// KafkaUserPatchTypeInput is an input type that accepts KafkaUserPatchTypeArgs and KafkaUserPatchTypeOutput values.
// You can construct a concrete instance of `KafkaUserPatchTypeInput` via:
//
//	KafkaUserPatchTypeArgs{...}
type KafkaUserPatchTypeInput interface {
	pulumi.Input

	ToKafkaUserPatchTypeOutput() KafkaUserPatchTypeOutput
	ToKafkaUserPatchTypeOutputWithContext(context.Context) KafkaUserPatchTypeOutput
}

type KafkaUserPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     KafkaUserSpecPatchPtrInput     `pulumi:"spec"`
	Status   KafkaUserStatusPatchPtrInput   `pulumi:"status"`
}

func (KafkaUserPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserPatchType)(nil)).Elem()
}

func (i KafkaUserPatchTypeArgs) ToKafkaUserPatchTypeOutput() KafkaUserPatchTypeOutput {
	return i.ToKafkaUserPatchTypeOutputWithContext(context.Background())
}

func (i KafkaUserPatchTypeArgs) ToKafkaUserPatchTypeOutputWithContext(ctx context.Context) KafkaUserPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserPatchTypeOutput)
}

type KafkaUserPatchTypeOutput struct{ *pulumi.OutputState }

func (KafkaUserPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserPatchType)(nil)).Elem()
}

func (o KafkaUserPatchTypeOutput) ToKafkaUserPatchTypeOutput() KafkaUserPatchTypeOutput {
	return o
}

func (o KafkaUserPatchTypeOutput) ToKafkaUserPatchTypeOutputWithContext(ctx context.Context) KafkaUserPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaUserPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaUserPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaUserPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v KafkaUserPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o KafkaUserPatchTypeOutput) Spec() KafkaUserSpecPatchPtrOutput {
	return o.ApplyT(func(v KafkaUserPatchType) *KafkaUserSpecPatch { return v.Spec }).(KafkaUserSpecPatchPtrOutput)
}

func (o KafkaUserPatchTypeOutput) Status() KafkaUserStatusPatchPtrOutput {
	return o.ApplyT(func(v KafkaUserPatchType) *KafkaUserStatusPatch { return v.Status }).(KafkaUserStatusPatchPtrOutput)
}

// The specification of the user.
type KafkaUserSpec struct {
	Authentication *KafkaUserSpecAuthentication `pulumi:"authentication"`
	Authorization  *KafkaUserSpecAuthorization  `pulumi:"authorization"`
	Quotas         *KafkaUserSpecQuotas         `pulumi:"quotas"`
	Template       *KafkaUserSpecTemplate       `pulumi:"template"`
}

// KafkaUserSpecInput is an input type that accepts KafkaUserSpecArgs and KafkaUserSpecOutput values.
// You can construct a concrete instance of `KafkaUserSpecInput` via:
//
//	KafkaUserSpecArgs{...}
type KafkaUserSpecInput interface {
	pulumi.Input

	ToKafkaUserSpecOutput() KafkaUserSpecOutput
	ToKafkaUserSpecOutputWithContext(context.Context) KafkaUserSpecOutput
}

// The specification of the user.
type KafkaUserSpecArgs struct {
	Authentication KafkaUserSpecAuthenticationPtrInput `pulumi:"authentication"`
	Authorization  KafkaUserSpecAuthorizationPtrInput  `pulumi:"authorization"`
	Quotas         KafkaUserSpecQuotasPtrInput         `pulumi:"quotas"`
	Template       KafkaUserSpecTemplatePtrInput       `pulumi:"template"`
}

func (KafkaUserSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpec)(nil)).Elem()
}

func (i KafkaUserSpecArgs) ToKafkaUserSpecOutput() KafkaUserSpecOutput {
	return i.ToKafkaUserSpecOutputWithContext(context.Background())
}

func (i KafkaUserSpecArgs) ToKafkaUserSpecOutputWithContext(ctx context.Context) KafkaUserSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecOutput)
}

func (i KafkaUserSpecArgs) ToKafkaUserSpecPtrOutput() KafkaUserSpecPtrOutput {
	return i.ToKafkaUserSpecPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecArgs) ToKafkaUserSpecPtrOutputWithContext(ctx context.Context) KafkaUserSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecOutput).ToKafkaUserSpecPtrOutputWithContext(ctx)
}

// KafkaUserSpecPtrInput is an input type that accepts KafkaUserSpecArgs, KafkaUserSpecPtr and KafkaUserSpecPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecPtrInput` via:
//
//	        KafkaUserSpecArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecPtrOutput() KafkaUserSpecPtrOutput
	ToKafkaUserSpecPtrOutputWithContext(context.Context) KafkaUserSpecPtrOutput
}

type kafkaUserSpecPtrType KafkaUserSpecArgs

func KafkaUserSpecPtr(v *KafkaUserSpecArgs) KafkaUserSpecPtrInput {
	return (*kafkaUserSpecPtrType)(v)
}

func (*kafkaUserSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpec)(nil)).Elem()
}

func (i *kafkaUserSpecPtrType) ToKafkaUserSpecPtrOutput() KafkaUserSpecPtrOutput {
	return i.ToKafkaUserSpecPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecPtrType) ToKafkaUserSpecPtrOutputWithContext(ctx context.Context) KafkaUserSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecPtrOutput)
}

// The specification of the user.
type KafkaUserSpecOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpec)(nil)).Elem()
}

func (o KafkaUserSpecOutput) ToKafkaUserSpecOutput() KafkaUserSpecOutput {
	return o
}

func (o KafkaUserSpecOutput) ToKafkaUserSpecOutputWithContext(ctx context.Context) KafkaUserSpecOutput {
	return o
}

func (o KafkaUserSpecOutput) ToKafkaUserSpecPtrOutput() KafkaUserSpecPtrOutput {
	return o.ToKafkaUserSpecPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecOutput) ToKafkaUserSpecPtrOutputWithContext(ctx context.Context) KafkaUserSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpec) *KafkaUserSpec {
		return &v
	}).(KafkaUserSpecPtrOutput)
}

func (o KafkaUserSpecOutput) Authentication() KafkaUserSpecAuthenticationPtrOutput {
	return o.ApplyT(func(v KafkaUserSpec) *KafkaUserSpecAuthentication { return v.Authentication }).(KafkaUserSpecAuthenticationPtrOutput)
}

func (o KafkaUserSpecOutput) Authorization() KafkaUserSpecAuthorizationPtrOutput {
	return o.ApplyT(func(v KafkaUserSpec) *KafkaUserSpecAuthorization { return v.Authorization }).(KafkaUserSpecAuthorizationPtrOutput)
}

func (o KafkaUserSpecOutput) Quotas() KafkaUserSpecQuotasPtrOutput {
	return o.ApplyT(func(v KafkaUserSpec) *KafkaUserSpecQuotas { return v.Quotas }).(KafkaUserSpecQuotasPtrOutput)
}

func (o KafkaUserSpecOutput) Template() KafkaUserSpecTemplatePtrOutput {
	return o.ApplyT(func(v KafkaUserSpec) *KafkaUserSpecTemplate { return v.Template }).(KafkaUserSpecTemplatePtrOutput)
}

type KafkaUserSpecPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpec)(nil)).Elem()
}

func (o KafkaUserSpecPtrOutput) ToKafkaUserSpecPtrOutput() KafkaUserSpecPtrOutput {
	return o
}

func (o KafkaUserSpecPtrOutput) ToKafkaUserSpecPtrOutputWithContext(ctx context.Context) KafkaUserSpecPtrOutput {
	return o
}

func (o KafkaUserSpecPtrOutput) Elem() KafkaUserSpecOutput {
	return o.ApplyT(func(v *KafkaUserSpec) KafkaUserSpec {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpec
		return ret
	}).(KafkaUserSpecOutput)
}

func (o KafkaUserSpecPtrOutput) Authentication() KafkaUserSpecAuthenticationPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpec) *KafkaUserSpecAuthentication {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(KafkaUserSpecAuthenticationPtrOutput)
}

func (o KafkaUserSpecPtrOutput) Authorization() KafkaUserSpecAuthorizationPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpec) *KafkaUserSpecAuthorization {
		if v == nil {
			return nil
		}
		return v.Authorization
	}).(KafkaUserSpecAuthorizationPtrOutput)
}

func (o KafkaUserSpecPtrOutput) Quotas() KafkaUserSpecQuotasPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpec) *KafkaUserSpecQuotas {
		if v == nil {
			return nil
		}
		return v.Quotas
	}).(KafkaUserSpecQuotasPtrOutput)
}

func (o KafkaUserSpecPtrOutput) Template() KafkaUserSpecTemplatePtrOutput {
	return o.ApplyT(func(v *KafkaUserSpec) *KafkaUserSpecTemplate {
		if v == nil {
			return nil
		}
		return v.Template
	}).(KafkaUserSpecTemplatePtrOutput)
}

// Authentication mechanism enabled for this Kafka user. The supported authentication mechanisms are `scram-sha-512`, `tls`, and `tls-external`.
//
//   - `scram-sha-512` generates a secret with SASL SCRAM-SHA-512 credentials.
//   - `tls` generates a secret with user certificate for mutual TLS authentication.
//   - `tls-external` does not generate a user certificate.   But prepares the user for using mutual TLS authentication using a user certificate generated outside the User Operator.
//     ACLs and quotas set for this user are configured in the `CN=<username>` format.
//
// Authentication is optional. If authentication is not configured, no credentials are generated. ACLs and quotas set for the user are configured in the `<username>` format suitable for SASL authentication.
type KafkaUserSpecAuthentication struct {
	Password *KafkaUserSpecAuthenticationPassword `pulumi:"password"`
	// Authentication type.
	Type *string `pulumi:"type"`
}

// KafkaUserSpecAuthenticationInput is an input type that accepts KafkaUserSpecAuthenticationArgs and KafkaUserSpecAuthenticationOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationInput` via:
//
//	KafkaUserSpecAuthenticationArgs{...}
type KafkaUserSpecAuthenticationInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationOutput() KafkaUserSpecAuthenticationOutput
	ToKafkaUserSpecAuthenticationOutputWithContext(context.Context) KafkaUserSpecAuthenticationOutput
}

// Authentication mechanism enabled for this Kafka user. The supported authentication mechanisms are `scram-sha-512`, `tls`, and `tls-external`.
//
//   - `scram-sha-512` generates a secret with SASL SCRAM-SHA-512 credentials.
//   - `tls` generates a secret with user certificate for mutual TLS authentication.
//   - `tls-external` does not generate a user certificate.   But prepares the user for using mutual TLS authentication using a user certificate generated outside the User Operator.
//     ACLs and quotas set for this user are configured in the `CN=<username>` format.
//
// Authentication is optional. If authentication is not configured, no credentials are generated. ACLs and quotas set for the user are configured in the `<username>` format suitable for SASL authentication.
type KafkaUserSpecAuthenticationArgs struct {
	Password KafkaUserSpecAuthenticationPasswordPtrInput `pulumi:"password"`
	// Authentication type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaUserSpecAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthentication)(nil)).Elem()
}

func (i KafkaUserSpecAuthenticationArgs) ToKafkaUserSpecAuthenticationOutput() KafkaUserSpecAuthenticationOutput {
	return i.ToKafkaUserSpecAuthenticationOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationArgs) ToKafkaUserSpecAuthenticationOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationOutput)
}

func (i KafkaUserSpecAuthenticationArgs) ToKafkaUserSpecAuthenticationPtrOutput() KafkaUserSpecAuthenticationPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationArgs) ToKafkaUserSpecAuthenticationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationOutput).ToKafkaUserSpecAuthenticationPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthenticationPtrInput is an input type that accepts KafkaUserSpecAuthenticationArgs, KafkaUserSpecAuthenticationPtr and KafkaUserSpecAuthenticationPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPtrInput` via:
//
//	        KafkaUserSpecAuthenticationArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthenticationPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPtrOutput() KafkaUserSpecAuthenticationPtrOutput
	ToKafkaUserSpecAuthenticationPtrOutputWithContext(context.Context) KafkaUserSpecAuthenticationPtrOutput
}

type kafkaUserSpecAuthenticationPtrType KafkaUserSpecAuthenticationArgs

func KafkaUserSpecAuthenticationPtr(v *KafkaUserSpecAuthenticationArgs) KafkaUserSpecAuthenticationPtrInput {
	return (*kafkaUserSpecAuthenticationPtrType)(v)
}

func (*kafkaUserSpecAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthentication)(nil)).Elem()
}

func (i *kafkaUserSpecAuthenticationPtrType) ToKafkaUserSpecAuthenticationPtrOutput() KafkaUserSpecAuthenticationPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthenticationPtrType) ToKafkaUserSpecAuthenticationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPtrOutput)
}

// Authentication mechanism enabled for this Kafka user. The supported authentication mechanisms are `scram-sha-512`, `tls`, and `tls-external`.
//
//   - `scram-sha-512` generates a secret with SASL SCRAM-SHA-512 credentials.
//   - `tls` generates a secret with user certificate for mutual TLS authentication.
//   - `tls-external` does not generate a user certificate.   But prepares the user for using mutual TLS authentication using a user certificate generated outside the User Operator.
//     ACLs and quotas set for this user are configured in the `CN=<username>` format.
//
// Authentication is optional. If authentication is not configured, no credentials are generated. ACLs and quotas set for the user are configured in the `<username>` format suitable for SASL authentication.
type KafkaUserSpecAuthenticationOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthentication)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationOutput) ToKafkaUserSpecAuthenticationOutput() KafkaUserSpecAuthenticationOutput {
	return o
}

func (o KafkaUserSpecAuthenticationOutput) ToKafkaUserSpecAuthenticationOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationOutput {
	return o
}

func (o KafkaUserSpecAuthenticationOutput) ToKafkaUserSpecAuthenticationPtrOutput() KafkaUserSpecAuthenticationPtrOutput {
	return o.ToKafkaUserSpecAuthenticationPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthenticationOutput) ToKafkaUserSpecAuthenticationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthentication) *KafkaUserSpecAuthentication {
		return &v
	}).(KafkaUserSpecAuthenticationPtrOutput)
}

func (o KafkaUserSpecAuthenticationOutput) Password() KafkaUserSpecAuthenticationPasswordPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthentication) *KafkaUserSpecAuthenticationPassword { return v.Password }).(KafkaUserSpecAuthenticationPasswordPtrOutput)
}

// Authentication type.
func (o KafkaUserSpecAuthenticationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthentication) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaUserSpecAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthentication)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPtrOutput) ToKafkaUserSpecAuthenticationPtrOutput() KafkaUserSpecAuthenticationPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPtrOutput) ToKafkaUserSpecAuthenticationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPtrOutput) Elem() KafkaUserSpecAuthenticationOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthentication) KafkaUserSpecAuthentication {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthentication
		return ret
	}).(KafkaUserSpecAuthenticationOutput)
}

func (o KafkaUserSpecAuthenticationPtrOutput) Password() KafkaUserSpecAuthenticationPasswordPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthentication) *KafkaUserSpecAuthenticationPassword {
		if v == nil {
			return nil
		}
		return v.Password
	}).(KafkaUserSpecAuthenticationPasswordPtrOutput)
}

// Authentication type.
func (o KafkaUserSpecAuthenticationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Specify the password for the user. If not set, a new password is generated by the User Operator.
type KafkaUserSpecAuthenticationPassword struct {
	ValueFrom *KafkaUserSpecAuthenticationPasswordValueFrom `pulumi:"valueFrom"`
}

// KafkaUserSpecAuthenticationPasswordInput is an input type that accepts KafkaUserSpecAuthenticationPasswordArgs and KafkaUserSpecAuthenticationPasswordOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordInput` via:
//
//	KafkaUserSpecAuthenticationPasswordArgs{...}
type KafkaUserSpecAuthenticationPasswordInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordOutput() KafkaUserSpecAuthenticationPasswordOutput
	ToKafkaUserSpecAuthenticationPasswordOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordOutput
}

// Specify the password for the user. If not set, a new password is generated by the User Operator.
type KafkaUserSpecAuthenticationPasswordArgs struct {
	ValueFrom KafkaUserSpecAuthenticationPasswordValueFromPtrInput `pulumi:"valueFrom"`
}

func (KafkaUserSpecAuthenticationPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPassword)(nil)).Elem()
}

func (i KafkaUserSpecAuthenticationPasswordArgs) ToKafkaUserSpecAuthenticationPasswordOutput() KafkaUserSpecAuthenticationPasswordOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordArgs) ToKafkaUserSpecAuthenticationPasswordOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordOutput)
}

func (i KafkaUserSpecAuthenticationPasswordArgs) ToKafkaUserSpecAuthenticationPasswordPtrOutput() KafkaUserSpecAuthenticationPasswordPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordArgs) ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordOutput).ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthenticationPasswordPtrInput is an input type that accepts KafkaUserSpecAuthenticationPasswordArgs, KafkaUserSpecAuthenticationPasswordPtr and KafkaUserSpecAuthenticationPasswordPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordPtrInput` via:
//
//	        KafkaUserSpecAuthenticationPasswordArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthenticationPasswordPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordPtrOutput() KafkaUserSpecAuthenticationPasswordPtrOutput
	ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordPtrOutput
}

type kafkaUserSpecAuthenticationPasswordPtrType KafkaUserSpecAuthenticationPasswordArgs

func KafkaUserSpecAuthenticationPasswordPtr(v *KafkaUserSpecAuthenticationPasswordArgs) KafkaUserSpecAuthenticationPasswordPtrInput {
	return (*kafkaUserSpecAuthenticationPasswordPtrType)(v)
}

func (*kafkaUserSpecAuthenticationPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPassword)(nil)).Elem()
}

func (i *kafkaUserSpecAuthenticationPasswordPtrType) ToKafkaUserSpecAuthenticationPasswordPtrOutput() KafkaUserSpecAuthenticationPasswordPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthenticationPasswordPtrType) ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordPtrOutput)
}

// Specify the password for the user. If not set, a new password is generated by the User Operator.
type KafkaUserSpecAuthenticationPasswordOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPassword)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordOutput) ToKafkaUserSpecAuthenticationPasswordOutput() KafkaUserSpecAuthenticationPasswordOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordOutput) ToKafkaUserSpecAuthenticationPasswordOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordOutput) ToKafkaUserSpecAuthenticationPasswordPtrOutput() KafkaUserSpecAuthenticationPasswordPtrOutput {
	return o.ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthenticationPasswordOutput) ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthenticationPassword) *KafkaUserSpecAuthenticationPassword {
		return &v
	}).(KafkaUserSpecAuthenticationPasswordPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordOutput) ValueFrom() KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPassword) *KafkaUserSpecAuthenticationPasswordValueFrom {
		return v.ValueFrom
	}).(KafkaUserSpecAuthenticationPasswordValueFromPtrOutput)
}

type KafkaUserSpecAuthenticationPasswordPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPassword)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordPtrOutput) ToKafkaUserSpecAuthenticationPasswordPtrOutput() KafkaUserSpecAuthenticationPasswordPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordPtrOutput) ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordPtrOutput) Elem() KafkaUserSpecAuthenticationPasswordOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPassword) KafkaUserSpecAuthenticationPassword {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthenticationPassword
		return ret
	}).(KafkaUserSpecAuthenticationPasswordOutput)
}

func (o KafkaUserSpecAuthenticationPasswordPtrOutput) ValueFrom() KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPassword) *KafkaUserSpecAuthenticationPasswordValueFrom {
		if v == nil {
			return nil
		}
		return v.ValueFrom
	}).(KafkaUserSpecAuthenticationPasswordValueFromPtrOutput)
}

// Specify the password for the user. If not set, a new password is generated by the User Operator.
type KafkaUserSpecAuthenticationPasswordPatch struct {
	ValueFrom *KafkaUserSpecAuthenticationPasswordValueFromPatch `pulumi:"valueFrom"`
}

// KafkaUserSpecAuthenticationPasswordPatchInput is an input type that accepts KafkaUserSpecAuthenticationPasswordPatchArgs and KafkaUserSpecAuthenticationPasswordPatchOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordPatchInput` via:
//
//	KafkaUserSpecAuthenticationPasswordPatchArgs{...}
type KafkaUserSpecAuthenticationPasswordPatchInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordPatchOutput() KafkaUserSpecAuthenticationPasswordPatchOutput
	ToKafkaUserSpecAuthenticationPasswordPatchOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordPatchOutput
}

// Specify the password for the user. If not set, a new password is generated by the User Operator.
type KafkaUserSpecAuthenticationPasswordPatchArgs struct {
	ValueFrom KafkaUserSpecAuthenticationPasswordValueFromPatchPtrInput `pulumi:"valueFrom"`
}

func (KafkaUserSpecAuthenticationPasswordPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordPatch)(nil)).Elem()
}

func (i KafkaUserSpecAuthenticationPasswordPatchArgs) ToKafkaUserSpecAuthenticationPasswordPatchOutput() KafkaUserSpecAuthenticationPasswordPatchOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordPatchOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordPatchArgs) ToKafkaUserSpecAuthenticationPasswordPatchOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordPatchOutput)
}

func (i KafkaUserSpecAuthenticationPasswordPatchArgs) ToKafkaUserSpecAuthenticationPasswordPatchPtrOutput() KafkaUserSpecAuthenticationPasswordPatchPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordPatchPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordPatchArgs) ToKafkaUserSpecAuthenticationPasswordPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordPatchOutput).ToKafkaUserSpecAuthenticationPasswordPatchPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthenticationPasswordPatchPtrInput is an input type that accepts KafkaUserSpecAuthenticationPasswordPatchArgs, KafkaUserSpecAuthenticationPasswordPatchPtr and KafkaUserSpecAuthenticationPasswordPatchPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordPatchPtrInput` via:
//
//	        KafkaUserSpecAuthenticationPasswordPatchArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthenticationPasswordPatchPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordPatchPtrOutput() KafkaUserSpecAuthenticationPasswordPatchPtrOutput
	ToKafkaUserSpecAuthenticationPasswordPatchPtrOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordPatchPtrOutput
}

type kafkaUserSpecAuthenticationPasswordPatchPtrType KafkaUserSpecAuthenticationPasswordPatchArgs

func KafkaUserSpecAuthenticationPasswordPatchPtr(v *KafkaUserSpecAuthenticationPasswordPatchArgs) KafkaUserSpecAuthenticationPasswordPatchPtrInput {
	return (*kafkaUserSpecAuthenticationPasswordPatchPtrType)(v)
}

func (*kafkaUserSpecAuthenticationPasswordPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPasswordPatch)(nil)).Elem()
}

func (i *kafkaUserSpecAuthenticationPasswordPatchPtrType) ToKafkaUserSpecAuthenticationPasswordPatchPtrOutput() KafkaUserSpecAuthenticationPasswordPatchPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordPatchPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthenticationPasswordPatchPtrType) ToKafkaUserSpecAuthenticationPasswordPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordPatchPtrOutput)
}

// Specify the password for the user. If not set, a new password is generated by the User Operator.
type KafkaUserSpecAuthenticationPasswordPatchOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordPatch)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordPatchOutput) ToKafkaUserSpecAuthenticationPasswordPatchOutput() KafkaUserSpecAuthenticationPasswordPatchOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordPatchOutput) ToKafkaUserSpecAuthenticationPasswordPatchOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordPatchOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordPatchOutput) ToKafkaUserSpecAuthenticationPasswordPatchPtrOutput() KafkaUserSpecAuthenticationPasswordPatchPtrOutput {
	return o.ToKafkaUserSpecAuthenticationPasswordPatchPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthenticationPasswordPatchOutput) ToKafkaUserSpecAuthenticationPasswordPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthenticationPasswordPatch) *KafkaUserSpecAuthenticationPasswordPatch {
		return &v
	}).(KafkaUserSpecAuthenticationPasswordPatchPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordPatchOutput) ValueFrom() KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPasswordPatch) *KafkaUserSpecAuthenticationPasswordValueFromPatch {
		return v.ValueFrom
	}).(KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput)
}

type KafkaUserSpecAuthenticationPasswordPatchPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPasswordPatch)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordPatchPtrOutput) ToKafkaUserSpecAuthenticationPasswordPatchPtrOutput() KafkaUserSpecAuthenticationPasswordPatchPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordPatchPtrOutput) ToKafkaUserSpecAuthenticationPasswordPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordPatchPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordPatchPtrOutput) Elem() KafkaUserSpecAuthenticationPasswordPatchOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordPatch) KafkaUserSpecAuthenticationPasswordPatch {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthenticationPasswordPatch
		return ret
	}).(KafkaUserSpecAuthenticationPasswordPatchOutput)
}

func (o KafkaUserSpecAuthenticationPasswordPatchPtrOutput) ValueFrom() KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordPatch) *KafkaUserSpecAuthenticationPasswordValueFromPatch {
		if v == nil {
			return nil
		}
		return v.ValueFrom
	}).(KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput)
}

// Secret from which the password should be read.
type KafkaUserSpecAuthenticationPasswordValueFrom struct {
	SecretKeyRef *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// KafkaUserSpecAuthenticationPasswordValueFromInput is an input type that accepts KafkaUserSpecAuthenticationPasswordValueFromArgs and KafkaUserSpecAuthenticationPasswordValueFromOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordValueFromInput` via:
//
//	KafkaUserSpecAuthenticationPasswordValueFromArgs{...}
type KafkaUserSpecAuthenticationPasswordValueFromInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordValueFromOutput() KafkaUserSpecAuthenticationPasswordValueFromOutput
	ToKafkaUserSpecAuthenticationPasswordValueFromOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordValueFromOutput
}

// Secret from which the password should be read.
type KafkaUserSpecAuthenticationPasswordValueFromArgs struct {
	SecretKeyRef KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (KafkaUserSpecAuthenticationPasswordValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFrom)(nil)).Elem()
}

func (i KafkaUserSpecAuthenticationPasswordValueFromArgs) ToKafkaUserSpecAuthenticationPasswordValueFromOutput() KafkaUserSpecAuthenticationPasswordValueFromOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordValueFromArgs) ToKafkaUserSpecAuthenticationPasswordValueFromOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromOutput)
}

func (i KafkaUserSpecAuthenticationPasswordValueFromArgs) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordValueFromArgs) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromOutput).ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthenticationPasswordValueFromPtrInput is an input type that accepts KafkaUserSpecAuthenticationPasswordValueFromArgs, KafkaUserSpecAuthenticationPasswordValueFromPtr and KafkaUserSpecAuthenticationPasswordValueFromPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordValueFromPtrInput` via:
//
//	        KafkaUserSpecAuthenticationPasswordValueFromArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthenticationPasswordValueFromPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromPtrOutput
	ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordValueFromPtrOutput
}

type kafkaUserSpecAuthenticationPasswordValueFromPtrType KafkaUserSpecAuthenticationPasswordValueFromArgs

func KafkaUserSpecAuthenticationPasswordValueFromPtr(v *KafkaUserSpecAuthenticationPasswordValueFromArgs) KafkaUserSpecAuthenticationPasswordValueFromPtrInput {
	return (*kafkaUserSpecAuthenticationPasswordValueFromPtrType)(v)
}

func (*kafkaUserSpecAuthenticationPasswordValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPasswordValueFrom)(nil)).Elem()
}

func (i *kafkaUserSpecAuthenticationPasswordValueFromPtrType) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthenticationPasswordValueFromPtrType) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromPtrOutput)
}

// Secret from which the password should be read.
type KafkaUserSpecAuthenticationPasswordValueFromOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFrom)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordValueFromOutput) ToKafkaUserSpecAuthenticationPasswordValueFromOutput() KafkaUserSpecAuthenticationPasswordValueFromOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromOutput) ToKafkaUserSpecAuthenticationPasswordValueFromOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromOutput) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return o.ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthenticationPasswordValueFromOutput) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthenticationPasswordValueFrom) *KafkaUserSpecAuthenticationPasswordValueFrom {
		return &v
	}).(KafkaUserSpecAuthenticationPasswordValueFromPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromOutput) SecretKeyRef() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPasswordValueFrom) *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput)
}

type KafkaUserSpecAuthenticationPasswordValueFromPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPasswordValueFrom)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPtrOutput) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPtrOutput) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPtrOutput) Elem() KafkaUserSpecAuthenticationPasswordValueFromOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFrom) KafkaUserSpecAuthenticationPasswordValueFrom {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthenticationPasswordValueFrom
		return ret
	}).(KafkaUserSpecAuthenticationPasswordValueFromOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPtrOutput) SecretKeyRef() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFrom) *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput)
}

// Secret from which the password should be read.
type KafkaUserSpecAuthenticationPasswordValueFromPatch struct {
	SecretKeyRef *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch `pulumi:"secretKeyRef"`
}

// KafkaUserSpecAuthenticationPasswordValueFromPatchInput is an input type that accepts KafkaUserSpecAuthenticationPasswordValueFromPatchArgs and KafkaUserSpecAuthenticationPasswordValueFromPatchOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordValueFromPatchInput` via:
//
//	KafkaUserSpecAuthenticationPasswordValueFromPatchArgs{...}
type KafkaUserSpecAuthenticationPasswordValueFromPatchInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordValueFromPatchOutput() KafkaUserSpecAuthenticationPasswordValueFromPatchOutput
	ToKafkaUserSpecAuthenticationPasswordValueFromPatchOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordValueFromPatchOutput
}

// Secret from which the password should be read.
type KafkaUserSpecAuthenticationPasswordValueFromPatchArgs struct {
	SecretKeyRef KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrInput `pulumi:"secretKeyRef"`
}

func (KafkaUserSpecAuthenticationPasswordValueFromPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromPatch)(nil)).Elem()
}

func (i KafkaUserSpecAuthenticationPasswordValueFromPatchArgs) ToKafkaUserSpecAuthenticationPasswordValueFromPatchOutput() KafkaUserSpecAuthenticationPasswordValueFromPatchOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromPatchOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordValueFromPatchArgs) ToKafkaUserSpecAuthenticationPasswordValueFromPatchOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromPatchOutput)
}

func (i KafkaUserSpecAuthenticationPasswordValueFromPatchArgs) ToKafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordValueFromPatchArgs) ToKafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromPatchOutput).ToKafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthenticationPasswordValueFromPatchPtrInput is an input type that accepts KafkaUserSpecAuthenticationPasswordValueFromPatchArgs, KafkaUserSpecAuthenticationPasswordValueFromPatchPtr and KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordValueFromPatchPtrInput` via:
//
//	        KafkaUserSpecAuthenticationPasswordValueFromPatchArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthenticationPasswordValueFromPatchPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput
	ToKafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput
}

type kafkaUserSpecAuthenticationPasswordValueFromPatchPtrType KafkaUserSpecAuthenticationPasswordValueFromPatchArgs

func KafkaUserSpecAuthenticationPasswordValueFromPatchPtr(v *KafkaUserSpecAuthenticationPasswordValueFromPatchArgs) KafkaUserSpecAuthenticationPasswordValueFromPatchPtrInput {
	return (*kafkaUserSpecAuthenticationPasswordValueFromPatchPtrType)(v)
}

func (*kafkaUserSpecAuthenticationPasswordValueFromPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPasswordValueFromPatch)(nil)).Elem()
}

func (i *kafkaUserSpecAuthenticationPasswordValueFromPatchPtrType) ToKafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthenticationPasswordValueFromPatchPtrType) ToKafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput)
}

// Secret from which the password should be read.
type KafkaUserSpecAuthenticationPasswordValueFromPatchOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordValueFromPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromPatch)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPatchOutput) ToKafkaUserSpecAuthenticationPasswordValueFromPatchOutput() KafkaUserSpecAuthenticationPasswordValueFromPatchOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPatchOutput) ToKafkaUserSpecAuthenticationPasswordValueFromPatchOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromPatchOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPatchOutput) ToKafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput {
	return o.ToKafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPatchOutput) ToKafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthenticationPasswordValueFromPatch) *KafkaUserSpecAuthenticationPasswordValueFromPatch {
		return &v
	}).(KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPatchOutput) SecretKeyRef() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPasswordValueFromPatch) *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch {
		return v.SecretKeyRef
	}).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput)
}

type KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPasswordValueFromPatch)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput) ToKafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput) ToKafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput) Elem() KafkaUserSpecAuthenticationPasswordValueFromPatchOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFromPatch) KafkaUserSpecAuthenticationPasswordValueFromPatch {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthenticationPasswordValueFromPatch
		return ret
	}).(KafkaUserSpecAuthenticationPasswordValueFromPatchOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput) SecretKeyRef() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFromPatch) *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput)
}

// Selects a key of a Secret in the resource's namespace.
type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef struct {
	Key      *string `pulumi:"key"`
	Name     *string `pulumi:"name"`
	Optional *bool   `pulumi:"optional"`
}

// KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefInput is an input type that accepts KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs and KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefInput` via:
//
//	KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs{...}
type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput
	ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput
}

// Selects a key of a Secret in the resource's namespace.
type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs struct {
	Key      pulumi.StringPtrInput `pulumi:"key"`
	Name     pulumi.StringPtrInput `pulumi:"name"`
	Optional pulumi.BoolPtrInput   `pulumi:"optional"`
}

func (KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef)(nil)).Elem()
}

func (i KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput)
}

func (i KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput).ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrInput is an input type that accepts KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs, KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtr and KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrInput` via:
//
//	        KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput
	ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput
}

type kafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrType KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs

func KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtr(v *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrInput {
	return (*kafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrType)(v)
}

func (*kafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef)(nil)).Elem()
}

func (i *kafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrType) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrType) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a Secret in the resource's namespace.
type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return o.ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef {
		return &v
	}).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput) Elem() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef
		return ret
	}).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a key of a Secret in the resource's namespace.
type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch struct {
	Key      *string `pulumi:"key"`
	Name     *string `pulumi:"name"`
	Optional *bool   `pulumi:"optional"`
}

// KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchInput is an input type that accepts KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchArgs and KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchInput` via:
//
//	KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchArgs{...}
type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput
	ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput
}

// Selects a key of a Secret in the resource's namespace.
type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchArgs struct {
	Key      pulumi.StringPtrInput `pulumi:"key"`
	Name     pulumi.StringPtrInput `pulumi:"name"`
	Optional pulumi.BoolPtrInput   `pulumi:"optional"`
}

func (KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch)(nil)).Elem()
}

func (i KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchArgs) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchArgs) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput)
}

func (i KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchArgs) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchArgs) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput).ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrInput is an input type that accepts KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchArgs, KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtr and KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrInput` via:
//
//	        KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput
	ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput
}

type kafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrType KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchArgs

func KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtr(v *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchArgs) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrInput {
	return (*kafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrType)(v)
}

func (*kafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch)(nil)).Elem()
}

func (i *kafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrType) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrType) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput)
}

// Selects a key of a Secret in the resource's namespace.
type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput {
	return o.ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch) *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch {
		return &v
	}).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput) Elem() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch
		return ret
	}).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Authentication mechanism enabled for this Kafka user. The supported authentication mechanisms are `scram-sha-512`, `tls`, and `tls-external`.
//
//   - `scram-sha-512` generates a secret with SASL SCRAM-SHA-512 credentials.
//   - `tls` generates a secret with user certificate for mutual TLS authentication.
//   - `tls-external` does not generate a user certificate.   But prepares the user for using mutual TLS authentication using a user certificate generated outside the User Operator.
//     ACLs and quotas set for this user are configured in the `CN=<username>` format.
//
// Authentication is optional. If authentication is not configured, no credentials are generated. ACLs and quotas set for the user are configured in the `<username>` format suitable for SASL authentication.
type KafkaUserSpecAuthenticationPatch struct {
	Password *KafkaUserSpecAuthenticationPasswordPatch `pulumi:"password"`
	// Authentication type.
	Type *string `pulumi:"type"`
}

// KafkaUserSpecAuthenticationPatchInput is an input type that accepts KafkaUserSpecAuthenticationPatchArgs and KafkaUserSpecAuthenticationPatchOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPatchInput` via:
//
//	KafkaUserSpecAuthenticationPatchArgs{...}
type KafkaUserSpecAuthenticationPatchInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPatchOutput() KafkaUserSpecAuthenticationPatchOutput
	ToKafkaUserSpecAuthenticationPatchOutputWithContext(context.Context) KafkaUserSpecAuthenticationPatchOutput
}

// Authentication mechanism enabled for this Kafka user. The supported authentication mechanisms are `scram-sha-512`, `tls`, and `tls-external`.
//
//   - `scram-sha-512` generates a secret with SASL SCRAM-SHA-512 credentials.
//   - `tls` generates a secret with user certificate for mutual TLS authentication.
//   - `tls-external` does not generate a user certificate.   But prepares the user for using mutual TLS authentication using a user certificate generated outside the User Operator.
//     ACLs and quotas set for this user are configured in the `CN=<username>` format.
//
// Authentication is optional. If authentication is not configured, no credentials are generated. ACLs and quotas set for the user are configured in the `<username>` format suitable for SASL authentication.
type KafkaUserSpecAuthenticationPatchArgs struct {
	Password KafkaUserSpecAuthenticationPasswordPatchPtrInput `pulumi:"password"`
	// Authentication type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaUserSpecAuthenticationPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPatch)(nil)).Elem()
}

func (i KafkaUserSpecAuthenticationPatchArgs) ToKafkaUserSpecAuthenticationPatchOutput() KafkaUserSpecAuthenticationPatchOutput {
	return i.ToKafkaUserSpecAuthenticationPatchOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPatchArgs) ToKafkaUserSpecAuthenticationPatchOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPatchOutput)
}

func (i KafkaUserSpecAuthenticationPatchArgs) ToKafkaUserSpecAuthenticationPatchPtrOutput() KafkaUserSpecAuthenticationPatchPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPatchPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPatchArgs) ToKafkaUserSpecAuthenticationPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPatchOutput).ToKafkaUserSpecAuthenticationPatchPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthenticationPatchPtrInput is an input type that accepts KafkaUserSpecAuthenticationPatchArgs, KafkaUserSpecAuthenticationPatchPtr and KafkaUserSpecAuthenticationPatchPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPatchPtrInput` via:
//
//	        KafkaUserSpecAuthenticationPatchArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthenticationPatchPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPatchPtrOutput() KafkaUserSpecAuthenticationPatchPtrOutput
	ToKafkaUserSpecAuthenticationPatchPtrOutputWithContext(context.Context) KafkaUserSpecAuthenticationPatchPtrOutput
}

type kafkaUserSpecAuthenticationPatchPtrType KafkaUserSpecAuthenticationPatchArgs

func KafkaUserSpecAuthenticationPatchPtr(v *KafkaUserSpecAuthenticationPatchArgs) KafkaUserSpecAuthenticationPatchPtrInput {
	return (*kafkaUserSpecAuthenticationPatchPtrType)(v)
}

func (*kafkaUserSpecAuthenticationPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPatch)(nil)).Elem()
}

func (i *kafkaUserSpecAuthenticationPatchPtrType) ToKafkaUserSpecAuthenticationPatchPtrOutput() KafkaUserSpecAuthenticationPatchPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPatchPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthenticationPatchPtrType) ToKafkaUserSpecAuthenticationPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPatchPtrOutput)
}

// Authentication mechanism enabled for this Kafka user. The supported authentication mechanisms are `scram-sha-512`, `tls`, and `tls-external`.
//
//   - `scram-sha-512` generates a secret with SASL SCRAM-SHA-512 credentials.
//   - `tls` generates a secret with user certificate for mutual TLS authentication.
//   - `tls-external` does not generate a user certificate.   But prepares the user for using mutual TLS authentication using a user certificate generated outside the User Operator.
//     ACLs and quotas set for this user are configured in the `CN=<username>` format.
//
// Authentication is optional. If authentication is not configured, no credentials are generated. ACLs and quotas set for the user are configured in the `<username>` format suitable for SASL authentication.
type KafkaUserSpecAuthenticationPatchOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPatch)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPatchOutput) ToKafkaUserSpecAuthenticationPatchOutput() KafkaUserSpecAuthenticationPatchOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPatchOutput) ToKafkaUserSpecAuthenticationPatchOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPatchOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPatchOutput) ToKafkaUserSpecAuthenticationPatchPtrOutput() KafkaUserSpecAuthenticationPatchPtrOutput {
	return o.ToKafkaUserSpecAuthenticationPatchPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthenticationPatchOutput) ToKafkaUserSpecAuthenticationPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthenticationPatch) *KafkaUserSpecAuthenticationPatch {
		return &v
	}).(KafkaUserSpecAuthenticationPatchPtrOutput)
}

func (o KafkaUserSpecAuthenticationPatchOutput) Password() KafkaUserSpecAuthenticationPasswordPatchPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPatch) *KafkaUserSpecAuthenticationPasswordPatch { return v.Password }).(KafkaUserSpecAuthenticationPasswordPatchPtrOutput)
}

// Authentication type.
func (o KafkaUserSpecAuthenticationPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaUserSpecAuthenticationPatchPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPatch)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPatchPtrOutput) ToKafkaUserSpecAuthenticationPatchPtrOutput() KafkaUserSpecAuthenticationPatchPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPatchPtrOutput) ToKafkaUserSpecAuthenticationPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPatchPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPatchPtrOutput) Elem() KafkaUserSpecAuthenticationPatchOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPatch) KafkaUserSpecAuthenticationPatch {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthenticationPatch
		return ret
	}).(KafkaUserSpecAuthenticationPatchOutput)
}

func (o KafkaUserSpecAuthenticationPatchPtrOutput) Password() KafkaUserSpecAuthenticationPasswordPatchPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPatch) *KafkaUserSpecAuthenticationPasswordPatch {
		if v == nil {
			return nil
		}
		return v.Password
	}).(KafkaUserSpecAuthenticationPasswordPatchPtrOutput)
}

// Authentication type.
func (o KafkaUserSpecAuthenticationPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Authorization rules for this Kafka user.
type KafkaUserSpecAuthorization struct {
	// List of ACL rules which should be applied to this user.
	Acls []KafkaUserSpecAuthorizationAcls `pulumi:"acls"`
	// Authorization type. Currently the only supported type is `simple`. `simple` authorization type uses the Kafka Admin API for managing the ACL rules.
	Type *string `pulumi:"type"`
}

// KafkaUserSpecAuthorizationInput is an input type that accepts KafkaUserSpecAuthorizationArgs and KafkaUserSpecAuthorizationOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationInput` via:
//
//	KafkaUserSpecAuthorizationArgs{...}
type KafkaUserSpecAuthorizationInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationOutput() KafkaUserSpecAuthorizationOutput
	ToKafkaUserSpecAuthorizationOutputWithContext(context.Context) KafkaUserSpecAuthorizationOutput
}

// Authorization rules for this Kafka user.
type KafkaUserSpecAuthorizationArgs struct {
	// List of ACL rules which should be applied to this user.
	Acls KafkaUserSpecAuthorizationAclsArrayInput `pulumi:"acls"`
	// Authorization type. Currently the only supported type is `simple`. `simple` authorization type uses the Kafka Admin API for managing the ACL rules.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaUserSpecAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorization)(nil)).Elem()
}

func (i KafkaUserSpecAuthorizationArgs) ToKafkaUserSpecAuthorizationOutput() KafkaUserSpecAuthorizationOutput {
	return i.ToKafkaUserSpecAuthorizationOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationArgs) ToKafkaUserSpecAuthorizationOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationOutput)
}

func (i KafkaUserSpecAuthorizationArgs) ToKafkaUserSpecAuthorizationPtrOutput() KafkaUserSpecAuthorizationPtrOutput {
	return i.ToKafkaUserSpecAuthorizationPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationArgs) ToKafkaUserSpecAuthorizationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationOutput).ToKafkaUserSpecAuthorizationPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthorizationPtrInput is an input type that accepts KafkaUserSpecAuthorizationArgs, KafkaUserSpecAuthorizationPtr and KafkaUserSpecAuthorizationPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationPtrInput` via:
//
//	        KafkaUserSpecAuthorizationArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthorizationPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationPtrOutput() KafkaUserSpecAuthorizationPtrOutput
	ToKafkaUserSpecAuthorizationPtrOutputWithContext(context.Context) KafkaUserSpecAuthorizationPtrOutput
}

type kafkaUserSpecAuthorizationPtrType KafkaUserSpecAuthorizationArgs

func KafkaUserSpecAuthorizationPtr(v *KafkaUserSpecAuthorizationArgs) KafkaUserSpecAuthorizationPtrInput {
	return (*kafkaUserSpecAuthorizationPtrType)(v)
}

func (*kafkaUserSpecAuthorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthorization)(nil)).Elem()
}

func (i *kafkaUserSpecAuthorizationPtrType) ToKafkaUserSpecAuthorizationPtrOutput() KafkaUserSpecAuthorizationPtrOutput {
	return i.ToKafkaUserSpecAuthorizationPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthorizationPtrType) ToKafkaUserSpecAuthorizationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationPtrOutput)
}

// Authorization rules for this Kafka user.
type KafkaUserSpecAuthorizationOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorization)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationOutput) ToKafkaUserSpecAuthorizationOutput() KafkaUserSpecAuthorizationOutput {
	return o
}

func (o KafkaUserSpecAuthorizationOutput) ToKafkaUserSpecAuthorizationOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationOutput {
	return o
}

func (o KafkaUserSpecAuthorizationOutput) ToKafkaUserSpecAuthorizationPtrOutput() KafkaUserSpecAuthorizationPtrOutput {
	return o.ToKafkaUserSpecAuthorizationPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthorizationOutput) ToKafkaUserSpecAuthorizationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthorization) *KafkaUserSpecAuthorization {
		return &v
	}).(KafkaUserSpecAuthorizationPtrOutput)
}

// List of ACL rules which should be applied to this user.
func (o KafkaUserSpecAuthorizationOutput) Acls() KafkaUserSpecAuthorizationAclsArrayOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorization) []KafkaUserSpecAuthorizationAcls { return v.Acls }).(KafkaUserSpecAuthorizationAclsArrayOutput)
}

// Authorization type. Currently the only supported type is `simple`. `simple` authorization type uses the Kafka Admin API for managing the ACL rules.
func (o KafkaUserSpecAuthorizationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorization) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaUserSpecAuthorizationPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthorization)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationPtrOutput) ToKafkaUserSpecAuthorizationPtrOutput() KafkaUserSpecAuthorizationPtrOutput {
	return o
}

func (o KafkaUserSpecAuthorizationPtrOutput) ToKafkaUserSpecAuthorizationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationPtrOutput {
	return o
}

func (o KafkaUserSpecAuthorizationPtrOutput) Elem() KafkaUserSpecAuthorizationOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorization) KafkaUserSpecAuthorization {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthorization
		return ret
	}).(KafkaUserSpecAuthorizationOutput)
}

// List of ACL rules which should be applied to this user.
func (o KafkaUserSpecAuthorizationPtrOutput) Acls() KafkaUserSpecAuthorizationAclsArrayOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorization) []KafkaUserSpecAuthorizationAcls {
		if v == nil {
			return nil
		}
		return v.Acls
	}).(KafkaUserSpecAuthorizationAclsArrayOutput)
}

// Authorization type. Currently the only supported type is `simple`. `simple` authorization type uses the Kafka Admin API for managing the ACL rules.
func (o KafkaUserSpecAuthorizationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorization) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type KafkaUserSpecAuthorizationAcls struct {
	// The host from which the action described in the ACL rule is allowed or denied. If not set, it defaults to `*`, allowing or denying the action from any host.
	Host *string `pulumi:"host"`
	// Operation which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operation *string `pulumi:"operation"`
	// List of operations which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operations []string                                `pulumi:"operations"`
	Resource   *KafkaUserSpecAuthorizationAclsResource `pulumi:"resource"`
	// The type of the rule. Currently the only supported type is `allow`. ACL rules with type `allow` are used to allow user to execute the specified operations. Default value is `allow`.
	Type *string `pulumi:"type"`
}

// KafkaUserSpecAuthorizationAclsInput is an input type that accepts KafkaUserSpecAuthorizationAclsArgs and KafkaUserSpecAuthorizationAclsOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationAclsInput` via:
//
//	KafkaUserSpecAuthorizationAclsArgs{...}
type KafkaUserSpecAuthorizationAclsInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationAclsOutput() KafkaUserSpecAuthorizationAclsOutput
	ToKafkaUserSpecAuthorizationAclsOutputWithContext(context.Context) KafkaUserSpecAuthorizationAclsOutput
}

type KafkaUserSpecAuthorizationAclsArgs struct {
	// The host from which the action described in the ACL rule is allowed or denied. If not set, it defaults to `*`, allowing or denying the action from any host.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Operation which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
	// List of operations which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operations pulumi.StringArrayInput                        `pulumi:"operations"`
	Resource   KafkaUserSpecAuthorizationAclsResourcePtrInput `pulumi:"resource"`
	// The type of the rule. Currently the only supported type is `allow`. ACL rules with type `allow` are used to allow user to execute the specified operations. Default value is `allow`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaUserSpecAuthorizationAclsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAcls)(nil)).Elem()
}

func (i KafkaUserSpecAuthorizationAclsArgs) ToKafkaUserSpecAuthorizationAclsOutput() KafkaUserSpecAuthorizationAclsOutput {
	return i.ToKafkaUserSpecAuthorizationAclsOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationAclsArgs) ToKafkaUserSpecAuthorizationAclsOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsOutput)
}

// KafkaUserSpecAuthorizationAclsArrayInput is an input type that accepts KafkaUserSpecAuthorizationAclsArray and KafkaUserSpecAuthorizationAclsArrayOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationAclsArrayInput` via:
//
//	KafkaUserSpecAuthorizationAclsArray{ KafkaUserSpecAuthorizationAclsArgs{...} }
type KafkaUserSpecAuthorizationAclsArrayInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationAclsArrayOutput() KafkaUserSpecAuthorizationAclsArrayOutput
	ToKafkaUserSpecAuthorizationAclsArrayOutputWithContext(context.Context) KafkaUserSpecAuthorizationAclsArrayOutput
}

type KafkaUserSpecAuthorizationAclsArray []KafkaUserSpecAuthorizationAclsInput

func (KafkaUserSpecAuthorizationAclsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserSpecAuthorizationAcls)(nil)).Elem()
}

func (i KafkaUserSpecAuthorizationAclsArray) ToKafkaUserSpecAuthorizationAclsArrayOutput() KafkaUserSpecAuthorizationAclsArrayOutput {
	return i.ToKafkaUserSpecAuthorizationAclsArrayOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationAclsArray) ToKafkaUserSpecAuthorizationAclsArrayOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsArrayOutput)
}

type KafkaUserSpecAuthorizationAclsOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationAclsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAcls)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationAclsOutput) ToKafkaUserSpecAuthorizationAclsOutput() KafkaUserSpecAuthorizationAclsOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsOutput) ToKafkaUserSpecAuthorizationAclsOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsOutput {
	return o
}

// The host from which the action described in the ACL rule is allowed or denied. If not set, it defaults to `*`, allowing or denying the action from any host.
func (o KafkaUserSpecAuthorizationAclsOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAcls) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Operation which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
func (o KafkaUserSpecAuthorizationAclsOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAcls) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

// List of operations which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
func (o KafkaUserSpecAuthorizationAclsOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAcls) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

func (o KafkaUserSpecAuthorizationAclsOutput) Resource() KafkaUserSpecAuthorizationAclsResourcePtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAcls) *KafkaUserSpecAuthorizationAclsResource { return v.Resource }).(KafkaUserSpecAuthorizationAclsResourcePtrOutput)
}

// The type of the rule. Currently the only supported type is `allow`. ACL rules with type `allow` are used to allow user to execute the specified operations. Default value is `allow`.
func (o KafkaUserSpecAuthorizationAclsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAcls) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaUserSpecAuthorizationAclsArrayOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationAclsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserSpecAuthorizationAcls)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationAclsArrayOutput) ToKafkaUserSpecAuthorizationAclsArrayOutput() KafkaUserSpecAuthorizationAclsArrayOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsArrayOutput) ToKafkaUserSpecAuthorizationAclsArrayOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsArrayOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsArrayOutput) Index(i pulumi.IntInput) KafkaUserSpecAuthorizationAclsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaUserSpecAuthorizationAcls {
		return vs[0].([]KafkaUserSpecAuthorizationAcls)[vs[1].(int)]
	}).(KafkaUserSpecAuthorizationAclsOutput)
}

type KafkaUserSpecAuthorizationAclsPatch struct {
	// The host from which the action described in the ACL rule is allowed or denied. If not set, it defaults to `*`, allowing or denying the action from any host.
	Host *string `pulumi:"host"`
	// Operation which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operation *string `pulumi:"operation"`
	// List of operations which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operations []string                                     `pulumi:"operations"`
	Resource   *KafkaUserSpecAuthorizationAclsResourcePatch `pulumi:"resource"`
	// The type of the rule. Currently the only supported type is `allow`. ACL rules with type `allow` are used to allow user to execute the specified operations. Default value is `allow`.
	Type *string `pulumi:"type"`
}

// KafkaUserSpecAuthorizationAclsPatchInput is an input type that accepts KafkaUserSpecAuthorizationAclsPatchArgs and KafkaUserSpecAuthorizationAclsPatchOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationAclsPatchInput` via:
//
//	KafkaUserSpecAuthorizationAclsPatchArgs{...}
type KafkaUserSpecAuthorizationAclsPatchInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationAclsPatchOutput() KafkaUserSpecAuthorizationAclsPatchOutput
	ToKafkaUserSpecAuthorizationAclsPatchOutputWithContext(context.Context) KafkaUserSpecAuthorizationAclsPatchOutput
}

type KafkaUserSpecAuthorizationAclsPatchArgs struct {
	// The host from which the action described in the ACL rule is allowed or denied. If not set, it defaults to `*`, allowing or denying the action from any host.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Operation which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
	// List of operations which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operations pulumi.StringArrayInput                             `pulumi:"operations"`
	Resource   KafkaUserSpecAuthorizationAclsResourcePatchPtrInput `pulumi:"resource"`
	// The type of the rule. Currently the only supported type is `allow`. ACL rules with type `allow` are used to allow user to execute the specified operations. Default value is `allow`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaUserSpecAuthorizationAclsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAclsPatch)(nil)).Elem()
}

func (i KafkaUserSpecAuthorizationAclsPatchArgs) ToKafkaUserSpecAuthorizationAclsPatchOutput() KafkaUserSpecAuthorizationAclsPatchOutput {
	return i.ToKafkaUserSpecAuthorizationAclsPatchOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationAclsPatchArgs) ToKafkaUserSpecAuthorizationAclsPatchOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsPatchOutput)
}

// KafkaUserSpecAuthorizationAclsPatchArrayInput is an input type that accepts KafkaUserSpecAuthorizationAclsPatchArray and KafkaUserSpecAuthorizationAclsPatchArrayOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationAclsPatchArrayInput` via:
//
//	KafkaUserSpecAuthorizationAclsPatchArray{ KafkaUserSpecAuthorizationAclsPatchArgs{...} }
type KafkaUserSpecAuthorizationAclsPatchArrayInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationAclsPatchArrayOutput() KafkaUserSpecAuthorizationAclsPatchArrayOutput
	ToKafkaUserSpecAuthorizationAclsPatchArrayOutputWithContext(context.Context) KafkaUserSpecAuthorizationAclsPatchArrayOutput
}

type KafkaUserSpecAuthorizationAclsPatchArray []KafkaUserSpecAuthorizationAclsPatchInput

func (KafkaUserSpecAuthorizationAclsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserSpecAuthorizationAclsPatch)(nil)).Elem()
}

func (i KafkaUserSpecAuthorizationAclsPatchArray) ToKafkaUserSpecAuthorizationAclsPatchArrayOutput() KafkaUserSpecAuthorizationAclsPatchArrayOutput {
	return i.ToKafkaUserSpecAuthorizationAclsPatchArrayOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationAclsPatchArray) ToKafkaUserSpecAuthorizationAclsPatchArrayOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsPatchArrayOutput)
}

type KafkaUserSpecAuthorizationAclsPatchOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationAclsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAclsPatch)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationAclsPatchOutput) ToKafkaUserSpecAuthorizationAclsPatchOutput() KafkaUserSpecAuthorizationAclsPatchOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsPatchOutput) ToKafkaUserSpecAuthorizationAclsPatchOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsPatchOutput {
	return o
}

// The host from which the action described in the ACL rule is allowed or denied. If not set, it defaults to `*`, allowing or denying the action from any host.
func (o KafkaUserSpecAuthorizationAclsPatchOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsPatch) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Operation which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
func (o KafkaUserSpecAuthorizationAclsPatchOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsPatch) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

// List of operations which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
func (o KafkaUserSpecAuthorizationAclsPatchOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsPatch) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

func (o KafkaUserSpecAuthorizationAclsPatchOutput) Resource() KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsPatch) *KafkaUserSpecAuthorizationAclsResourcePatch {
		return v.Resource
	}).(KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput)
}

// The type of the rule. Currently the only supported type is `allow`. ACL rules with type `allow` are used to allow user to execute the specified operations. Default value is `allow`.
func (o KafkaUserSpecAuthorizationAclsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaUserSpecAuthorizationAclsPatchArrayOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationAclsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserSpecAuthorizationAclsPatch)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationAclsPatchArrayOutput) ToKafkaUserSpecAuthorizationAclsPatchArrayOutput() KafkaUserSpecAuthorizationAclsPatchArrayOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsPatchArrayOutput) ToKafkaUserSpecAuthorizationAclsPatchArrayOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsPatchArrayOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsPatchArrayOutput) Index(i pulumi.IntInput) KafkaUserSpecAuthorizationAclsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaUserSpecAuthorizationAclsPatch {
		return vs[0].([]KafkaUserSpecAuthorizationAclsPatch)[vs[1].(int)]
	}).(KafkaUserSpecAuthorizationAclsPatchOutput)
}

// Indicates the resource for which given ACL rule applies.
type KafkaUserSpecAuthorizationAclsResource struct {
	// Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.
	Name *string `pulumi:"name"`
	// Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
	PatternType *string `pulumi:"patternType"`
	// Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
	Type *string `pulumi:"type"`
}

// KafkaUserSpecAuthorizationAclsResourceInput is an input type that accepts KafkaUserSpecAuthorizationAclsResourceArgs and KafkaUserSpecAuthorizationAclsResourceOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationAclsResourceInput` via:
//
//	KafkaUserSpecAuthorizationAclsResourceArgs{...}
type KafkaUserSpecAuthorizationAclsResourceInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationAclsResourceOutput() KafkaUserSpecAuthorizationAclsResourceOutput
	ToKafkaUserSpecAuthorizationAclsResourceOutputWithContext(context.Context) KafkaUserSpecAuthorizationAclsResourceOutput
}

// Indicates the resource for which given ACL rule applies.
type KafkaUserSpecAuthorizationAclsResourceArgs struct {
	// Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
	PatternType pulumi.StringPtrInput `pulumi:"patternType"`
	// Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaUserSpecAuthorizationAclsResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAclsResource)(nil)).Elem()
}

func (i KafkaUserSpecAuthorizationAclsResourceArgs) ToKafkaUserSpecAuthorizationAclsResourceOutput() KafkaUserSpecAuthorizationAclsResourceOutput {
	return i.ToKafkaUserSpecAuthorizationAclsResourceOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationAclsResourceArgs) ToKafkaUserSpecAuthorizationAclsResourceOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsResourceOutput)
}

func (i KafkaUserSpecAuthorizationAclsResourceArgs) ToKafkaUserSpecAuthorizationAclsResourcePtrOutput() KafkaUserSpecAuthorizationAclsResourcePtrOutput {
	return i.ToKafkaUserSpecAuthorizationAclsResourcePtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationAclsResourceArgs) ToKafkaUserSpecAuthorizationAclsResourcePtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsResourceOutput).ToKafkaUserSpecAuthorizationAclsResourcePtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthorizationAclsResourcePtrInput is an input type that accepts KafkaUserSpecAuthorizationAclsResourceArgs, KafkaUserSpecAuthorizationAclsResourcePtr and KafkaUserSpecAuthorizationAclsResourcePtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationAclsResourcePtrInput` via:
//
//	        KafkaUserSpecAuthorizationAclsResourceArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthorizationAclsResourcePtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationAclsResourcePtrOutput() KafkaUserSpecAuthorizationAclsResourcePtrOutput
	ToKafkaUserSpecAuthorizationAclsResourcePtrOutputWithContext(context.Context) KafkaUserSpecAuthorizationAclsResourcePtrOutput
}

type kafkaUserSpecAuthorizationAclsResourcePtrType KafkaUserSpecAuthorizationAclsResourceArgs

func KafkaUserSpecAuthorizationAclsResourcePtr(v *KafkaUserSpecAuthorizationAclsResourceArgs) KafkaUserSpecAuthorizationAclsResourcePtrInput {
	return (*kafkaUserSpecAuthorizationAclsResourcePtrType)(v)
}

func (*kafkaUserSpecAuthorizationAclsResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthorizationAclsResource)(nil)).Elem()
}

func (i *kafkaUserSpecAuthorizationAclsResourcePtrType) ToKafkaUserSpecAuthorizationAclsResourcePtrOutput() KafkaUserSpecAuthorizationAclsResourcePtrOutput {
	return i.ToKafkaUserSpecAuthorizationAclsResourcePtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthorizationAclsResourcePtrType) ToKafkaUserSpecAuthorizationAclsResourcePtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsResourcePtrOutput)
}

// Indicates the resource for which given ACL rule applies.
type KafkaUserSpecAuthorizationAclsResourceOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationAclsResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAclsResource)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationAclsResourceOutput) ToKafkaUserSpecAuthorizationAclsResourceOutput() KafkaUserSpecAuthorizationAclsResourceOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsResourceOutput) ToKafkaUserSpecAuthorizationAclsResourceOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourceOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsResourceOutput) ToKafkaUserSpecAuthorizationAclsResourcePtrOutput() KafkaUserSpecAuthorizationAclsResourcePtrOutput {
	return o.ToKafkaUserSpecAuthorizationAclsResourcePtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthorizationAclsResourceOutput) ToKafkaUserSpecAuthorizationAclsResourcePtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthorizationAclsResource) *KafkaUserSpecAuthorizationAclsResource {
		return &v
	}).(KafkaUserSpecAuthorizationAclsResourcePtrOutput)
}

// Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.
func (o KafkaUserSpecAuthorizationAclsResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsResource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
func (o KafkaUserSpecAuthorizationAclsResourceOutput) PatternType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsResource) *string { return v.PatternType }).(pulumi.StringPtrOutput)
}

// Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
func (o KafkaUserSpecAuthorizationAclsResourceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsResource) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaUserSpecAuthorizationAclsResourcePtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationAclsResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthorizationAclsResource)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationAclsResourcePtrOutput) ToKafkaUserSpecAuthorizationAclsResourcePtrOutput() KafkaUserSpecAuthorizationAclsResourcePtrOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsResourcePtrOutput) ToKafkaUserSpecAuthorizationAclsResourcePtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourcePtrOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsResourcePtrOutput) Elem() KafkaUserSpecAuthorizationAclsResourceOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorizationAclsResource) KafkaUserSpecAuthorizationAclsResource {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthorizationAclsResource
		return ret
	}).(KafkaUserSpecAuthorizationAclsResourceOutput)
}

// Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.
func (o KafkaUserSpecAuthorizationAclsResourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorizationAclsResource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
func (o KafkaUserSpecAuthorizationAclsResourcePtrOutput) PatternType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorizationAclsResource) *string {
		if v == nil {
			return nil
		}
		return v.PatternType
	}).(pulumi.StringPtrOutput)
}

// Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
func (o KafkaUserSpecAuthorizationAclsResourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorizationAclsResource) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Indicates the resource for which given ACL rule applies.
type KafkaUserSpecAuthorizationAclsResourcePatch struct {
	// Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.
	Name *string `pulumi:"name"`
	// Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
	PatternType *string `pulumi:"patternType"`
	// Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
	Type *string `pulumi:"type"`
}

// KafkaUserSpecAuthorizationAclsResourcePatchInput is an input type that accepts KafkaUserSpecAuthorizationAclsResourcePatchArgs and KafkaUserSpecAuthorizationAclsResourcePatchOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationAclsResourcePatchInput` via:
//
//	KafkaUserSpecAuthorizationAclsResourcePatchArgs{...}
type KafkaUserSpecAuthorizationAclsResourcePatchInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationAclsResourcePatchOutput() KafkaUserSpecAuthorizationAclsResourcePatchOutput
	ToKafkaUserSpecAuthorizationAclsResourcePatchOutputWithContext(context.Context) KafkaUserSpecAuthorizationAclsResourcePatchOutput
}

// Indicates the resource for which given ACL rule applies.
type KafkaUserSpecAuthorizationAclsResourcePatchArgs struct {
	// Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
	PatternType pulumi.StringPtrInput `pulumi:"patternType"`
	// Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaUserSpecAuthorizationAclsResourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAclsResourcePatch)(nil)).Elem()
}

func (i KafkaUserSpecAuthorizationAclsResourcePatchArgs) ToKafkaUserSpecAuthorizationAclsResourcePatchOutput() KafkaUserSpecAuthorizationAclsResourcePatchOutput {
	return i.ToKafkaUserSpecAuthorizationAclsResourcePatchOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationAclsResourcePatchArgs) ToKafkaUserSpecAuthorizationAclsResourcePatchOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsResourcePatchOutput)
}

func (i KafkaUserSpecAuthorizationAclsResourcePatchArgs) ToKafkaUserSpecAuthorizationAclsResourcePatchPtrOutput() KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput {
	return i.ToKafkaUserSpecAuthorizationAclsResourcePatchPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationAclsResourcePatchArgs) ToKafkaUserSpecAuthorizationAclsResourcePatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsResourcePatchOutput).ToKafkaUserSpecAuthorizationAclsResourcePatchPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthorizationAclsResourcePatchPtrInput is an input type that accepts KafkaUserSpecAuthorizationAclsResourcePatchArgs, KafkaUserSpecAuthorizationAclsResourcePatchPtr and KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationAclsResourcePatchPtrInput` via:
//
//	        KafkaUserSpecAuthorizationAclsResourcePatchArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthorizationAclsResourcePatchPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationAclsResourcePatchPtrOutput() KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput
	ToKafkaUserSpecAuthorizationAclsResourcePatchPtrOutputWithContext(context.Context) KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput
}

type kafkaUserSpecAuthorizationAclsResourcePatchPtrType KafkaUserSpecAuthorizationAclsResourcePatchArgs

func KafkaUserSpecAuthorizationAclsResourcePatchPtr(v *KafkaUserSpecAuthorizationAclsResourcePatchArgs) KafkaUserSpecAuthorizationAclsResourcePatchPtrInput {
	return (*kafkaUserSpecAuthorizationAclsResourcePatchPtrType)(v)
}

func (*kafkaUserSpecAuthorizationAclsResourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthorizationAclsResourcePatch)(nil)).Elem()
}

func (i *kafkaUserSpecAuthorizationAclsResourcePatchPtrType) ToKafkaUserSpecAuthorizationAclsResourcePatchPtrOutput() KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput {
	return i.ToKafkaUserSpecAuthorizationAclsResourcePatchPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthorizationAclsResourcePatchPtrType) ToKafkaUserSpecAuthorizationAclsResourcePatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput)
}

// Indicates the resource for which given ACL rule applies.
type KafkaUserSpecAuthorizationAclsResourcePatchOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationAclsResourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAclsResourcePatch)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationAclsResourcePatchOutput) ToKafkaUserSpecAuthorizationAclsResourcePatchOutput() KafkaUserSpecAuthorizationAclsResourcePatchOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsResourcePatchOutput) ToKafkaUserSpecAuthorizationAclsResourcePatchOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourcePatchOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsResourcePatchOutput) ToKafkaUserSpecAuthorizationAclsResourcePatchPtrOutput() KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput {
	return o.ToKafkaUserSpecAuthorizationAclsResourcePatchPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthorizationAclsResourcePatchOutput) ToKafkaUserSpecAuthorizationAclsResourcePatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthorizationAclsResourcePatch) *KafkaUserSpecAuthorizationAclsResourcePatch {
		return &v
	}).(KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput)
}

// Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.
func (o KafkaUserSpecAuthorizationAclsResourcePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsResourcePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
func (o KafkaUserSpecAuthorizationAclsResourcePatchOutput) PatternType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsResourcePatch) *string { return v.PatternType }).(pulumi.StringPtrOutput)
}

// Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
func (o KafkaUserSpecAuthorizationAclsResourcePatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsResourcePatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthorizationAclsResourcePatch)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput) ToKafkaUserSpecAuthorizationAclsResourcePatchPtrOutput() KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput) ToKafkaUserSpecAuthorizationAclsResourcePatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput) Elem() KafkaUserSpecAuthorizationAclsResourcePatchOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorizationAclsResourcePatch) KafkaUserSpecAuthorizationAclsResourcePatch {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthorizationAclsResourcePatch
		return ret
	}).(KafkaUserSpecAuthorizationAclsResourcePatchOutput)
}

// Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.
func (o KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorizationAclsResourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
func (o KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput) PatternType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorizationAclsResourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.PatternType
	}).(pulumi.StringPtrOutput)
}

// Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
func (o KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorizationAclsResourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Authorization rules for this Kafka user.
type KafkaUserSpecAuthorizationPatch struct {
	// List of ACL rules which should be applied to this user.
	Acls []KafkaUserSpecAuthorizationAclsPatch `pulumi:"acls"`
	// Authorization type. Currently the only supported type is `simple`. `simple` authorization type uses the Kafka Admin API for managing the ACL rules.
	Type *string `pulumi:"type"`
}

// KafkaUserSpecAuthorizationPatchInput is an input type that accepts KafkaUserSpecAuthorizationPatchArgs and KafkaUserSpecAuthorizationPatchOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationPatchInput` via:
//
//	KafkaUserSpecAuthorizationPatchArgs{...}
type KafkaUserSpecAuthorizationPatchInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationPatchOutput() KafkaUserSpecAuthorizationPatchOutput
	ToKafkaUserSpecAuthorizationPatchOutputWithContext(context.Context) KafkaUserSpecAuthorizationPatchOutput
}

// Authorization rules for this Kafka user.
type KafkaUserSpecAuthorizationPatchArgs struct {
	// List of ACL rules which should be applied to this user.
	Acls KafkaUserSpecAuthorizationAclsPatchArrayInput `pulumi:"acls"`
	// Authorization type. Currently the only supported type is `simple`. `simple` authorization type uses the Kafka Admin API for managing the ACL rules.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaUserSpecAuthorizationPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationPatch)(nil)).Elem()
}

func (i KafkaUserSpecAuthorizationPatchArgs) ToKafkaUserSpecAuthorizationPatchOutput() KafkaUserSpecAuthorizationPatchOutput {
	return i.ToKafkaUserSpecAuthorizationPatchOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationPatchArgs) ToKafkaUserSpecAuthorizationPatchOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationPatchOutput)
}

func (i KafkaUserSpecAuthorizationPatchArgs) ToKafkaUserSpecAuthorizationPatchPtrOutput() KafkaUserSpecAuthorizationPatchPtrOutput {
	return i.ToKafkaUserSpecAuthorizationPatchPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationPatchArgs) ToKafkaUserSpecAuthorizationPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationPatchOutput).ToKafkaUserSpecAuthorizationPatchPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthorizationPatchPtrInput is an input type that accepts KafkaUserSpecAuthorizationPatchArgs, KafkaUserSpecAuthorizationPatchPtr and KafkaUserSpecAuthorizationPatchPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationPatchPtrInput` via:
//
//	        KafkaUserSpecAuthorizationPatchArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthorizationPatchPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationPatchPtrOutput() KafkaUserSpecAuthorizationPatchPtrOutput
	ToKafkaUserSpecAuthorizationPatchPtrOutputWithContext(context.Context) KafkaUserSpecAuthorizationPatchPtrOutput
}

type kafkaUserSpecAuthorizationPatchPtrType KafkaUserSpecAuthorizationPatchArgs

func KafkaUserSpecAuthorizationPatchPtr(v *KafkaUserSpecAuthorizationPatchArgs) KafkaUserSpecAuthorizationPatchPtrInput {
	return (*kafkaUserSpecAuthorizationPatchPtrType)(v)
}

func (*kafkaUserSpecAuthorizationPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthorizationPatch)(nil)).Elem()
}

func (i *kafkaUserSpecAuthorizationPatchPtrType) ToKafkaUserSpecAuthorizationPatchPtrOutput() KafkaUserSpecAuthorizationPatchPtrOutput {
	return i.ToKafkaUserSpecAuthorizationPatchPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthorizationPatchPtrType) ToKafkaUserSpecAuthorizationPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationPatchPtrOutput)
}

// Authorization rules for this Kafka user.
type KafkaUserSpecAuthorizationPatchOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationPatch)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationPatchOutput) ToKafkaUserSpecAuthorizationPatchOutput() KafkaUserSpecAuthorizationPatchOutput {
	return o
}

func (o KafkaUserSpecAuthorizationPatchOutput) ToKafkaUserSpecAuthorizationPatchOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationPatchOutput {
	return o
}

func (o KafkaUserSpecAuthorizationPatchOutput) ToKafkaUserSpecAuthorizationPatchPtrOutput() KafkaUserSpecAuthorizationPatchPtrOutput {
	return o.ToKafkaUserSpecAuthorizationPatchPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthorizationPatchOutput) ToKafkaUserSpecAuthorizationPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthorizationPatch) *KafkaUserSpecAuthorizationPatch {
		return &v
	}).(KafkaUserSpecAuthorizationPatchPtrOutput)
}

// List of ACL rules which should be applied to this user.
func (o KafkaUserSpecAuthorizationPatchOutput) Acls() KafkaUserSpecAuthorizationAclsPatchArrayOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationPatch) []KafkaUserSpecAuthorizationAclsPatch { return v.Acls }).(KafkaUserSpecAuthorizationAclsPatchArrayOutput)
}

// Authorization type. Currently the only supported type is `simple`. `simple` authorization type uses the Kafka Admin API for managing the ACL rules.
func (o KafkaUserSpecAuthorizationPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaUserSpecAuthorizationPatchPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthorizationPatch)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationPatchPtrOutput) ToKafkaUserSpecAuthorizationPatchPtrOutput() KafkaUserSpecAuthorizationPatchPtrOutput {
	return o
}

func (o KafkaUserSpecAuthorizationPatchPtrOutput) ToKafkaUserSpecAuthorizationPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationPatchPtrOutput {
	return o
}

func (o KafkaUserSpecAuthorizationPatchPtrOutput) Elem() KafkaUserSpecAuthorizationPatchOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorizationPatch) KafkaUserSpecAuthorizationPatch {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthorizationPatch
		return ret
	}).(KafkaUserSpecAuthorizationPatchOutput)
}

// List of ACL rules which should be applied to this user.
func (o KafkaUserSpecAuthorizationPatchPtrOutput) Acls() KafkaUserSpecAuthorizationAclsPatchArrayOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorizationPatch) []KafkaUserSpecAuthorizationAclsPatch {
		if v == nil {
			return nil
		}
		return v.Acls
	}).(KafkaUserSpecAuthorizationAclsPatchArrayOutput)
}

// Authorization type. Currently the only supported type is `simple`. `simple` authorization type uses the Kafka Admin API for managing the ACL rules.
func (o KafkaUserSpecAuthorizationPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorizationPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The specification of the user.
type KafkaUserSpecPatch struct {
	Authentication *KafkaUserSpecAuthenticationPatch `pulumi:"authentication"`
	Authorization  *KafkaUserSpecAuthorizationPatch  `pulumi:"authorization"`
	Quotas         *KafkaUserSpecQuotasPatch         `pulumi:"quotas"`
	Template       *KafkaUserSpecTemplatePatch       `pulumi:"template"`
}

// KafkaUserSpecPatchInput is an input type that accepts KafkaUserSpecPatchArgs and KafkaUserSpecPatchOutput values.
// You can construct a concrete instance of `KafkaUserSpecPatchInput` via:
//
//	KafkaUserSpecPatchArgs{...}
type KafkaUserSpecPatchInput interface {
	pulumi.Input

	ToKafkaUserSpecPatchOutput() KafkaUserSpecPatchOutput
	ToKafkaUserSpecPatchOutputWithContext(context.Context) KafkaUserSpecPatchOutput
}

// The specification of the user.
type KafkaUserSpecPatchArgs struct {
	Authentication KafkaUserSpecAuthenticationPatchPtrInput `pulumi:"authentication"`
	Authorization  KafkaUserSpecAuthorizationPatchPtrInput  `pulumi:"authorization"`
	Quotas         KafkaUserSpecQuotasPatchPtrInput         `pulumi:"quotas"`
	Template       KafkaUserSpecTemplatePatchPtrInput       `pulumi:"template"`
}

func (KafkaUserSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecPatch)(nil)).Elem()
}

func (i KafkaUserSpecPatchArgs) ToKafkaUserSpecPatchOutput() KafkaUserSpecPatchOutput {
	return i.ToKafkaUserSpecPatchOutputWithContext(context.Background())
}

func (i KafkaUserSpecPatchArgs) ToKafkaUserSpecPatchOutputWithContext(ctx context.Context) KafkaUserSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecPatchOutput)
}

func (i KafkaUserSpecPatchArgs) ToKafkaUserSpecPatchPtrOutput() KafkaUserSpecPatchPtrOutput {
	return i.ToKafkaUserSpecPatchPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecPatchArgs) ToKafkaUserSpecPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecPatchOutput).ToKafkaUserSpecPatchPtrOutputWithContext(ctx)
}

// KafkaUserSpecPatchPtrInput is an input type that accepts KafkaUserSpecPatchArgs, KafkaUserSpecPatchPtr and KafkaUserSpecPatchPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecPatchPtrInput` via:
//
//	        KafkaUserSpecPatchArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecPatchPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecPatchPtrOutput() KafkaUserSpecPatchPtrOutput
	ToKafkaUserSpecPatchPtrOutputWithContext(context.Context) KafkaUserSpecPatchPtrOutput
}

type kafkaUserSpecPatchPtrType KafkaUserSpecPatchArgs

func KafkaUserSpecPatchPtr(v *KafkaUserSpecPatchArgs) KafkaUserSpecPatchPtrInput {
	return (*kafkaUserSpecPatchPtrType)(v)
}

func (*kafkaUserSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecPatch)(nil)).Elem()
}

func (i *kafkaUserSpecPatchPtrType) ToKafkaUserSpecPatchPtrOutput() KafkaUserSpecPatchPtrOutput {
	return i.ToKafkaUserSpecPatchPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecPatchPtrType) ToKafkaUserSpecPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecPatchPtrOutput)
}

// The specification of the user.
type KafkaUserSpecPatchOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecPatch)(nil)).Elem()
}

func (o KafkaUserSpecPatchOutput) ToKafkaUserSpecPatchOutput() KafkaUserSpecPatchOutput {
	return o
}

func (o KafkaUserSpecPatchOutput) ToKafkaUserSpecPatchOutputWithContext(ctx context.Context) KafkaUserSpecPatchOutput {
	return o
}

func (o KafkaUserSpecPatchOutput) ToKafkaUserSpecPatchPtrOutput() KafkaUserSpecPatchPtrOutput {
	return o.ToKafkaUserSpecPatchPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecPatchOutput) ToKafkaUserSpecPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecPatch) *KafkaUserSpecPatch {
		return &v
	}).(KafkaUserSpecPatchPtrOutput)
}

func (o KafkaUserSpecPatchOutput) Authentication() KafkaUserSpecAuthenticationPatchPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecPatch) *KafkaUserSpecAuthenticationPatch { return v.Authentication }).(KafkaUserSpecAuthenticationPatchPtrOutput)
}

func (o KafkaUserSpecPatchOutput) Authorization() KafkaUserSpecAuthorizationPatchPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecPatch) *KafkaUserSpecAuthorizationPatch { return v.Authorization }).(KafkaUserSpecAuthorizationPatchPtrOutput)
}

func (o KafkaUserSpecPatchOutput) Quotas() KafkaUserSpecQuotasPatchPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecPatch) *KafkaUserSpecQuotasPatch { return v.Quotas }).(KafkaUserSpecQuotasPatchPtrOutput)
}

func (o KafkaUserSpecPatchOutput) Template() KafkaUserSpecTemplatePatchPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecPatch) *KafkaUserSpecTemplatePatch { return v.Template }).(KafkaUserSpecTemplatePatchPtrOutput)
}

type KafkaUserSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecPatch)(nil)).Elem()
}

func (o KafkaUserSpecPatchPtrOutput) ToKafkaUserSpecPatchPtrOutput() KafkaUserSpecPatchPtrOutput {
	return o
}

func (o KafkaUserSpecPatchPtrOutput) ToKafkaUserSpecPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecPatchPtrOutput {
	return o
}

func (o KafkaUserSpecPatchPtrOutput) Elem() KafkaUserSpecPatchOutput {
	return o.ApplyT(func(v *KafkaUserSpecPatch) KafkaUserSpecPatch {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecPatch
		return ret
	}).(KafkaUserSpecPatchOutput)
}

func (o KafkaUserSpecPatchPtrOutput) Authentication() KafkaUserSpecAuthenticationPatchPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecPatch) *KafkaUserSpecAuthenticationPatch {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(KafkaUserSpecAuthenticationPatchPtrOutput)
}

func (o KafkaUserSpecPatchPtrOutput) Authorization() KafkaUserSpecAuthorizationPatchPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecPatch) *KafkaUserSpecAuthorizationPatch {
		if v == nil {
			return nil
		}
		return v.Authorization
	}).(KafkaUserSpecAuthorizationPatchPtrOutput)
}

func (o KafkaUserSpecPatchPtrOutput) Quotas() KafkaUserSpecQuotasPatchPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecPatch) *KafkaUserSpecQuotasPatch {
		if v == nil {
			return nil
		}
		return v.Quotas
	}).(KafkaUserSpecQuotasPatchPtrOutput)
}

func (o KafkaUserSpecPatchPtrOutput) Template() KafkaUserSpecTemplatePatchPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecPatch) *KafkaUserSpecTemplatePatch {
		if v == nil {
			return nil
		}
		return v.Template
	}).(KafkaUserSpecTemplatePatchPtrOutput)
}

// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
type KafkaUserSpecQuotas struct {
	// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ConsumerByteRate *int `pulumi:"consumerByteRate"`
	// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
	ControllerMutationRate *float64 `pulumi:"controllerMutationRate"`
	// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ProducerByteRate *int `pulumi:"producerByteRate"`
	// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
	RequestPercentage *int `pulumi:"requestPercentage"`
}

// KafkaUserSpecQuotasInput is an input type that accepts KafkaUserSpecQuotasArgs and KafkaUserSpecQuotasOutput values.
// You can construct a concrete instance of `KafkaUserSpecQuotasInput` via:
//
//	KafkaUserSpecQuotasArgs{...}
type KafkaUserSpecQuotasInput interface {
	pulumi.Input

	ToKafkaUserSpecQuotasOutput() KafkaUserSpecQuotasOutput
	ToKafkaUserSpecQuotasOutputWithContext(context.Context) KafkaUserSpecQuotasOutput
}

// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
type KafkaUserSpecQuotasArgs struct {
	// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ConsumerByteRate pulumi.IntPtrInput `pulumi:"consumerByteRate"`
	// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
	ControllerMutationRate pulumi.Float64PtrInput `pulumi:"controllerMutationRate"`
	// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ProducerByteRate pulumi.IntPtrInput `pulumi:"producerByteRate"`
	// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
	RequestPercentage pulumi.IntPtrInput `pulumi:"requestPercentage"`
}

func (KafkaUserSpecQuotasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecQuotas)(nil)).Elem()
}

func (i KafkaUserSpecQuotasArgs) ToKafkaUserSpecQuotasOutput() KafkaUserSpecQuotasOutput {
	return i.ToKafkaUserSpecQuotasOutputWithContext(context.Background())
}

func (i KafkaUserSpecQuotasArgs) ToKafkaUserSpecQuotasOutputWithContext(ctx context.Context) KafkaUserSpecQuotasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecQuotasOutput)
}

func (i KafkaUserSpecQuotasArgs) ToKafkaUserSpecQuotasPtrOutput() KafkaUserSpecQuotasPtrOutput {
	return i.ToKafkaUserSpecQuotasPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecQuotasArgs) ToKafkaUserSpecQuotasPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecQuotasOutput).ToKafkaUserSpecQuotasPtrOutputWithContext(ctx)
}

// KafkaUserSpecQuotasPtrInput is an input type that accepts KafkaUserSpecQuotasArgs, KafkaUserSpecQuotasPtr and KafkaUserSpecQuotasPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecQuotasPtrInput` via:
//
//	        KafkaUserSpecQuotasArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecQuotasPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecQuotasPtrOutput() KafkaUserSpecQuotasPtrOutput
	ToKafkaUserSpecQuotasPtrOutputWithContext(context.Context) KafkaUserSpecQuotasPtrOutput
}

type kafkaUserSpecQuotasPtrType KafkaUserSpecQuotasArgs

func KafkaUserSpecQuotasPtr(v *KafkaUserSpecQuotasArgs) KafkaUserSpecQuotasPtrInput {
	return (*kafkaUserSpecQuotasPtrType)(v)
}

func (*kafkaUserSpecQuotasPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecQuotas)(nil)).Elem()
}

func (i *kafkaUserSpecQuotasPtrType) ToKafkaUserSpecQuotasPtrOutput() KafkaUserSpecQuotasPtrOutput {
	return i.ToKafkaUserSpecQuotasPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecQuotasPtrType) ToKafkaUserSpecQuotasPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecQuotasPtrOutput)
}

// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
type KafkaUserSpecQuotasOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecQuotasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecQuotas)(nil)).Elem()
}

func (o KafkaUserSpecQuotasOutput) ToKafkaUserSpecQuotasOutput() KafkaUserSpecQuotasOutput {
	return o
}

func (o KafkaUserSpecQuotasOutput) ToKafkaUserSpecQuotasOutputWithContext(ctx context.Context) KafkaUserSpecQuotasOutput {
	return o
}

func (o KafkaUserSpecQuotasOutput) ToKafkaUserSpecQuotasPtrOutput() KafkaUserSpecQuotasPtrOutput {
	return o.ToKafkaUserSpecQuotasPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecQuotasOutput) ToKafkaUserSpecQuotasPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecQuotas) *KafkaUserSpecQuotas {
		return &v
	}).(KafkaUserSpecQuotasPtrOutput)
}

// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasOutput) ConsumerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotas) *int { return v.ConsumerByteRate }).(pulumi.IntPtrOutput)
}

// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
func (o KafkaUserSpecQuotasOutput) ControllerMutationRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotas) *float64 { return v.ControllerMutationRate }).(pulumi.Float64PtrOutput)
}

// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasOutput) ProducerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotas) *int { return v.ProducerByteRate }).(pulumi.IntPtrOutput)
}

// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
func (o KafkaUserSpecQuotasOutput) RequestPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotas) *int { return v.RequestPercentage }).(pulumi.IntPtrOutput)
}

type KafkaUserSpecQuotasPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecQuotasPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecQuotas)(nil)).Elem()
}

func (o KafkaUserSpecQuotasPtrOutput) ToKafkaUserSpecQuotasPtrOutput() KafkaUserSpecQuotasPtrOutput {
	return o
}

func (o KafkaUserSpecQuotasPtrOutput) ToKafkaUserSpecQuotasPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPtrOutput {
	return o
}

func (o KafkaUserSpecQuotasPtrOutput) Elem() KafkaUserSpecQuotasOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotas) KafkaUserSpecQuotas {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecQuotas
		return ret
	}).(KafkaUserSpecQuotasOutput)
}

// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasPtrOutput) ConsumerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotas) *int {
		if v == nil {
			return nil
		}
		return v.ConsumerByteRate
	}).(pulumi.IntPtrOutput)
}

// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
func (o KafkaUserSpecQuotasPtrOutput) ControllerMutationRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotas) *float64 {
		if v == nil {
			return nil
		}
		return v.ControllerMutationRate
	}).(pulumi.Float64PtrOutput)
}

// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasPtrOutput) ProducerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotas) *int {
		if v == nil {
			return nil
		}
		return v.ProducerByteRate
	}).(pulumi.IntPtrOutput)
}

// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
func (o KafkaUserSpecQuotasPtrOutput) RequestPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotas) *int {
		if v == nil {
			return nil
		}
		return v.RequestPercentage
	}).(pulumi.IntPtrOutput)
}

// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
type KafkaUserSpecQuotasPatch struct {
	// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ConsumerByteRate *int `pulumi:"consumerByteRate"`
	// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
	ControllerMutationRate *float64 `pulumi:"controllerMutationRate"`
	// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ProducerByteRate *int `pulumi:"producerByteRate"`
	// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
	RequestPercentage *int `pulumi:"requestPercentage"`
}

// KafkaUserSpecQuotasPatchInput is an input type that accepts KafkaUserSpecQuotasPatchArgs and KafkaUserSpecQuotasPatchOutput values.
// You can construct a concrete instance of `KafkaUserSpecQuotasPatchInput` via:
//
//	KafkaUserSpecQuotasPatchArgs{...}
type KafkaUserSpecQuotasPatchInput interface {
	pulumi.Input

	ToKafkaUserSpecQuotasPatchOutput() KafkaUserSpecQuotasPatchOutput
	ToKafkaUserSpecQuotasPatchOutputWithContext(context.Context) KafkaUserSpecQuotasPatchOutput
}

// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
type KafkaUserSpecQuotasPatchArgs struct {
	// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ConsumerByteRate pulumi.IntPtrInput `pulumi:"consumerByteRate"`
	// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
	ControllerMutationRate pulumi.Float64PtrInput `pulumi:"controllerMutationRate"`
	// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ProducerByteRate pulumi.IntPtrInput `pulumi:"producerByteRate"`
	// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
	RequestPercentage pulumi.IntPtrInput `pulumi:"requestPercentage"`
}

func (KafkaUserSpecQuotasPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecQuotasPatch)(nil)).Elem()
}

func (i KafkaUserSpecQuotasPatchArgs) ToKafkaUserSpecQuotasPatchOutput() KafkaUserSpecQuotasPatchOutput {
	return i.ToKafkaUserSpecQuotasPatchOutputWithContext(context.Background())
}

func (i KafkaUserSpecQuotasPatchArgs) ToKafkaUserSpecQuotasPatchOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecQuotasPatchOutput)
}

func (i KafkaUserSpecQuotasPatchArgs) ToKafkaUserSpecQuotasPatchPtrOutput() KafkaUserSpecQuotasPatchPtrOutput {
	return i.ToKafkaUserSpecQuotasPatchPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecQuotasPatchArgs) ToKafkaUserSpecQuotasPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecQuotasPatchOutput).ToKafkaUserSpecQuotasPatchPtrOutputWithContext(ctx)
}

// KafkaUserSpecQuotasPatchPtrInput is an input type that accepts KafkaUserSpecQuotasPatchArgs, KafkaUserSpecQuotasPatchPtr and KafkaUserSpecQuotasPatchPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecQuotasPatchPtrInput` via:
//
//	        KafkaUserSpecQuotasPatchArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecQuotasPatchPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecQuotasPatchPtrOutput() KafkaUserSpecQuotasPatchPtrOutput
	ToKafkaUserSpecQuotasPatchPtrOutputWithContext(context.Context) KafkaUserSpecQuotasPatchPtrOutput
}

type kafkaUserSpecQuotasPatchPtrType KafkaUserSpecQuotasPatchArgs

func KafkaUserSpecQuotasPatchPtr(v *KafkaUserSpecQuotasPatchArgs) KafkaUserSpecQuotasPatchPtrInput {
	return (*kafkaUserSpecQuotasPatchPtrType)(v)
}

func (*kafkaUserSpecQuotasPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecQuotasPatch)(nil)).Elem()
}

func (i *kafkaUserSpecQuotasPatchPtrType) ToKafkaUserSpecQuotasPatchPtrOutput() KafkaUserSpecQuotasPatchPtrOutput {
	return i.ToKafkaUserSpecQuotasPatchPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecQuotasPatchPtrType) ToKafkaUserSpecQuotasPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecQuotasPatchPtrOutput)
}

// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
type KafkaUserSpecQuotasPatchOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecQuotasPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecQuotasPatch)(nil)).Elem()
}

func (o KafkaUserSpecQuotasPatchOutput) ToKafkaUserSpecQuotasPatchOutput() KafkaUserSpecQuotasPatchOutput {
	return o
}

func (o KafkaUserSpecQuotasPatchOutput) ToKafkaUserSpecQuotasPatchOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPatchOutput {
	return o
}

func (o KafkaUserSpecQuotasPatchOutput) ToKafkaUserSpecQuotasPatchPtrOutput() KafkaUserSpecQuotasPatchPtrOutput {
	return o.ToKafkaUserSpecQuotasPatchPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecQuotasPatchOutput) ToKafkaUserSpecQuotasPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecQuotasPatch) *KafkaUserSpecQuotasPatch {
		return &v
	}).(KafkaUserSpecQuotasPatchPtrOutput)
}

// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasPatchOutput) ConsumerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotasPatch) *int { return v.ConsumerByteRate }).(pulumi.IntPtrOutput)
}

// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
func (o KafkaUserSpecQuotasPatchOutput) ControllerMutationRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotasPatch) *float64 { return v.ControllerMutationRate }).(pulumi.Float64PtrOutput)
}

// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasPatchOutput) ProducerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotasPatch) *int { return v.ProducerByteRate }).(pulumi.IntPtrOutput)
}

// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
func (o KafkaUserSpecQuotasPatchOutput) RequestPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotasPatch) *int { return v.RequestPercentage }).(pulumi.IntPtrOutput)
}

type KafkaUserSpecQuotasPatchPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecQuotasPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecQuotasPatch)(nil)).Elem()
}

func (o KafkaUserSpecQuotasPatchPtrOutput) ToKafkaUserSpecQuotasPatchPtrOutput() KafkaUserSpecQuotasPatchPtrOutput {
	return o
}

func (o KafkaUserSpecQuotasPatchPtrOutput) ToKafkaUserSpecQuotasPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPatchPtrOutput {
	return o
}

func (o KafkaUserSpecQuotasPatchPtrOutput) Elem() KafkaUserSpecQuotasPatchOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotasPatch) KafkaUserSpecQuotasPatch {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecQuotasPatch
		return ret
	}).(KafkaUserSpecQuotasPatchOutput)
}

// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasPatchPtrOutput) ConsumerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotasPatch) *int {
		if v == nil {
			return nil
		}
		return v.ConsumerByteRate
	}).(pulumi.IntPtrOutput)
}

// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
func (o KafkaUserSpecQuotasPatchPtrOutput) ControllerMutationRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotasPatch) *float64 {
		if v == nil {
			return nil
		}
		return v.ControllerMutationRate
	}).(pulumi.Float64PtrOutput)
}

// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasPatchPtrOutput) ProducerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotasPatch) *int {
		if v == nil {
			return nil
		}
		return v.ProducerByteRate
	}).(pulumi.IntPtrOutput)
}

// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
func (o KafkaUserSpecQuotasPatchPtrOutput) RequestPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotasPatch) *int {
		if v == nil {
			return nil
		}
		return v.RequestPercentage
	}).(pulumi.IntPtrOutput)
}

// Template to specify how Kafka User `Secrets` are generated.
type KafkaUserSpecTemplate struct {
	Secret *KafkaUserSpecTemplateSecret `pulumi:"secret"`
}

// KafkaUserSpecTemplateInput is an input type that accepts KafkaUserSpecTemplateArgs and KafkaUserSpecTemplateOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateInput` via:
//
//	KafkaUserSpecTemplateArgs{...}
type KafkaUserSpecTemplateInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateOutput() KafkaUserSpecTemplateOutput
	ToKafkaUserSpecTemplateOutputWithContext(context.Context) KafkaUserSpecTemplateOutput
}

// Template to specify how Kafka User `Secrets` are generated.
type KafkaUserSpecTemplateArgs struct {
	Secret KafkaUserSpecTemplateSecretPtrInput `pulumi:"secret"`
}

func (KafkaUserSpecTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplate)(nil)).Elem()
}

func (i KafkaUserSpecTemplateArgs) ToKafkaUserSpecTemplateOutput() KafkaUserSpecTemplateOutput {
	return i.ToKafkaUserSpecTemplateOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateArgs) ToKafkaUserSpecTemplateOutputWithContext(ctx context.Context) KafkaUserSpecTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateOutput)
}

func (i KafkaUserSpecTemplateArgs) ToKafkaUserSpecTemplatePtrOutput() KafkaUserSpecTemplatePtrOutput {
	return i.ToKafkaUserSpecTemplatePtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateArgs) ToKafkaUserSpecTemplatePtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateOutput).ToKafkaUserSpecTemplatePtrOutputWithContext(ctx)
}

// KafkaUserSpecTemplatePtrInput is an input type that accepts KafkaUserSpecTemplateArgs, KafkaUserSpecTemplatePtr and KafkaUserSpecTemplatePtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplatePtrInput` via:
//
//	        KafkaUserSpecTemplateArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecTemplatePtrInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplatePtrOutput() KafkaUserSpecTemplatePtrOutput
	ToKafkaUserSpecTemplatePtrOutputWithContext(context.Context) KafkaUserSpecTemplatePtrOutput
}

type kafkaUserSpecTemplatePtrType KafkaUserSpecTemplateArgs

func KafkaUserSpecTemplatePtr(v *KafkaUserSpecTemplateArgs) KafkaUserSpecTemplatePtrInput {
	return (*kafkaUserSpecTemplatePtrType)(v)
}

func (*kafkaUserSpecTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplate)(nil)).Elem()
}

func (i *kafkaUserSpecTemplatePtrType) ToKafkaUserSpecTemplatePtrOutput() KafkaUserSpecTemplatePtrOutput {
	return i.ToKafkaUserSpecTemplatePtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecTemplatePtrType) ToKafkaUserSpecTemplatePtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplatePtrOutput)
}

// Template to specify how Kafka User `Secrets` are generated.
type KafkaUserSpecTemplateOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplate)(nil)).Elem()
}

func (o KafkaUserSpecTemplateOutput) ToKafkaUserSpecTemplateOutput() KafkaUserSpecTemplateOutput {
	return o
}

func (o KafkaUserSpecTemplateOutput) ToKafkaUserSpecTemplateOutputWithContext(ctx context.Context) KafkaUserSpecTemplateOutput {
	return o
}

func (o KafkaUserSpecTemplateOutput) ToKafkaUserSpecTemplatePtrOutput() KafkaUserSpecTemplatePtrOutput {
	return o.ToKafkaUserSpecTemplatePtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecTemplateOutput) ToKafkaUserSpecTemplatePtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecTemplate) *KafkaUserSpecTemplate {
		return &v
	}).(KafkaUserSpecTemplatePtrOutput)
}

func (o KafkaUserSpecTemplateOutput) Secret() KafkaUserSpecTemplateSecretPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplate) *KafkaUserSpecTemplateSecret { return v.Secret }).(KafkaUserSpecTemplateSecretPtrOutput)
}

type KafkaUserSpecTemplatePtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplate)(nil)).Elem()
}

func (o KafkaUserSpecTemplatePtrOutput) ToKafkaUserSpecTemplatePtrOutput() KafkaUserSpecTemplatePtrOutput {
	return o
}

func (o KafkaUserSpecTemplatePtrOutput) ToKafkaUserSpecTemplatePtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePtrOutput {
	return o
}

func (o KafkaUserSpecTemplatePtrOutput) Elem() KafkaUserSpecTemplateOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplate) KafkaUserSpecTemplate {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecTemplate
		return ret
	}).(KafkaUserSpecTemplateOutput)
}

func (o KafkaUserSpecTemplatePtrOutput) Secret() KafkaUserSpecTemplateSecretPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplate) *KafkaUserSpecTemplateSecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(KafkaUserSpecTemplateSecretPtrOutput)
}

// Template to specify how Kafka User `Secrets` are generated.
type KafkaUserSpecTemplatePatch struct {
	Secret *KafkaUserSpecTemplateSecretPatch `pulumi:"secret"`
}

// KafkaUserSpecTemplatePatchInput is an input type that accepts KafkaUserSpecTemplatePatchArgs and KafkaUserSpecTemplatePatchOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplatePatchInput` via:
//
//	KafkaUserSpecTemplatePatchArgs{...}
type KafkaUserSpecTemplatePatchInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplatePatchOutput() KafkaUserSpecTemplatePatchOutput
	ToKafkaUserSpecTemplatePatchOutputWithContext(context.Context) KafkaUserSpecTemplatePatchOutput
}

// Template to specify how Kafka User `Secrets` are generated.
type KafkaUserSpecTemplatePatchArgs struct {
	Secret KafkaUserSpecTemplateSecretPatchPtrInput `pulumi:"secret"`
}

func (KafkaUserSpecTemplatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplatePatch)(nil)).Elem()
}

func (i KafkaUserSpecTemplatePatchArgs) ToKafkaUserSpecTemplatePatchOutput() KafkaUserSpecTemplatePatchOutput {
	return i.ToKafkaUserSpecTemplatePatchOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplatePatchArgs) ToKafkaUserSpecTemplatePatchOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplatePatchOutput)
}

func (i KafkaUserSpecTemplatePatchArgs) ToKafkaUserSpecTemplatePatchPtrOutput() KafkaUserSpecTemplatePatchPtrOutput {
	return i.ToKafkaUserSpecTemplatePatchPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplatePatchArgs) ToKafkaUserSpecTemplatePatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplatePatchOutput).ToKafkaUserSpecTemplatePatchPtrOutputWithContext(ctx)
}

// KafkaUserSpecTemplatePatchPtrInput is an input type that accepts KafkaUserSpecTemplatePatchArgs, KafkaUserSpecTemplatePatchPtr and KafkaUserSpecTemplatePatchPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplatePatchPtrInput` via:
//
//	        KafkaUserSpecTemplatePatchArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecTemplatePatchPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplatePatchPtrOutput() KafkaUserSpecTemplatePatchPtrOutput
	ToKafkaUserSpecTemplatePatchPtrOutputWithContext(context.Context) KafkaUserSpecTemplatePatchPtrOutput
}

type kafkaUserSpecTemplatePatchPtrType KafkaUserSpecTemplatePatchArgs

func KafkaUserSpecTemplatePatchPtr(v *KafkaUserSpecTemplatePatchArgs) KafkaUserSpecTemplatePatchPtrInput {
	return (*kafkaUserSpecTemplatePatchPtrType)(v)
}

func (*kafkaUserSpecTemplatePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplatePatch)(nil)).Elem()
}

func (i *kafkaUserSpecTemplatePatchPtrType) ToKafkaUserSpecTemplatePatchPtrOutput() KafkaUserSpecTemplatePatchPtrOutput {
	return i.ToKafkaUserSpecTemplatePatchPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecTemplatePatchPtrType) ToKafkaUserSpecTemplatePatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplatePatchPtrOutput)
}

// Template to specify how Kafka User `Secrets` are generated.
type KafkaUserSpecTemplatePatchOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplatePatch)(nil)).Elem()
}

func (o KafkaUserSpecTemplatePatchOutput) ToKafkaUserSpecTemplatePatchOutput() KafkaUserSpecTemplatePatchOutput {
	return o
}

func (o KafkaUserSpecTemplatePatchOutput) ToKafkaUserSpecTemplatePatchOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePatchOutput {
	return o
}

func (o KafkaUserSpecTemplatePatchOutput) ToKafkaUserSpecTemplatePatchPtrOutput() KafkaUserSpecTemplatePatchPtrOutput {
	return o.ToKafkaUserSpecTemplatePatchPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecTemplatePatchOutput) ToKafkaUserSpecTemplatePatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecTemplatePatch) *KafkaUserSpecTemplatePatch {
		return &v
	}).(KafkaUserSpecTemplatePatchPtrOutput)
}

func (o KafkaUserSpecTemplatePatchOutput) Secret() KafkaUserSpecTemplateSecretPatchPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplatePatch) *KafkaUserSpecTemplateSecretPatch { return v.Secret }).(KafkaUserSpecTemplateSecretPatchPtrOutput)
}

type KafkaUserSpecTemplatePatchPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplatePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplatePatch)(nil)).Elem()
}

func (o KafkaUserSpecTemplatePatchPtrOutput) ToKafkaUserSpecTemplatePatchPtrOutput() KafkaUserSpecTemplatePatchPtrOutput {
	return o
}

func (o KafkaUserSpecTemplatePatchPtrOutput) ToKafkaUserSpecTemplatePatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePatchPtrOutput {
	return o
}

func (o KafkaUserSpecTemplatePatchPtrOutput) Elem() KafkaUserSpecTemplatePatchOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplatePatch) KafkaUserSpecTemplatePatch {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecTemplatePatch
		return ret
	}).(KafkaUserSpecTemplatePatchOutput)
}

func (o KafkaUserSpecTemplatePatchPtrOutput) Secret() KafkaUserSpecTemplateSecretPatchPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplatePatch) *KafkaUserSpecTemplateSecretPatch {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(KafkaUserSpecTemplateSecretPatchPtrOutput)
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
type KafkaUserSpecTemplateSecret struct {
	Metadata *KafkaUserSpecTemplateSecretMetadata `pulumi:"metadata"`
}

// KafkaUserSpecTemplateSecretInput is an input type that accepts KafkaUserSpecTemplateSecretArgs and KafkaUserSpecTemplateSecretOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretInput` via:
//
//	KafkaUserSpecTemplateSecretArgs{...}
type KafkaUserSpecTemplateSecretInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretOutput() KafkaUserSpecTemplateSecretOutput
	ToKafkaUserSpecTemplateSecretOutputWithContext(context.Context) KafkaUserSpecTemplateSecretOutput
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
type KafkaUserSpecTemplateSecretArgs struct {
	Metadata KafkaUserSpecTemplateSecretMetadataPtrInput `pulumi:"metadata"`
}

func (KafkaUserSpecTemplateSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecret)(nil)).Elem()
}

func (i KafkaUserSpecTemplateSecretArgs) ToKafkaUserSpecTemplateSecretOutput() KafkaUserSpecTemplateSecretOutput {
	return i.ToKafkaUserSpecTemplateSecretOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretArgs) ToKafkaUserSpecTemplateSecretOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretOutput)
}

func (i KafkaUserSpecTemplateSecretArgs) ToKafkaUserSpecTemplateSecretPtrOutput() KafkaUserSpecTemplateSecretPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretArgs) ToKafkaUserSpecTemplateSecretPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretOutput).ToKafkaUserSpecTemplateSecretPtrOutputWithContext(ctx)
}

// KafkaUserSpecTemplateSecretPtrInput is an input type that accepts KafkaUserSpecTemplateSecretArgs, KafkaUserSpecTemplateSecretPtr and KafkaUserSpecTemplateSecretPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretPtrInput` via:
//
//	        KafkaUserSpecTemplateSecretArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecTemplateSecretPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretPtrOutput() KafkaUserSpecTemplateSecretPtrOutput
	ToKafkaUserSpecTemplateSecretPtrOutputWithContext(context.Context) KafkaUserSpecTemplateSecretPtrOutput
}

type kafkaUserSpecTemplateSecretPtrType KafkaUserSpecTemplateSecretArgs

func KafkaUserSpecTemplateSecretPtr(v *KafkaUserSpecTemplateSecretArgs) KafkaUserSpecTemplateSecretPtrInput {
	return (*kafkaUserSpecTemplateSecretPtrType)(v)
}

func (*kafkaUserSpecTemplateSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecret)(nil)).Elem()
}

func (i *kafkaUserSpecTemplateSecretPtrType) ToKafkaUserSpecTemplateSecretPtrOutput() KafkaUserSpecTemplateSecretPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecTemplateSecretPtrType) ToKafkaUserSpecTemplateSecretPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretPtrOutput)
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
type KafkaUserSpecTemplateSecretOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecret)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretOutput) ToKafkaUserSpecTemplateSecretOutput() KafkaUserSpecTemplateSecretOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretOutput) ToKafkaUserSpecTemplateSecretOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretOutput) ToKafkaUserSpecTemplateSecretPtrOutput() KafkaUserSpecTemplateSecretPtrOutput {
	return o.ToKafkaUserSpecTemplateSecretPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecTemplateSecretOutput) ToKafkaUserSpecTemplateSecretPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecTemplateSecret) *KafkaUserSpecTemplateSecret {
		return &v
	}).(KafkaUserSpecTemplateSecretPtrOutput)
}

func (o KafkaUserSpecTemplateSecretOutput) Metadata() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplateSecret) *KafkaUserSpecTemplateSecretMetadata { return v.Metadata }).(KafkaUserSpecTemplateSecretMetadataPtrOutput)
}

type KafkaUserSpecTemplateSecretPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecret)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretPtrOutput) ToKafkaUserSpecTemplateSecretPtrOutput() KafkaUserSpecTemplateSecretPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretPtrOutput) ToKafkaUserSpecTemplateSecretPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretPtrOutput) Elem() KafkaUserSpecTemplateSecretOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecret) KafkaUserSpecTemplateSecret {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecTemplateSecret
		return ret
	}).(KafkaUserSpecTemplateSecretOutput)
}

func (o KafkaUserSpecTemplateSecretPtrOutput) Metadata() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecret) *KafkaUserSpecTemplateSecretMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(KafkaUserSpecTemplateSecretMetadataPtrOutput)
}

// Metadata applied to the resource.
type KafkaUserSpecTemplateSecretMetadata struct {
	// Annotations added to the Kubernetes resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Labels added to the Kubernetes resource.
	Labels map[string]string `pulumi:"labels"`
}

// KafkaUserSpecTemplateSecretMetadataInput is an input type that accepts KafkaUserSpecTemplateSecretMetadataArgs and KafkaUserSpecTemplateSecretMetadataOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretMetadataInput` via:
//
//	KafkaUserSpecTemplateSecretMetadataArgs{...}
type KafkaUserSpecTemplateSecretMetadataInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretMetadataOutput() KafkaUserSpecTemplateSecretMetadataOutput
	ToKafkaUserSpecTemplateSecretMetadataOutputWithContext(context.Context) KafkaUserSpecTemplateSecretMetadataOutput
}

// Metadata applied to the resource.
type KafkaUserSpecTemplateSecretMetadataArgs struct {
	// Annotations added to the Kubernetes resource.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Labels added to the Kubernetes resource.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (KafkaUserSpecTemplateSecretMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadata)(nil)).Elem()
}

func (i KafkaUserSpecTemplateSecretMetadataArgs) ToKafkaUserSpecTemplateSecretMetadataOutput() KafkaUserSpecTemplateSecretMetadataOutput {
	return i.ToKafkaUserSpecTemplateSecretMetadataOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretMetadataArgs) ToKafkaUserSpecTemplateSecretMetadataOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretMetadataOutput)
}

func (i KafkaUserSpecTemplateSecretMetadataArgs) ToKafkaUserSpecTemplateSecretMetadataPtrOutput() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretMetadataArgs) ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretMetadataOutput).ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(ctx)
}

// KafkaUserSpecTemplateSecretMetadataPtrInput is an input type that accepts KafkaUserSpecTemplateSecretMetadataArgs, KafkaUserSpecTemplateSecretMetadataPtr and KafkaUserSpecTemplateSecretMetadataPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretMetadataPtrInput` via:
//
//	        KafkaUserSpecTemplateSecretMetadataArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecTemplateSecretMetadataPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretMetadataPtrOutput() KafkaUserSpecTemplateSecretMetadataPtrOutput
	ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(context.Context) KafkaUserSpecTemplateSecretMetadataPtrOutput
}

type kafkaUserSpecTemplateSecretMetadataPtrType KafkaUserSpecTemplateSecretMetadataArgs

func KafkaUserSpecTemplateSecretMetadataPtr(v *KafkaUserSpecTemplateSecretMetadataArgs) KafkaUserSpecTemplateSecretMetadataPtrInput {
	return (*kafkaUserSpecTemplateSecretMetadataPtrType)(v)
}

func (*kafkaUserSpecTemplateSecretMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecretMetadata)(nil)).Elem()
}

func (i *kafkaUserSpecTemplateSecretMetadataPtrType) ToKafkaUserSpecTemplateSecretMetadataPtrOutput() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecTemplateSecretMetadataPtrType) ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretMetadataPtrOutput)
}

// Metadata applied to the resource.
type KafkaUserSpecTemplateSecretMetadataOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadata)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretMetadataOutput) ToKafkaUserSpecTemplateSecretMetadataOutput() KafkaUserSpecTemplateSecretMetadataOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataOutput) ToKafkaUserSpecTemplateSecretMetadataOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataOutput) ToKafkaUserSpecTemplateSecretMetadataPtrOutput() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o.ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecTemplateSecretMetadataOutput) ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecTemplateSecretMetadata) *KafkaUserSpecTemplateSecretMetadata {
		return &v
	}).(KafkaUserSpecTemplateSecretMetadataPtrOutput)
}

// Annotations added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplateSecretMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Labels added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplateSecretMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type KafkaUserSpecTemplateSecretMetadataPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecretMetadata)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretMetadataPtrOutput) ToKafkaUserSpecTemplateSecretMetadataPtrOutput() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataPtrOutput) ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataPtrOutput) Elem() KafkaUserSpecTemplateSecretMetadataOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecretMetadata) KafkaUserSpecTemplateSecretMetadata {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecTemplateSecretMetadata
		return ret
	}).(KafkaUserSpecTemplateSecretMetadataOutput)
}

// Annotations added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecretMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Labels added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecretMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Metadata applied to the resource.
type KafkaUserSpecTemplateSecretMetadataPatch struct {
	// Annotations added to the Kubernetes resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Labels added to the Kubernetes resource.
	Labels map[string]string `pulumi:"labels"`
}

// KafkaUserSpecTemplateSecretMetadataPatchInput is an input type that accepts KafkaUserSpecTemplateSecretMetadataPatchArgs and KafkaUserSpecTemplateSecretMetadataPatchOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretMetadataPatchInput` via:
//
//	KafkaUserSpecTemplateSecretMetadataPatchArgs{...}
type KafkaUserSpecTemplateSecretMetadataPatchInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretMetadataPatchOutput() KafkaUserSpecTemplateSecretMetadataPatchOutput
	ToKafkaUserSpecTemplateSecretMetadataPatchOutputWithContext(context.Context) KafkaUserSpecTemplateSecretMetadataPatchOutput
}

// Metadata applied to the resource.
type KafkaUserSpecTemplateSecretMetadataPatchArgs struct {
	// Annotations added to the Kubernetes resource.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Labels added to the Kubernetes resource.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (KafkaUserSpecTemplateSecretMetadataPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadataPatch)(nil)).Elem()
}

func (i KafkaUserSpecTemplateSecretMetadataPatchArgs) ToKafkaUserSpecTemplateSecretMetadataPatchOutput() KafkaUserSpecTemplateSecretMetadataPatchOutput {
	return i.ToKafkaUserSpecTemplateSecretMetadataPatchOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretMetadataPatchArgs) ToKafkaUserSpecTemplateSecretMetadataPatchOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretMetadataPatchOutput)
}

func (i KafkaUserSpecTemplateSecretMetadataPatchArgs) ToKafkaUserSpecTemplateSecretMetadataPatchPtrOutput() KafkaUserSpecTemplateSecretMetadataPatchPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretMetadataPatchPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretMetadataPatchArgs) ToKafkaUserSpecTemplateSecretMetadataPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretMetadataPatchOutput).ToKafkaUserSpecTemplateSecretMetadataPatchPtrOutputWithContext(ctx)
}

// KafkaUserSpecTemplateSecretMetadataPatchPtrInput is an input type that accepts KafkaUserSpecTemplateSecretMetadataPatchArgs, KafkaUserSpecTemplateSecretMetadataPatchPtr and KafkaUserSpecTemplateSecretMetadataPatchPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretMetadataPatchPtrInput` via:
//
//	        KafkaUserSpecTemplateSecretMetadataPatchArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecTemplateSecretMetadataPatchPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretMetadataPatchPtrOutput() KafkaUserSpecTemplateSecretMetadataPatchPtrOutput
	ToKafkaUserSpecTemplateSecretMetadataPatchPtrOutputWithContext(context.Context) KafkaUserSpecTemplateSecretMetadataPatchPtrOutput
}

type kafkaUserSpecTemplateSecretMetadataPatchPtrType KafkaUserSpecTemplateSecretMetadataPatchArgs

func KafkaUserSpecTemplateSecretMetadataPatchPtr(v *KafkaUserSpecTemplateSecretMetadataPatchArgs) KafkaUserSpecTemplateSecretMetadataPatchPtrInput {
	return (*kafkaUserSpecTemplateSecretMetadataPatchPtrType)(v)
}

func (*kafkaUserSpecTemplateSecretMetadataPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecretMetadataPatch)(nil)).Elem()
}

func (i *kafkaUserSpecTemplateSecretMetadataPatchPtrType) ToKafkaUserSpecTemplateSecretMetadataPatchPtrOutput() KafkaUserSpecTemplateSecretMetadataPatchPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretMetadataPatchPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecTemplateSecretMetadataPatchPtrType) ToKafkaUserSpecTemplateSecretMetadataPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretMetadataPatchPtrOutput)
}

// Metadata applied to the resource.
type KafkaUserSpecTemplateSecretMetadataPatchOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretMetadataPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadataPatch)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretMetadataPatchOutput) ToKafkaUserSpecTemplateSecretMetadataPatchOutput() KafkaUserSpecTemplateSecretMetadataPatchOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataPatchOutput) ToKafkaUserSpecTemplateSecretMetadataPatchOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPatchOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataPatchOutput) ToKafkaUserSpecTemplateSecretMetadataPatchPtrOutput() KafkaUserSpecTemplateSecretMetadataPatchPtrOutput {
	return o.ToKafkaUserSpecTemplateSecretMetadataPatchPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecTemplateSecretMetadataPatchOutput) ToKafkaUserSpecTemplateSecretMetadataPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecTemplateSecretMetadataPatch) *KafkaUserSpecTemplateSecretMetadataPatch {
		return &v
	}).(KafkaUserSpecTemplateSecretMetadataPatchPtrOutput)
}

// Annotations added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataPatchOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplateSecretMetadataPatch) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Labels added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataPatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplateSecretMetadataPatch) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type KafkaUserSpecTemplateSecretMetadataPatchPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretMetadataPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecretMetadataPatch)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretMetadataPatchPtrOutput) ToKafkaUserSpecTemplateSecretMetadataPatchPtrOutput() KafkaUserSpecTemplateSecretMetadataPatchPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataPatchPtrOutput) ToKafkaUserSpecTemplateSecretMetadataPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPatchPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataPatchPtrOutput) Elem() KafkaUserSpecTemplateSecretMetadataPatchOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecretMetadataPatch) KafkaUserSpecTemplateSecretMetadataPatch {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecTemplateSecretMetadataPatch
		return ret
	}).(KafkaUserSpecTemplateSecretMetadataPatchOutput)
}

// Annotations added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataPatchPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecretMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Labels added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataPatchPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecretMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
type KafkaUserSpecTemplateSecretPatch struct {
	Metadata *KafkaUserSpecTemplateSecretMetadataPatch `pulumi:"metadata"`
}

// KafkaUserSpecTemplateSecretPatchInput is an input type that accepts KafkaUserSpecTemplateSecretPatchArgs and KafkaUserSpecTemplateSecretPatchOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretPatchInput` via:
//
//	KafkaUserSpecTemplateSecretPatchArgs{...}
type KafkaUserSpecTemplateSecretPatchInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretPatchOutput() KafkaUserSpecTemplateSecretPatchOutput
	ToKafkaUserSpecTemplateSecretPatchOutputWithContext(context.Context) KafkaUserSpecTemplateSecretPatchOutput
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
type KafkaUserSpecTemplateSecretPatchArgs struct {
	Metadata KafkaUserSpecTemplateSecretMetadataPatchPtrInput `pulumi:"metadata"`
}

func (KafkaUserSpecTemplateSecretPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecretPatch)(nil)).Elem()
}

func (i KafkaUserSpecTemplateSecretPatchArgs) ToKafkaUserSpecTemplateSecretPatchOutput() KafkaUserSpecTemplateSecretPatchOutput {
	return i.ToKafkaUserSpecTemplateSecretPatchOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretPatchArgs) ToKafkaUserSpecTemplateSecretPatchOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretPatchOutput)
}

func (i KafkaUserSpecTemplateSecretPatchArgs) ToKafkaUserSpecTemplateSecretPatchPtrOutput() KafkaUserSpecTemplateSecretPatchPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretPatchPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretPatchArgs) ToKafkaUserSpecTemplateSecretPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretPatchOutput).ToKafkaUserSpecTemplateSecretPatchPtrOutputWithContext(ctx)
}

// KafkaUserSpecTemplateSecretPatchPtrInput is an input type that accepts KafkaUserSpecTemplateSecretPatchArgs, KafkaUserSpecTemplateSecretPatchPtr and KafkaUserSpecTemplateSecretPatchPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretPatchPtrInput` via:
//
//	        KafkaUserSpecTemplateSecretPatchArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecTemplateSecretPatchPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretPatchPtrOutput() KafkaUserSpecTemplateSecretPatchPtrOutput
	ToKafkaUserSpecTemplateSecretPatchPtrOutputWithContext(context.Context) KafkaUserSpecTemplateSecretPatchPtrOutput
}

type kafkaUserSpecTemplateSecretPatchPtrType KafkaUserSpecTemplateSecretPatchArgs

func KafkaUserSpecTemplateSecretPatchPtr(v *KafkaUserSpecTemplateSecretPatchArgs) KafkaUserSpecTemplateSecretPatchPtrInput {
	return (*kafkaUserSpecTemplateSecretPatchPtrType)(v)
}

func (*kafkaUserSpecTemplateSecretPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecretPatch)(nil)).Elem()
}

func (i *kafkaUserSpecTemplateSecretPatchPtrType) ToKafkaUserSpecTemplateSecretPatchPtrOutput() KafkaUserSpecTemplateSecretPatchPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretPatchPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecTemplateSecretPatchPtrType) ToKafkaUserSpecTemplateSecretPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretPatchPtrOutput)
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
type KafkaUserSpecTemplateSecretPatchOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecretPatch)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretPatchOutput) ToKafkaUserSpecTemplateSecretPatchOutput() KafkaUserSpecTemplateSecretPatchOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretPatchOutput) ToKafkaUserSpecTemplateSecretPatchOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPatchOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretPatchOutput) ToKafkaUserSpecTemplateSecretPatchPtrOutput() KafkaUserSpecTemplateSecretPatchPtrOutput {
	return o.ToKafkaUserSpecTemplateSecretPatchPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecTemplateSecretPatchOutput) ToKafkaUserSpecTemplateSecretPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecTemplateSecretPatch) *KafkaUserSpecTemplateSecretPatch {
		return &v
	}).(KafkaUserSpecTemplateSecretPatchPtrOutput)
}

func (o KafkaUserSpecTemplateSecretPatchOutput) Metadata() KafkaUserSpecTemplateSecretMetadataPatchPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplateSecretPatch) *KafkaUserSpecTemplateSecretMetadataPatch { return v.Metadata }).(KafkaUserSpecTemplateSecretMetadataPatchPtrOutput)
}

type KafkaUserSpecTemplateSecretPatchPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecretPatch)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretPatchPtrOutput) ToKafkaUserSpecTemplateSecretPatchPtrOutput() KafkaUserSpecTemplateSecretPatchPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretPatchPtrOutput) ToKafkaUserSpecTemplateSecretPatchPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPatchPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretPatchPtrOutput) Elem() KafkaUserSpecTemplateSecretPatchOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecretPatch) KafkaUserSpecTemplateSecretPatch {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecTemplateSecretPatch
		return ret
	}).(KafkaUserSpecTemplateSecretPatchOutput)
}

func (o KafkaUserSpecTemplateSecretPatchPtrOutput) Metadata() KafkaUserSpecTemplateSecretMetadataPatchPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecretPatch) *KafkaUserSpecTemplateSecretMetadataPatch {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(KafkaUserSpecTemplateSecretMetadataPatchPtrOutput)
}

// The status of the Kafka User.
type KafkaUserStatus struct {
	// List of status conditions.
	Conditions []KafkaUserStatusConditions `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// The name of `Secret` where the credentials are stored.
	Secret *string `pulumi:"secret"`
	// Username.
	Username *string `pulumi:"username"`
}

// KafkaUserStatusInput is an input type that accepts KafkaUserStatusArgs and KafkaUserStatusOutput values.
// You can construct a concrete instance of `KafkaUserStatusInput` via:
//
//	KafkaUserStatusArgs{...}
type KafkaUserStatusInput interface {
	pulumi.Input

	ToKafkaUserStatusOutput() KafkaUserStatusOutput
	ToKafkaUserStatusOutputWithContext(context.Context) KafkaUserStatusOutput
}

// The status of the Kafka User.
type KafkaUserStatusArgs struct {
	// List of status conditions.
	Conditions KafkaUserStatusConditionsArrayInput `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// The name of `Secret` where the credentials are stored.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Username.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (KafkaUserStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatus)(nil)).Elem()
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusOutput() KafkaUserStatusOutput {
	return i.ToKafkaUserStatusOutputWithContext(context.Background())
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusOutputWithContext(ctx context.Context) KafkaUserStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusOutput)
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return i.ToKafkaUserStatusPtrOutputWithContext(context.Background())
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusOutput).ToKafkaUserStatusPtrOutputWithContext(ctx)
}

// KafkaUserStatusPtrInput is an input type that accepts KafkaUserStatusArgs, KafkaUserStatusPtr and KafkaUserStatusPtrOutput values.
// You can construct a concrete instance of `KafkaUserStatusPtrInput` via:
//
//	        KafkaUserStatusArgs{...}
//
//	or:
//
//	        nil
type KafkaUserStatusPtrInput interface {
	pulumi.Input

	ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput
	ToKafkaUserStatusPtrOutputWithContext(context.Context) KafkaUserStatusPtrOutput
}

type kafkaUserStatusPtrType KafkaUserStatusArgs

func KafkaUserStatusPtr(v *KafkaUserStatusArgs) KafkaUserStatusPtrInput {
	return (*kafkaUserStatusPtrType)(v)
}

func (*kafkaUserStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserStatus)(nil)).Elem()
}

func (i *kafkaUserStatusPtrType) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return i.ToKafkaUserStatusPtrOutputWithContext(context.Background())
}

func (i *kafkaUserStatusPtrType) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusPtrOutput)
}

// The status of the Kafka User.
type KafkaUserStatusOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatus)(nil)).Elem()
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusOutput() KafkaUserStatusOutput {
	return o
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusOutputWithContext(ctx context.Context) KafkaUserStatusOutput {
	return o
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return o.ToKafkaUserStatusPtrOutputWithContext(context.Background())
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserStatus) *KafkaUserStatus {
		return &v
	}).(KafkaUserStatusPtrOutput)
}

// List of status conditions.
func (o KafkaUserStatusOutput) Conditions() KafkaUserStatusConditionsArrayOutput {
	return o.ApplyT(func(v KafkaUserStatus) []KafkaUserStatusConditions { return v.Conditions }).(KafkaUserStatusConditionsArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaUserStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// The name of `Secret` where the credentials are stored.
func (o KafkaUserStatusOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatus) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Username.
func (o KafkaUserStatusOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatus) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type KafkaUserStatusPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserStatus)(nil)).Elem()
}

func (o KafkaUserStatusPtrOutput) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return o
}

func (o KafkaUserStatusPtrOutput) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return o
}

func (o KafkaUserStatusPtrOutput) Elem() KafkaUserStatusOutput {
	return o.ApplyT(func(v *KafkaUserStatus) KafkaUserStatus {
		if v != nil {
			return *v
		}
		var ret KafkaUserStatus
		return ret
	}).(KafkaUserStatusOutput)
}

// List of status conditions.
func (o KafkaUserStatusPtrOutput) Conditions() KafkaUserStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KafkaUserStatus) []KafkaUserStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KafkaUserStatusConditionsArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaUserStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// The name of `Secret` where the credentials are stored.
func (o KafkaUserStatusPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserStatus) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// Username.
func (o KafkaUserStatusPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserStatus) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type KafkaUserStatusConditions struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason *string `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status *string `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type *string `pulumi:"type"`
}

// KafkaUserStatusConditionsInput is an input type that accepts KafkaUserStatusConditionsArgs and KafkaUserStatusConditionsOutput values.
// You can construct a concrete instance of `KafkaUserStatusConditionsInput` via:
//
//	KafkaUserStatusConditionsArgs{...}
type KafkaUserStatusConditionsInput interface {
	pulumi.Input

	ToKafkaUserStatusConditionsOutput() KafkaUserStatusConditionsOutput
	ToKafkaUserStatusConditionsOutputWithContext(context.Context) KafkaUserStatusConditionsOutput
}

type KafkaUserStatusConditionsArgs struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaUserStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatusConditions)(nil)).Elem()
}

func (i KafkaUserStatusConditionsArgs) ToKafkaUserStatusConditionsOutput() KafkaUserStatusConditionsOutput {
	return i.ToKafkaUserStatusConditionsOutputWithContext(context.Background())
}

func (i KafkaUserStatusConditionsArgs) ToKafkaUserStatusConditionsOutputWithContext(ctx context.Context) KafkaUserStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusConditionsOutput)
}

// KafkaUserStatusConditionsArrayInput is an input type that accepts KafkaUserStatusConditionsArray and KafkaUserStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KafkaUserStatusConditionsArrayInput` via:
//
//	KafkaUserStatusConditionsArray{ KafkaUserStatusConditionsArgs{...} }
type KafkaUserStatusConditionsArrayInput interface {
	pulumi.Input

	ToKafkaUserStatusConditionsArrayOutput() KafkaUserStatusConditionsArrayOutput
	ToKafkaUserStatusConditionsArrayOutputWithContext(context.Context) KafkaUserStatusConditionsArrayOutput
}

type KafkaUserStatusConditionsArray []KafkaUserStatusConditionsInput

func (KafkaUserStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserStatusConditions)(nil)).Elem()
}

func (i KafkaUserStatusConditionsArray) ToKafkaUserStatusConditionsArrayOutput() KafkaUserStatusConditionsArrayOutput {
	return i.ToKafkaUserStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KafkaUserStatusConditionsArray) ToKafkaUserStatusConditionsArrayOutputWithContext(ctx context.Context) KafkaUserStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusConditionsArrayOutput)
}

type KafkaUserStatusConditionsOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatusConditions)(nil)).Elem()
}

func (o KafkaUserStatusConditionsOutput) ToKafkaUserStatusConditionsOutput() KafkaUserStatusConditionsOutput {
	return o
}

func (o KafkaUserStatusConditionsOutput) ToKafkaUserStatusConditionsOutputWithContext(ctx context.Context) KafkaUserStatusConditionsOutput {
	return o
}

// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
func (o KafkaUserStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human-readable message indicating details about the condition's last transition.
func (o KafkaUserStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition (a single word in CamelCase).
func (o KafkaUserStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// The status of the condition, either True, False or Unknown.
func (o KafkaUserStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The unique identifier of a condition, used to distinguish between other conditions in the resource.
func (o KafkaUserStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaUserStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserStatusConditions)(nil)).Elem()
}

func (o KafkaUserStatusConditionsArrayOutput) ToKafkaUserStatusConditionsArrayOutput() KafkaUserStatusConditionsArrayOutput {
	return o
}

func (o KafkaUserStatusConditionsArrayOutput) ToKafkaUserStatusConditionsArrayOutputWithContext(ctx context.Context) KafkaUserStatusConditionsArrayOutput {
	return o
}

func (o KafkaUserStatusConditionsArrayOutput) Index(i pulumi.IntInput) KafkaUserStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaUserStatusConditions {
		return vs[0].([]KafkaUserStatusConditions)[vs[1].(int)]
	}).(KafkaUserStatusConditionsOutput)
}

type KafkaUserStatusConditionsPatch struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason *string `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status *string `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type *string `pulumi:"type"`
}

// KafkaUserStatusConditionsPatchInput is an input type that accepts KafkaUserStatusConditionsPatchArgs and KafkaUserStatusConditionsPatchOutput values.
// You can construct a concrete instance of `KafkaUserStatusConditionsPatchInput` via:
//
//	KafkaUserStatusConditionsPatchArgs{...}
type KafkaUserStatusConditionsPatchInput interface {
	pulumi.Input

	ToKafkaUserStatusConditionsPatchOutput() KafkaUserStatusConditionsPatchOutput
	ToKafkaUserStatusConditionsPatchOutputWithContext(context.Context) KafkaUserStatusConditionsPatchOutput
}

type KafkaUserStatusConditionsPatchArgs struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaUserStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatusConditionsPatch)(nil)).Elem()
}

func (i KafkaUserStatusConditionsPatchArgs) ToKafkaUserStatusConditionsPatchOutput() KafkaUserStatusConditionsPatchOutput {
	return i.ToKafkaUserStatusConditionsPatchOutputWithContext(context.Background())
}

func (i KafkaUserStatusConditionsPatchArgs) ToKafkaUserStatusConditionsPatchOutputWithContext(ctx context.Context) KafkaUserStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusConditionsPatchOutput)
}

// KafkaUserStatusConditionsPatchArrayInput is an input type that accepts KafkaUserStatusConditionsPatchArray and KafkaUserStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `KafkaUserStatusConditionsPatchArrayInput` via:
//
//	KafkaUserStatusConditionsPatchArray{ KafkaUserStatusConditionsPatchArgs{...} }
type KafkaUserStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToKafkaUserStatusConditionsPatchArrayOutput() KafkaUserStatusConditionsPatchArrayOutput
	ToKafkaUserStatusConditionsPatchArrayOutputWithContext(context.Context) KafkaUserStatusConditionsPatchArrayOutput
}

type KafkaUserStatusConditionsPatchArray []KafkaUserStatusConditionsPatchInput

func (KafkaUserStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserStatusConditionsPatch)(nil)).Elem()
}

func (i KafkaUserStatusConditionsPatchArray) ToKafkaUserStatusConditionsPatchArrayOutput() KafkaUserStatusConditionsPatchArrayOutput {
	return i.ToKafkaUserStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i KafkaUserStatusConditionsPatchArray) ToKafkaUserStatusConditionsPatchArrayOutputWithContext(ctx context.Context) KafkaUserStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusConditionsPatchArrayOutput)
}

type KafkaUserStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatusConditionsPatch)(nil)).Elem()
}

func (o KafkaUserStatusConditionsPatchOutput) ToKafkaUserStatusConditionsPatchOutput() KafkaUserStatusConditionsPatchOutput {
	return o
}

func (o KafkaUserStatusConditionsPatchOutput) ToKafkaUserStatusConditionsPatchOutputWithContext(ctx context.Context) KafkaUserStatusConditionsPatchOutput {
	return o
}

// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
func (o KafkaUserStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human-readable message indicating details about the condition's last transition.
func (o KafkaUserStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition (a single word in CamelCase).
func (o KafkaUserStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// The status of the condition, either True, False or Unknown.
func (o KafkaUserStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The unique identifier of a condition, used to distinguish between other conditions in the resource.
func (o KafkaUserStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaUserStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserStatusConditionsPatch)(nil)).Elem()
}

func (o KafkaUserStatusConditionsPatchArrayOutput) ToKafkaUserStatusConditionsPatchArrayOutput() KafkaUserStatusConditionsPatchArrayOutput {
	return o
}

func (o KafkaUserStatusConditionsPatchArrayOutput) ToKafkaUserStatusConditionsPatchArrayOutputWithContext(ctx context.Context) KafkaUserStatusConditionsPatchArrayOutput {
	return o
}

func (o KafkaUserStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) KafkaUserStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaUserStatusConditionsPatch {
		return vs[0].([]KafkaUserStatusConditionsPatch)[vs[1].(int)]
	}).(KafkaUserStatusConditionsPatchOutput)
}

// The status of the Kafka User.
type KafkaUserStatusPatch struct {
	// List of status conditions.
	Conditions []KafkaUserStatusConditionsPatch `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// The name of `Secret` where the credentials are stored.
	Secret *string `pulumi:"secret"`
	// Username.
	Username *string `pulumi:"username"`
}

// KafkaUserStatusPatchInput is an input type that accepts KafkaUserStatusPatchArgs and KafkaUserStatusPatchOutput values.
// You can construct a concrete instance of `KafkaUserStatusPatchInput` via:
//
//	KafkaUserStatusPatchArgs{...}
type KafkaUserStatusPatchInput interface {
	pulumi.Input

	ToKafkaUserStatusPatchOutput() KafkaUserStatusPatchOutput
	ToKafkaUserStatusPatchOutputWithContext(context.Context) KafkaUserStatusPatchOutput
}

// The status of the Kafka User.
type KafkaUserStatusPatchArgs struct {
	// List of status conditions.
	Conditions KafkaUserStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// The name of `Secret` where the credentials are stored.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Username.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (KafkaUserStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatusPatch)(nil)).Elem()
}

func (i KafkaUserStatusPatchArgs) ToKafkaUserStatusPatchOutput() KafkaUserStatusPatchOutput {
	return i.ToKafkaUserStatusPatchOutputWithContext(context.Background())
}

func (i KafkaUserStatusPatchArgs) ToKafkaUserStatusPatchOutputWithContext(ctx context.Context) KafkaUserStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusPatchOutput)
}

func (i KafkaUserStatusPatchArgs) ToKafkaUserStatusPatchPtrOutput() KafkaUserStatusPatchPtrOutput {
	return i.ToKafkaUserStatusPatchPtrOutputWithContext(context.Background())
}

func (i KafkaUserStatusPatchArgs) ToKafkaUserStatusPatchPtrOutputWithContext(ctx context.Context) KafkaUserStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusPatchOutput).ToKafkaUserStatusPatchPtrOutputWithContext(ctx)
}

// KafkaUserStatusPatchPtrInput is an input type that accepts KafkaUserStatusPatchArgs, KafkaUserStatusPatchPtr and KafkaUserStatusPatchPtrOutput values.
// You can construct a concrete instance of `KafkaUserStatusPatchPtrInput` via:
//
//	        KafkaUserStatusPatchArgs{...}
//
//	or:
//
//	        nil
type KafkaUserStatusPatchPtrInput interface {
	pulumi.Input

	ToKafkaUserStatusPatchPtrOutput() KafkaUserStatusPatchPtrOutput
	ToKafkaUserStatusPatchPtrOutputWithContext(context.Context) KafkaUserStatusPatchPtrOutput
}

type kafkaUserStatusPatchPtrType KafkaUserStatusPatchArgs

func KafkaUserStatusPatchPtr(v *KafkaUserStatusPatchArgs) KafkaUserStatusPatchPtrInput {
	return (*kafkaUserStatusPatchPtrType)(v)
}

func (*kafkaUserStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserStatusPatch)(nil)).Elem()
}

func (i *kafkaUserStatusPatchPtrType) ToKafkaUserStatusPatchPtrOutput() KafkaUserStatusPatchPtrOutput {
	return i.ToKafkaUserStatusPatchPtrOutputWithContext(context.Background())
}

func (i *kafkaUserStatusPatchPtrType) ToKafkaUserStatusPatchPtrOutputWithContext(ctx context.Context) KafkaUserStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusPatchPtrOutput)
}

// The status of the Kafka User.
type KafkaUserStatusPatchOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatusPatch)(nil)).Elem()
}

func (o KafkaUserStatusPatchOutput) ToKafkaUserStatusPatchOutput() KafkaUserStatusPatchOutput {
	return o
}

func (o KafkaUserStatusPatchOutput) ToKafkaUserStatusPatchOutputWithContext(ctx context.Context) KafkaUserStatusPatchOutput {
	return o
}

func (o KafkaUserStatusPatchOutput) ToKafkaUserStatusPatchPtrOutput() KafkaUserStatusPatchPtrOutput {
	return o.ToKafkaUserStatusPatchPtrOutputWithContext(context.Background())
}

func (o KafkaUserStatusPatchOutput) ToKafkaUserStatusPatchPtrOutputWithContext(ctx context.Context) KafkaUserStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserStatusPatch) *KafkaUserStatusPatch {
		return &v
	}).(KafkaUserStatusPatchPtrOutput)
}

// List of status conditions.
func (o KafkaUserStatusPatchOutput) Conditions() KafkaUserStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v KafkaUserStatusPatch) []KafkaUserStatusConditionsPatch { return v.Conditions }).(KafkaUserStatusConditionsPatchArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaUserStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// The name of `Secret` where the credentials are stored.
func (o KafkaUserStatusPatchOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusPatch) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Username.
func (o KafkaUserStatusPatchOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusPatch) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type KafkaUserStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserStatusPatch)(nil)).Elem()
}

func (o KafkaUserStatusPatchPtrOutput) ToKafkaUserStatusPatchPtrOutput() KafkaUserStatusPatchPtrOutput {
	return o
}

func (o KafkaUserStatusPatchPtrOutput) ToKafkaUserStatusPatchPtrOutputWithContext(ctx context.Context) KafkaUserStatusPatchPtrOutput {
	return o
}

func (o KafkaUserStatusPatchPtrOutput) Elem() KafkaUserStatusPatchOutput {
	return o.ApplyT(func(v *KafkaUserStatusPatch) KafkaUserStatusPatch {
		if v != nil {
			return *v
		}
		var ret KafkaUserStatusPatch
		return ret
	}).(KafkaUserStatusPatchOutput)
}

// List of status conditions.
func (o KafkaUserStatusPatchPtrOutput) Conditions() KafkaUserStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *KafkaUserStatusPatch) []KafkaUserStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KafkaUserStatusConditionsPatchArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaUserStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// The name of `Secret` where the credentials are stored.
func (o KafkaUserStatusPatchPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// Username.
func (o KafkaUserStatusPatchPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicTypeInput)(nil)).Elem(), KafkaTopicTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicTypeArrayInput)(nil)).Elem(), KafkaTopicTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicListTypeInput)(nil)).Elem(), KafkaTopicListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicPatchTypeInput)(nil)).Elem(), KafkaTopicPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicSpecInput)(nil)).Elem(), KafkaTopicSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicSpecPtrInput)(nil)).Elem(), KafkaTopicSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicSpecPatchInput)(nil)).Elem(), KafkaTopicSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicSpecPatchPtrInput)(nil)).Elem(), KafkaTopicSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusInput)(nil)).Elem(), KafkaTopicStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusPtrInput)(nil)).Elem(), KafkaTopicStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusConditionsInput)(nil)).Elem(), KafkaTopicStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusConditionsArrayInput)(nil)).Elem(), KafkaTopicStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusConditionsPatchInput)(nil)).Elem(), KafkaTopicStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusConditionsPatchArrayInput)(nil)).Elem(), KafkaTopicStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusPatchInput)(nil)).Elem(), KafkaTopicStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusPatchPtrInput)(nil)).Elem(), KafkaTopicStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusReplicasChangeInput)(nil)).Elem(), KafkaTopicStatusReplicasChangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusReplicasChangePtrInput)(nil)).Elem(), KafkaTopicStatusReplicasChangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusReplicasChangePatchInput)(nil)).Elem(), KafkaTopicStatusReplicasChangePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusReplicasChangePatchPtrInput)(nil)).Elem(), KafkaTopicStatusReplicasChangePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserTypeInput)(nil)).Elem(), KafkaUserTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserTypeArrayInput)(nil)).Elem(), KafkaUserTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserListTypeInput)(nil)).Elem(), KafkaUserListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserPatchTypeInput)(nil)).Elem(), KafkaUserPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecInput)(nil)).Elem(), KafkaUserSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecPtrInput)(nil)).Elem(), KafkaUserSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationInput)(nil)).Elem(), KafkaUserSpecAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPtrInput)(nil)).Elem(), KafkaUserSpecAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordPtrInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordPatchInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordPatchPtrInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromPtrInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromPatchInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordValueFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromPatchPtrInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordValueFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPatchInput)(nil)).Elem(), KafkaUserSpecAuthenticationPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPatchPtrInput)(nil)).Elem(), KafkaUserSpecAuthenticationPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationInput)(nil)).Elem(), KafkaUserSpecAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationPtrInput)(nil)).Elem(), KafkaUserSpecAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationAclsInput)(nil)).Elem(), KafkaUserSpecAuthorizationAclsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationAclsArrayInput)(nil)).Elem(), KafkaUserSpecAuthorizationAclsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationAclsPatchInput)(nil)).Elem(), KafkaUserSpecAuthorizationAclsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationAclsPatchArrayInput)(nil)).Elem(), KafkaUserSpecAuthorizationAclsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationAclsResourceInput)(nil)).Elem(), KafkaUserSpecAuthorizationAclsResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationAclsResourcePtrInput)(nil)).Elem(), KafkaUserSpecAuthorizationAclsResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationAclsResourcePatchInput)(nil)).Elem(), KafkaUserSpecAuthorizationAclsResourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationAclsResourcePatchPtrInput)(nil)).Elem(), KafkaUserSpecAuthorizationAclsResourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationPatchInput)(nil)).Elem(), KafkaUserSpecAuthorizationPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationPatchPtrInput)(nil)).Elem(), KafkaUserSpecAuthorizationPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecPatchInput)(nil)).Elem(), KafkaUserSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecPatchPtrInput)(nil)).Elem(), KafkaUserSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecQuotasInput)(nil)).Elem(), KafkaUserSpecQuotasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecQuotasPtrInput)(nil)).Elem(), KafkaUserSpecQuotasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecQuotasPatchInput)(nil)).Elem(), KafkaUserSpecQuotasPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecQuotasPatchPtrInput)(nil)).Elem(), KafkaUserSpecQuotasPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateInput)(nil)).Elem(), KafkaUserSpecTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplatePtrInput)(nil)).Elem(), KafkaUserSpecTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplatePatchInput)(nil)).Elem(), KafkaUserSpecTemplatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplatePatchPtrInput)(nil)).Elem(), KafkaUserSpecTemplatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretInput)(nil)).Elem(), KafkaUserSpecTemplateSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretPtrInput)(nil)).Elem(), KafkaUserSpecTemplateSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadataInput)(nil)).Elem(), KafkaUserSpecTemplateSecretMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadataPtrInput)(nil)).Elem(), KafkaUserSpecTemplateSecretMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadataPatchInput)(nil)).Elem(), KafkaUserSpecTemplateSecretMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadataPatchPtrInput)(nil)).Elem(), KafkaUserSpecTemplateSecretMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretPatchInput)(nil)).Elem(), KafkaUserSpecTemplateSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretPatchPtrInput)(nil)).Elem(), KafkaUserSpecTemplateSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusInput)(nil)).Elem(), KafkaUserStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusPtrInput)(nil)).Elem(), KafkaUserStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusConditionsInput)(nil)).Elem(), KafkaUserStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusConditionsArrayInput)(nil)).Elem(), KafkaUserStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusConditionsPatchInput)(nil)).Elem(), KafkaUserStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusConditionsPatchArrayInput)(nil)).Elem(), KafkaUserStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusPatchInput)(nil)).Elem(), KafkaUserStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusPatchPtrInput)(nil)).Elem(), KafkaUserStatusPatchArgs{})
	pulumi.RegisterOutputType(KafkaTopicTypeOutput{})
	pulumi.RegisterOutputType(KafkaTopicTypeArrayOutput{})
	pulumi.RegisterOutputType(KafkaTopicListTypeOutput{})
	pulumi.RegisterOutputType(KafkaTopicPatchTypeOutput{})
	pulumi.RegisterOutputType(KafkaTopicSpecOutput{})
	pulumi.RegisterOutputType(KafkaTopicSpecPtrOutput{})
	pulumi.RegisterOutputType(KafkaTopicSpecPatchOutput{})
	pulumi.RegisterOutputType(KafkaTopicSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusPtrOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusConditionsOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusPatchOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusReplicasChangeOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusReplicasChangePtrOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusReplicasChangePatchOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusReplicasChangePatchPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserTypeOutput{})
	pulumi.RegisterOutputType(KafkaUserTypeArrayOutput{})
	pulumi.RegisterOutputType(KafkaUserListTypeOutput{})
	pulumi.RegisterOutputType(KafkaUserPatchTypeOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordPatchOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordPatchPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordValueFromOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordValueFromPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordValueFromPatchOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordValueFromPatchPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPatchPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPatchOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPatchPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationAclsOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationAclsArrayOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationAclsPatchOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationAclsPatchArrayOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationAclsResourceOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationAclsResourcePtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationAclsResourcePatchOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationAclsResourcePatchPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationPatchOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationPatchPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecPatchOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecQuotasOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecQuotasPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecQuotasPatchOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecQuotasPatchPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplatePtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplatePatchOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplatePatchPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretMetadataOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretMetadataPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretMetadataPatchOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretMetadataPatchPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretPatchOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretPatchPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusConditionsOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusPatchOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusPatchPtrOutput{})
}
