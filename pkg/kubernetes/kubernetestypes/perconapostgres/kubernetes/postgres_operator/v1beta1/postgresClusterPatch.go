// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// PostgresCluster is the Schema for the postgresclusters API
type PostgresClusterPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput     `pulumi:"metadata"`
	Spec     PostgresClusterSpecPatchPtrOutput   `pulumi:"spec"`
	Status   PostgresClusterStatusPatchPtrOutput `pulumi:"status"`
}

// NewPostgresClusterPatch registers a new resource with the given unique name, arguments, and options.
func NewPostgresClusterPatch(ctx *pulumi.Context,
	name string, args *PostgresClusterPatchArgs, opts ...pulumi.ResourceOption) (*PostgresClusterPatch, error) {
	if args == nil {
		args = &PostgresClusterPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("postgres-operator.crunchydata.com/v1beta1")
	args.Kind = pulumi.StringPtr("PostgresCluster")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PostgresClusterPatch
	err := ctx.RegisterResource("kubernetes:postgres-operator.crunchydata.com/v1beta1:PostgresClusterPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresClusterPatch gets an existing PostgresClusterPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresClusterPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresClusterPatchState, opts ...pulumi.ResourceOption) (*PostgresClusterPatch, error) {
	var resource PostgresClusterPatch
	err := ctx.ReadResource("kubernetes:postgres-operator.crunchydata.com/v1beta1:PostgresClusterPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresClusterPatch resources.
type postgresClusterPatchState struct {
}

type PostgresClusterPatchState struct {
}

func (PostgresClusterPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresClusterPatchState)(nil)).Elem()
}

type postgresClusterPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch   `pulumi:"metadata"`
	Spec     *PostgresClusterSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a PostgresClusterPatch resource.
type PostgresClusterPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     PostgresClusterSpecPatchPtrInput
}

func (PostgresClusterPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresClusterPatchArgs)(nil)).Elem()
}

type PostgresClusterPatchInput interface {
	pulumi.Input

	ToPostgresClusterPatchOutput() PostgresClusterPatchOutput
	ToPostgresClusterPatchOutputWithContext(ctx context.Context) PostgresClusterPatchOutput
}

func (*PostgresClusterPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterPatch)(nil)).Elem()
}

func (i *PostgresClusterPatch) ToPostgresClusterPatchOutput() PostgresClusterPatchOutput {
	return i.ToPostgresClusterPatchOutputWithContext(context.Background())
}

func (i *PostgresClusterPatch) ToPostgresClusterPatchOutputWithContext(ctx context.Context) PostgresClusterPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterPatchOutput)
}

// PostgresClusterPatchArrayInput is an input type that accepts PostgresClusterPatchArray and PostgresClusterPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterPatchArrayInput` via:
//
//	PostgresClusterPatchArray{ PostgresClusterPatchArgs{...} }
type PostgresClusterPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterPatchArrayOutput() PostgresClusterPatchArrayOutput
	ToPostgresClusterPatchArrayOutputWithContext(context.Context) PostgresClusterPatchArrayOutput
}

type PostgresClusterPatchArray []PostgresClusterPatchInput

func (PostgresClusterPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresClusterPatch)(nil)).Elem()
}

func (i PostgresClusterPatchArray) ToPostgresClusterPatchArrayOutput() PostgresClusterPatchArrayOutput {
	return i.ToPostgresClusterPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterPatchArray) ToPostgresClusterPatchArrayOutputWithContext(ctx context.Context) PostgresClusterPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterPatchArrayOutput)
}

// PostgresClusterPatchMapInput is an input type that accepts PostgresClusterPatchMap and PostgresClusterPatchMapOutput values.
// You can construct a concrete instance of `PostgresClusterPatchMapInput` via:
//
//	PostgresClusterPatchMap{ "key": PostgresClusterPatchArgs{...} }
type PostgresClusterPatchMapInput interface {
	pulumi.Input

	ToPostgresClusterPatchMapOutput() PostgresClusterPatchMapOutput
	ToPostgresClusterPatchMapOutputWithContext(context.Context) PostgresClusterPatchMapOutput
}

type PostgresClusterPatchMap map[string]PostgresClusterPatchInput

func (PostgresClusterPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresClusterPatch)(nil)).Elem()
}

func (i PostgresClusterPatchMap) ToPostgresClusterPatchMapOutput() PostgresClusterPatchMapOutput {
	return i.ToPostgresClusterPatchMapOutputWithContext(context.Background())
}

func (i PostgresClusterPatchMap) ToPostgresClusterPatchMapOutputWithContext(ctx context.Context) PostgresClusterPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterPatchMapOutput)
}

type PostgresClusterPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterPatch)(nil)).Elem()
}

func (o PostgresClusterPatchOutput) ToPostgresClusterPatchOutput() PostgresClusterPatchOutput {
	return o
}

func (o PostgresClusterPatchOutput) ToPostgresClusterPatchOutputWithContext(ctx context.Context) PostgresClusterPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PostgresClusterPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgresClusterPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PostgresClusterPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PostgresClusterPatchOutput) Spec() PostgresClusterSpecPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterPatch) PostgresClusterSpecPatchPtrOutput { return v.Spec }).(PostgresClusterSpecPatchPtrOutput)
}

func (o PostgresClusterPatchOutput) Status() PostgresClusterStatusPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterPatch) PostgresClusterStatusPatchPtrOutput { return v.Status }).(PostgresClusterStatusPatchPtrOutput)
}

type PostgresClusterPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresClusterPatch)(nil)).Elem()
}

func (o PostgresClusterPatchArrayOutput) ToPostgresClusterPatchArrayOutput() PostgresClusterPatchArrayOutput {
	return o
}

func (o PostgresClusterPatchArrayOutput) ToPostgresClusterPatchArrayOutputWithContext(ctx context.Context) PostgresClusterPatchArrayOutput {
	return o
}

func (o PostgresClusterPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostgresClusterPatch {
		return vs[0].([]*PostgresClusterPatch)[vs[1].(int)]
	}).(PostgresClusterPatchOutput)
}

type PostgresClusterPatchMapOutput struct{ *pulumi.OutputState }

func (PostgresClusterPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresClusterPatch)(nil)).Elem()
}

func (o PostgresClusterPatchMapOutput) ToPostgresClusterPatchMapOutput() PostgresClusterPatchMapOutput {
	return o
}

func (o PostgresClusterPatchMapOutput) ToPostgresClusterPatchMapOutputWithContext(ctx context.Context) PostgresClusterPatchMapOutput {
	return o
}

func (o PostgresClusterPatchMapOutput) MapIndex(k pulumi.StringInput) PostgresClusterPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostgresClusterPatch {
		return vs[0].(map[string]*PostgresClusterPatch)[vs[1].(string)]
	}).(PostgresClusterPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterPatchInput)(nil)).Elem(), &PostgresClusterPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterPatchArrayInput)(nil)).Elem(), PostgresClusterPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterPatchMapInput)(nil)).Elem(), PostgresClusterPatchMap{})
	pulumi.RegisterOutputType(PostgresClusterPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterPatchMapOutput{})
}
