// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatch struct {
	LabelSelector *PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsLabelSelectorPatch `pulumi:"labelSelector"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
	MatchLabelKeys []string `pulumi:"matchLabelKeys"`
	// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew *int `pulumi:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
	//  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
	MinDomains *int `pulumi:"minDomains"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//  If this value is nil, the behavior is equivalent to the Honor policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy *string `pulumi:"nodeAffinityPolicy"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
	//  If this value is nil, the behavior is equivalent to the Ignore policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy *string `pulumi:"nodeTaintsPolicy"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
	TopologyKey *string `pulumi:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
	WhenUnsatisfiable *string `pulumi:"whenUnsatisfiable"`
}

// PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchInput is an input type that accepts PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArgs and PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchInput` via:
//
//	PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArgs{...}
type PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput() PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput
	ToPostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutputWithContext(context.Context) PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArgs struct {
	LabelSelector PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsLabelSelectorPatchPtrInput `pulumi:"labelSelector"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
	MatchLabelKeys pulumi.StringArrayInput `pulumi:"matchLabelKeys"`
	// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew pulumi.IntPtrInput `pulumi:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
	//  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
	MinDomains pulumi.IntPtrInput `pulumi:"minDomains"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//  If this value is nil, the behavior is equivalent to the Honor policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy pulumi.StringPtrInput `pulumi:"nodeAffinityPolicy"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
	//  If this value is nil, the behavior is equivalent to the Ignore policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy pulumi.StringPtrInput `pulumi:"nodeTaintsPolicy"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
	WhenUnsatisfiable pulumi.StringPtrInput `pulumi:"whenUnsatisfiable"`
}

func (PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArgs) ToPostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput() PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput {
	return i.ToPostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArgs) ToPostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput)
}

// PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayInput is an input type that accepts PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArray and PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayInput` via:
//
//	PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArray{ PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArgs{...} }
type PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput() PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput
	ToPostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput
}

type PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArray []PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchInput

func (PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArray) ToPostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput() PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput {
	return i.ToPostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArray) ToPostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput)
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput) ToPostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput() PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput {
	return o
}

func (o PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput) ToPostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput {
	return o
}

func (o PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput) LabelSelector() PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatch) *PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsLabelSelectorPatch {
		return v.LabelSelector
	}).(PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsLabelSelectorPatchPtrOutput)
}

// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
func (o PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput) MatchLabelKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatch) []string {
		return v.MatchLabelKeys
	}).(pulumi.StringArrayOutput)
}

// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
func (o PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput) MaxSkew() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatch) *int { return v.MaxSkew }).(pulumi.IntPtrOutput)
}

// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
//
//	For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
//	This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
func (o PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput) MinDomains() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatch) *int { return v.MinDomains }).(pulumi.IntPtrOutput)
}

// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
//
//	If this value is nil, the behavior is equivalent to the Honor policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (o PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput) NodeAffinityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatch) *string {
		return v.NodeAffinityPolicy
	}).(pulumi.StringPtrOutput)
}

// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
//
//	If this value is nil, the behavior is equivalent to the Ignore policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (o PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput) NodeTaintsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatch) *string {
		return v.NodeTaintsPolicy
	}).(pulumi.StringPtrOutput)
}

// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
func (o PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatch) *string { return v.TopologyKey }).(pulumi.StringPtrOutput)
}

// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
func (o PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput) WhenUnsatisfiable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatch) *string {
		return v.WhenUnsatisfiable
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput) ToPostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput() PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput) ToPostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatch {
		return vs[0].([]PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput)
}

// Specification of the service that exposes the PostgreSQL primary instance.
type PostgresClusterSpecService struct {
	Metadata *PostgresClusterSpecServiceMetadata `pulumi:"metadata"`
	// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// PostgresClusterSpecServiceInput is an input type that accepts PostgresClusterSpecServiceArgs and PostgresClusterSpecServiceOutput values.
// You can construct a concrete instance of `PostgresClusterSpecServiceInput` via:
//
//	PostgresClusterSpecServiceArgs{...}
type PostgresClusterSpecServiceInput interface {
	pulumi.Input

	ToPostgresClusterSpecServiceOutput() PostgresClusterSpecServiceOutput
	ToPostgresClusterSpecServiceOutputWithContext(context.Context) PostgresClusterSpecServiceOutput
}

// Specification of the service that exposes the PostgreSQL primary instance.
type PostgresClusterSpecServiceArgs struct {
	Metadata PostgresClusterSpecServiceMetadataPtrInput `pulumi:"metadata"`
	// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PostgresClusterSpecServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecService)(nil)).Elem()
}

func (i PostgresClusterSpecServiceArgs) ToPostgresClusterSpecServiceOutput() PostgresClusterSpecServiceOutput {
	return i.ToPostgresClusterSpecServiceOutputWithContext(context.Background())
}

func (i PostgresClusterSpecServiceArgs) ToPostgresClusterSpecServiceOutputWithContext(ctx context.Context) PostgresClusterSpecServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecServiceOutput)
}

func (i PostgresClusterSpecServiceArgs) ToPostgresClusterSpecServicePtrOutput() PostgresClusterSpecServicePtrOutput {
	return i.ToPostgresClusterSpecServicePtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecServiceArgs) ToPostgresClusterSpecServicePtrOutputWithContext(ctx context.Context) PostgresClusterSpecServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecServiceOutput).ToPostgresClusterSpecServicePtrOutputWithContext(ctx)
}

// PostgresClusterSpecServicePtrInput is an input type that accepts PostgresClusterSpecServiceArgs, PostgresClusterSpecServicePtr and PostgresClusterSpecServicePtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecServicePtrInput` via:
//
//	        PostgresClusterSpecServiceArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecServicePtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecServicePtrOutput() PostgresClusterSpecServicePtrOutput
	ToPostgresClusterSpecServicePtrOutputWithContext(context.Context) PostgresClusterSpecServicePtrOutput
}

type postgresClusterSpecServicePtrType PostgresClusterSpecServiceArgs

func PostgresClusterSpecServicePtr(v *PostgresClusterSpecServiceArgs) PostgresClusterSpecServicePtrInput {
	return (*postgresClusterSpecServicePtrType)(v)
}

func (*postgresClusterSpecServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecService)(nil)).Elem()
}

func (i *postgresClusterSpecServicePtrType) ToPostgresClusterSpecServicePtrOutput() PostgresClusterSpecServicePtrOutput {
	return i.ToPostgresClusterSpecServicePtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecServicePtrType) ToPostgresClusterSpecServicePtrOutputWithContext(ctx context.Context) PostgresClusterSpecServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecServicePtrOutput)
}

// Specification of the service that exposes the PostgreSQL primary instance.
type PostgresClusterSpecServiceOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecService)(nil)).Elem()
}

func (o PostgresClusterSpecServiceOutput) ToPostgresClusterSpecServiceOutput() PostgresClusterSpecServiceOutput {
	return o
}

func (o PostgresClusterSpecServiceOutput) ToPostgresClusterSpecServiceOutputWithContext(ctx context.Context) PostgresClusterSpecServiceOutput {
	return o
}

func (o PostgresClusterSpecServiceOutput) ToPostgresClusterSpecServicePtrOutput() PostgresClusterSpecServicePtrOutput {
	return o.ToPostgresClusterSpecServicePtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecServiceOutput) ToPostgresClusterSpecServicePtrOutputWithContext(ctx context.Context) PostgresClusterSpecServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecService) *PostgresClusterSpecService {
		return &v
	}).(PostgresClusterSpecServicePtrOutput)
}

func (o PostgresClusterSpecServiceOutput) Metadata() PostgresClusterSpecServiceMetadataPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecService) *PostgresClusterSpecServiceMetadata { return v.Metadata }).(PostgresClusterSpecServiceMetadataPtrOutput)
}

// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o PostgresClusterSpecServiceOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecService) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o PostgresClusterSpecServiceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecService) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecServicePtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecService)(nil)).Elem()
}

func (o PostgresClusterSpecServicePtrOutput) ToPostgresClusterSpecServicePtrOutput() PostgresClusterSpecServicePtrOutput {
	return o
}

func (o PostgresClusterSpecServicePtrOutput) ToPostgresClusterSpecServicePtrOutputWithContext(ctx context.Context) PostgresClusterSpecServicePtrOutput {
	return o
}

func (o PostgresClusterSpecServicePtrOutput) Elem() PostgresClusterSpecServiceOutput {
	return o.ApplyT(func(v *PostgresClusterSpecService) PostgresClusterSpecService {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecService
		return ret
	}).(PostgresClusterSpecServiceOutput)
}

func (o PostgresClusterSpecServicePtrOutput) Metadata() PostgresClusterSpecServiceMetadataPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecService) *PostgresClusterSpecServiceMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(PostgresClusterSpecServiceMetadataPtrOutput)
}

// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o PostgresClusterSpecServicePtrOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecService) *int {
		if v == nil {
			return nil
		}
		return v.NodePort
	}).(pulumi.IntPtrOutput)
}

// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o PostgresClusterSpecServicePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecService) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecServiceMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Labels      map[string]string `pulumi:"labels"`
}

// PostgresClusterSpecServiceMetadataInput is an input type that accepts PostgresClusterSpecServiceMetadataArgs and PostgresClusterSpecServiceMetadataOutput values.
// You can construct a concrete instance of `PostgresClusterSpecServiceMetadataInput` via:
//
//	PostgresClusterSpecServiceMetadataArgs{...}
type PostgresClusterSpecServiceMetadataInput interface {
	pulumi.Input

	ToPostgresClusterSpecServiceMetadataOutput() PostgresClusterSpecServiceMetadataOutput
	ToPostgresClusterSpecServiceMetadataOutputWithContext(context.Context) PostgresClusterSpecServiceMetadataOutput
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecServiceMetadataArgs struct {
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	Labels      pulumi.StringMapInput `pulumi:"labels"`
}

func (PostgresClusterSpecServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecServiceMetadata)(nil)).Elem()
}

func (i PostgresClusterSpecServiceMetadataArgs) ToPostgresClusterSpecServiceMetadataOutput() PostgresClusterSpecServiceMetadataOutput {
	return i.ToPostgresClusterSpecServiceMetadataOutputWithContext(context.Background())
}

func (i PostgresClusterSpecServiceMetadataArgs) ToPostgresClusterSpecServiceMetadataOutputWithContext(ctx context.Context) PostgresClusterSpecServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecServiceMetadataOutput)
}

func (i PostgresClusterSpecServiceMetadataArgs) ToPostgresClusterSpecServiceMetadataPtrOutput() PostgresClusterSpecServiceMetadataPtrOutput {
	return i.ToPostgresClusterSpecServiceMetadataPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecServiceMetadataArgs) ToPostgresClusterSpecServiceMetadataPtrOutputWithContext(ctx context.Context) PostgresClusterSpecServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecServiceMetadataOutput).ToPostgresClusterSpecServiceMetadataPtrOutputWithContext(ctx)
}

// PostgresClusterSpecServiceMetadataPtrInput is an input type that accepts PostgresClusterSpecServiceMetadataArgs, PostgresClusterSpecServiceMetadataPtr and PostgresClusterSpecServiceMetadataPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecServiceMetadataPtrInput` via:
//
//	        PostgresClusterSpecServiceMetadataArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecServiceMetadataPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecServiceMetadataPtrOutput() PostgresClusterSpecServiceMetadataPtrOutput
	ToPostgresClusterSpecServiceMetadataPtrOutputWithContext(context.Context) PostgresClusterSpecServiceMetadataPtrOutput
}

type postgresClusterSpecServiceMetadataPtrType PostgresClusterSpecServiceMetadataArgs

func PostgresClusterSpecServiceMetadataPtr(v *PostgresClusterSpecServiceMetadataArgs) PostgresClusterSpecServiceMetadataPtrInput {
	return (*postgresClusterSpecServiceMetadataPtrType)(v)
}

func (*postgresClusterSpecServiceMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecServiceMetadata)(nil)).Elem()
}

func (i *postgresClusterSpecServiceMetadataPtrType) ToPostgresClusterSpecServiceMetadataPtrOutput() PostgresClusterSpecServiceMetadataPtrOutput {
	return i.ToPostgresClusterSpecServiceMetadataPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecServiceMetadataPtrType) ToPostgresClusterSpecServiceMetadataPtrOutputWithContext(ctx context.Context) PostgresClusterSpecServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecServiceMetadataPtrOutput)
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecServiceMetadataOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecServiceMetadata)(nil)).Elem()
}

func (o PostgresClusterSpecServiceMetadataOutput) ToPostgresClusterSpecServiceMetadataOutput() PostgresClusterSpecServiceMetadataOutput {
	return o
}

func (o PostgresClusterSpecServiceMetadataOutput) ToPostgresClusterSpecServiceMetadataOutputWithContext(ctx context.Context) PostgresClusterSpecServiceMetadataOutput {
	return o
}

func (o PostgresClusterSpecServiceMetadataOutput) ToPostgresClusterSpecServiceMetadataPtrOutput() PostgresClusterSpecServiceMetadataPtrOutput {
	return o.ToPostgresClusterSpecServiceMetadataPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecServiceMetadataOutput) ToPostgresClusterSpecServiceMetadataPtrOutputWithContext(ctx context.Context) PostgresClusterSpecServiceMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecServiceMetadata) *PostgresClusterSpecServiceMetadata {
		return &v
	}).(PostgresClusterSpecServiceMetadataPtrOutput)
}

func (o PostgresClusterSpecServiceMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecServiceMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o PostgresClusterSpecServiceMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecServiceMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type PostgresClusterSpecServiceMetadataPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecServiceMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecServiceMetadata)(nil)).Elem()
}

func (o PostgresClusterSpecServiceMetadataPtrOutput) ToPostgresClusterSpecServiceMetadataPtrOutput() PostgresClusterSpecServiceMetadataPtrOutput {
	return o
}

func (o PostgresClusterSpecServiceMetadataPtrOutput) ToPostgresClusterSpecServiceMetadataPtrOutputWithContext(ctx context.Context) PostgresClusterSpecServiceMetadataPtrOutput {
	return o
}

func (o PostgresClusterSpecServiceMetadataPtrOutput) Elem() PostgresClusterSpecServiceMetadataOutput {
	return o.ApplyT(func(v *PostgresClusterSpecServiceMetadata) PostgresClusterSpecServiceMetadata {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecServiceMetadata
		return ret
	}).(PostgresClusterSpecServiceMetadataOutput)
}

func (o PostgresClusterSpecServiceMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o PostgresClusterSpecServiceMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecServiceMetadataPatch struct {
	Annotations map[string]string `pulumi:"annotations"`
	Labels      map[string]string `pulumi:"labels"`
}

// PostgresClusterSpecServiceMetadataPatchInput is an input type that accepts PostgresClusterSpecServiceMetadataPatchArgs and PostgresClusterSpecServiceMetadataPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecServiceMetadataPatchInput` via:
//
//	PostgresClusterSpecServiceMetadataPatchArgs{...}
type PostgresClusterSpecServiceMetadataPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecServiceMetadataPatchOutput() PostgresClusterSpecServiceMetadataPatchOutput
	ToPostgresClusterSpecServiceMetadataPatchOutputWithContext(context.Context) PostgresClusterSpecServiceMetadataPatchOutput
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecServiceMetadataPatchArgs struct {
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	Labels      pulumi.StringMapInput `pulumi:"labels"`
}

func (PostgresClusterSpecServiceMetadataPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecServiceMetadataPatch)(nil)).Elem()
}

func (i PostgresClusterSpecServiceMetadataPatchArgs) ToPostgresClusterSpecServiceMetadataPatchOutput() PostgresClusterSpecServiceMetadataPatchOutput {
	return i.ToPostgresClusterSpecServiceMetadataPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecServiceMetadataPatchArgs) ToPostgresClusterSpecServiceMetadataPatchOutputWithContext(ctx context.Context) PostgresClusterSpecServiceMetadataPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecServiceMetadataPatchOutput)
}

func (i PostgresClusterSpecServiceMetadataPatchArgs) ToPostgresClusterSpecServiceMetadataPatchPtrOutput() PostgresClusterSpecServiceMetadataPatchPtrOutput {
	return i.ToPostgresClusterSpecServiceMetadataPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecServiceMetadataPatchArgs) ToPostgresClusterSpecServiceMetadataPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecServiceMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecServiceMetadataPatchOutput).ToPostgresClusterSpecServiceMetadataPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecServiceMetadataPatchPtrInput is an input type that accepts PostgresClusterSpecServiceMetadataPatchArgs, PostgresClusterSpecServiceMetadataPatchPtr and PostgresClusterSpecServiceMetadataPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecServiceMetadataPatchPtrInput` via:
//
//	        PostgresClusterSpecServiceMetadataPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecServiceMetadataPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecServiceMetadataPatchPtrOutput() PostgresClusterSpecServiceMetadataPatchPtrOutput
	ToPostgresClusterSpecServiceMetadataPatchPtrOutputWithContext(context.Context) PostgresClusterSpecServiceMetadataPatchPtrOutput
}

type postgresClusterSpecServiceMetadataPatchPtrType PostgresClusterSpecServiceMetadataPatchArgs

func PostgresClusterSpecServiceMetadataPatchPtr(v *PostgresClusterSpecServiceMetadataPatchArgs) PostgresClusterSpecServiceMetadataPatchPtrInput {
	return (*postgresClusterSpecServiceMetadataPatchPtrType)(v)
}

func (*postgresClusterSpecServiceMetadataPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecServiceMetadataPatch)(nil)).Elem()
}

func (i *postgresClusterSpecServiceMetadataPatchPtrType) ToPostgresClusterSpecServiceMetadataPatchPtrOutput() PostgresClusterSpecServiceMetadataPatchPtrOutput {
	return i.ToPostgresClusterSpecServiceMetadataPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecServiceMetadataPatchPtrType) ToPostgresClusterSpecServiceMetadataPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecServiceMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecServiceMetadataPatchPtrOutput)
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecServiceMetadataPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecServiceMetadataPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecServiceMetadataPatch)(nil)).Elem()
}

func (o PostgresClusterSpecServiceMetadataPatchOutput) ToPostgresClusterSpecServiceMetadataPatchOutput() PostgresClusterSpecServiceMetadataPatchOutput {
	return o
}

func (o PostgresClusterSpecServiceMetadataPatchOutput) ToPostgresClusterSpecServiceMetadataPatchOutputWithContext(ctx context.Context) PostgresClusterSpecServiceMetadataPatchOutput {
	return o
}

func (o PostgresClusterSpecServiceMetadataPatchOutput) ToPostgresClusterSpecServiceMetadataPatchPtrOutput() PostgresClusterSpecServiceMetadataPatchPtrOutput {
	return o.ToPostgresClusterSpecServiceMetadataPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecServiceMetadataPatchOutput) ToPostgresClusterSpecServiceMetadataPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecServiceMetadataPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecServiceMetadataPatch) *PostgresClusterSpecServiceMetadataPatch {
		return &v
	}).(PostgresClusterSpecServiceMetadataPatchPtrOutput)
}

func (o PostgresClusterSpecServiceMetadataPatchOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecServiceMetadataPatch) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o PostgresClusterSpecServiceMetadataPatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecServiceMetadataPatch) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type PostgresClusterSpecServiceMetadataPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecServiceMetadataPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecServiceMetadataPatch)(nil)).Elem()
}

func (o PostgresClusterSpecServiceMetadataPatchPtrOutput) ToPostgresClusterSpecServiceMetadataPatchPtrOutput() PostgresClusterSpecServiceMetadataPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecServiceMetadataPatchPtrOutput) ToPostgresClusterSpecServiceMetadataPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecServiceMetadataPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecServiceMetadataPatchPtrOutput) Elem() PostgresClusterSpecServiceMetadataPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecServiceMetadataPatch) PostgresClusterSpecServiceMetadataPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecServiceMetadataPatch
		return ret
	}).(PostgresClusterSpecServiceMetadataPatchOutput)
}

func (o PostgresClusterSpecServiceMetadataPatchPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecServiceMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o PostgresClusterSpecServiceMetadataPatchPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecServiceMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Specification of the service that exposes the PostgreSQL primary instance.
type PostgresClusterSpecServicePatch struct {
	Metadata *PostgresClusterSpecServiceMetadataPatch `pulumi:"metadata"`
	// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// PostgresClusterSpecServicePatchInput is an input type that accepts PostgresClusterSpecServicePatchArgs and PostgresClusterSpecServicePatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecServicePatchInput` via:
//
//	PostgresClusterSpecServicePatchArgs{...}
type PostgresClusterSpecServicePatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecServicePatchOutput() PostgresClusterSpecServicePatchOutput
	ToPostgresClusterSpecServicePatchOutputWithContext(context.Context) PostgresClusterSpecServicePatchOutput
}

// Specification of the service that exposes the PostgreSQL primary instance.
type PostgresClusterSpecServicePatchArgs struct {
	Metadata PostgresClusterSpecServiceMetadataPatchPtrInput `pulumi:"metadata"`
	// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PostgresClusterSpecServicePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecServicePatch)(nil)).Elem()
}

func (i PostgresClusterSpecServicePatchArgs) ToPostgresClusterSpecServicePatchOutput() PostgresClusterSpecServicePatchOutput {
	return i.ToPostgresClusterSpecServicePatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecServicePatchArgs) ToPostgresClusterSpecServicePatchOutputWithContext(ctx context.Context) PostgresClusterSpecServicePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecServicePatchOutput)
}

func (i PostgresClusterSpecServicePatchArgs) ToPostgresClusterSpecServicePatchPtrOutput() PostgresClusterSpecServicePatchPtrOutput {
	return i.ToPostgresClusterSpecServicePatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecServicePatchArgs) ToPostgresClusterSpecServicePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecServicePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecServicePatchOutput).ToPostgresClusterSpecServicePatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecServicePatchPtrInput is an input type that accepts PostgresClusterSpecServicePatchArgs, PostgresClusterSpecServicePatchPtr and PostgresClusterSpecServicePatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecServicePatchPtrInput` via:
//
//	        PostgresClusterSpecServicePatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecServicePatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecServicePatchPtrOutput() PostgresClusterSpecServicePatchPtrOutput
	ToPostgresClusterSpecServicePatchPtrOutputWithContext(context.Context) PostgresClusterSpecServicePatchPtrOutput
}

type postgresClusterSpecServicePatchPtrType PostgresClusterSpecServicePatchArgs

func PostgresClusterSpecServicePatchPtr(v *PostgresClusterSpecServicePatchArgs) PostgresClusterSpecServicePatchPtrInput {
	return (*postgresClusterSpecServicePatchPtrType)(v)
}

func (*postgresClusterSpecServicePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecServicePatch)(nil)).Elem()
}

func (i *postgresClusterSpecServicePatchPtrType) ToPostgresClusterSpecServicePatchPtrOutput() PostgresClusterSpecServicePatchPtrOutput {
	return i.ToPostgresClusterSpecServicePatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecServicePatchPtrType) ToPostgresClusterSpecServicePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecServicePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecServicePatchPtrOutput)
}

// Specification of the service that exposes the PostgreSQL primary instance.
type PostgresClusterSpecServicePatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecServicePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecServicePatch)(nil)).Elem()
}

func (o PostgresClusterSpecServicePatchOutput) ToPostgresClusterSpecServicePatchOutput() PostgresClusterSpecServicePatchOutput {
	return o
}

func (o PostgresClusterSpecServicePatchOutput) ToPostgresClusterSpecServicePatchOutputWithContext(ctx context.Context) PostgresClusterSpecServicePatchOutput {
	return o
}

func (o PostgresClusterSpecServicePatchOutput) ToPostgresClusterSpecServicePatchPtrOutput() PostgresClusterSpecServicePatchPtrOutput {
	return o.ToPostgresClusterSpecServicePatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecServicePatchOutput) ToPostgresClusterSpecServicePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecServicePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecServicePatch) *PostgresClusterSpecServicePatch {
		return &v
	}).(PostgresClusterSpecServicePatchPtrOutput)
}

func (o PostgresClusterSpecServicePatchOutput) Metadata() PostgresClusterSpecServiceMetadataPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecServicePatch) *PostgresClusterSpecServiceMetadataPatch { return v.Metadata }).(PostgresClusterSpecServiceMetadataPatchPtrOutput)
}

// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o PostgresClusterSpecServicePatchOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecServicePatch) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o PostgresClusterSpecServicePatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecServicePatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecServicePatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecServicePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecServicePatch)(nil)).Elem()
}

func (o PostgresClusterSpecServicePatchPtrOutput) ToPostgresClusterSpecServicePatchPtrOutput() PostgresClusterSpecServicePatchPtrOutput {
	return o
}

func (o PostgresClusterSpecServicePatchPtrOutput) ToPostgresClusterSpecServicePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecServicePatchPtrOutput {
	return o
}

func (o PostgresClusterSpecServicePatchPtrOutput) Elem() PostgresClusterSpecServicePatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecServicePatch) PostgresClusterSpecServicePatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecServicePatch
		return ret
	}).(PostgresClusterSpecServicePatchOutput)
}

func (o PostgresClusterSpecServicePatchPtrOutput) Metadata() PostgresClusterSpecServiceMetadataPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecServicePatch) *PostgresClusterSpecServiceMetadataPatch {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(PostgresClusterSpecServiceMetadataPatchPtrOutput)
}

// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o PostgresClusterSpecServicePatchPtrOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecServicePatch) *int {
		if v == nil {
			return nil
		}
		return v.NodePort
	}).(pulumi.IntPtrOutput)
}

// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o PostgresClusterSpecServicePatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecServicePatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Run this cluster as a read-only copy of an existing cluster or archive.
type PostgresClusterSpecStandby struct {
	// Whether or not the PostgreSQL cluster should be read-only. When this is true, WAL files are applied from a pgBackRest repository or another PostgreSQL server.
	Enabled *bool `pulumi:"enabled"`
	// Network address of the PostgreSQL server to follow via streaming replication.
	Host *string `pulumi:"host"`
	// Network port of the PostgreSQL server to follow via streaming replication.
	Port *int `pulumi:"port"`
	// The name of the pgBackRest repository to follow for WAL files.
	RepoName *string `pulumi:"repoName"`
}

// PostgresClusterSpecStandbyInput is an input type that accepts PostgresClusterSpecStandbyArgs and PostgresClusterSpecStandbyOutput values.
// You can construct a concrete instance of `PostgresClusterSpecStandbyInput` via:
//
//	PostgresClusterSpecStandbyArgs{...}
type PostgresClusterSpecStandbyInput interface {
	pulumi.Input

	ToPostgresClusterSpecStandbyOutput() PostgresClusterSpecStandbyOutput
	ToPostgresClusterSpecStandbyOutputWithContext(context.Context) PostgresClusterSpecStandbyOutput
}

// Run this cluster as a read-only copy of an existing cluster or archive.
type PostgresClusterSpecStandbyArgs struct {
	// Whether or not the PostgreSQL cluster should be read-only. When this is true, WAL files are applied from a pgBackRest repository or another PostgreSQL server.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Network address of the PostgreSQL server to follow via streaming replication.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Network port of the PostgreSQL server to follow via streaming replication.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The name of the pgBackRest repository to follow for WAL files.
	RepoName pulumi.StringPtrInput `pulumi:"repoName"`
}

func (PostgresClusterSpecStandbyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecStandby)(nil)).Elem()
}

func (i PostgresClusterSpecStandbyArgs) ToPostgresClusterSpecStandbyOutput() PostgresClusterSpecStandbyOutput {
	return i.ToPostgresClusterSpecStandbyOutputWithContext(context.Background())
}

func (i PostgresClusterSpecStandbyArgs) ToPostgresClusterSpecStandbyOutputWithContext(ctx context.Context) PostgresClusterSpecStandbyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecStandbyOutput)
}

func (i PostgresClusterSpecStandbyArgs) ToPostgresClusterSpecStandbyPtrOutput() PostgresClusterSpecStandbyPtrOutput {
	return i.ToPostgresClusterSpecStandbyPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecStandbyArgs) ToPostgresClusterSpecStandbyPtrOutputWithContext(ctx context.Context) PostgresClusterSpecStandbyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecStandbyOutput).ToPostgresClusterSpecStandbyPtrOutputWithContext(ctx)
}

// PostgresClusterSpecStandbyPtrInput is an input type that accepts PostgresClusterSpecStandbyArgs, PostgresClusterSpecStandbyPtr and PostgresClusterSpecStandbyPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecStandbyPtrInput` via:
//
//	        PostgresClusterSpecStandbyArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecStandbyPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecStandbyPtrOutput() PostgresClusterSpecStandbyPtrOutput
	ToPostgresClusterSpecStandbyPtrOutputWithContext(context.Context) PostgresClusterSpecStandbyPtrOutput
}

type postgresClusterSpecStandbyPtrType PostgresClusterSpecStandbyArgs

func PostgresClusterSpecStandbyPtr(v *PostgresClusterSpecStandbyArgs) PostgresClusterSpecStandbyPtrInput {
	return (*postgresClusterSpecStandbyPtrType)(v)
}

func (*postgresClusterSpecStandbyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecStandby)(nil)).Elem()
}

func (i *postgresClusterSpecStandbyPtrType) ToPostgresClusterSpecStandbyPtrOutput() PostgresClusterSpecStandbyPtrOutput {
	return i.ToPostgresClusterSpecStandbyPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecStandbyPtrType) ToPostgresClusterSpecStandbyPtrOutputWithContext(ctx context.Context) PostgresClusterSpecStandbyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecStandbyPtrOutput)
}

// Run this cluster as a read-only copy of an existing cluster or archive.
type PostgresClusterSpecStandbyOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecStandbyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecStandby)(nil)).Elem()
}

func (o PostgresClusterSpecStandbyOutput) ToPostgresClusterSpecStandbyOutput() PostgresClusterSpecStandbyOutput {
	return o
}

func (o PostgresClusterSpecStandbyOutput) ToPostgresClusterSpecStandbyOutputWithContext(ctx context.Context) PostgresClusterSpecStandbyOutput {
	return o
}

func (o PostgresClusterSpecStandbyOutput) ToPostgresClusterSpecStandbyPtrOutput() PostgresClusterSpecStandbyPtrOutput {
	return o.ToPostgresClusterSpecStandbyPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecStandbyOutput) ToPostgresClusterSpecStandbyPtrOutputWithContext(ctx context.Context) PostgresClusterSpecStandbyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecStandby) *PostgresClusterSpecStandby {
		return &v
	}).(PostgresClusterSpecStandbyPtrOutput)
}

// Whether or not the PostgreSQL cluster should be read-only. When this is true, WAL files are applied from a pgBackRest repository or another PostgreSQL server.
func (o PostgresClusterSpecStandbyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecStandby) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Network address of the PostgreSQL server to follow via streaming replication.
func (o PostgresClusterSpecStandbyOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecStandby) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Network port of the PostgreSQL server to follow via streaming replication.
func (o PostgresClusterSpecStandbyOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecStandby) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The name of the pgBackRest repository to follow for WAL files.
func (o PostgresClusterSpecStandbyOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecStandby) *string { return v.RepoName }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecStandbyPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecStandbyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecStandby)(nil)).Elem()
}

func (o PostgresClusterSpecStandbyPtrOutput) ToPostgresClusterSpecStandbyPtrOutput() PostgresClusterSpecStandbyPtrOutput {
	return o
}

func (o PostgresClusterSpecStandbyPtrOutput) ToPostgresClusterSpecStandbyPtrOutputWithContext(ctx context.Context) PostgresClusterSpecStandbyPtrOutput {
	return o
}

func (o PostgresClusterSpecStandbyPtrOutput) Elem() PostgresClusterSpecStandbyOutput {
	return o.ApplyT(func(v *PostgresClusterSpecStandby) PostgresClusterSpecStandby {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecStandby
		return ret
	}).(PostgresClusterSpecStandbyOutput)
}

// Whether or not the PostgreSQL cluster should be read-only. When this is true, WAL files are applied from a pgBackRest repository or another PostgreSQL server.
func (o PostgresClusterSpecStandbyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecStandby) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Network address of the PostgreSQL server to follow via streaming replication.
func (o PostgresClusterSpecStandbyPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecStandby) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Network port of the PostgreSQL server to follow via streaming replication.
func (o PostgresClusterSpecStandbyPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecStandby) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The name of the pgBackRest repository to follow for WAL files.
func (o PostgresClusterSpecStandbyPtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecStandby) *string {
		if v == nil {
			return nil
		}
		return v.RepoName
	}).(pulumi.StringPtrOutput)
}

// Run this cluster as a read-only copy of an existing cluster or archive.
type PostgresClusterSpecStandbyPatch struct {
	// Whether or not the PostgreSQL cluster should be read-only. When this is true, WAL files are applied from a pgBackRest repository or another PostgreSQL server.
	Enabled *bool `pulumi:"enabled"`
	// Network address of the PostgreSQL server to follow via streaming replication.
	Host *string `pulumi:"host"`
	// Network port of the PostgreSQL server to follow via streaming replication.
	Port *int `pulumi:"port"`
	// The name of the pgBackRest repository to follow for WAL files.
	RepoName *string `pulumi:"repoName"`
}

// PostgresClusterSpecStandbyPatchInput is an input type that accepts PostgresClusterSpecStandbyPatchArgs and PostgresClusterSpecStandbyPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecStandbyPatchInput` via:
//
//	PostgresClusterSpecStandbyPatchArgs{...}
type PostgresClusterSpecStandbyPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecStandbyPatchOutput() PostgresClusterSpecStandbyPatchOutput
	ToPostgresClusterSpecStandbyPatchOutputWithContext(context.Context) PostgresClusterSpecStandbyPatchOutput
}

// Run this cluster as a read-only copy of an existing cluster or archive.
type PostgresClusterSpecStandbyPatchArgs struct {
	// Whether or not the PostgreSQL cluster should be read-only. When this is true, WAL files are applied from a pgBackRest repository or another PostgreSQL server.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Network address of the PostgreSQL server to follow via streaming replication.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Network port of the PostgreSQL server to follow via streaming replication.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The name of the pgBackRest repository to follow for WAL files.
	RepoName pulumi.StringPtrInput `pulumi:"repoName"`
}

func (PostgresClusterSpecStandbyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecStandbyPatch)(nil)).Elem()
}

func (i PostgresClusterSpecStandbyPatchArgs) ToPostgresClusterSpecStandbyPatchOutput() PostgresClusterSpecStandbyPatchOutput {
	return i.ToPostgresClusterSpecStandbyPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecStandbyPatchArgs) ToPostgresClusterSpecStandbyPatchOutputWithContext(ctx context.Context) PostgresClusterSpecStandbyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecStandbyPatchOutput)
}

func (i PostgresClusterSpecStandbyPatchArgs) ToPostgresClusterSpecStandbyPatchPtrOutput() PostgresClusterSpecStandbyPatchPtrOutput {
	return i.ToPostgresClusterSpecStandbyPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecStandbyPatchArgs) ToPostgresClusterSpecStandbyPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecStandbyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecStandbyPatchOutput).ToPostgresClusterSpecStandbyPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecStandbyPatchPtrInput is an input type that accepts PostgresClusterSpecStandbyPatchArgs, PostgresClusterSpecStandbyPatchPtr and PostgresClusterSpecStandbyPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecStandbyPatchPtrInput` via:
//
//	        PostgresClusterSpecStandbyPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecStandbyPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecStandbyPatchPtrOutput() PostgresClusterSpecStandbyPatchPtrOutput
	ToPostgresClusterSpecStandbyPatchPtrOutputWithContext(context.Context) PostgresClusterSpecStandbyPatchPtrOutput
}

type postgresClusterSpecStandbyPatchPtrType PostgresClusterSpecStandbyPatchArgs

func PostgresClusterSpecStandbyPatchPtr(v *PostgresClusterSpecStandbyPatchArgs) PostgresClusterSpecStandbyPatchPtrInput {
	return (*postgresClusterSpecStandbyPatchPtrType)(v)
}

func (*postgresClusterSpecStandbyPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecStandbyPatch)(nil)).Elem()
}

func (i *postgresClusterSpecStandbyPatchPtrType) ToPostgresClusterSpecStandbyPatchPtrOutput() PostgresClusterSpecStandbyPatchPtrOutput {
	return i.ToPostgresClusterSpecStandbyPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecStandbyPatchPtrType) ToPostgresClusterSpecStandbyPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecStandbyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecStandbyPatchPtrOutput)
}

// Run this cluster as a read-only copy of an existing cluster or archive.
type PostgresClusterSpecStandbyPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecStandbyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecStandbyPatch)(nil)).Elem()
}

func (o PostgresClusterSpecStandbyPatchOutput) ToPostgresClusterSpecStandbyPatchOutput() PostgresClusterSpecStandbyPatchOutput {
	return o
}

func (o PostgresClusterSpecStandbyPatchOutput) ToPostgresClusterSpecStandbyPatchOutputWithContext(ctx context.Context) PostgresClusterSpecStandbyPatchOutput {
	return o
}

func (o PostgresClusterSpecStandbyPatchOutput) ToPostgresClusterSpecStandbyPatchPtrOutput() PostgresClusterSpecStandbyPatchPtrOutput {
	return o.ToPostgresClusterSpecStandbyPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecStandbyPatchOutput) ToPostgresClusterSpecStandbyPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecStandbyPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecStandbyPatch) *PostgresClusterSpecStandbyPatch {
		return &v
	}).(PostgresClusterSpecStandbyPatchPtrOutput)
}

// Whether or not the PostgreSQL cluster should be read-only. When this is true, WAL files are applied from a pgBackRest repository or another PostgreSQL server.
func (o PostgresClusterSpecStandbyPatchOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecStandbyPatch) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Network address of the PostgreSQL server to follow via streaming replication.
func (o PostgresClusterSpecStandbyPatchOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecStandbyPatch) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Network port of the PostgreSQL server to follow via streaming replication.
func (o PostgresClusterSpecStandbyPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecStandbyPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The name of the pgBackRest repository to follow for WAL files.
func (o PostgresClusterSpecStandbyPatchOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecStandbyPatch) *string { return v.RepoName }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecStandbyPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecStandbyPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecStandbyPatch)(nil)).Elem()
}

func (o PostgresClusterSpecStandbyPatchPtrOutput) ToPostgresClusterSpecStandbyPatchPtrOutput() PostgresClusterSpecStandbyPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecStandbyPatchPtrOutput) ToPostgresClusterSpecStandbyPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecStandbyPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecStandbyPatchPtrOutput) Elem() PostgresClusterSpecStandbyPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecStandbyPatch) PostgresClusterSpecStandbyPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecStandbyPatch
		return ret
	}).(PostgresClusterSpecStandbyPatchOutput)
}

// Whether or not the PostgreSQL cluster should be read-only. When this is true, WAL files are applied from a pgBackRest repository or another PostgreSQL server.
func (o PostgresClusterSpecStandbyPatchPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecStandbyPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Network address of the PostgreSQL server to follow via streaming replication.
func (o PostgresClusterSpecStandbyPatchPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecStandbyPatch) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Network port of the PostgreSQL server to follow via streaming replication.
func (o PostgresClusterSpecStandbyPatchPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecStandbyPatch) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The name of the pgBackRest repository to follow for WAL files.
func (o PostgresClusterSpecStandbyPatchPtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecStandbyPatch) *string {
		if v == nil {
			return nil
		}
		return v.RepoName
	}).(pulumi.StringPtrOutput)
}

// The specification of a user interface that connects to PostgreSQL.
type PostgresClusterSpecUserInterface struct {
	PgAdmin *PostgresClusterSpecUserInterfacePgAdmin `pulumi:"pgAdmin"`
}

// PostgresClusterSpecUserInterfaceInput is an input type that accepts PostgresClusterSpecUserInterfaceArgs and PostgresClusterSpecUserInterfaceOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfaceInput` via:
//
//	PostgresClusterSpecUserInterfaceArgs{...}
type PostgresClusterSpecUserInterfaceInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfaceOutput() PostgresClusterSpecUserInterfaceOutput
	ToPostgresClusterSpecUserInterfaceOutputWithContext(context.Context) PostgresClusterSpecUserInterfaceOutput
}

// The specification of a user interface that connects to PostgreSQL.
type PostgresClusterSpecUserInterfaceArgs struct {
	PgAdmin PostgresClusterSpecUserInterfacePgAdminPtrInput `pulumi:"pgAdmin"`
}

func (PostgresClusterSpecUserInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterface)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfaceArgs) ToPostgresClusterSpecUserInterfaceOutput() PostgresClusterSpecUserInterfaceOutput {
	return i.ToPostgresClusterSpecUserInterfaceOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfaceArgs) ToPostgresClusterSpecUserInterfaceOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfaceOutput)
}

func (i PostgresClusterSpecUserInterfaceArgs) ToPostgresClusterSpecUserInterfacePtrOutput() PostgresClusterSpecUserInterfacePtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfaceArgs) ToPostgresClusterSpecUserInterfacePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfaceOutput).ToPostgresClusterSpecUserInterfacePtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePtrInput is an input type that accepts PostgresClusterSpecUserInterfaceArgs, PostgresClusterSpecUserInterfacePtr and PostgresClusterSpecUserInterfacePtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePtrInput` via:
//
//	        PostgresClusterSpecUserInterfaceArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePtrOutput() PostgresClusterSpecUserInterfacePtrOutput
	ToPostgresClusterSpecUserInterfacePtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePtrOutput
}

type postgresClusterSpecUserInterfacePtrType PostgresClusterSpecUserInterfaceArgs

func PostgresClusterSpecUserInterfacePtr(v *PostgresClusterSpecUserInterfaceArgs) PostgresClusterSpecUserInterfacePtrInput {
	return (*postgresClusterSpecUserInterfacePtrType)(v)
}

func (*postgresClusterSpecUserInterfacePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterface)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePtrType) ToPostgresClusterSpecUserInterfacePtrOutput() PostgresClusterSpecUserInterfacePtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePtrType) ToPostgresClusterSpecUserInterfacePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePtrOutput)
}

// The specification of a user interface that connects to PostgreSQL.
type PostgresClusterSpecUserInterfaceOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterface)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfaceOutput) ToPostgresClusterSpecUserInterfaceOutput() PostgresClusterSpecUserInterfaceOutput {
	return o
}

func (o PostgresClusterSpecUserInterfaceOutput) ToPostgresClusterSpecUserInterfaceOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfaceOutput {
	return o
}

func (o PostgresClusterSpecUserInterfaceOutput) ToPostgresClusterSpecUserInterfacePtrOutput() PostgresClusterSpecUserInterfacePtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfaceOutput) ToPostgresClusterSpecUserInterfacePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterface) *PostgresClusterSpecUserInterface {
		return &v
	}).(PostgresClusterSpecUserInterfacePtrOutput)
}

func (o PostgresClusterSpecUserInterfaceOutput) PgAdmin() PostgresClusterSpecUserInterfacePgAdminPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterface) *PostgresClusterSpecUserInterfacePgAdmin { return v.PgAdmin }).(PostgresClusterSpecUserInterfacePgAdminPtrOutput)
}

type PostgresClusterSpecUserInterfacePtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterface)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePtrOutput) ToPostgresClusterSpecUserInterfacePtrOutput() PostgresClusterSpecUserInterfacePtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePtrOutput) ToPostgresClusterSpecUserInterfacePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePtrOutput) Elem() PostgresClusterSpecUserInterfaceOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterface) PostgresClusterSpecUserInterface {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterface
		return ret
	}).(PostgresClusterSpecUserInterfaceOutput)
}

func (o PostgresClusterSpecUserInterfacePtrOutput) PgAdmin() PostgresClusterSpecUserInterfacePgAdminPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterface) *PostgresClusterSpecUserInterfacePgAdmin {
		if v == nil {
			return nil
		}
		return v.PgAdmin
	}).(PostgresClusterSpecUserInterfacePgAdminPtrOutput)
}

// The specification of a user interface that connects to PostgreSQL.
type PostgresClusterSpecUserInterfacePatch struct {
	PgAdmin *PostgresClusterSpecUserInterfacePgAdminPatch `pulumi:"pgAdmin"`
}

// PostgresClusterSpecUserInterfacePatchInput is an input type that accepts PostgresClusterSpecUserInterfacePatchArgs and PostgresClusterSpecUserInterfacePatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePatchInput` via:
//
//	PostgresClusterSpecUserInterfacePatchArgs{...}
type PostgresClusterSpecUserInterfacePatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePatchOutput() PostgresClusterSpecUserInterfacePatchOutput
	ToPostgresClusterSpecUserInterfacePatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePatchOutput
}

// The specification of a user interface that connects to PostgreSQL.
type PostgresClusterSpecUserInterfacePatchArgs struct {
	PgAdmin PostgresClusterSpecUserInterfacePgAdminPatchPtrInput `pulumi:"pgAdmin"`
}

func (PostgresClusterSpecUserInterfacePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePatchArgs) ToPostgresClusterSpecUserInterfacePatchOutput() PostgresClusterSpecUserInterfacePatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePatchArgs) ToPostgresClusterSpecUserInterfacePatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePatchOutput)
}

func (i PostgresClusterSpecUserInterfacePatchArgs) ToPostgresClusterSpecUserInterfacePatchPtrOutput() PostgresClusterSpecUserInterfacePatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePatchArgs) ToPostgresClusterSpecUserInterfacePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePatchOutput).ToPostgresClusterSpecUserInterfacePatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePatchArgs, PostgresClusterSpecUserInterfacePatchPtr and PostgresClusterSpecUserInterfacePatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePatchPtrOutput() PostgresClusterSpecUserInterfacePatchPtrOutput
	ToPostgresClusterSpecUserInterfacePatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePatchPtrOutput
}

type postgresClusterSpecUserInterfacePatchPtrType PostgresClusterSpecUserInterfacePatchArgs

func PostgresClusterSpecUserInterfacePatchPtr(v *PostgresClusterSpecUserInterfacePatchArgs) PostgresClusterSpecUserInterfacePatchPtrInput {
	return (*postgresClusterSpecUserInterfacePatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePatchPtrType) ToPostgresClusterSpecUserInterfacePatchPtrOutput() PostgresClusterSpecUserInterfacePatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePatchPtrType) ToPostgresClusterSpecUserInterfacePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePatchPtrOutput)
}

// The specification of a user interface that connects to PostgreSQL.
type PostgresClusterSpecUserInterfacePatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePatchOutput) ToPostgresClusterSpecUserInterfacePatchOutput() PostgresClusterSpecUserInterfacePatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePatchOutput) ToPostgresClusterSpecUserInterfacePatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePatchOutput) ToPostgresClusterSpecUserInterfacePatchPtrOutput() PostgresClusterSpecUserInterfacePatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePatchOutput) ToPostgresClusterSpecUserInterfacePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePatch) *PostgresClusterSpecUserInterfacePatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePatchOutput) PgAdmin() PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePatch) *PostgresClusterSpecUserInterfacePgAdminPatch {
		return v.PgAdmin
	}).(PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput)
}

type PostgresClusterSpecUserInterfacePatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePatchPtrOutput) ToPostgresClusterSpecUserInterfacePatchPtrOutput() PostgresClusterSpecUserInterfacePatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePatchPtrOutput) ToPostgresClusterSpecUserInterfacePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePatch) PostgresClusterSpecUserInterfacePatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePatch
		return ret
	}).(PostgresClusterSpecUserInterfacePatchOutput)
}

func (o PostgresClusterSpecUserInterfacePatchPtrOutput) PgAdmin() PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePatch) *PostgresClusterSpecUserInterfacePgAdminPatch {
		if v == nil {
			return nil
		}
		return v.PgAdmin
	}).(PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput)
}

// Defines a pgAdmin user interface.
type PostgresClusterSpecUserInterfacePgAdmin struct {
	Affinity            *PostgresClusterSpecUserInterfacePgAdminAffinity            `pulumi:"affinity"`
	Config              *PostgresClusterSpecUserInterfacePgAdminConfig              `pulumi:"config"`
	DataVolumeClaimSpec *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec `pulumi:"dataVolumeClaimSpec"`
	// Name of a container image that can run pgAdmin 4. Changing this value causes pgAdmin to restart. The image may also be set using the RELATED_IMAGE_PGADMIN environment variable. More info: https://kubernetes.io/docs/concepts/containers/images
	Image    *string                                          `pulumi:"image"`
	Metadata *PostgresClusterSpecUserInterfacePgAdminMetadata `pulumi:"metadata"`
	// Priority class name for the pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
	PriorityClassName *string `pulumi:"priorityClassName"`
	// Number of desired pgAdmin pods.
	Replicas  *int                                              `pulumi:"replicas"`
	Resources *PostgresClusterSpecUserInterfacePgAdminResources `pulumi:"resources"`
	Service   *PostgresClusterSpecUserInterfacePgAdminService   `pulumi:"service"`
	// Tolerations of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
	Tolerations []PostgresClusterSpecUserInterfacePgAdminTolerations `pulumi:"tolerations"`
	// Topology spread constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
	TopologySpreadConstraints []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints `pulumi:"topologySpreadConstraints"`
}

// PostgresClusterSpecUserInterfacePgAdminInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminArgs and PostgresClusterSpecUserInterfacePgAdminOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminArgs{...}
type PostgresClusterSpecUserInterfacePgAdminInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminOutput() PostgresClusterSpecUserInterfacePgAdminOutput
	ToPostgresClusterSpecUserInterfacePgAdminOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminOutput
}

// Defines a pgAdmin user interface.
type PostgresClusterSpecUserInterfacePgAdminArgs struct {
	Affinity            PostgresClusterSpecUserInterfacePgAdminAffinityPtrInput            `pulumi:"affinity"`
	Config              PostgresClusterSpecUserInterfacePgAdminConfigPtrInput              `pulumi:"config"`
	DataVolumeClaimSpec PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrInput `pulumi:"dataVolumeClaimSpec"`
	// Name of a container image that can run pgAdmin 4. Changing this value causes pgAdmin to restart. The image may also be set using the RELATED_IMAGE_PGADMIN environment variable. More info: https://kubernetes.io/docs/concepts/containers/images
	Image    pulumi.StringPtrInput                                   `pulumi:"image"`
	Metadata PostgresClusterSpecUserInterfacePgAdminMetadataPtrInput `pulumi:"metadata"`
	// Priority class name for the pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
	PriorityClassName pulumi.StringPtrInput `pulumi:"priorityClassName"`
	// Number of desired pgAdmin pods.
	Replicas  pulumi.IntPtrInput                                       `pulumi:"replicas"`
	Resources PostgresClusterSpecUserInterfacePgAdminResourcesPtrInput `pulumi:"resources"`
	Service   PostgresClusterSpecUserInterfacePgAdminServicePtrInput   `pulumi:"service"`
	// Tolerations of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
	Tolerations PostgresClusterSpecUserInterfacePgAdminTolerationsArrayInput `pulumi:"tolerations"`
	// Topology spread constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
	TopologySpreadConstraints PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayInput `pulumi:"topologySpreadConstraints"`
}

func (PostgresClusterSpecUserInterfacePgAdminArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdmin)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminArgs) ToPostgresClusterSpecUserInterfacePgAdminOutput() PostgresClusterSpecUserInterfacePgAdminOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminArgs) ToPostgresClusterSpecUserInterfacePgAdminOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminArgs) ToPostgresClusterSpecUserInterfacePgAdminPtrOutput() PostgresClusterSpecUserInterfacePgAdminPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminArgs) ToPostgresClusterSpecUserInterfacePgAdminPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminOutput).ToPostgresClusterSpecUserInterfacePgAdminPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminArgs, PostgresClusterSpecUserInterfacePgAdminPtr and PostgresClusterSpecUserInterfacePgAdminPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminPtrOutput() PostgresClusterSpecUserInterfacePgAdminPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminPtrType PostgresClusterSpecUserInterfacePgAdminArgs

func PostgresClusterSpecUserInterfacePgAdminPtr(v *PostgresClusterSpecUserInterfacePgAdminArgs) PostgresClusterSpecUserInterfacePgAdminPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdmin)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminPtrType) ToPostgresClusterSpecUserInterfacePgAdminPtrOutput() PostgresClusterSpecUserInterfacePgAdminPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminPtrType) ToPostgresClusterSpecUserInterfacePgAdminPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminPtrOutput)
}

// Defines a pgAdmin user interface.
type PostgresClusterSpecUserInterfacePgAdminOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdmin)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminOutput) ToPostgresClusterSpecUserInterfacePgAdminOutput() PostgresClusterSpecUserInterfacePgAdminOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminOutput) ToPostgresClusterSpecUserInterfacePgAdminOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminOutput) ToPostgresClusterSpecUserInterfacePgAdminPtrOutput() PostgresClusterSpecUserInterfacePgAdminPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminOutput) ToPostgresClusterSpecUserInterfacePgAdminPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdmin) *PostgresClusterSpecUserInterfacePgAdmin {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminOutput) Affinity() PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdmin) *PostgresClusterSpecUserInterfacePgAdminAffinity {
		return v.Affinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminOutput) Config() PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdmin) *PostgresClusterSpecUserInterfacePgAdminConfig {
		return v.Config
	}).(PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminOutput) DataVolumeClaimSpec() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdmin) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec {
		return v.DataVolumeClaimSpec
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput)
}

// Name of a container image that can run pgAdmin 4. Changing this value causes pgAdmin to restart. The image may also be set using the RELATED_IMAGE_PGADMIN environment variable. More info: https://kubernetes.io/docs/concepts/containers/images
func (o PostgresClusterSpecUserInterfacePgAdminOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdmin) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminOutput) Metadata() PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdmin) *PostgresClusterSpecUserInterfacePgAdminMetadata {
		return v.Metadata
	}).(PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput)
}

// Priority class name for the pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
func (o PostgresClusterSpecUserInterfacePgAdminOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdmin) *string { return v.PriorityClassName }).(pulumi.StringPtrOutput)
}

// Number of desired pgAdmin pods.
func (o PostgresClusterSpecUserInterfacePgAdminOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdmin) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminOutput) Resources() PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdmin) *PostgresClusterSpecUserInterfacePgAdminResources {
		return v.Resources
	}).(PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminOutput) Service() PostgresClusterSpecUserInterfacePgAdminServicePtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdmin) *PostgresClusterSpecUserInterfacePgAdminService {
		return v.Service
	}).(PostgresClusterSpecUserInterfacePgAdminServicePtrOutput)
}

// Tolerations of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
func (o PostgresClusterSpecUserInterfacePgAdminOutput) Tolerations() PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdmin) []PostgresClusterSpecUserInterfacePgAdminTolerations {
		return v.Tolerations
	}).(PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput)
}

// Topology spread constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
func (o PostgresClusterSpecUserInterfacePgAdminOutput) TopologySpreadConstraints() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdmin) []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints {
		return v.TopologySpreadConstraints
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdmin)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminPtrOutput() PostgresClusterSpecUserInterfacePgAdminPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdmin) PostgresClusterSpecUserInterfacePgAdmin {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdmin
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPtrOutput) Affinity() PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdmin) *PostgresClusterSpecUserInterfacePgAdminAffinity {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPtrOutput) Config() PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdmin) *PostgresClusterSpecUserInterfacePgAdminConfig {
		if v == nil {
			return nil
		}
		return v.Config
	}).(PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPtrOutput) DataVolumeClaimSpec() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdmin) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimSpec
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput)
}

// Name of a container image that can run pgAdmin 4. Changing this value causes pgAdmin to restart. The image may also be set using the RELATED_IMAGE_PGADMIN environment variable. More info: https://kubernetes.io/docs/concepts/containers/images
func (o PostgresClusterSpecUserInterfacePgAdminPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdmin) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPtrOutput) Metadata() PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdmin) *PostgresClusterSpecUserInterfacePgAdminMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput)
}

// Priority class name for the pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
func (o PostgresClusterSpecUserInterfacePgAdminPtrOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdmin) *string {
		if v == nil {
			return nil
		}
		return v.PriorityClassName
	}).(pulumi.StringPtrOutput)
}

// Number of desired pgAdmin pods.
func (o PostgresClusterSpecUserInterfacePgAdminPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdmin) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPtrOutput) Resources() PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdmin) *PostgresClusterSpecUserInterfacePgAdminResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPtrOutput) Service() PostgresClusterSpecUserInterfacePgAdminServicePtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdmin) *PostgresClusterSpecUserInterfacePgAdminService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(PostgresClusterSpecUserInterfacePgAdminServicePtrOutput)
}

// Tolerations of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
func (o PostgresClusterSpecUserInterfacePgAdminPtrOutput) Tolerations() PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdmin) []PostgresClusterSpecUserInterfacePgAdminTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput)
}

// Topology spread constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
func (o PostgresClusterSpecUserInterfacePgAdminPtrOutput) TopologySpreadConstraints() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdmin) []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints {
		if v == nil {
			return nil
		}
		return v.TopologySpreadConstraints
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput)
}

// Scheduling constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
type PostgresClusterSpecUserInterfacePgAdminAffinity struct {
	NodeAffinity    *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity    `pulumi:"nodeAffinity"`
	PodAffinity     *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity     `pulumi:"podAffinity"`
	PodAntiAffinity *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity `pulumi:"podAntiAffinity"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityArgs and PostgresClusterSpecUserInterfacePgAdminAffinityOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityOutput() PostgresClusterSpecUserInterfacePgAdminAffinityOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityOutput
}

// Scheduling constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
type PostgresClusterSpecUserInterfacePgAdminAffinityArgs struct {
	NodeAffinity    PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrInput    `pulumi:"nodeAffinity"`
	PodAffinity     PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrInput     `pulumi:"podAffinity"`
	PodAntiAffinity PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrInput `pulumi:"podAntiAffinity"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinity)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityOutput() PostgresClusterSpecUserInterfacePgAdminAffinityOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPtrType PostgresClusterSpecUserInterfacePgAdminAffinityArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinity)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput)
}

// Scheduling constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
type PostgresClusterSpecUserInterfacePgAdminAffinityOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinity)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityOutput() PostgresClusterSpecUserInterfacePgAdminAffinityOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinity) *PostgresClusterSpecUserInterfacePgAdminAffinity {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityOutput) NodeAffinity() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinity) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity {
		return v.NodeAffinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityOutput) PodAffinity() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinity) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity {
		return v.PodAffinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityOutput) PodAntiAffinity() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinity) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity {
		return v.PodAntiAffinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinity)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinity) PostgresClusterSpecUserInterfacePgAdminAffinity {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinity
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput) NodeAffinity() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinity) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity {
		if v == nil {
			return nil
		}
		return v.NodeAffinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput) PodAffinity() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinity) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity {
		if v == nil {
			return nil
		}
		return v.PodAffinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput) PodAntiAffinity() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinity) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity {
		if v == nil {
			return nil
		}
		return v.PodAntiAffinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput)
}

// Describes node affinity scheduling rules for the pod.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution  *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution   `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput
}

// Describes node affinity scheduling rules for the pod.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution  PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput    `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs, PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtr and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrType PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput)
}

// Describes node affinity scheduling rules for the pod.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput) PreferredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput) RequiredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinity) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput)
}

// Describes node affinity scheduling rules for the pod.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution  *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch   `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput
}

// Describes node affinity scheduling rules for the pod.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution  PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrInput    `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput)
}

// Describes node affinity scheduling rules for the pod.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput) PreferredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput) RequiredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput)
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	Preference *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference `pulumi:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight *int `pulumi:"weight"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs struct {
	Preference PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrInput `pulumi:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray{ PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) Preference() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
		return v.Preference
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput)
}

// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution) *int {
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch struct {
	Preference *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch `pulumi:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight *int `pulumi:"weight"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs struct {
	Preference PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrInput `pulumi:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput)
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput) Preference() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
		return v.Preference
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput)
}

// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch) *int {
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput)
}

// A node selector term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields `pulumi:"matchFields"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput
}

// A node selector term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayInput `pulumi:"matchFields"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs, PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtr and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrType PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput)
}

// A node selector term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput)
}

// A list of node selector requirements by node's labels.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput)
}

// A list of node selector requirements by node's fields.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) MatchFields() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
		return v.MatchFields
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput)
}

// A list of node selector requirements by node's labels.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput)
}

// A list of node selector requirements by node's fields.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput) MatchFields() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
		if v == nil {
			return nil
		}
		return v.MatchFields
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions struct {
	// The label key that the selector applies to.
	Key *string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator *string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray{ PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput {
	return o
}

// The label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch struct {
	// The label key that the selector applies to.
	Key *string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator *string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput {
	return o
}

// The label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields struct {
	// The label key that the selector applies to.
	Key *string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator *string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray{ PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput {
	return o
}

// The label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch struct {
	// The label key that the selector applies to.
	Key *string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator *string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput {
	return o
}

// The label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput)
}

// A node selector term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch `pulumi:"matchFields"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput
}

// A node selector term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayInput `pulumi:"matchFields"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput)
}

// A node selector term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput)
}

// A list of node selector requirements by node's labels.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput)
}

// A list of node selector requirements by node's fields.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput) MatchFields() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
		return v.MatchFields
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput)
}

// A list of node selector requirements by node's labels.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput)
}

// A list of node selector requirements by node's fields.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput) MatchFields() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
		if v == nil {
			return nil
		}
		return v.MatchFields
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms `pulumi:"nodeSelectorTerms"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayInput `pulumi:"nodeSelectorTerms"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs, PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtr and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrType PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput)
}

// Required. A list of node selector terms. The terms are ORed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) NodeSelectorTerms() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
		return v.NodeSelectorTerms
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

// Required. A list of node selector terms. The terms are ORed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput) NodeSelectorTerms() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
		if v == nil {
			return nil
		}
		return v.NodeSelectorTerms
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput)
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields `pulumi:"matchFields"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayInput `pulumi:"matchFields"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray{ PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput)
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput {
	return o
}

// A list of node selector requirements by node's labels.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput)
}

// A list of node selector requirements by node's fields.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput) MatchFields() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
		return v.MatchFields
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions struct {
	// The label key that the selector applies to.
	Key *string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator *string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray{ PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput {
	return o
}

// The label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch struct {
	// The label key that the selector applies to.
	Key *string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator *string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput {
	return o
}

// The label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields struct {
	// The label key that the selector applies to.
	Key *string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator *string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray{ PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput {
	return o
}

// The label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch struct {
	// The label key that the selector applies to.
	Key *string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator *string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput {
	return o
}

// The label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput)
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch `pulumi:"matchFields"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayInput `pulumi:"matchFields"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput)
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput {
	return o
}

// A list of node selector requirements by node's labels.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput)
}

// A list of node selector requirements by node's fields.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput) MatchFields() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
		return v.MatchFields
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch `pulumi:"nodeSelectorTerms"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayInput `pulumi:"nodeSelectorTerms"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput)
}

// Required. A list of node selector terms. The terms are ORed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) NodeSelectorTerms() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
		return v.NodeSelectorTerms
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch) PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput)
}

// Required. A list of node selector terms. The terms are ORed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput) NodeSelectorTerms() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
		if v == nil {
			return nil
		}
		return v.NodeSelectorTerms
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput)
}

// Scheduling constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
type PostgresClusterSpecUserInterfacePgAdminAffinityPatch struct {
	NodeAffinity    *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch    `pulumi:"nodeAffinity"`
	PodAffinity     *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch     `pulumi:"podAffinity"`
	PodAntiAffinity *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch `pulumi:"podAntiAffinity"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput
}

// Scheduling constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
type PostgresClusterSpecUserInterfacePgAdminAffinityPatchArgs struct {
	NodeAffinity    PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrInput    `pulumi:"nodeAffinity"`
	PodAffinity     PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrInput     `pulumi:"podAffinity"`
	PodAntiAffinity PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrInput `pulumi:"podAntiAffinity"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput)
}

// Scheduling constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
type PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput) NodeAffinity() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch {
		return v.NodeAffinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput) PodAffinity() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch {
		return v.PodAffinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput) PodAntiAffinity() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch {
		return v.PodAntiAffinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPatch) PostgresClusterSpecUserInterfacePgAdminAffinityPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput) NodeAffinity() PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatch {
		if v == nil {
			return nil
		}
		return v.NodeAffinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput) PodAffinity() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch {
		if v == nil {
			return nil
		}
		return v.PodAffinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput) PodAntiAffinity() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch {
		if v == nil {
			return nil
		}
		return v.PodAntiAffinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput) PreferredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput) RequiredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinity) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput) PreferredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput) RequiredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	PodAffinityTerm *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight *int `pulumi:"weight"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs struct {
	PodAffinityTerm PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrInput `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) PodAffinityTerm() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
		return v.PodAffinityTerm
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput)
}

// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution) *int {
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch struct {
	PodAffinityTerm *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight *int `pulumi:"weight"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs struct {
	PodAffinityTerm PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrInput `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput) PodAffinityTerm() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
		return v.PodAffinityTerm
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput)
}

// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch) *int {
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	LabelSelector     *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector     `pulumi:"labelSelector"`
	NamespaceSelector *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey *string `pulumi:"topologyKey"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput
}

// Required. A pod affinity term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs struct {
	LabelSelector     PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput     `pulumi:"labelSelector"`
	NamespaceSelector PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) LabelSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		return v.LabelSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) NamespaceSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
		return v.NamespaceSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *string {
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) LabelSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) NamespaceSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
		if v == nil {
			return nil
		}
		return v.NamespaceSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) []string {
		if v == nil {
			return nil
		}
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *string {
		if v == nil {
			return nil
		}
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch struct {
	LabelSelector     *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch     `pulumi:"labelSelector"`
	NamespaceSelector *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey *string `pulumi:"topologyKey"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput
}

// Required. A pod affinity term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs struct {
	LabelSelector     PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrInput     `pulumi:"labelSelector"`
	NamespaceSelector PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrInput `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) LabelSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
		return v.LabelSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) NamespaceSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
		return v.NamespaceSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) *string {
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) LabelSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) NamespaceSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
		if v == nil {
			return nil
		}
		return v.NamespaceSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) []string {
		if v == nil {
			return nil
		}
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) *string {
		if v == nil {
			return nil
		}
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	LabelSelector     *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector     `pulumi:"labelSelector"`
	NamespaceSelector *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey *string `pulumi:"topologyKey"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs struct {
	LabelSelector     PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput     `pulumi:"labelSelector"`
	NamespaceSelector PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) LabelSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		return v.LabelSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) NamespaceSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
		return v.NamespaceSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution) *string {
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch struct {
	LabelSelector     *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch     `pulumi:"labelSelector"`
	NamespaceSelector *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey *string `pulumi:"topologyKey"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs struct {
	LabelSelector     PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrInput     `pulumi:"labelSelector"`
	NamespaceSelector PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrInput `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) LabelSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
		return v.LabelSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) NamespaceSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
		return v.NamespaceSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch) *string {
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput)
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput)
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput) PreferredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput) RequiredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinity) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput)
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput) PreferredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput)
}

// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput) RequiredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput)
}

// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	PodAffinityTerm *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight *int `pulumi:"weight"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs struct {
	PodAffinityTerm PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrInput `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) PodAffinityTerm() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
		return v.PodAffinityTerm
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput)
}

// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution) *int {
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch struct {
	PodAffinityTerm *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight *int `pulumi:"weight"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs struct {
	PodAffinityTerm PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrInput `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput) PodAffinityTerm() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
		return v.PodAffinityTerm
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput)
}

// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch) *int {
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	LabelSelector     *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector     `pulumi:"labelSelector"`
	NamespaceSelector *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey *string `pulumi:"topologyKey"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput
}

// Required. A pod affinity term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs struct {
	LabelSelector     PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput     `pulumi:"labelSelector"`
	NamespaceSelector PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) LabelSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		return v.LabelSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) NamespaceSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
		return v.NamespaceSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *string {
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) LabelSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) NamespaceSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
		if v == nil {
			return nil
		}
		return v.NamespaceSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) []string {
		if v == nil {
			return nil
		}
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *string {
		if v == nil {
			return nil
		}
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch struct {
	LabelSelector     *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch     `pulumi:"labelSelector"`
	NamespaceSelector *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey *string `pulumi:"topologyKey"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput
}

// Required. A pod affinity term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs struct {
	LabelSelector     PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrInput     `pulumi:"labelSelector"`
	NamespaceSelector PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrInput `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) LabelSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
		return v.LabelSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) NamespaceSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
		return v.NamespaceSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) *string {
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) LabelSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) NamespaceSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
		if v == nil {
			return nil
		}
		return v.NamespaceSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) []string {
		if v == nil {
			return nil
		}
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch) *string {
		if v == nil {
			return nil
		}
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	LabelSelector     *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector     `pulumi:"labelSelector"`
	NamespaceSelector *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey *string `pulumi:"topologyKey"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs struct {
	LabelSelector     PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput     `pulumi:"labelSelector"`
	NamespaceSelector PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) LabelSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		return v.LabelSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) NamespaceSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
		return v.NamespaceSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution) *string {
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput)
}

// A label query over a set of resources, in this case pods.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs, PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtr and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrType PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs

func PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch struct {
	LabelSelector     *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch     `pulumi:"labelSelector"`
	NamespaceSelector *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey *string `pulumi:"topologyKey"`
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs struct {
	LabelSelector     PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrInput     `pulumi:"labelSelector"`
	NamespaceSelector PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrInput `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
}

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArray and PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArray{ PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArray []PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchInput

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArray) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) LabelSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
		return v.LabelSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) NamespaceSelector() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
		return v.NamespaceSelector
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch) *string {
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput)
}

// Configuration settings for the pgAdmin process. Changes to any of these values will be loaded without validation. Be careful, as you may put pgAdmin into an unusable state.
type PostgresClusterSpecUserInterfacePgAdminConfig struct {
	// Files allows the user to mount projected volumes into the pgAdmin container so that files can be referenced by pgAdmin as needed.
	Files            []PostgresClusterSpecUserInterfacePgAdminConfigFiles           `pulumi:"files"`
	LdapBindPassword *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword `pulumi:"ldapBindPassword"`
	// Settings for the pgAdmin server process. Keys should be uppercase and values must be constants. More info: https://www.pgadmin.org/docs/pgadmin4/latest/config_py.html
	Settings map[string]interface{} `pulumi:"settings"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigArgs and PostgresClusterSpecUserInterfacePgAdminConfigOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigOutput() PostgresClusterSpecUserInterfacePgAdminConfigOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigOutput
}

// Configuration settings for the pgAdmin process. Changes to any of these values will be loaded without validation. Be careful, as you may put pgAdmin into an unusable state.
type PostgresClusterSpecUserInterfacePgAdminConfigArgs struct {
	// Files allows the user to mount projected volumes into the pgAdmin container so that files can be referenced by pgAdmin as needed.
	Files            PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayInput          `pulumi:"files"`
	LdapBindPassword PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrInput `pulumi:"ldapBindPassword"`
	// Settings for the pgAdmin server process. Keys should be uppercase and values must be constants. More info: https://www.pgadmin.org/docs/pgadmin4/latest/config_py.html
	Settings pulumi.MapInput `pulumi:"settings"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfig)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigOutput() PostgresClusterSpecUserInterfacePgAdminConfigOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigArgs, PostgresClusterSpecUserInterfacePgAdminConfigPtr and PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigPtrType PostgresClusterSpecUserInterfacePgAdminConfigArgs

func PostgresClusterSpecUserInterfacePgAdminConfigPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigArgs) PostgresClusterSpecUserInterfacePgAdminConfigPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfig)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput)
}

// Configuration settings for the pgAdmin process. Changes to any of these values will be loaded without validation. Be careful, as you may put pgAdmin into an unusable state.
type PostgresClusterSpecUserInterfacePgAdminConfigOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfig)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigOutput() PostgresClusterSpecUserInterfacePgAdminConfigOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfig) *PostgresClusterSpecUserInterfacePgAdminConfig {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput)
}

// Files allows the user to mount projected volumes into the pgAdmin container so that files can be referenced by pgAdmin as needed.
func (o PostgresClusterSpecUserInterfacePgAdminConfigOutput) Files() PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfig) []PostgresClusterSpecUserInterfacePgAdminConfigFiles {
		return v.Files
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigOutput) LdapBindPassword() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfig) *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword {
		return v.LdapBindPassword
	}).(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput)
}

// Settings for the pgAdmin server process. Keys should be uppercase and values must be constants. More info: https://www.pgadmin.org/docs/pgadmin4/latest/config_py.html
func (o PostgresClusterSpecUserInterfacePgAdminConfigOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfig) map[string]interface{} { return v.Settings }).(pulumi.MapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfig)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfig) PostgresClusterSpecUserInterfacePgAdminConfig {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfig
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigOutput)
}

// Files allows the user to mount projected volumes into the pgAdmin container so that files can be referenced by pgAdmin as needed.
func (o PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput) Files() PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfig) []PostgresClusterSpecUserInterfacePgAdminConfigFiles {
		if v == nil {
			return nil
		}
		return v.Files
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput) LdapBindPassword() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfig) *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword {
		if v == nil {
			return nil
		}
		return v.LdapBindPassword
	}).(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput)
}

// Settings for the pgAdmin server process. Keys should be uppercase and values must be constants. More info: https://www.pgadmin.org/docs/pgadmin4/latest/config_py.html
func (o PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfig) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.MapOutput)
}

// Projection that may be projected along with other supported volume types
type PostgresClusterSpecUserInterfacePgAdminConfigFiles struct {
	ConfigMap           *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap           `pulumi:"configMap"`
	DownwardAPI         *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPI         `pulumi:"downwardAPI"`
	Secret              *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret              `pulumi:"secret"`
	ServiceAccountToken *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken `pulumi:"serviceAccountToken"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput
}

// Projection that may be projected along with other supported volume types
type PostgresClusterSpecUserInterfacePgAdminConfigFilesArgs struct {
	ConfigMap           PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrInput           `pulumi:"configMap"`
	DownwardAPI         PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrInput         `pulumi:"downwardAPI"`
	Secret              PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrInput              `pulumi:"secret"`
	ServiceAccountToken PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrInput `pulumi:"serviceAccountToken"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFiles)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesArray and PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesArray{ PostgresClusterSpecUserInterfacePgAdminConfigFilesArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesArray []PostgresClusterSpecUserInterfacePgAdminConfigFilesInput

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFiles)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput)
}

// Projection that may be projected along with other supported volume types
type PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFiles)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput) ConfigMap() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFiles) *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap {
		return v.ConfigMap
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput) DownwardAPI() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFiles) *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPI {
		return v.DownwardAPI
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput) Secret() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFiles) *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret {
		return v.Secret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput) ServiceAccountToken() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFiles) *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken {
		return v.ServiceAccountToken
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFiles)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminConfigFiles {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminConfigFiles)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput)
}

// configMap information about the configMap data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap struct {
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItems `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `pulumi:"optional"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap and PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap{ "key": PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput
}

// configMap information about the configMap data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapArgs struct {
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapArgs, PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtr and PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrType PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapArgs

func PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapArgs) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput)
}

// configMap information about the configMap data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap) *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput) Items() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap) []PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItems {
		return v.Items
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput) Items() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap) []PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMap) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Maps a string key to a path within a volume.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItems struct {
	// key is the key to project.
	Key *string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path *string `pulumi:"path"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput
}

// Maps a string key to a path within a volume.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArgs struct {
	// key is the key to project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItems)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArray and PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArray{ PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArray []PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsInput

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItems)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItems)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput {
	return o
}

// key is the key to project.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItems) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItems) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItems)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItems {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItems)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput)
}

// Maps a string key to a path within a volume.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatch struct {
	// key is the key to project.
	Key *string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path *string `pulumi:"path"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput
}

// Maps a string key to a path within a volume.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArgs struct {
	// key is the key to project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArray and PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArray{ PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArray []PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput)
}

// Maps a string key to a path within a volume.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput {
	return o
}

// key is the key to project.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatch) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput)
}

// configMap information about the configMap data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch struct {
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatch `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `pulumi:"optional"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput
}

// configMap information about the configMap data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchArgs struct {
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchArgs, PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtr and PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrType PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchArgs

func PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchArgs) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput)
}

// configMap information about the configMap data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch) *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput) Items() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch) []PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatch {
		return v.Items
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch) PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput) Items() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch) []PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatch {
		if v == nil {
			return nil
		}
		return v.Items
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// downwardAPI information about the downwardAPI data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPI struct {
	// Items is a list of DownwardAPIVolume file
	Items []PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItems `pulumi:"items"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput
}

// downwardAPI information about the downwardAPI data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs struct {
	// Items is a list of DownwardAPIVolume file
	Items PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayInput `pulumi:"items"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPI)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs, PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtr and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrType PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs

func PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPI)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput)
}

// downwardAPI information about the downwardAPI data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPI)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPI) *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPI {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput)
}

// Items is a list of DownwardAPIVolume file
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput) Items() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPI) []PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItems {
		return v.Items
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPI)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPI) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPI {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPI
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput)
}

// Items is a list of DownwardAPIVolume file
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput) Items() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPI) []PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItems struct {
	FieldRef *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path             *string                                                                             `pulumi:"path"`
	ResourceFieldRef *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef `pulumi:"resourceFieldRef"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArgs struct {
	FieldRef PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrInput `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path             pulumi.StringPtrInput                                                                      `pulumi:"path"`
	ResourceFieldRef PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItems)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArray and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArray{ PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArray []PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsInput

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItems)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItems)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput) FieldRef() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItems) *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef {
		return v.FieldRef
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput)
}

// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItems) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput) ResourceFieldRef() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItems) *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef {
		return v.ResourceFieldRef
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItems)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItems {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItems)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath *string `pulumi:"fieldPath"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs, PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtr and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrType PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs

func PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef) *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef) *string {
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef) *string {
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath *string `pulumi:"fieldPath"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchArgs, PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtr and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrType PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchArgs

func PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchArgs) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch) *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch) *string {
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch) *string {
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatch struct {
	FieldRef *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path             *string                                                                                  `pulumi:"path"`
	ResourceFieldRef *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch `pulumi:"resourceFieldRef"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArgs struct {
	FieldRef PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrInput `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path             pulumi.StringPtrInput                                                                           `pulumi:"path"`
	ResourceFieldRef PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrInput `pulumi:"resourceFieldRef"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArray and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArray{ PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArray []PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput) FieldRef() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatch) *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatch {
		return v.FieldRef
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput)
}

// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatch) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput) ResourceFieldRef() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatch) *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch {
		return v.ResourceFieldRef
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor interface{} `pulumi:"divisor"`
	// Required: resource to select
	Resource *string `pulumi:"resource"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.Input `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringPtrInput `pulumi:"resource"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs, PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtr and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrType PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs

func PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef) *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef) *string {
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef) interface{} {
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef) *string {
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef) interface{} {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor interface{} `pulumi:"divisor"`
	// Required: resource to select
	Resource *string `pulumi:"resource"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.Input `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringPtrInput `pulumi:"resource"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchArgs, PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtr and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrType PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchArgs

func PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchArgs) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch) *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch) *string {
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch) interface{} {
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch) *string {
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput)
}

// Container name: required for volumes, optional for env vars
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch) interface{} {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// downwardAPI information about the downwardAPI data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatch struct {
	// Items is a list of DownwardAPIVolume file
	Items []PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatch `pulumi:"items"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput
}

// downwardAPI information about the downwardAPI data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchArgs struct {
	// Items is a list of DownwardAPIVolume file
	Items PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayInput `pulumi:"items"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchArgs, PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtr and PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrType PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchArgs

func PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchArgs) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput)
}

// downwardAPI information about the downwardAPI data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatch) *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput)
}

// Items is a list of DownwardAPIVolume file
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput) Items() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatch) []PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatch {
		return v.Items
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatch) PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput)
}

// Items is a list of DownwardAPIVolume file
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput) Items() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatch) []PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatch {
		if v == nil {
			return nil
		}
		return v.Items
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput)
}

// Projection that may be projected along with other supported volume types
type PostgresClusterSpecUserInterfacePgAdminConfigFilesPatch struct {
	ConfigMap           *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch           `pulumi:"configMap"`
	DownwardAPI         *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatch         `pulumi:"downwardAPI"`
	Secret              *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch              `pulumi:"secret"`
	ServiceAccountToken *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch `pulumi:"serviceAccountToken"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput
}

// Projection that may be projected along with other supported volume types
type PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArgs struct {
	ConfigMap           PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrInput           `pulumi:"configMap"`
	DownwardAPI         PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrInput         `pulumi:"downwardAPI"`
	Secret              PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrInput              `pulumi:"secret"`
	ServiceAccountToken PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrInput `pulumi:"serviceAccountToken"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArray and PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArray{ PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArray []PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchInput

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFilesPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput)
}

// Projection that may be projected along with other supported volume types
type PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput) ConfigMap() PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesPatch) *PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatch {
		return v.ConfigMap
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput) DownwardAPI() PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesPatch) *PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatch {
		return v.DownwardAPI
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput) Secret() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesPatch) *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch {
		return v.Secret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput) ServiceAccountToken() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesPatch) *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch {
		return v.ServiceAccountToken
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFilesPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminConfigFilesPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminConfigFilesPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput)
}

// secret information about the secret data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret struct {
	// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItems `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional field specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput
}

// secret information about the secret data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs struct {
	// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional field specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs, PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtr and PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrType PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs

func PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput)
}

// secret information about the secret data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret) *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput) Items() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret) []PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItems {
		return v.Items
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional field specify whether the Secret or its key must be defined
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput) Items() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret) []PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional field specify whether the Secret or its key must be defined
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecret) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Maps a string key to a path within a volume.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItems struct {
	// key is the key to project.
	Key *string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path *string `pulumi:"path"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput
}

// Maps a string key to a path within a volume.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArgs struct {
	// key is the key to project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItems)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArray and PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArray{ PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArray []PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsInput

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItems)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItems)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput {
	return o
}

// key is the key to project.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItems) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItems) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItems)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItems {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItems)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput)
}

// Maps a string key to a path within a volume.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatch struct {
	// key is the key to project.
	Key *string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path *string `pulumi:"path"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput
}

// Maps a string key to a path within a volume.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArgs struct {
	// key is the key to project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArray and PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArray{ PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArray []PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput)
}

// Maps a string key to a path within a volume.
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput {
	return o
}

// key is the key to project.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatch) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput)
}

// secret information about the secret data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch struct {
	// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatch `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional field specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput
}

// secret information about the secret data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchArgs struct {
	// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional field specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchArgs, PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtr and PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrType PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchArgs

func PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchArgs) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput)
}

// secret information about the secret data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch) *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput) Items() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch) []PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatch {
		return v.Items
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional field specify whether the Secret or its key must be defined
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch) PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput) Items() PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch) []PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatch {
		if v == nil {
			return nil
		}
		return v.Items
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional field specify whether the Secret or its key must be defined
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// serviceAccountToken is information about the serviceAccountToken data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken struct {
	// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
	Audience *string `pulumi:"audience"`
	// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
	ExpirationSeconds *int `pulumi:"expirationSeconds"`
	// path is the path relative to the mount point of the file to project the token into.
	Path *string `pulumi:"path"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput
}

// serviceAccountToken is information about the serviceAccountToken data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs struct {
	// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
	ExpirationSeconds pulumi.IntPtrInput `pulumi:"expirationSeconds"`
	// path is the path relative to the mount point of the file to project the token into.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs, PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtr and PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrType PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs

func PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput)
}

// serviceAccountToken is information about the serviceAccountToken data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken) *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput)
}

// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken) *string {
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken) *int {
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// path is the path relative to the mount point of the file to project the token into.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput)
}

// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// path is the path relative to the mount point of the file to project the token into.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountToken) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// serviceAccountToken is information about the serviceAccountToken data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch struct {
	// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
	Audience *string `pulumi:"audience"`
	// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
	ExpirationSeconds *int `pulumi:"expirationSeconds"`
	// path is the path relative to the mount point of the file to project the token into.
	Path *string `pulumi:"path"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchArgs and PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput
}

// serviceAccountToken is information about the serviceAccountToken data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchArgs struct {
	// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
	ExpirationSeconds pulumi.IntPtrInput `pulumi:"expirationSeconds"`
	// path is the path relative to the mount point of the file to project the token into.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchArgs, PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtr and PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrType PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchArgs

func PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchArgs) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput)
}

// serviceAccountToken is information about the serviceAccountToken data to project
type PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch) *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput)
}

// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch) *string {
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch) *int {
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// path is the path relative to the mount point of the file to project the token into.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch) *string {
		return v.Path
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch) PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput)
}

// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// path is the path relative to the mount point of the file to project the token into.
func (o PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// A Secret containing the value for the LDAP_BIND_PASSWORD setting. More info: https://www.pgadmin.org/docs/pgadmin4/latest/ldap.html
type PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key *string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs and PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput
}

// A Secret containing the value for the LDAP_BIND_PASSWORD setting. More info: https://www.pgadmin.org/docs/pgadmin4/latest/ldap.html
type PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs, PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtr and PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrType PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs

func PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput)
}

// A Secret containing the value for the LDAP_BIND_PASSWORD setting. More info: https://www.pgadmin.org/docs/pgadmin4/latest/ldap.html
type PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword) *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPassword) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// A Secret containing the value for the LDAP_BIND_PASSWORD setting. More info: https://www.pgadmin.org/docs/pgadmin4/latest/ldap.html
type PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key *string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchArgs and PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput
}

// A Secret containing the value for the LDAP_BIND_PASSWORD setting. More info: https://www.pgadmin.org/docs/pgadmin4/latest/ldap.html
type PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchArgs, PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtr and PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrType PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchArgs

func PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchArgs) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput)
}

// A Secret containing the value for the LDAP_BIND_PASSWORD setting. More info: https://www.pgadmin.org/docs/pgadmin4/latest/ldap.html
type PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch) *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch) PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Configuration settings for the pgAdmin process. Changes to any of these values will be loaded without validation. Be careful, as you may put pgAdmin into an unusable state.
type PostgresClusterSpecUserInterfacePgAdminConfigPatch struct {
	// Files allows the user to mount projected volumes into the pgAdmin container so that files can be referenced by pgAdmin as needed.
	Files            []PostgresClusterSpecUserInterfacePgAdminConfigFilesPatch           `pulumi:"files"`
	LdapBindPassword *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch `pulumi:"ldapBindPassword"`
	// Settings for the pgAdmin server process. Keys should be uppercase and values must be constants. More info: https://www.pgadmin.org/docs/pgadmin4/latest/config_py.html
	Settings map[string]interface{} `pulumi:"settings"`
}

// PostgresClusterSpecUserInterfacePgAdminConfigPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigPatchArgs and PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminConfigPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminConfigPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput
}

// Configuration settings for the pgAdmin process. Changes to any of these values will be loaded without validation. Be careful, as you may put pgAdmin into an unusable state.
type PostgresClusterSpecUserInterfacePgAdminConfigPatchArgs struct {
	// Files allows the user to mount projected volumes into the pgAdmin container so that files can be referenced by pgAdmin as needed.
	Files            PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayInput          `pulumi:"files"`
	LdapBindPassword PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrInput `pulumi:"ldapBindPassword"`
	// Settings for the pgAdmin server process. Keys should be uppercase and values must be constants. More info: https://www.pgadmin.org/docs/pgadmin4/latest/config_py.html
	Settings pulumi.MapInput `pulumi:"settings"`
}

func (PostgresClusterSpecUserInterfacePgAdminConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminConfigPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminConfigPatchArgs, PostgresClusterSpecUserInterfacePgAdminConfigPatchPtr and PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminConfigPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminConfigPatchPtrType PostgresClusterSpecUserInterfacePgAdminConfigPatchArgs

func PostgresClusterSpecUserInterfacePgAdminConfigPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminConfigPatchArgs) PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminConfigPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminConfigPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminConfigPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput)
}

// Configuration settings for the pgAdmin process. Changes to any of these values will be loaded without validation. Be careful, as you may put pgAdmin into an unusable state.
type PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigPatchOutput() PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminConfigPatch) *PostgresClusterSpecUserInterfacePgAdminConfigPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput)
}

// Files allows the user to mount projected volumes into the pgAdmin container so that files can be referenced by pgAdmin as needed.
func (o PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput) Files() PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigPatch) []PostgresClusterSpecUserInterfacePgAdminConfigFilesPatch {
		return v.Files
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput) LdapBindPassword() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigPatch) *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch {
		return v.LdapBindPassword
	}).(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput)
}

// Settings for the pgAdmin server process. Keys should be uppercase and values must be constants. More info: https://www.pgadmin.org/docs/pgadmin4/latest/config_py.html
func (o PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminConfigPatch) map[string]interface{} { return v.Settings }).(pulumi.MapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminConfigPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigPatch) PostgresClusterSpecUserInterfacePgAdminConfigPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminConfigPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput)
}

// Files allows the user to mount projected volumes into the pgAdmin container so that files can be referenced by pgAdmin as needed.
func (o PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput) Files() PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigPatch) []PostgresClusterSpecUserInterfacePgAdminConfigFilesPatch {
		if v == nil {
			return nil
		}
		return v.Files
	}).(PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput) LdapBindPassword() PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigPatch) *PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatch {
		if v == nil {
			return nil
		}
		return v.LdapBindPassword
	}).(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput)
}

// Settings for the pgAdmin server process. Keys should be uppercase and values must be constants. More info: https://www.pgadmin.org/docs/pgadmin4/latest/config_py.html
func (o PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminConfigPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.MapOutput)
}

// Defines a PersistentVolumeClaim for pgAdmin data. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec struct {
	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   []string                                                                 `pulumi:"accessModes"`
	DataSource    *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource    `pulumi:"dataSource"`
	DataSourceRef *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef `pulumi:"dataSourceRef"`
	Resources     *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources     `pulumi:"resources"`
	Selector      *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs{...}
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput
}

// Defines a PersistentVolumeClaim for pgAdmin data. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs struct {
	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   pulumi.StringArrayInput                                                         `pulumi:"accessModes"`
	DataSource    PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrInput    `pulumi:"dataSource"`
	DataSourceRef PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrInput `pulumi:"dataSourceRef"`
	Resources     PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrInput     `pulumi:"resources"`
	Selector      PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrInput      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput).ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs, PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtr and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrType PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs

func PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtr(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput)
}

// Defines a PersistentVolumeClaim for pgAdmin data. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput)
}

// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput) DataSource() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource {
		return v.DataSource
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput) DataSourceRef() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef {
		return v.DataSourceRef
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput) Resources() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources {
		return v.Resources
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput) Selector() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector {
		return v.Selector
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput)
}

// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput) DataSource() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput) DataSourceRef() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput) Resources() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput) Selector() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs{...}
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput).ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs, PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtr and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput
}

type postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrType PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs

func PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtr(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource) *string {
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchArgs and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput).ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchArgs, PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtr and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrType PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchArgs

func PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtr(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchArgs) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch) *string {
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch) *string {
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefArgs and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefArgs{...}
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput).ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefArgs, PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtr and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrType PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefArgs

func PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtr(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefArgs) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef) *string {
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchArgs and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchArgs, PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtr and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrType PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchArgs

func PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchArgs) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch) *string {
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch) *string {
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Defines a PersistentVolumeClaim for pgAdmin data. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch struct {
	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   []string                                                                      `pulumi:"accessModes"`
	DataSource    *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch    `pulumi:"dataSource"`
	DataSourceRef *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch `pulumi:"dataSourceRef"`
	Resources     *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch     `pulumi:"resources"`
	Selector      *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchArgs and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput
}

// Defines a PersistentVolumeClaim for pgAdmin data. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchArgs struct {
	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   pulumi.StringArrayInput                                                              `pulumi:"accessModes"`
	DataSource    PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrInput    `pulumi:"dataSource"`
	DataSourceRef PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrInput `pulumi:"dataSourceRef"`
	Resources     PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrInput     `pulumi:"resources"`
	Selector      PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrInput      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchArgs, PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtr and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrType PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchArgs

func PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchArgs) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput)
}

// Defines a PersistentVolumeClaim for pgAdmin data. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput)
}

// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput) DataSource() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch {
		return v.DataSource
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput) DataSourceRef() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch {
		return v.DataSourceRef
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput) Resources() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch {
		return v.Resources
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput) Selector() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch {
		return v.Selector
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) *string {
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput)
}

// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput) DataSource() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatch {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput) DataSourceRef() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatch {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput) Resources() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput) Selector() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs{...}
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput).ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs, PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtr and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrType PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs

func PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtr(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources) map[string]interface{} {
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources) map[string]interface{} {
		return v.Requests
	}).(pulumi.MapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchArgs and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchArgs, PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtr and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrType PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchArgs

func PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchArgs) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch) map[string]interface{} {
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch) map[string]interface{} {
		return v.Requests
	}).(pulumi.MapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// selector is a label query over volumes to consider for binding.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs{...}
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput
}

// selector is a label query over volumes to consider for binding.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput).ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs, PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtr and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrType PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs

func PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtr(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput)
}

// selector is a label query over volumes to consider for binding.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector) []PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressions {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector) []PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArgs and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArray and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArray{ PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArray []PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsInput

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressions {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArgs and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArray and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArray{ PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArray []PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput)
}

// selector is a label query over volumes to consider for binding.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchArgs and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput
}

// selector is a label query over volumes to consider for binding.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchArgs, PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtr and PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrType PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchArgs

func PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchArgs) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput)
}

// selector is a label query over volumes to consider for binding.
type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch) PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecUserInterfacePgAdminMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Labels      map[string]string `pulumi:"labels"`
}

// PostgresClusterSpecUserInterfacePgAdminMetadataInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminMetadataArgs and PostgresClusterSpecUserInterfacePgAdminMetadataOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminMetadataInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminMetadataArgs{...}
type PostgresClusterSpecUserInterfacePgAdminMetadataInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminMetadataOutput() PostgresClusterSpecUserInterfacePgAdminMetadataOutput
	ToPostgresClusterSpecUserInterfacePgAdminMetadataOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataOutput
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecUserInterfacePgAdminMetadataArgs struct {
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	Labels      pulumi.StringMapInput `pulumi:"labels"`
}

func (PostgresClusterSpecUserInterfacePgAdminMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminMetadata)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminMetadataArgs) ToPostgresClusterSpecUserInterfacePgAdminMetadataOutput() PostgresClusterSpecUserInterfacePgAdminMetadataOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminMetadataOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminMetadataArgs) ToPostgresClusterSpecUserInterfacePgAdminMetadataOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminMetadataOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminMetadataArgs) ToPostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput() PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminMetadataPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminMetadataArgs) ToPostgresClusterSpecUserInterfacePgAdminMetadataPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminMetadataOutput).ToPostgresClusterSpecUserInterfacePgAdminMetadataPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminMetadataPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminMetadataArgs, PostgresClusterSpecUserInterfacePgAdminMetadataPtr and PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminMetadataPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminMetadataArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminMetadataPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput() PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminMetadataPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminMetadataPtrType PostgresClusterSpecUserInterfacePgAdminMetadataArgs

func PostgresClusterSpecUserInterfacePgAdminMetadataPtr(v *PostgresClusterSpecUserInterfacePgAdminMetadataArgs) PostgresClusterSpecUserInterfacePgAdminMetadataPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminMetadataPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminMetadata)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminMetadataPtrType) ToPostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput() PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminMetadataPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminMetadataPtrType) ToPostgresClusterSpecUserInterfacePgAdminMetadataPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput)
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecUserInterfacePgAdminMetadataOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminMetadata)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataOutput) ToPostgresClusterSpecUserInterfacePgAdminMetadataOutput() PostgresClusterSpecUserInterfacePgAdminMetadataOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataOutput) ToPostgresClusterSpecUserInterfacePgAdminMetadataOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataOutput) ToPostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput() PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminMetadataPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataOutput) ToPostgresClusterSpecUserInterfacePgAdminMetadataPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminMetadata) *PostgresClusterSpecUserInterfacePgAdminMetadata {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminMetadata)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput() PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminMetadataPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminMetadataOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminMetadata) PostgresClusterSpecUserInterfacePgAdminMetadata {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminMetadata
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminMetadataOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecUserInterfacePgAdminMetadataPatch struct {
	Annotations map[string]string `pulumi:"annotations"`
	Labels      map[string]string `pulumi:"labels"`
}

// PostgresClusterSpecUserInterfacePgAdminMetadataPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminMetadataPatchArgs and PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminMetadataPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminMetadataPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminMetadataPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput() PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecUserInterfacePgAdminMetadataPatchArgs struct {
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	Labels      pulumi.StringMapInput `pulumi:"labels"`
}

func (PostgresClusterSpecUserInterfacePgAdminMetadataPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminMetadataPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminMetadataPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput() PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminMetadataPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminMetadataPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminMetadataPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminMetadataPatchArgs, PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtr and PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminMetadataPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminMetadataPatchPtrType PostgresClusterSpecUserInterfacePgAdminMetadataPatchArgs

func PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminMetadataPatchArgs) PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminMetadataPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminMetadataPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminMetadataPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminMetadataPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminMetadataPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput)
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminMetadataPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput() PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminMetadataPatch) *PostgresClusterSpecUserInterfacePgAdminMetadataPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminMetadataPatch) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminMetadataPatch) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminMetadataPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminMetadataPatch) PostgresClusterSpecUserInterfacePgAdminMetadataPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminMetadataPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Defines a pgAdmin user interface.
type PostgresClusterSpecUserInterfacePgAdminPatch struct {
	Affinity            *PostgresClusterSpecUserInterfacePgAdminAffinityPatch            `pulumi:"affinity"`
	Config              *PostgresClusterSpecUserInterfacePgAdminConfigPatch              `pulumi:"config"`
	DataVolumeClaimSpec *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch `pulumi:"dataVolumeClaimSpec"`
	// Name of a container image that can run pgAdmin 4. Changing this value causes pgAdmin to restart. The image may also be set using the RELATED_IMAGE_PGADMIN environment variable. More info: https://kubernetes.io/docs/concepts/containers/images
	Image    *string                                               `pulumi:"image"`
	Metadata *PostgresClusterSpecUserInterfacePgAdminMetadataPatch `pulumi:"metadata"`
	// Priority class name for the pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
	PriorityClassName *string `pulumi:"priorityClassName"`
	// Number of desired pgAdmin pods.
	Replicas  *int                                                   `pulumi:"replicas"`
	Resources *PostgresClusterSpecUserInterfacePgAdminResourcesPatch `pulumi:"resources"`
	Service   *PostgresClusterSpecUserInterfacePgAdminServicePatch   `pulumi:"service"`
	// Tolerations of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
	Tolerations []PostgresClusterSpecUserInterfacePgAdminTolerationsPatch `pulumi:"tolerations"`
	// Topology spread constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
	TopologySpreadConstraints []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch `pulumi:"topologySpreadConstraints"`
}

// PostgresClusterSpecUserInterfacePgAdminPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminPatchArgs and PostgresClusterSpecUserInterfacePgAdminPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminPatchOutput() PostgresClusterSpecUserInterfacePgAdminPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminPatchOutput
}

// Defines a pgAdmin user interface.
type PostgresClusterSpecUserInterfacePgAdminPatchArgs struct {
	Affinity            PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrInput            `pulumi:"affinity"`
	Config              PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrInput              `pulumi:"config"`
	DataVolumeClaimSpec PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrInput `pulumi:"dataVolumeClaimSpec"`
	// Name of a container image that can run pgAdmin 4. Changing this value causes pgAdmin to restart. The image may also be set using the RELATED_IMAGE_PGADMIN environment variable. More info: https://kubernetes.io/docs/concepts/containers/images
	Image    pulumi.StringPtrInput                                        `pulumi:"image"`
	Metadata PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrInput `pulumi:"metadata"`
	// Priority class name for the pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
	PriorityClassName pulumi.StringPtrInput `pulumi:"priorityClassName"`
	// Number of desired pgAdmin pods.
	Replicas  pulumi.IntPtrInput                                            `pulumi:"replicas"`
	Resources PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrInput `pulumi:"resources"`
	Service   PostgresClusterSpecUserInterfacePgAdminServicePatchPtrInput   `pulumi:"service"`
	// Tolerations of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
	Tolerations PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayInput `pulumi:"tolerations"`
	// Topology spread constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
	TopologySpreadConstraints PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayInput `pulumi:"topologySpreadConstraints"`
}

func (PostgresClusterSpecUserInterfacePgAdminPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminPatchOutput() PostgresClusterSpecUserInterfacePgAdminPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminPatchArgs, PostgresClusterSpecUserInterfacePgAdminPatchPtr and PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminPatchPtrType PostgresClusterSpecUserInterfacePgAdminPatchArgs

func PostgresClusterSpecUserInterfacePgAdminPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminPatchArgs) PostgresClusterSpecUserInterfacePgAdminPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput)
}

// Defines a pgAdmin user interface.
type PostgresClusterSpecUserInterfacePgAdminPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminPatchOutput() PostgresClusterSpecUserInterfacePgAdminPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminPatch) *PostgresClusterSpecUserInterfacePgAdminPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchOutput) Affinity() PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPatch {
		return v.Affinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchOutput) Config() PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminPatch) *PostgresClusterSpecUserInterfacePgAdminConfigPatch {
		return v.Config
	}).(PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchOutput) DataVolumeClaimSpec() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminPatch) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch {
		return v.DataVolumeClaimSpec
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput)
}

// Name of a container image that can run pgAdmin 4. Changing this value causes pgAdmin to restart. The image may also be set using the RELATED_IMAGE_PGADMIN environment variable. More info: https://kubernetes.io/docs/concepts/containers/images
func (o PostgresClusterSpecUserInterfacePgAdminPatchOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminPatch) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchOutput) Metadata() PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminPatch) *PostgresClusterSpecUserInterfacePgAdminMetadataPatch {
		return v.Metadata
	}).(PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput)
}

// Priority class name for the pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
func (o PostgresClusterSpecUserInterfacePgAdminPatchOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminPatch) *string { return v.PriorityClassName }).(pulumi.StringPtrOutput)
}

// Number of desired pgAdmin pods.
func (o PostgresClusterSpecUserInterfacePgAdminPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchOutput) Resources() PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminPatch) *PostgresClusterSpecUserInterfacePgAdminResourcesPatch {
		return v.Resources
	}).(PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchOutput) Service() PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminPatch) *PostgresClusterSpecUserInterfacePgAdminServicePatch {
		return v.Service
	}).(PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput)
}

// Tolerations of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
func (o PostgresClusterSpecUserInterfacePgAdminPatchOutput) Tolerations() PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminPatch) []PostgresClusterSpecUserInterfacePgAdminTolerationsPatch {
		return v.Tolerations
	}).(PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput)
}

// Topology spread constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
func (o PostgresClusterSpecUserInterfacePgAdminPatchOutput) TopologySpreadConstraints() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminPatch) []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch {
		return v.TopologySpreadConstraints
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminPatch) PostgresClusterSpecUserInterfacePgAdminPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminPatchOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput) Affinity() PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminPatch) *PostgresClusterSpecUserInterfacePgAdminAffinityPatch {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput) Config() PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminPatch) *PostgresClusterSpecUserInterfacePgAdminConfigPatch {
		if v == nil {
			return nil
		}
		return v.Config
	}).(PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput) DataVolumeClaimSpec() PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminPatch) *PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatch {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimSpec
	}).(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput)
}

// Name of a container image that can run pgAdmin 4. Changing this value causes pgAdmin to restart. The image may also be set using the RELATED_IMAGE_PGADMIN environment variable. More info: https://kubernetes.io/docs/concepts/containers/images
func (o PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminPatch) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput) Metadata() PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminPatch) *PostgresClusterSpecUserInterfacePgAdminMetadataPatch {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput)
}

// Priority class name for the pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
func (o PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminPatch) *string {
		if v == nil {
			return nil
		}
		return v.PriorityClassName
	}).(pulumi.StringPtrOutput)
}

// Number of desired pgAdmin pods.
func (o PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput) Resources() PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminPatch) *PostgresClusterSpecUserInterfacePgAdminResourcesPatch {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput) Service() PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminPatch) *PostgresClusterSpecUserInterfacePgAdminServicePatch {
		if v == nil {
			return nil
		}
		return v.Service
	}).(PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput)
}

// Tolerations of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
func (o PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput) Tolerations() PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminPatch) []PostgresClusterSpecUserInterfacePgAdminTolerationsPatch {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput)
}

// Topology spread constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
func (o PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput) TopologySpreadConstraints() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminPatch) []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch {
		if v == nil {
			return nil
		}
		return v.TopologySpreadConstraints
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput)
}

// Compute resources of a pgAdmin container. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
type PostgresClusterSpecUserInterfacePgAdminResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// PostgresClusterSpecUserInterfacePgAdminResourcesInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminResourcesArgs and PostgresClusterSpecUserInterfacePgAdminResourcesOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminResourcesInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminResourcesArgs{...}
type PostgresClusterSpecUserInterfacePgAdminResourcesInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminResourcesOutput() PostgresClusterSpecUserInterfacePgAdminResourcesOutput
	ToPostgresClusterSpecUserInterfacePgAdminResourcesOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesOutput
}

// Compute resources of a pgAdmin container. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
type PostgresClusterSpecUserInterfacePgAdminResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (PostgresClusterSpecUserInterfacePgAdminResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminResources)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminResourcesArgs) ToPostgresClusterSpecUserInterfacePgAdminResourcesOutput() PostgresClusterSpecUserInterfacePgAdminResourcesOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminResourcesOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminResourcesArgs) ToPostgresClusterSpecUserInterfacePgAdminResourcesOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminResourcesOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminResourcesArgs) ToPostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput() PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminResourcesPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminResourcesArgs) ToPostgresClusterSpecUserInterfacePgAdminResourcesPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminResourcesOutput).ToPostgresClusterSpecUserInterfacePgAdminResourcesPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminResourcesPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminResourcesArgs, PostgresClusterSpecUserInterfacePgAdminResourcesPtr and PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminResourcesPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminResourcesArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminResourcesPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput() PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminResourcesPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminResourcesPtrType PostgresClusterSpecUserInterfacePgAdminResourcesArgs

func PostgresClusterSpecUserInterfacePgAdminResourcesPtr(v *PostgresClusterSpecUserInterfacePgAdminResourcesArgs) PostgresClusterSpecUserInterfacePgAdminResourcesPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminResourcesPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminResources)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminResourcesPtrType) ToPostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput() PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminResourcesPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminResourcesPtrType) ToPostgresClusterSpecUserInterfacePgAdminResourcesPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput)
}

// Compute resources of a pgAdmin container. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
type PostgresClusterSpecUserInterfacePgAdminResourcesOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminResources)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminResourcesOutput) ToPostgresClusterSpecUserInterfacePgAdminResourcesOutput() PostgresClusterSpecUserInterfacePgAdminResourcesOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminResourcesOutput) ToPostgresClusterSpecUserInterfacePgAdminResourcesOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminResourcesOutput) ToPostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput() PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminResourcesPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminResourcesOutput) ToPostgresClusterSpecUserInterfacePgAdminResourcesPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminResources) *PostgresClusterSpecUserInterfacePgAdminResources {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminResourcesOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminResources) map[string]interface{} { return v.Limits }).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminResourcesOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminResources) map[string]interface{} { return v.Requests }).(pulumi.MapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminResources)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput() PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminResourcesPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminResourcesOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminResources) PostgresClusterSpecUserInterfacePgAdminResources {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminResources
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// Compute resources of a pgAdmin container. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
type PostgresClusterSpecUserInterfacePgAdminResourcesPatch struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// PostgresClusterSpecUserInterfacePgAdminResourcesPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminResourcesPatchArgs and PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminResourcesPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminResourcesPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminResourcesPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput() PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput
}

// Compute resources of a pgAdmin container. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
type PostgresClusterSpecUserInterfacePgAdminResourcesPatchArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (PostgresClusterSpecUserInterfacePgAdminResourcesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminResourcesPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminResourcesPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput() PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminResourcesPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminResourcesPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminResourcesPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminResourcesPatchArgs, PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtr and PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminResourcesPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminResourcesPatchPtrType PostgresClusterSpecUserInterfacePgAdminResourcesPatchArgs

func PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminResourcesPatchArgs) PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminResourcesPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminResourcesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminResourcesPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminResourcesPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminResourcesPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput)
}

// Compute resources of a pgAdmin container. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
type PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminResourcesPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput() PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminResourcesPatch) *PostgresClusterSpecUserInterfacePgAdminResourcesPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminResourcesPatch) map[string]interface{} { return v.Limits }).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminResourcesPatch) map[string]interface{} {
		return v.Requests
	}).(pulumi.MapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminResourcesPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminResourcesPatch) PostgresClusterSpecUserInterfacePgAdminResourcesPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminResourcesPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// Specification of the service that exposes pgAdmin.
type PostgresClusterSpecUserInterfacePgAdminService struct {
	Metadata *PostgresClusterSpecUserInterfacePgAdminServiceMetadata `pulumi:"metadata"`
	// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// PostgresClusterSpecUserInterfacePgAdminServiceInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminServiceArgs and PostgresClusterSpecUserInterfacePgAdminServiceOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminServiceInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminServiceArgs{...}
type PostgresClusterSpecUserInterfacePgAdminServiceInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminServiceOutput() PostgresClusterSpecUserInterfacePgAdminServiceOutput
	ToPostgresClusterSpecUserInterfacePgAdminServiceOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminServiceOutput
}

// Specification of the service that exposes pgAdmin.
type PostgresClusterSpecUserInterfacePgAdminServiceArgs struct {
	Metadata PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrInput `pulumi:"metadata"`
	// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PostgresClusterSpecUserInterfacePgAdminServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminService)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminServiceArgs) ToPostgresClusterSpecUserInterfacePgAdminServiceOutput() PostgresClusterSpecUserInterfacePgAdminServiceOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminServiceOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminServiceArgs) ToPostgresClusterSpecUserInterfacePgAdminServiceOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminServiceOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminServiceArgs) ToPostgresClusterSpecUserInterfacePgAdminServicePtrOutput() PostgresClusterSpecUserInterfacePgAdminServicePtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminServicePtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminServiceArgs) ToPostgresClusterSpecUserInterfacePgAdminServicePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminServiceOutput).ToPostgresClusterSpecUserInterfacePgAdminServicePtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminServicePtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminServiceArgs, PostgresClusterSpecUserInterfacePgAdminServicePtr and PostgresClusterSpecUserInterfacePgAdminServicePtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminServicePtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminServiceArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminServicePtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminServicePtrOutput() PostgresClusterSpecUserInterfacePgAdminServicePtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminServicePtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminServicePtrOutput
}

type postgresClusterSpecUserInterfacePgAdminServicePtrType PostgresClusterSpecUserInterfacePgAdminServiceArgs

func PostgresClusterSpecUserInterfacePgAdminServicePtr(v *PostgresClusterSpecUserInterfacePgAdminServiceArgs) PostgresClusterSpecUserInterfacePgAdminServicePtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminServicePtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminService)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminServicePtrType) ToPostgresClusterSpecUserInterfacePgAdminServicePtrOutput() PostgresClusterSpecUserInterfacePgAdminServicePtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminServicePtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminServicePtrType) ToPostgresClusterSpecUserInterfacePgAdminServicePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminServicePtrOutput)
}

// Specification of the service that exposes pgAdmin.
type PostgresClusterSpecUserInterfacePgAdminServiceOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminService)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceOutput) ToPostgresClusterSpecUserInterfacePgAdminServiceOutput() PostgresClusterSpecUserInterfacePgAdminServiceOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceOutput) ToPostgresClusterSpecUserInterfacePgAdminServiceOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServiceOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceOutput) ToPostgresClusterSpecUserInterfacePgAdminServicePtrOutput() PostgresClusterSpecUserInterfacePgAdminServicePtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminServicePtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceOutput) ToPostgresClusterSpecUserInterfacePgAdminServicePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminService) *PostgresClusterSpecUserInterfacePgAdminService {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminServicePtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceOutput) Metadata() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminService) *PostgresClusterSpecUserInterfacePgAdminServiceMetadata {
		return v.Metadata
	}).(PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput)
}

// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o PostgresClusterSpecUserInterfacePgAdminServiceOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminService) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o PostgresClusterSpecUserInterfacePgAdminServiceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminService) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminServicePtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminService)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminServicePtrOutput) ToPostgresClusterSpecUserInterfacePgAdminServicePtrOutput() PostgresClusterSpecUserInterfacePgAdminServicePtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServicePtrOutput) ToPostgresClusterSpecUserInterfacePgAdminServicePtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServicePtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServicePtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminServiceOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminService) PostgresClusterSpecUserInterfacePgAdminService {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminService
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminServiceOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminServicePtrOutput) Metadata() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminService) *PostgresClusterSpecUserInterfacePgAdminServiceMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput)
}

// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o PostgresClusterSpecUserInterfacePgAdminServicePtrOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminService) *int {
		if v == nil {
			return nil
		}
		return v.NodePort
	}).(pulumi.IntPtrOutput)
}

// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o PostgresClusterSpecUserInterfacePgAdminServicePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminService) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecUserInterfacePgAdminServiceMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Labels      map[string]string `pulumi:"labels"`
}

// PostgresClusterSpecUserInterfacePgAdminServiceMetadataInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminServiceMetadataArgs and PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminServiceMetadataInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminServiceMetadataArgs{...}
type PostgresClusterSpecUserInterfacePgAdminServiceMetadataInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput
	ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecUserInterfacePgAdminServiceMetadataArgs struct {
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	Labels      pulumi.StringMapInput `pulumi:"labels"`
}

func (PostgresClusterSpecUserInterfacePgAdminServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminServiceMetadata)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminServiceMetadataArgs) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminServiceMetadataArgs) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminServiceMetadataArgs) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminServiceMetadataArgs) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput).ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminServiceMetadataArgs, PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtr and PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminServiceMetadataArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminServiceMetadataPtrType PostgresClusterSpecUserInterfacePgAdminServiceMetadataArgs

func PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtr(v *PostgresClusterSpecUserInterfacePgAdminServiceMetadataArgs) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminServiceMetadataPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminServiceMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminServiceMetadata)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminServiceMetadataPtrType) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminServiceMetadataPtrType) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput)
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminServiceMetadata)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminServiceMetadata) *PostgresClusterSpecUserInterfacePgAdminServiceMetadata {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminServiceMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminServiceMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminServiceMetadata)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminServiceMetadata) PostgresClusterSpecUserInterfacePgAdminServiceMetadata {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminServiceMetadata
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch struct {
	Annotations map[string]string `pulumi:"annotations"`
	Labels      map[string]string `pulumi:"labels"`
}

// PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchArgs and PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchArgs struct {
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	Labels      pulumi.StringMapInput `pulumi:"labels"`
}

func (PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchArgs, PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtr and PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrType PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchArgs

func PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchArgs) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput)
}

// Metadata contains metadata for PostgresCluster resources
type PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch) *PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch) map[string]string {
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch) PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Specification of the service that exposes pgAdmin.
type PostgresClusterSpecUserInterfacePgAdminServicePatch struct {
	Metadata *PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch `pulumi:"metadata"`
	// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// PostgresClusterSpecUserInterfacePgAdminServicePatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminServicePatchArgs and PostgresClusterSpecUserInterfacePgAdminServicePatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminServicePatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminServicePatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminServicePatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminServicePatchOutput() PostgresClusterSpecUserInterfacePgAdminServicePatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminServicePatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminServicePatchOutput
}

// Specification of the service that exposes pgAdmin.
type PostgresClusterSpecUserInterfacePgAdminServicePatchArgs struct {
	Metadata PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrInput `pulumi:"metadata"`
	// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PostgresClusterSpecUserInterfacePgAdminServicePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminServicePatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminServicePatchArgs) ToPostgresClusterSpecUserInterfacePgAdminServicePatchOutput() PostgresClusterSpecUserInterfacePgAdminServicePatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminServicePatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminServicePatchArgs) ToPostgresClusterSpecUserInterfacePgAdminServicePatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServicePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminServicePatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminServicePatchArgs) ToPostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminServicePatchArgs) ToPostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminServicePatchOutput).ToPostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminServicePatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminServicePatchArgs, PostgresClusterSpecUserInterfacePgAdminServicePatchPtr and PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminServicePatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminServicePatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminServicePatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminServicePatchPtrType PostgresClusterSpecUserInterfacePgAdminServicePatchArgs

func PostgresClusterSpecUserInterfacePgAdminServicePatchPtr(v *PostgresClusterSpecUserInterfacePgAdminServicePatchArgs) PostgresClusterSpecUserInterfacePgAdminServicePatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminServicePatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminServicePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminServicePatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminServicePatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminServicePatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput)
}

// Specification of the service that exposes pgAdmin.
type PostgresClusterSpecUserInterfacePgAdminServicePatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminServicePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminServicePatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminServicePatchOutput) ToPostgresClusterSpecUserInterfacePgAdminServicePatchOutput() PostgresClusterSpecUserInterfacePgAdminServicePatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServicePatchOutput) ToPostgresClusterSpecUserInterfacePgAdminServicePatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServicePatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServicePatchOutput) ToPostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminServicePatchOutput) ToPostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminServicePatch) *PostgresClusterSpecUserInterfacePgAdminServicePatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminServicePatchOutput) Metadata() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminServicePatch) *PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch {
		return v.Metadata
	}).(PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput)
}

// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o PostgresClusterSpecUserInterfacePgAdminServicePatchOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminServicePatch) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o PostgresClusterSpecUserInterfacePgAdminServicePatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminServicePatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminServicePatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminServicePatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminServicePatch) PostgresClusterSpecUserInterfacePgAdminServicePatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminServicePatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminServicePatchOutput)
}

func (o PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput) Metadata() PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminServicePatch) *PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatch {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput)
}

// The port on which this service is exposed when type is NodePort or LoadBalancer. Value must be in-range and not in use or the operation will fail. If unspecified, a port will be allocated if this Service requires one. - https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminServicePatch) *int {
		if v == nil {
			return nil
		}
		return v.NodePort
	}).(pulumi.IntPtrOutput)
}

// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminServicePatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type PostgresClusterSpecUserInterfacePgAdminTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// PostgresClusterSpecUserInterfacePgAdminTolerationsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTolerationsArgs and PostgresClusterSpecUserInterfacePgAdminTolerationsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTolerationsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminTolerationsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminTolerationsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTolerationsOutput() PostgresClusterSpecUserInterfacePgAdminTolerationsOutput
	ToPostgresClusterSpecUserInterfacePgAdminTolerationsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type PostgresClusterSpecUserInterfacePgAdminTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PostgresClusterSpecUserInterfacePgAdminTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTolerations)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminTolerationsArgs) ToPostgresClusterSpecUserInterfacePgAdminTolerationsOutput() PostgresClusterSpecUserInterfacePgAdminTolerationsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTolerationsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTolerationsArgs) ToPostgresClusterSpecUserInterfacePgAdminTolerationsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTolerationsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminTolerationsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTolerationsArray and PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTolerationsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminTolerationsArray{ PostgresClusterSpecUserInterfacePgAdminTolerationsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminTolerationsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput() PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminTolerationsArray []PostgresClusterSpecUserInterfacePgAdminTolerationsInput

func (PostgresClusterSpecUserInterfacePgAdminTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminTolerations)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminTolerationsArray) ToPostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput() PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTolerationsArray) ToPostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type PostgresClusterSpecUserInterfacePgAdminTolerationsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTolerations)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTolerationsOutput) ToPostgresClusterSpecUserInterfacePgAdminTolerationsOutput() PostgresClusterSpecUserInterfacePgAdminTolerationsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTolerationsOutput) ToPostgresClusterSpecUserInterfacePgAdminTolerationsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o PostgresClusterSpecUserInterfacePgAdminTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o PostgresClusterSpecUserInterfacePgAdminTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o PostgresClusterSpecUserInterfacePgAdminTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o PostgresClusterSpecUserInterfacePgAdminTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o PostgresClusterSpecUserInterfacePgAdminTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminTolerations)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput() PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminTolerations {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminTolerations)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminTolerationsOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type PostgresClusterSpecUserInterfacePgAdminTolerationsPatch struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// PostgresClusterSpecUserInterfacePgAdminTolerationsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArgs and PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTolerationsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminTolerationsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput() PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTolerationsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput() PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArray and PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArray{ PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArray []PostgresClusterSpecUserInterfacePgAdminTolerationsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminTolerationsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTolerationsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput() PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTolerationsPatch) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTolerationsPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTolerationsPatch) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTolerationsPatch) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTolerationsPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminTolerationsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminTolerationsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminTolerationsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput)
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints struct {
	LabelSelector *PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector `pulumi:"labelSelector"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
	MatchLabelKeys []string `pulumi:"matchLabelKeys"`
	// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew *int `pulumi:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
	//  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
	MinDomains *int `pulumi:"minDomains"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//  If this value is nil, the behavior is equivalent to the Honor policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy *string `pulumi:"nodeAffinityPolicy"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
	//  If this value is nil, the behavior is equivalent to the Ignore policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy *string `pulumi:"nodeTaintsPolicy"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
	TopologyKey *string `pulumi:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
	WhenUnsatisfiable *string `pulumi:"whenUnsatisfiable"`
}

// PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArgs and PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput
	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArgs struct {
	LabelSelector PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrInput `pulumi:"labelSelector"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
	MatchLabelKeys pulumi.StringArrayInput `pulumi:"matchLabelKeys"`
	// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew pulumi.IntPtrInput `pulumi:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
	//  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
	MinDomains pulumi.IntPtrInput `pulumi:"minDomains"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//  If this value is nil, the behavior is equivalent to the Honor policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy pulumi.StringPtrInput `pulumi:"nodeAffinityPolicy"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
	//  If this value is nil, the behavior is equivalent to the Ignore policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy pulumi.StringPtrInput `pulumi:"nodeTaintsPolicy"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
	WhenUnsatisfiable pulumi.StringPtrInput `pulumi:"whenUnsatisfiable"`
}

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArray and PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArray{ PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArray []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsInput

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArray) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArray) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput)
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput) LabelSelector() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints) *PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector {
		return v.LabelSelector
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput)
}

// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput) MatchLabelKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints) []string {
		return v.MatchLabelKeys
	}).(pulumi.StringArrayOutput)
}

// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput) MaxSkew() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints) *int { return v.MaxSkew }).(pulumi.IntPtrOutput)
}

// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
//
//	For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
//	This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput) MinDomains() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints) *int { return v.MinDomains }).(pulumi.IntPtrOutput)
}

// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
//
//	If this value is nil, the behavior is equivalent to the Honor policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput) NodeAffinityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints) *string {
		return v.NodeAffinityPolicy
	}).(pulumi.StringPtrOutput)
}

// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
//
//	If this value is nil, the behavior is equivalent to the Ignore policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput) NodeTaintsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints) *string {
		return v.NodeTaintsPolicy
	}).(pulumi.StringPtrOutput)
}

// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints) *string { return v.TopologyKey }).(pulumi.StringPtrOutput)
}

// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput) WhenUnsatisfiable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints) *string {
		return v.WhenUnsatisfiable
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraints)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput)
}

// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs and PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs{...}
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput
	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput
}

// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput).ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs, PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtr and PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrType PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs

func PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtr(v *PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrType) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput)
}

// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector) *PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector) []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector) []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs and PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs{...}
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput
	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput)
}

// PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArray and PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArray{ PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArray []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsInput

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArray) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressions {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs and PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArray and PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArray{ PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArray []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput)
}

// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchArgs and PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput
}

// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput)
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput).ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchArgs, PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtr and PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrInput` via:
//
//	        PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput
	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput
}

type postgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrType PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchArgs

func PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtr(v *PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchArgs) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrInput {
	return (*postgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrType)(v)
}

func (*postgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrType) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput)
}

// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return o.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch) *PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch {
		return &v
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput) Elem() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch
		return ret
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput) MatchExpressions() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch) []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch struct {
	LabelSelector *PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch `pulumi:"labelSelector"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
	MatchLabelKeys []string `pulumi:"matchLabelKeys"`
	// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew *int `pulumi:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
	//  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
	MinDomains *int `pulumi:"minDomains"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//  If this value is nil, the behavior is equivalent to the Honor policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy *string `pulumi:"nodeAffinityPolicy"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
	//  If this value is nil, the behavior is equivalent to the Ignore policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy *string `pulumi:"nodeTaintsPolicy"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
	TopologyKey *string `pulumi:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
	WhenUnsatisfiable *string `pulumi:"whenUnsatisfiable"`
}

// PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArgs and PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArgs{...}
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput
	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArgs struct {
	LabelSelector PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrInput `pulumi:"labelSelector"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
	MatchLabelKeys pulumi.StringArrayInput `pulumi:"matchLabelKeys"`
	// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew pulumi.IntPtrInput `pulumi:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
	//  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
	MinDomains pulumi.IntPtrInput `pulumi:"minDomains"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//  If this value is nil, the behavior is equivalent to the Honor policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy pulumi.StringPtrInput `pulumi:"nodeAffinityPolicy"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
	//  If this value is nil, the behavior is equivalent to the Ignore policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy pulumi.StringPtrInput `pulumi:"nodeTaintsPolicy"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
	WhenUnsatisfiable pulumi.StringPtrInput `pulumi:"whenUnsatisfiable"`
}

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArgs) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput)
}

// PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayInput is an input type that accepts PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArray and PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayInput` via:
//
//	PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArray{ PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArgs{...} }
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput
	ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput
}

type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArray []PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchInput

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput {
	return i.ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArray) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput)
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput) LabelSelector() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch) *PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatch {
		return v.LabelSelector
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput)
}

// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput) MatchLabelKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch) []string {
		return v.MatchLabelKeys
	}).(pulumi.StringArrayOutput)
}

// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput) MaxSkew() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch) *int { return v.MaxSkew }).(pulumi.IntPtrOutput)
}

// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
//
//	For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
//	This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput) MinDomains() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch) *int {
		return v.MinDomains
	}).(pulumi.IntPtrOutput)
}

// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
//
//	If this value is nil, the behavior is equivalent to the Honor policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput) NodeAffinityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch) *string {
		return v.NodeAffinityPolicy
	}).(pulumi.StringPtrOutput)
}

// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
//
//	If this value is nil, the behavior is equivalent to the Ignore policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput) NodeTaintsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch) *string {
		return v.NodeTaintsPolicy
	}).(pulumi.StringPtrOutput)
}

// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch) *string {
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput) WhenUnsatisfiable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch) *string {
		return v.WhenUnsatisfiable
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput() PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput) ToPostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch {
		return vs[0].([]PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput)
}

type PostgresClusterSpecUsers struct {
	// Databases to which this user can connect and create objects. Removing a database from this list does NOT revoke access. This field is ignored for the "postgres" user.
	Databases []string `pulumi:"databases"`
	// The name of this PostgreSQL user. The value may contain only lowercase letters, numbers, and hyphen so that it fits into Kubernetes metadata.
	Name *string `pulumi:"name"`
	// ALTER ROLE options except for PASSWORD. This field is ignored for the "postgres" user. More info: https://www.postgresql.org/docs/current/role-attributes.html
	Options  *string                           `pulumi:"options"`
	Password *PostgresClusterSpecUsersPassword `pulumi:"password"`
}

// PostgresClusterSpecUsersInput is an input type that accepts PostgresClusterSpecUsersArgs and PostgresClusterSpecUsersOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUsersInput` via:
//
//	PostgresClusterSpecUsersArgs{...}
type PostgresClusterSpecUsersInput interface {
	pulumi.Input

	ToPostgresClusterSpecUsersOutput() PostgresClusterSpecUsersOutput
	ToPostgresClusterSpecUsersOutputWithContext(context.Context) PostgresClusterSpecUsersOutput
}

type PostgresClusterSpecUsersArgs struct {
	// Databases to which this user can connect and create objects. Removing a database from this list does NOT revoke access. This field is ignored for the "postgres" user.
	Databases pulumi.StringArrayInput `pulumi:"databases"`
	// The name of this PostgreSQL user. The value may contain only lowercase letters, numbers, and hyphen so that it fits into Kubernetes metadata.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ALTER ROLE options except for PASSWORD. This field is ignored for the "postgres" user. More info: https://www.postgresql.org/docs/current/role-attributes.html
	Options  pulumi.StringPtrInput                    `pulumi:"options"`
	Password PostgresClusterSpecUsersPasswordPtrInput `pulumi:"password"`
}

func (PostgresClusterSpecUsersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUsers)(nil)).Elem()
}

func (i PostgresClusterSpecUsersArgs) ToPostgresClusterSpecUsersOutput() PostgresClusterSpecUsersOutput {
	return i.ToPostgresClusterSpecUsersOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUsersArgs) ToPostgresClusterSpecUsersOutputWithContext(ctx context.Context) PostgresClusterSpecUsersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUsersOutput)
}

// PostgresClusterSpecUsersArrayInput is an input type that accepts PostgresClusterSpecUsersArray and PostgresClusterSpecUsersArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUsersArrayInput` via:
//
//	PostgresClusterSpecUsersArray{ PostgresClusterSpecUsersArgs{...} }
type PostgresClusterSpecUsersArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUsersArrayOutput() PostgresClusterSpecUsersArrayOutput
	ToPostgresClusterSpecUsersArrayOutputWithContext(context.Context) PostgresClusterSpecUsersArrayOutput
}

type PostgresClusterSpecUsersArray []PostgresClusterSpecUsersInput

func (PostgresClusterSpecUsersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUsers)(nil)).Elem()
}

func (i PostgresClusterSpecUsersArray) ToPostgresClusterSpecUsersArrayOutput() PostgresClusterSpecUsersArrayOutput {
	return i.ToPostgresClusterSpecUsersArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUsersArray) ToPostgresClusterSpecUsersArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUsersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUsersArrayOutput)
}

type PostgresClusterSpecUsersOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUsersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUsers)(nil)).Elem()
}

func (o PostgresClusterSpecUsersOutput) ToPostgresClusterSpecUsersOutput() PostgresClusterSpecUsersOutput {
	return o
}

func (o PostgresClusterSpecUsersOutput) ToPostgresClusterSpecUsersOutputWithContext(ctx context.Context) PostgresClusterSpecUsersOutput {
	return o
}

// Databases to which this user can connect and create objects. Removing a database from this list does NOT revoke access. This field is ignored for the "postgres" user.
func (o PostgresClusterSpecUsersOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUsers) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// The name of this PostgreSQL user. The value may contain only lowercase letters, numbers, and hyphen so that it fits into Kubernetes metadata.
func (o PostgresClusterSpecUsersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUsers) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// ALTER ROLE options except for PASSWORD. This field is ignored for the "postgres" user. More info: https://www.postgresql.org/docs/current/role-attributes.html
func (o PostgresClusterSpecUsersOutput) Options() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUsers) *string { return v.Options }).(pulumi.StringPtrOutput)
}

func (o PostgresClusterSpecUsersOutput) Password() PostgresClusterSpecUsersPasswordPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUsers) *PostgresClusterSpecUsersPassword { return v.Password }).(PostgresClusterSpecUsersPasswordPtrOutput)
}

type PostgresClusterSpecUsersArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUsersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUsers)(nil)).Elem()
}

func (o PostgresClusterSpecUsersArrayOutput) ToPostgresClusterSpecUsersArrayOutput() PostgresClusterSpecUsersArrayOutput {
	return o
}

func (o PostgresClusterSpecUsersArrayOutput) ToPostgresClusterSpecUsersArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUsersArrayOutput {
	return o
}

func (o PostgresClusterSpecUsersArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUsersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUsers {
		return vs[0].([]PostgresClusterSpecUsers)[vs[1].(int)]
	}).(PostgresClusterSpecUsersOutput)
}

// Properties of the password generated for this user.
type PostgresClusterSpecUsersPassword struct {
	// Type of password to generate. Defaults to ASCII. Valid options are ASCII and AlphaNumeric. "ASCII" passwords contain letters, numbers, and symbols from the US-ASCII character set. "AlphaNumeric" passwords contain letters and numbers from the US-ASCII character set.
	Type *string `pulumi:"type"`
}

// PostgresClusterSpecUsersPasswordInput is an input type that accepts PostgresClusterSpecUsersPasswordArgs and PostgresClusterSpecUsersPasswordOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUsersPasswordInput` via:
//
//	PostgresClusterSpecUsersPasswordArgs{...}
type PostgresClusterSpecUsersPasswordInput interface {
	pulumi.Input

	ToPostgresClusterSpecUsersPasswordOutput() PostgresClusterSpecUsersPasswordOutput
	ToPostgresClusterSpecUsersPasswordOutputWithContext(context.Context) PostgresClusterSpecUsersPasswordOutput
}

// Properties of the password generated for this user.
type PostgresClusterSpecUsersPasswordArgs struct {
	// Type of password to generate. Defaults to ASCII. Valid options are ASCII and AlphaNumeric. "ASCII" passwords contain letters, numbers, and symbols from the US-ASCII character set. "AlphaNumeric" passwords contain letters and numbers from the US-ASCII character set.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PostgresClusterSpecUsersPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUsersPassword)(nil)).Elem()
}

func (i PostgresClusterSpecUsersPasswordArgs) ToPostgresClusterSpecUsersPasswordOutput() PostgresClusterSpecUsersPasswordOutput {
	return i.ToPostgresClusterSpecUsersPasswordOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUsersPasswordArgs) ToPostgresClusterSpecUsersPasswordOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUsersPasswordOutput)
}

func (i PostgresClusterSpecUsersPasswordArgs) ToPostgresClusterSpecUsersPasswordPtrOutput() PostgresClusterSpecUsersPasswordPtrOutput {
	return i.ToPostgresClusterSpecUsersPasswordPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUsersPasswordArgs) ToPostgresClusterSpecUsersPasswordPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUsersPasswordOutput).ToPostgresClusterSpecUsersPasswordPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUsersPasswordPtrInput is an input type that accepts PostgresClusterSpecUsersPasswordArgs, PostgresClusterSpecUsersPasswordPtr and PostgresClusterSpecUsersPasswordPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUsersPasswordPtrInput` via:
//
//	        PostgresClusterSpecUsersPasswordArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUsersPasswordPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUsersPasswordPtrOutput() PostgresClusterSpecUsersPasswordPtrOutput
	ToPostgresClusterSpecUsersPasswordPtrOutputWithContext(context.Context) PostgresClusterSpecUsersPasswordPtrOutput
}

type postgresClusterSpecUsersPasswordPtrType PostgresClusterSpecUsersPasswordArgs

func PostgresClusterSpecUsersPasswordPtr(v *PostgresClusterSpecUsersPasswordArgs) PostgresClusterSpecUsersPasswordPtrInput {
	return (*postgresClusterSpecUsersPasswordPtrType)(v)
}

func (*postgresClusterSpecUsersPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUsersPassword)(nil)).Elem()
}

func (i *postgresClusterSpecUsersPasswordPtrType) ToPostgresClusterSpecUsersPasswordPtrOutput() PostgresClusterSpecUsersPasswordPtrOutput {
	return i.ToPostgresClusterSpecUsersPasswordPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUsersPasswordPtrType) ToPostgresClusterSpecUsersPasswordPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUsersPasswordPtrOutput)
}

// Properties of the password generated for this user.
type PostgresClusterSpecUsersPasswordOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUsersPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUsersPassword)(nil)).Elem()
}

func (o PostgresClusterSpecUsersPasswordOutput) ToPostgresClusterSpecUsersPasswordOutput() PostgresClusterSpecUsersPasswordOutput {
	return o
}

func (o PostgresClusterSpecUsersPasswordOutput) ToPostgresClusterSpecUsersPasswordOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPasswordOutput {
	return o
}

func (o PostgresClusterSpecUsersPasswordOutput) ToPostgresClusterSpecUsersPasswordPtrOutput() PostgresClusterSpecUsersPasswordPtrOutput {
	return o.ToPostgresClusterSpecUsersPasswordPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUsersPasswordOutput) ToPostgresClusterSpecUsersPasswordPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUsersPassword) *PostgresClusterSpecUsersPassword {
		return &v
	}).(PostgresClusterSpecUsersPasswordPtrOutput)
}

// Type of password to generate. Defaults to ASCII. Valid options are ASCII and AlphaNumeric. "ASCII" passwords contain letters, numbers, and symbols from the US-ASCII character set. "AlphaNumeric" passwords contain letters and numbers from the US-ASCII character set.
func (o PostgresClusterSpecUsersPasswordOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUsersPassword) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUsersPasswordPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUsersPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUsersPassword)(nil)).Elem()
}

func (o PostgresClusterSpecUsersPasswordPtrOutput) ToPostgresClusterSpecUsersPasswordPtrOutput() PostgresClusterSpecUsersPasswordPtrOutput {
	return o
}

func (o PostgresClusterSpecUsersPasswordPtrOutput) ToPostgresClusterSpecUsersPasswordPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPasswordPtrOutput {
	return o
}

func (o PostgresClusterSpecUsersPasswordPtrOutput) Elem() PostgresClusterSpecUsersPasswordOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUsersPassword) PostgresClusterSpecUsersPassword {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUsersPassword
		return ret
	}).(PostgresClusterSpecUsersPasswordOutput)
}

// Type of password to generate. Defaults to ASCII. Valid options are ASCII and AlphaNumeric. "ASCII" passwords contain letters, numbers, and symbols from the US-ASCII character set. "AlphaNumeric" passwords contain letters and numbers from the US-ASCII character set.
func (o PostgresClusterSpecUsersPasswordPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUsersPassword) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Properties of the password generated for this user.
type PostgresClusterSpecUsersPasswordPatch struct {
	// Type of password to generate. Defaults to ASCII. Valid options are ASCII and AlphaNumeric. "ASCII" passwords contain letters, numbers, and symbols from the US-ASCII character set. "AlphaNumeric" passwords contain letters and numbers from the US-ASCII character set.
	Type *string `pulumi:"type"`
}

// PostgresClusterSpecUsersPasswordPatchInput is an input type that accepts PostgresClusterSpecUsersPasswordPatchArgs and PostgresClusterSpecUsersPasswordPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUsersPasswordPatchInput` via:
//
//	PostgresClusterSpecUsersPasswordPatchArgs{...}
type PostgresClusterSpecUsersPasswordPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUsersPasswordPatchOutput() PostgresClusterSpecUsersPasswordPatchOutput
	ToPostgresClusterSpecUsersPasswordPatchOutputWithContext(context.Context) PostgresClusterSpecUsersPasswordPatchOutput
}

// Properties of the password generated for this user.
type PostgresClusterSpecUsersPasswordPatchArgs struct {
	// Type of password to generate. Defaults to ASCII. Valid options are ASCII and AlphaNumeric. "ASCII" passwords contain letters, numbers, and symbols from the US-ASCII character set. "AlphaNumeric" passwords contain letters and numbers from the US-ASCII character set.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PostgresClusterSpecUsersPasswordPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUsersPasswordPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUsersPasswordPatchArgs) ToPostgresClusterSpecUsersPasswordPatchOutput() PostgresClusterSpecUsersPasswordPatchOutput {
	return i.ToPostgresClusterSpecUsersPasswordPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUsersPasswordPatchArgs) ToPostgresClusterSpecUsersPasswordPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPasswordPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUsersPasswordPatchOutput)
}

func (i PostgresClusterSpecUsersPasswordPatchArgs) ToPostgresClusterSpecUsersPasswordPatchPtrOutput() PostgresClusterSpecUsersPasswordPatchPtrOutput {
	return i.ToPostgresClusterSpecUsersPasswordPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUsersPasswordPatchArgs) ToPostgresClusterSpecUsersPasswordPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPasswordPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUsersPasswordPatchOutput).ToPostgresClusterSpecUsersPasswordPatchPtrOutputWithContext(ctx)
}

// PostgresClusterSpecUsersPasswordPatchPtrInput is an input type that accepts PostgresClusterSpecUsersPasswordPatchArgs, PostgresClusterSpecUsersPasswordPatchPtr and PostgresClusterSpecUsersPasswordPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUsersPasswordPatchPtrInput` via:
//
//	        PostgresClusterSpecUsersPasswordPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterSpecUsersPasswordPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterSpecUsersPasswordPatchPtrOutput() PostgresClusterSpecUsersPasswordPatchPtrOutput
	ToPostgresClusterSpecUsersPasswordPatchPtrOutputWithContext(context.Context) PostgresClusterSpecUsersPasswordPatchPtrOutput
}

type postgresClusterSpecUsersPasswordPatchPtrType PostgresClusterSpecUsersPasswordPatchArgs

func PostgresClusterSpecUsersPasswordPatchPtr(v *PostgresClusterSpecUsersPasswordPatchArgs) PostgresClusterSpecUsersPasswordPatchPtrInput {
	return (*postgresClusterSpecUsersPasswordPatchPtrType)(v)
}

func (*postgresClusterSpecUsersPasswordPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUsersPasswordPatch)(nil)).Elem()
}

func (i *postgresClusterSpecUsersPasswordPatchPtrType) ToPostgresClusterSpecUsersPasswordPatchPtrOutput() PostgresClusterSpecUsersPasswordPatchPtrOutput {
	return i.ToPostgresClusterSpecUsersPasswordPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterSpecUsersPasswordPatchPtrType) ToPostgresClusterSpecUsersPasswordPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPasswordPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUsersPasswordPatchPtrOutput)
}

// Properties of the password generated for this user.
type PostgresClusterSpecUsersPasswordPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUsersPasswordPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUsersPasswordPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUsersPasswordPatchOutput) ToPostgresClusterSpecUsersPasswordPatchOutput() PostgresClusterSpecUsersPasswordPatchOutput {
	return o
}

func (o PostgresClusterSpecUsersPasswordPatchOutput) ToPostgresClusterSpecUsersPasswordPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPasswordPatchOutput {
	return o
}

func (o PostgresClusterSpecUsersPasswordPatchOutput) ToPostgresClusterSpecUsersPasswordPatchPtrOutput() PostgresClusterSpecUsersPasswordPatchPtrOutput {
	return o.ToPostgresClusterSpecUsersPasswordPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterSpecUsersPasswordPatchOutput) ToPostgresClusterSpecUsersPasswordPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPasswordPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterSpecUsersPasswordPatch) *PostgresClusterSpecUsersPasswordPatch {
		return &v
	}).(PostgresClusterSpecUsersPasswordPatchPtrOutput)
}

// Type of password to generate. Defaults to ASCII. Valid options are ASCII and AlphaNumeric. "ASCII" passwords contain letters, numbers, and symbols from the US-ASCII character set. "AlphaNumeric" passwords contain letters and numbers from the US-ASCII character set.
func (o PostgresClusterSpecUsersPasswordPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUsersPasswordPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUsersPasswordPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUsersPasswordPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterSpecUsersPasswordPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUsersPasswordPatchPtrOutput) ToPostgresClusterSpecUsersPasswordPatchPtrOutput() PostgresClusterSpecUsersPasswordPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUsersPasswordPatchPtrOutput) ToPostgresClusterSpecUsersPasswordPatchPtrOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPasswordPatchPtrOutput {
	return o
}

func (o PostgresClusterSpecUsersPasswordPatchPtrOutput) Elem() PostgresClusterSpecUsersPasswordPatchOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUsersPasswordPatch) PostgresClusterSpecUsersPasswordPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterSpecUsersPasswordPatch
		return ret
	}).(PostgresClusterSpecUsersPasswordPatchOutput)
}

// Type of password to generate. Defaults to ASCII. Valid options are ASCII and AlphaNumeric. "ASCII" passwords contain letters, numbers, and symbols from the US-ASCII character set. "AlphaNumeric" passwords contain letters and numbers from the US-ASCII character set.
func (o PostgresClusterSpecUsersPasswordPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterSpecUsersPasswordPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterSpecUsersPatch struct {
	// Databases to which this user can connect and create objects. Removing a database from this list does NOT revoke access. This field is ignored for the "postgres" user.
	Databases []string `pulumi:"databases"`
	// The name of this PostgreSQL user. The value may contain only lowercase letters, numbers, and hyphen so that it fits into Kubernetes metadata.
	Name *string `pulumi:"name"`
	// ALTER ROLE options except for PASSWORD. This field is ignored for the "postgres" user. More info: https://www.postgresql.org/docs/current/role-attributes.html
	Options  *string                                `pulumi:"options"`
	Password *PostgresClusterSpecUsersPasswordPatch `pulumi:"password"`
}

// PostgresClusterSpecUsersPatchInput is an input type that accepts PostgresClusterSpecUsersPatchArgs and PostgresClusterSpecUsersPatchOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUsersPatchInput` via:
//
//	PostgresClusterSpecUsersPatchArgs{...}
type PostgresClusterSpecUsersPatchInput interface {
	pulumi.Input

	ToPostgresClusterSpecUsersPatchOutput() PostgresClusterSpecUsersPatchOutput
	ToPostgresClusterSpecUsersPatchOutputWithContext(context.Context) PostgresClusterSpecUsersPatchOutput
}

type PostgresClusterSpecUsersPatchArgs struct {
	// Databases to which this user can connect and create objects. Removing a database from this list does NOT revoke access. This field is ignored for the "postgres" user.
	Databases pulumi.StringArrayInput `pulumi:"databases"`
	// The name of this PostgreSQL user. The value may contain only lowercase letters, numbers, and hyphen so that it fits into Kubernetes metadata.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ALTER ROLE options except for PASSWORD. This field is ignored for the "postgres" user. More info: https://www.postgresql.org/docs/current/role-attributes.html
	Options  pulumi.StringPtrInput                         `pulumi:"options"`
	Password PostgresClusterSpecUsersPasswordPatchPtrInput `pulumi:"password"`
}

func (PostgresClusterSpecUsersPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUsersPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUsersPatchArgs) ToPostgresClusterSpecUsersPatchOutput() PostgresClusterSpecUsersPatchOutput {
	return i.ToPostgresClusterSpecUsersPatchOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUsersPatchArgs) ToPostgresClusterSpecUsersPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUsersPatchOutput)
}

// PostgresClusterSpecUsersPatchArrayInput is an input type that accepts PostgresClusterSpecUsersPatchArray and PostgresClusterSpecUsersPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterSpecUsersPatchArrayInput` via:
//
//	PostgresClusterSpecUsersPatchArray{ PostgresClusterSpecUsersPatchArgs{...} }
type PostgresClusterSpecUsersPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterSpecUsersPatchArrayOutput() PostgresClusterSpecUsersPatchArrayOutput
	ToPostgresClusterSpecUsersPatchArrayOutputWithContext(context.Context) PostgresClusterSpecUsersPatchArrayOutput
}

type PostgresClusterSpecUsersPatchArray []PostgresClusterSpecUsersPatchInput

func (PostgresClusterSpecUsersPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUsersPatch)(nil)).Elem()
}

func (i PostgresClusterSpecUsersPatchArray) ToPostgresClusterSpecUsersPatchArrayOutput() PostgresClusterSpecUsersPatchArrayOutput {
	return i.ToPostgresClusterSpecUsersPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterSpecUsersPatchArray) ToPostgresClusterSpecUsersPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterSpecUsersPatchArrayOutput)
}

type PostgresClusterSpecUsersPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUsersPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterSpecUsersPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUsersPatchOutput) ToPostgresClusterSpecUsersPatchOutput() PostgresClusterSpecUsersPatchOutput {
	return o
}

func (o PostgresClusterSpecUsersPatchOutput) ToPostgresClusterSpecUsersPatchOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPatchOutput {
	return o
}

// Databases to which this user can connect and create objects. Removing a database from this list does NOT revoke access. This field is ignored for the "postgres" user.
func (o PostgresClusterSpecUsersPatchOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgresClusterSpecUsersPatch) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// The name of this PostgreSQL user. The value may contain only lowercase letters, numbers, and hyphen so that it fits into Kubernetes metadata.
func (o PostgresClusterSpecUsersPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUsersPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// ALTER ROLE options except for PASSWORD. This field is ignored for the "postgres" user. More info: https://www.postgresql.org/docs/current/role-attributes.html
func (o PostgresClusterSpecUsersPatchOutput) Options() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUsersPatch) *string { return v.Options }).(pulumi.StringPtrOutput)
}

func (o PostgresClusterSpecUsersPatchOutput) Password() PostgresClusterSpecUsersPasswordPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterSpecUsersPatch) *PostgresClusterSpecUsersPasswordPatch { return v.Password }).(PostgresClusterSpecUsersPasswordPatchPtrOutput)
}

type PostgresClusterSpecUsersPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterSpecUsersPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterSpecUsersPatch)(nil)).Elem()
}

func (o PostgresClusterSpecUsersPatchArrayOutput) ToPostgresClusterSpecUsersPatchArrayOutput() PostgresClusterSpecUsersPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUsersPatchArrayOutput) ToPostgresClusterSpecUsersPatchArrayOutputWithContext(ctx context.Context) PostgresClusterSpecUsersPatchArrayOutput {
	return o
}

func (o PostgresClusterSpecUsersPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterSpecUsersPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterSpecUsersPatch {
		return vs[0].([]PostgresClusterSpecUsersPatch)[vs[1].(int)]
	}).(PostgresClusterSpecUsersPatchOutput)
}

// PostgresClusterStatus defines the observed state of PostgresCluster
type PostgresClusterStatus struct {
	// conditions represent the observations of postgrescluster's current state. Known .status.conditions.type are: "PersistentVolumeResizing", "Progressing", "ProxyAvailable"
	Conditions []PostgresClusterStatusConditions `pulumi:"conditions"`
	// DatabaseInitSQL state of custom database initialization in the cluster
	DatabaseInitSQL *string `pulumi:"databaseInitSQL"`
	// Identifies the databases that have been installed into PostgreSQL.
	DatabaseRevision *string `pulumi:"databaseRevision"`
	// Current state of PostgreSQL instances.
	Instances  []PostgresClusterStatusInstances `pulumi:"instances"`
	Monitoring *PostgresClusterStatusMonitoring `pulumi:"monitoring"`
	// observedGeneration represents the .metadata.generation on which the status was based.
	ObservedGeneration *int                             `pulumi:"observedGeneration"`
	Patroni            *PostgresClusterStatusPatroni    `pulumi:"patroni"`
	Pgbackrest         *PostgresClusterStatusPgbackrest `pulumi:"pgbackrest"`
	// Stores the current PostgreSQL major version following a successful major PostgreSQL upgrade.
	PostgresVersion *int                        `pulumi:"postgresVersion"`
	Proxy           *PostgresClusterStatusProxy `pulumi:"proxy"`
	// The instance that should be started first when bootstrapping and/or starting a PostgresCluster.
	StartupInstance *string `pulumi:"startupInstance"`
	// The instance set associated with the startupInstance
	StartupInstanceSet *string                             `pulumi:"startupInstanceSet"`
	UserInterface      *PostgresClusterStatusUserInterface `pulumi:"userInterface"`
	// Identifies the users that have been installed into PostgreSQL.
	UsersRevision *string `pulumi:"usersRevision"`
}

// PostgresClusterStatusInput is an input type that accepts PostgresClusterStatusArgs and PostgresClusterStatusOutput values.
// You can construct a concrete instance of `PostgresClusterStatusInput` via:
//
//	PostgresClusterStatusArgs{...}
type PostgresClusterStatusInput interface {
	pulumi.Input

	ToPostgresClusterStatusOutput() PostgresClusterStatusOutput
	ToPostgresClusterStatusOutputWithContext(context.Context) PostgresClusterStatusOutput
}

// PostgresClusterStatus defines the observed state of PostgresCluster
type PostgresClusterStatusArgs struct {
	// conditions represent the observations of postgrescluster's current state. Known .status.conditions.type are: "PersistentVolumeResizing", "Progressing", "ProxyAvailable"
	Conditions PostgresClusterStatusConditionsArrayInput `pulumi:"conditions"`
	// DatabaseInitSQL state of custom database initialization in the cluster
	DatabaseInitSQL pulumi.StringPtrInput `pulumi:"databaseInitSQL"`
	// Identifies the databases that have been installed into PostgreSQL.
	DatabaseRevision pulumi.StringPtrInput `pulumi:"databaseRevision"`
	// Current state of PostgreSQL instances.
	Instances  PostgresClusterStatusInstancesArrayInput `pulumi:"instances"`
	Monitoring PostgresClusterStatusMonitoringPtrInput  `pulumi:"monitoring"`
	// observedGeneration represents the .metadata.generation on which the status was based.
	ObservedGeneration pulumi.IntPtrInput                      `pulumi:"observedGeneration"`
	Patroni            PostgresClusterStatusPatroniPtrInput    `pulumi:"patroni"`
	Pgbackrest         PostgresClusterStatusPgbackrestPtrInput `pulumi:"pgbackrest"`
	// Stores the current PostgreSQL major version following a successful major PostgreSQL upgrade.
	PostgresVersion pulumi.IntPtrInput                 `pulumi:"postgresVersion"`
	Proxy           PostgresClusterStatusProxyPtrInput `pulumi:"proxy"`
	// The instance that should be started first when bootstrapping and/or starting a PostgresCluster.
	StartupInstance pulumi.StringPtrInput `pulumi:"startupInstance"`
	// The instance set associated with the startupInstance
	StartupInstanceSet pulumi.StringPtrInput                      `pulumi:"startupInstanceSet"`
	UserInterface      PostgresClusterStatusUserInterfacePtrInput `pulumi:"userInterface"`
	// Identifies the users that have been installed into PostgreSQL.
	UsersRevision pulumi.StringPtrInput `pulumi:"usersRevision"`
}

func (PostgresClusterStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatus)(nil)).Elem()
}

func (i PostgresClusterStatusArgs) ToPostgresClusterStatusOutput() PostgresClusterStatusOutput {
	return i.ToPostgresClusterStatusOutputWithContext(context.Background())
}

func (i PostgresClusterStatusArgs) ToPostgresClusterStatusOutputWithContext(ctx context.Context) PostgresClusterStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusOutput)
}

func (i PostgresClusterStatusArgs) ToPostgresClusterStatusPtrOutput() PostgresClusterStatusPtrOutput {
	return i.ToPostgresClusterStatusPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusArgs) ToPostgresClusterStatusPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusOutput).ToPostgresClusterStatusPtrOutputWithContext(ctx)
}

// PostgresClusterStatusPtrInput is an input type that accepts PostgresClusterStatusArgs, PostgresClusterStatusPtr and PostgresClusterStatusPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPtrInput` via:
//
//	        PostgresClusterStatusArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusPtrOutput() PostgresClusterStatusPtrOutput
	ToPostgresClusterStatusPtrOutputWithContext(context.Context) PostgresClusterStatusPtrOutput
}

type postgresClusterStatusPtrType PostgresClusterStatusArgs

func PostgresClusterStatusPtr(v *PostgresClusterStatusArgs) PostgresClusterStatusPtrInput {
	return (*postgresClusterStatusPtrType)(v)
}

func (*postgresClusterStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatus)(nil)).Elem()
}

func (i *postgresClusterStatusPtrType) ToPostgresClusterStatusPtrOutput() PostgresClusterStatusPtrOutput {
	return i.ToPostgresClusterStatusPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusPtrType) ToPostgresClusterStatusPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPtrOutput)
}

// PostgresClusterStatus defines the observed state of PostgresCluster
type PostgresClusterStatusOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatus)(nil)).Elem()
}

func (o PostgresClusterStatusOutput) ToPostgresClusterStatusOutput() PostgresClusterStatusOutput {
	return o
}

func (o PostgresClusterStatusOutput) ToPostgresClusterStatusOutputWithContext(ctx context.Context) PostgresClusterStatusOutput {
	return o
}

func (o PostgresClusterStatusOutput) ToPostgresClusterStatusPtrOutput() PostgresClusterStatusPtrOutput {
	return o.ToPostgresClusterStatusPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusOutput) ToPostgresClusterStatusPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatus) *PostgresClusterStatus {
		return &v
	}).(PostgresClusterStatusPtrOutput)
}

// conditions represent the observations of postgrescluster's current state. Known .status.conditions.type are: "PersistentVolumeResizing", "Progressing", "ProxyAvailable"
func (o PostgresClusterStatusOutput) Conditions() PostgresClusterStatusConditionsArrayOutput {
	return o.ApplyT(func(v PostgresClusterStatus) []PostgresClusterStatusConditions { return v.Conditions }).(PostgresClusterStatusConditionsArrayOutput)
}

// DatabaseInitSQL state of custom database initialization in the cluster
func (o PostgresClusterStatusOutput) DatabaseInitSQL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatus) *string { return v.DatabaseInitSQL }).(pulumi.StringPtrOutput)
}

// Identifies the databases that have been installed into PostgreSQL.
func (o PostgresClusterStatusOutput) DatabaseRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatus) *string { return v.DatabaseRevision }).(pulumi.StringPtrOutput)
}

// Current state of PostgreSQL instances.
func (o PostgresClusterStatusOutput) Instances() PostgresClusterStatusInstancesArrayOutput {
	return o.ApplyT(func(v PostgresClusterStatus) []PostgresClusterStatusInstances { return v.Instances }).(PostgresClusterStatusInstancesArrayOutput)
}

func (o PostgresClusterStatusOutput) Monitoring() PostgresClusterStatusMonitoringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatus) *PostgresClusterStatusMonitoring { return v.Monitoring }).(PostgresClusterStatusMonitoringPtrOutput)
}

// observedGeneration represents the .metadata.generation on which the status was based.
func (o PostgresClusterStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

func (o PostgresClusterStatusOutput) Patroni() PostgresClusterStatusPatroniPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatus) *PostgresClusterStatusPatroni { return v.Patroni }).(PostgresClusterStatusPatroniPtrOutput)
}

func (o PostgresClusterStatusOutput) Pgbackrest() PostgresClusterStatusPgbackrestPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatus) *PostgresClusterStatusPgbackrest { return v.Pgbackrest }).(PostgresClusterStatusPgbackrestPtrOutput)
}

// Stores the current PostgreSQL major version following a successful major PostgreSQL upgrade.
func (o PostgresClusterStatusOutput) PostgresVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatus) *int { return v.PostgresVersion }).(pulumi.IntPtrOutput)
}

func (o PostgresClusterStatusOutput) Proxy() PostgresClusterStatusProxyPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatus) *PostgresClusterStatusProxy { return v.Proxy }).(PostgresClusterStatusProxyPtrOutput)
}

// The instance that should be started first when bootstrapping and/or starting a PostgresCluster.
func (o PostgresClusterStatusOutput) StartupInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatus) *string { return v.StartupInstance }).(pulumi.StringPtrOutput)
}

// The instance set associated with the startupInstance
func (o PostgresClusterStatusOutput) StartupInstanceSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatus) *string { return v.StartupInstanceSet }).(pulumi.StringPtrOutput)
}

func (o PostgresClusterStatusOutput) UserInterface() PostgresClusterStatusUserInterfacePtrOutput {
	return o.ApplyT(func(v PostgresClusterStatus) *PostgresClusterStatusUserInterface { return v.UserInterface }).(PostgresClusterStatusUserInterfacePtrOutput)
}

// Identifies the users that have been installed into PostgreSQL.
func (o PostgresClusterStatusOutput) UsersRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatus) *string { return v.UsersRevision }).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatus)(nil)).Elem()
}

func (o PostgresClusterStatusPtrOutput) ToPostgresClusterStatusPtrOutput() PostgresClusterStatusPtrOutput {
	return o
}

func (o PostgresClusterStatusPtrOutput) ToPostgresClusterStatusPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPtrOutput {
	return o
}

func (o PostgresClusterStatusPtrOutput) Elem() PostgresClusterStatusOutput {
	return o.ApplyT(func(v *PostgresClusterStatus) PostgresClusterStatus {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatus
		return ret
	}).(PostgresClusterStatusOutput)
}

// conditions represent the observations of postgrescluster's current state. Known .status.conditions.type are: "PersistentVolumeResizing", "Progressing", "ProxyAvailable"
func (o PostgresClusterStatusPtrOutput) Conditions() PostgresClusterStatusConditionsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterStatus) []PostgresClusterStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(PostgresClusterStatusConditionsArrayOutput)
}

// DatabaseInitSQL state of custom database initialization in the cluster
func (o PostgresClusterStatusPtrOutput) DatabaseInitSQL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseInitSQL
	}).(pulumi.StringPtrOutput)
}

// Identifies the databases that have been installed into PostgreSQL.
func (o PostgresClusterStatusPtrOutput) DatabaseRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseRevision
	}).(pulumi.StringPtrOutput)
}

// Current state of PostgreSQL instances.
func (o PostgresClusterStatusPtrOutput) Instances() PostgresClusterStatusInstancesArrayOutput {
	return o.ApplyT(func(v *PostgresClusterStatus) []PostgresClusterStatusInstances {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(PostgresClusterStatusInstancesArrayOutput)
}

func (o PostgresClusterStatusPtrOutput) Monitoring() PostgresClusterStatusMonitoringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatus) *PostgresClusterStatusMonitoring {
		if v == nil {
			return nil
		}
		return v.Monitoring
	}).(PostgresClusterStatusMonitoringPtrOutput)
}

// observedGeneration represents the .metadata.generation on which the status was based.
func (o PostgresClusterStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

func (o PostgresClusterStatusPtrOutput) Patroni() PostgresClusterStatusPatroniPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatus) *PostgresClusterStatusPatroni {
		if v == nil {
			return nil
		}
		return v.Patroni
	}).(PostgresClusterStatusPatroniPtrOutput)
}

func (o PostgresClusterStatusPtrOutput) Pgbackrest() PostgresClusterStatusPgbackrestPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatus) *PostgresClusterStatusPgbackrest {
		if v == nil {
			return nil
		}
		return v.Pgbackrest
	}).(PostgresClusterStatusPgbackrestPtrOutput)
}

// Stores the current PostgreSQL major version following a successful major PostgreSQL upgrade.
func (o PostgresClusterStatusPtrOutput) PostgresVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatus) *int {
		if v == nil {
			return nil
		}
		return v.PostgresVersion
	}).(pulumi.IntPtrOutput)
}

func (o PostgresClusterStatusPtrOutput) Proxy() PostgresClusterStatusProxyPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatus) *PostgresClusterStatusProxy {
		if v == nil {
			return nil
		}
		return v.Proxy
	}).(PostgresClusterStatusProxyPtrOutput)
}

// The instance that should be started first when bootstrapping and/or starting a PostgresCluster.
func (o PostgresClusterStatusPtrOutput) StartupInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.StartupInstance
	}).(pulumi.StringPtrOutput)
}

// The instance set associated with the startupInstance
func (o PostgresClusterStatusPtrOutput) StartupInstanceSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.StartupInstanceSet
	}).(pulumi.StringPtrOutput)
}

func (o PostgresClusterStatusPtrOutput) UserInterface() PostgresClusterStatusUserInterfacePtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatus) *PostgresClusterStatusUserInterface {
		if v == nil {
			return nil
		}
		return v.UserInterface
	}).(PostgresClusterStatusUserInterfacePtrOutput)
}

// Identifies the users that have been installed into PostgreSQL.
func (o PostgresClusterStatusPtrOutput) UsersRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.UsersRevision
	}).(pulumi.StringPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type PostgresClusterStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition. This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase.
	Type *string `pulumi:"type"`
}

// PostgresClusterStatusConditionsInput is an input type that accepts PostgresClusterStatusConditionsArgs and PostgresClusterStatusConditionsOutput values.
// You can construct a concrete instance of `PostgresClusterStatusConditionsInput` via:
//
//	PostgresClusterStatusConditionsArgs{...}
type PostgresClusterStatusConditionsInput interface {
	pulumi.Input

	ToPostgresClusterStatusConditionsOutput() PostgresClusterStatusConditionsOutput
	ToPostgresClusterStatusConditionsOutputWithContext(context.Context) PostgresClusterStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type PostgresClusterStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition. This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PostgresClusterStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusConditions)(nil)).Elem()
}

func (i PostgresClusterStatusConditionsArgs) ToPostgresClusterStatusConditionsOutput() PostgresClusterStatusConditionsOutput {
	return i.ToPostgresClusterStatusConditionsOutputWithContext(context.Background())
}

func (i PostgresClusterStatusConditionsArgs) ToPostgresClusterStatusConditionsOutputWithContext(ctx context.Context) PostgresClusterStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusConditionsOutput)
}

// PostgresClusterStatusConditionsArrayInput is an input type that accepts PostgresClusterStatusConditionsArray and PostgresClusterStatusConditionsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterStatusConditionsArrayInput` via:
//
//	PostgresClusterStatusConditionsArray{ PostgresClusterStatusConditionsArgs{...} }
type PostgresClusterStatusConditionsArrayInput interface {
	pulumi.Input

	ToPostgresClusterStatusConditionsArrayOutput() PostgresClusterStatusConditionsArrayOutput
	ToPostgresClusterStatusConditionsArrayOutputWithContext(context.Context) PostgresClusterStatusConditionsArrayOutput
}

type PostgresClusterStatusConditionsArray []PostgresClusterStatusConditionsInput

func (PostgresClusterStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusConditions)(nil)).Elem()
}

func (i PostgresClusterStatusConditionsArray) ToPostgresClusterStatusConditionsArrayOutput() PostgresClusterStatusConditionsArrayOutput {
	return i.ToPostgresClusterStatusConditionsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterStatusConditionsArray) ToPostgresClusterStatusConditionsArrayOutputWithContext(ctx context.Context) PostgresClusterStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type PostgresClusterStatusConditionsOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusConditions)(nil)).Elem()
}

func (o PostgresClusterStatusConditionsOutput) ToPostgresClusterStatusConditionsOutput() PostgresClusterStatusConditionsOutput {
	return o
}

func (o PostgresClusterStatusConditionsOutput) ToPostgresClusterStatusConditionsOutputWithContext(ctx context.Context) PostgresClusterStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o PostgresClusterStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition. This may be an empty string.
func (o PostgresClusterStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
func (o PostgresClusterStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
func (o PostgresClusterStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o PostgresClusterStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase.
func (o PostgresClusterStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusConditions)(nil)).Elem()
}

func (o PostgresClusterStatusConditionsArrayOutput) ToPostgresClusterStatusConditionsArrayOutput() PostgresClusterStatusConditionsArrayOutput {
	return o
}

func (o PostgresClusterStatusConditionsArrayOutput) ToPostgresClusterStatusConditionsArrayOutputWithContext(ctx context.Context) PostgresClusterStatusConditionsArrayOutput {
	return o
}

func (o PostgresClusterStatusConditionsArrayOutput) Index(i pulumi.IntInput) PostgresClusterStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterStatusConditions {
		return vs[0].([]PostgresClusterStatusConditions)[vs[1].(int)]
	}).(PostgresClusterStatusConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type PostgresClusterStatusConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition. This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase.
	Type *string `pulumi:"type"`
}

// PostgresClusterStatusConditionsPatchInput is an input type that accepts PostgresClusterStatusConditionsPatchArgs and PostgresClusterStatusConditionsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterStatusConditionsPatchInput` via:
//
//	PostgresClusterStatusConditionsPatchArgs{...}
type PostgresClusterStatusConditionsPatchInput interface {
	pulumi.Input

	ToPostgresClusterStatusConditionsPatchOutput() PostgresClusterStatusConditionsPatchOutput
	ToPostgresClusterStatusConditionsPatchOutputWithContext(context.Context) PostgresClusterStatusConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type PostgresClusterStatusConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition. This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PostgresClusterStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusConditionsPatch)(nil)).Elem()
}

func (i PostgresClusterStatusConditionsPatchArgs) ToPostgresClusterStatusConditionsPatchOutput() PostgresClusterStatusConditionsPatchOutput {
	return i.ToPostgresClusterStatusConditionsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterStatusConditionsPatchArgs) ToPostgresClusterStatusConditionsPatchOutputWithContext(ctx context.Context) PostgresClusterStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusConditionsPatchOutput)
}

// PostgresClusterStatusConditionsPatchArrayInput is an input type that accepts PostgresClusterStatusConditionsPatchArray and PostgresClusterStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterStatusConditionsPatchArrayInput` via:
//
//	PostgresClusterStatusConditionsPatchArray{ PostgresClusterStatusConditionsPatchArgs{...} }
type PostgresClusterStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterStatusConditionsPatchArrayOutput() PostgresClusterStatusConditionsPatchArrayOutput
	ToPostgresClusterStatusConditionsPatchArrayOutputWithContext(context.Context) PostgresClusterStatusConditionsPatchArrayOutput
}

type PostgresClusterStatusConditionsPatchArray []PostgresClusterStatusConditionsPatchInput

func (PostgresClusterStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusConditionsPatch)(nil)).Elem()
}

func (i PostgresClusterStatusConditionsPatchArray) ToPostgresClusterStatusConditionsPatchArrayOutput() PostgresClusterStatusConditionsPatchArrayOutput {
	return i.ToPostgresClusterStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterStatusConditionsPatchArray) ToPostgresClusterStatusConditionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type PostgresClusterStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusConditionsPatch)(nil)).Elem()
}

func (o PostgresClusterStatusConditionsPatchOutput) ToPostgresClusterStatusConditionsPatchOutput() PostgresClusterStatusConditionsPatchOutput {
	return o
}

func (o PostgresClusterStatusConditionsPatchOutput) ToPostgresClusterStatusConditionsPatchOutputWithContext(ctx context.Context) PostgresClusterStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o PostgresClusterStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition. This may be an empty string.
func (o PostgresClusterStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
func (o PostgresClusterStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
func (o PostgresClusterStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o PostgresClusterStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase.
func (o PostgresClusterStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusConditionsPatch)(nil)).Elem()
}

func (o PostgresClusterStatusConditionsPatchArrayOutput) ToPostgresClusterStatusConditionsPatchArrayOutput() PostgresClusterStatusConditionsPatchArrayOutput {
	return o
}

func (o PostgresClusterStatusConditionsPatchArrayOutput) ToPostgresClusterStatusConditionsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterStatusConditionsPatchArrayOutput {
	return o
}

func (o PostgresClusterStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterStatusConditionsPatch {
		return vs[0].([]PostgresClusterStatusConditionsPatch)[vs[1].(int)]
	}).(PostgresClusterStatusConditionsPatchOutput)
}

type PostgresClusterStatusInstances struct {
	Name *string `pulumi:"name"`
	// Total number of ready pods.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Total number of pods.
	Replicas *int `pulumi:"replicas"`
	// Total number of pods that have the desired specification.
	UpdatedReplicas *int `pulumi:"updatedReplicas"`
}

// PostgresClusterStatusInstancesInput is an input type that accepts PostgresClusterStatusInstancesArgs and PostgresClusterStatusInstancesOutput values.
// You can construct a concrete instance of `PostgresClusterStatusInstancesInput` via:
//
//	PostgresClusterStatusInstancesArgs{...}
type PostgresClusterStatusInstancesInput interface {
	pulumi.Input

	ToPostgresClusterStatusInstancesOutput() PostgresClusterStatusInstancesOutput
	ToPostgresClusterStatusInstancesOutputWithContext(context.Context) PostgresClusterStatusInstancesOutput
}

type PostgresClusterStatusInstancesArgs struct {
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Total number of ready pods.
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// Total number of pods.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Total number of pods that have the desired specification.
	UpdatedReplicas pulumi.IntPtrInput `pulumi:"updatedReplicas"`
}

func (PostgresClusterStatusInstancesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusInstances)(nil)).Elem()
}

func (i PostgresClusterStatusInstancesArgs) ToPostgresClusterStatusInstancesOutput() PostgresClusterStatusInstancesOutput {
	return i.ToPostgresClusterStatusInstancesOutputWithContext(context.Background())
}

func (i PostgresClusterStatusInstancesArgs) ToPostgresClusterStatusInstancesOutputWithContext(ctx context.Context) PostgresClusterStatusInstancesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusInstancesOutput)
}

// PostgresClusterStatusInstancesArrayInput is an input type that accepts PostgresClusterStatusInstancesArray and PostgresClusterStatusInstancesArrayOutput values.
// You can construct a concrete instance of `PostgresClusterStatusInstancesArrayInput` via:
//
//	PostgresClusterStatusInstancesArray{ PostgresClusterStatusInstancesArgs{...} }
type PostgresClusterStatusInstancesArrayInput interface {
	pulumi.Input

	ToPostgresClusterStatusInstancesArrayOutput() PostgresClusterStatusInstancesArrayOutput
	ToPostgresClusterStatusInstancesArrayOutputWithContext(context.Context) PostgresClusterStatusInstancesArrayOutput
}

type PostgresClusterStatusInstancesArray []PostgresClusterStatusInstancesInput

func (PostgresClusterStatusInstancesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusInstances)(nil)).Elem()
}

func (i PostgresClusterStatusInstancesArray) ToPostgresClusterStatusInstancesArrayOutput() PostgresClusterStatusInstancesArrayOutput {
	return i.ToPostgresClusterStatusInstancesArrayOutputWithContext(context.Background())
}

func (i PostgresClusterStatusInstancesArray) ToPostgresClusterStatusInstancesArrayOutputWithContext(ctx context.Context) PostgresClusterStatusInstancesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusInstancesArrayOutput)
}

type PostgresClusterStatusInstancesOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusInstancesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusInstances)(nil)).Elem()
}

func (o PostgresClusterStatusInstancesOutput) ToPostgresClusterStatusInstancesOutput() PostgresClusterStatusInstancesOutput {
	return o
}

func (o PostgresClusterStatusInstancesOutput) ToPostgresClusterStatusInstancesOutputWithContext(ctx context.Context) PostgresClusterStatusInstancesOutput {
	return o
}

func (o PostgresClusterStatusInstancesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusInstances) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Total number of ready pods.
func (o PostgresClusterStatusInstancesOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusInstances) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Total number of pods.
func (o PostgresClusterStatusInstancesOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusInstances) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Total number of pods that have the desired specification.
func (o PostgresClusterStatusInstancesOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusInstances) *int { return v.UpdatedReplicas }).(pulumi.IntPtrOutput)
}

type PostgresClusterStatusInstancesArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusInstancesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusInstances)(nil)).Elem()
}

func (o PostgresClusterStatusInstancesArrayOutput) ToPostgresClusterStatusInstancesArrayOutput() PostgresClusterStatusInstancesArrayOutput {
	return o
}

func (o PostgresClusterStatusInstancesArrayOutput) ToPostgresClusterStatusInstancesArrayOutputWithContext(ctx context.Context) PostgresClusterStatusInstancesArrayOutput {
	return o
}

func (o PostgresClusterStatusInstancesArrayOutput) Index(i pulumi.IntInput) PostgresClusterStatusInstancesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterStatusInstances {
		return vs[0].([]PostgresClusterStatusInstances)[vs[1].(int)]
	}).(PostgresClusterStatusInstancesOutput)
}

type PostgresClusterStatusInstancesPatch struct {
	Name *string `pulumi:"name"`
	// Total number of ready pods.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Total number of pods.
	Replicas *int `pulumi:"replicas"`
	// Total number of pods that have the desired specification.
	UpdatedReplicas *int `pulumi:"updatedReplicas"`
}

// PostgresClusterStatusInstancesPatchInput is an input type that accepts PostgresClusterStatusInstancesPatchArgs and PostgresClusterStatusInstancesPatchOutput values.
// You can construct a concrete instance of `PostgresClusterStatusInstancesPatchInput` via:
//
//	PostgresClusterStatusInstancesPatchArgs{...}
type PostgresClusterStatusInstancesPatchInput interface {
	pulumi.Input

	ToPostgresClusterStatusInstancesPatchOutput() PostgresClusterStatusInstancesPatchOutput
	ToPostgresClusterStatusInstancesPatchOutputWithContext(context.Context) PostgresClusterStatusInstancesPatchOutput
}

type PostgresClusterStatusInstancesPatchArgs struct {
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Total number of ready pods.
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// Total number of pods.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Total number of pods that have the desired specification.
	UpdatedReplicas pulumi.IntPtrInput `pulumi:"updatedReplicas"`
}

func (PostgresClusterStatusInstancesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusInstancesPatch)(nil)).Elem()
}

func (i PostgresClusterStatusInstancesPatchArgs) ToPostgresClusterStatusInstancesPatchOutput() PostgresClusterStatusInstancesPatchOutput {
	return i.ToPostgresClusterStatusInstancesPatchOutputWithContext(context.Background())
}

func (i PostgresClusterStatusInstancesPatchArgs) ToPostgresClusterStatusInstancesPatchOutputWithContext(ctx context.Context) PostgresClusterStatusInstancesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusInstancesPatchOutput)
}

// PostgresClusterStatusInstancesPatchArrayInput is an input type that accepts PostgresClusterStatusInstancesPatchArray and PostgresClusterStatusInstancesPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterStatusInstancesPatchArrayInput` via:
//
//	PostgresClusterStatusInstancesPatchArray{ PostgresClusterStatusInstancesPatchArgs{...} }
type PostgresClusterStatusInstancesPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterStatusInstancesPatchArrayOutput() PostgresClusterStatusInstancesPatchArrayOutput
	ToPostgresClusterStatusInstancesPatchArrayOutputWithContext(context.Context) PostgresClusterStatusInstancesPatchArrayOutput
}

type PostgresClusterStatusInstancesPatchArray []PostgresClusterStatusInstancesPatchInput

func (PostgresClusterStatusInstancesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusInstancesPatch)(nil)).Elem()
}

func (i PostgresClusterStatusInstancesPatchArray) ToPostgresClusterStatusInstancesPatchArrayOutput() PostgresClusterStatusInstancesPatchArrayOutput {
	return i.ToPostgresClusterStatusInstancesPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterStatusInstancesPatchArray) ToPostgresClusterStatusInstancesPatchArrayOutputWithContext(ctx context.Context) PostgresClusterStatusInstancesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusInstancesPatchArrayOutput)
}

type PostgresClusterStatusInstancesPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusInstancesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusInstancesPatch)(nil)).Elem()
}

func (o PostgresClusterStatusInstancesPatchOutput) ToPostgresClusterStatusInstancesPatchOutput() PostgresClusterStatusInstancesPatchOutput {
	return o
}

func (o PostgresClusterStatusInstancesPatchOutput) ToPostgresClusterStatusInstancesPatchOutputWithContext(ctx context.Context) PostgresClusterStatusInstancesPatchOutput {
	return o
}

func (o PostgresClusterStatusInstancesPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusInstancesPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Total number of ready pods.
func (o PostgresClusterStatusInstancesPatchOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusInstancesPatch) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Total number of pods.
func (o PostgresClusterStatusInstancesPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusInstancesPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Total number of pods that have the desired specification.
func (o PostgresClusterStatusInstancesPatchOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusInstancesPatch) *int { return v.UpdatedReplicas }).(pulumi.IntPtrOutput)
}

type PostgresClusterStatusInstancesPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusInstancesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusInstancesPatch)(nil)).Elem()
}

func (o PostgresClusterStatusInstancesPatchArrayOutput) ToPostgresClusterStatusInstancesPatchArrayOutput() PostgresClusterStatusInstancesPatchArrayOutput {
	return o
}

func (o PostgresClusterStatusInstancesPatchArrayOutput) ToPostgresClusterStatusInstancesPatchArrayOutputWithContext(ctx context.Context) PostgresClusterStatusInstancesPatchArrayOutput {
	return o
}

func (o PostgresClusterStatusInstancesPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterStatusInstancesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterStatusInstancesPatch {
		return vs[0].([]PostgresClusterStatusInstancesPatch)[vs[1].(int)]
	}).(PostgresClusterStatusInstancesPatchOutput)
}

// Current state of PostgreSQL cluster monitoring tool configuration
type PostgresClusterStatusMonitoring struct {
	ExporterConfiguration *string `pulumi:"exporterConfiguration"`
}

// PostgresClusterStatusMonitoringInput is an input type that accepts PostgresClusterStatusMonitoringArgs and PostgresClusterStatusMonitoringOutput values.
// You can construct a concrete instance of `PostgresClusterStatusMonitoringInput` via:
//
//	PostgresClusterStatusMonitoringArgs{...}
type PostgresClusterStatusMonitoringInput interface {
	pulumi.Input

	ToPostgresClusterStatusMonitoringOutput() PostgresClusterStatusMonitoringOutput
	ToPostgresClusterStatusMonitoringOutputWithContext(context.Context) PostgresClusterStatusMonitoringOutput
}

// Current state of PostgreSQL cluster monitoring tool configuration
type PostgresClusterStatusMonitoringArgs struct {
	ExporterConfiguration pulumi.StringPtrInput `pulumi:"exporterConfiguration"`
}

func (PostgresClusterStatusMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusMonitoring)(nil)).Elem()
}

func (i PostgresClusterStatusMonitoringArgs) ToPostgresClusterStatusMonitoringOutput() PostgresClusterStatusMonitoringOutput {
	return i.ToPostgresClusterStatusMonitoringOutputWithContext(context.Background())
}

func (i PostgresClusterStatusMonitoringArgs) ToPostgresClusterStatusMonitoringOutputWithContext(ctx context.Context) PostgresClusterStatusMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusMonitoringOutput)
}

func (i PostgresClusterStatusMonitoringArgs) ToPostgresClusterStatusMonitoringPtrOutput() PostgresClusterStatusMonitoringPtrOutput {
	return i.ToPostgresClusterStatusMonitoringPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusMonitoringArgs) ToPostgresClusterStatusMonitoringPtrOutputWithContext(ctx context.Context) PostgresClusterStatusMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusMonitoringOutput).ToPostgresClusterStatusMonitoringPtrOutputWithContext(ctx)
}

// PostgresClusterStatusMonitoringPtrInput is an input type that accepts PostgresClusterStatusMonitoringArgs, PostgresClusterStatusMonitoringPtr and PostgresClusterStatusMonitoringPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusMonitoringPtrInput` via:
//
//	        PostgresClusterStatusMonitoringArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusMonitoringPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusMonitoringPtrOutput() PostgresClusterStatusMonitoringPtrOutput
	ToPostgresClusterStatusMonitoringPtrOutputWithContext(context.Context) PostgresClusterStatusMonitoringPtrOutput
}

type postgresClusterStatusMonitoringPtrType PostgresClusterStatusMonitoringArgs

func PostgresClusterStatusMonitoringPtr(v *PostgresClusterStatusMonitoringArgs) PostgresClusterStatusMonitoringPtrInput {
	return (*postgresClusterStatusMonitoringPtrType)(v)
}

func (*postgresClusterStatusMonitoringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusMonitoring)(nil)).Elem()
}

func (i *postgresClusterStatusMonitoringPtrType) ToPostgresClusterStatusMonitoringPtrOutput() PostgresClusterStatusMonitoringPtrOutput {
	return i.ToPostgresClusterStatusMonitoringPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusMonitoringPtrType) ToPostgresClusterStatusMonitoringPtrOutputWithContext(ctx context.Context) PostgresClusterStatusMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusMonitoringPtrOutput)
}

// Current state of PostgreSQL cluster monitoring tool configuration
type PostgresClusterStatusMonitoringOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusMonitoring)(nil)).Elem()
}

func (o PostgresClusterStatusMonitoringOutput) ToPostgresClusterStatusMonitoringOutput() PostgresClusterStatusMonitoringOutput {
	return o
}

func (o PostgresClusterStatusMonitoringOutput) ToPostgresClusterStatusMonitoringOutputWithContext(ctx context.Context) PostgresClusterStatusMonitoringOutput {
	return o
}

func (o PostgresClusterStatusMonitoringOutput) ToPostgresClusterStatusMonitoringPtrOutput() PostgresClusterStatusMonitoringPtrOutput {
	return o.ToPostgresClusterStatusMonitoringPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusMonitoringOutput) ToPostgresClusterStatusMonitoringPtrOutputWithContext(ctx context.Context) PostgresClusterStatusMonitoringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusMonitoring) *PostgresClusterStatusMonitoring {
		return &v
	}).(PostgresClusterStatusMonitoringPtrOutput)
}

func (o PostgresClusterStatusMonitoringOutput) ExporterConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusMonitoring) *string { return v.ExporterConfiguration }).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusMonitoringPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusMonitoringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusMonitoring)(nil)).Elem()
}

func (o PostgresClusterStatusMonitoringPtrOutput) ToPostgresClusterStatusMonitoringPtrOutput() PostgresClusterStatusMonitoringPtrOutput {
	return o
}

func (o PostgresClusterStatusMonitoringPtrOutput) ToPostgresClusterStatusMonitoringPtrOutputWithContext(ctx context.Context) PostgresClusterStatusMonitoringPtrOutput {
	return o
}

func (o PostgresClusterStatusMonitoringPtrOutput) Elem() PostgresClusterStatusMonitoringOutput {
	return o.ApplyT(func(v *PostgresClusterStatusMonitoring) PostgresClusterStatusMonitoring {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusMonitoring
		return ret
	}).(PostgresClusterStatusMonitoringOutput)
}

func (o PostgresClusterStatusMonitoringPtrOutput) ExporterConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusMonitoring) *string {
		if v == nil {
			return nil
		}
		return v.ExporterConfiguration
	}).(pulumi.StringPtrOutput)
}

// Current state of PostgreSQL cluster monitoring tool configuration
type PostgresClusterStatusMonitoringPatch struct {
	ExporterConfiguration *string `pulumi:"exporterConfiguration"`
}

// PostgresClusterStatusMonitoringPatchInput is an input type that accepts PostgresClusterStatusMonitoringPatchArgs and PostgresClusterStatusMonitoringPatchOutput values.
// You can construct a concrete instance of `PostgresClusterStatusMonitoringPatchInput` via:
//
//	PostgresClusterStatusMonitoringPatchArgs{...}
type PostgresClusterStatusMonitoringPatchInput interface {
	pulumi.Input

	ToPostgresClusterStatusMonitoringPatchOutput() PostgresClusterStatusMonitoringPatchOutput
	ToPostgresClusterStatusMonitoringPatchOutputWithContext(context.Context) PostgresClusterStatusMonitoringPatchOutput
}

// Current state of PostgreSQL cluster monitoring tool configuration
type PostgresClusterStatusMonitoringPatchArgs struct {
	ExporterConfiguration pulumi.StringPtrInput `pulumi:"exporterConfiguration"`
}

func (PostgresClusterStatusMonitoringPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusMonitoringPatch)(nil)).Elem()
}

func (i PostgresClusterStatusMonitoringPatchArgs) ToPostgresClusterStatusMonitoringPatchOutput() PostgresClusterStatusMonitoringPatchOutput {
	return i.ToPostgresClusterStatusMonitoringPatchOutputWithContext(context.Background())
}

func (i PostgresClusterStatusMonitoringPatchArgs) ToPostgresClusterStatusMonitoringPatchOutputWithContext(ctx context.Context) PostgresClusterStatusMonitoringPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusMonitoringPatchOutput)
}

func (i PostgresClusterStatusMonitoringPatchArgs) ToPostgresClusterStatusMonitoringPatchPtrOutput() PostgresClusterStatusMonitoringPatchPtrOutput {
	return i.ToPostgresClusterStatusMonitoringPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusMonitoringPatchArgs) ToPostgresClusterStatusMonitoringPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusMonitoringPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusMonitoringPatchOutput).ToPostgresClusterStatusMonitoringPatchPtrOutputWithContext(ctx)
}

// PostgresClusterStatusMonitoringPatchPtrInput is an input type that accepts PostgresClusterStatusMonitoringPatchArgs, PostgresClusterStatusMonitoringPatchPtr and PostgresClusterStatusMonitoringPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusMonitoringPatchPtrInput` via:
//
//	        PostgresClusterStatusMonitoringPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusMonitoringPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusMonitoringPatchPtrOutput() PostgresClusterStatusMonitoringPatchPtrOutput
	ToPostgresClusterStatusMonitoringPatchPtrOutputWithContext(context.Context) PostgresClusterStatusMonitoringPatchPtrOutput
}

type postgresClusterStatusMonitoringPatchPtrType PostgresClusterStatusMonitoringPatchArgs

func PostgresClusterStatusMonitoringPatchPtr(v *PostgresClusterStatusMonitoringPatchArgs) PostgresClusterStatusMonitoringPatchPtrInput {
	return (*postgresClusterStatusMonitoringPatchPtrType)(v)
}

func (*postgresClusterStatusMonitoringPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusMonitoringPatch)(nil)).Elem()
}

func (i *postgresClusterStatusMonitoringPatchPtrType) ToPostgresClusterStatusMonitoringPatchPtrOutput() PostgresClusterStatusMonitoringPatchPtrOutput {
	return i.ToPostgresClusterStatusMonitoringPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusMonitoringPatchPtrType) ToPostgresClusterStatusMonitoringPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusMonitoringPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusMonitoringPatchPtrOutput)
}

// Current state of PostgreSQL cluster monitoring tool configuration
type PostgresClusterStatusMonitoringPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusMonitoringPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusMonitoringPatch)(nil)).Elem()
}

func (o PostgresClusterStatusMonitoringPatchOutput) ToPostgresClusterStatusMonitoringPatchOutput() PostgresClusterStatusMonitoringPatchOutput {
	return o
}

func (o PostgresClusterStatusMonitoringPatchOutput) ToPostgresClusterStatusMonitoringPatchOutputWithContext(ctx context.Context) PostgresClusterStatusMonitoringPatchOutput {
	return o
}

func (o PostgresClusterStatusMonitoringPatchOutput) ToPostgresClusterStatusMonitoringPatchPtrOutput() PostgresClusterStatusMonitoringPatchPtrOutput {
	return o.ToPostgresClusterStatusMonitoringPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusMonitoringPatchOutput) ToPostgresClusterStatusMonitoringPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusMonitoringPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusMonitoringPatch) *PostgresClusterStatusMonitoringPatch {
		return &v
	}).(PostgresClusterStatusMonitoringPatchPtrOutput)
}

func (o PostgresClusterStatusMonitoringPatchOutput) ExporterConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusMonitoringPatch) *string { return v.ExporterConfiguration }).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusMonitoringPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusMonitoringPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusMonitoringPatch)(nil)).Elem()
}

func (o PostgresClusterStatusMonitoringPatchPtrOutput) ToPostgresClusterStatusMonitoringPatchPtrOutput() PostgresClusterStatusMonitoringPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusMonitoringPatchPtrOutput) ToPostgresClusterStatusMonitoringPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusMonitoringPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusMonitoringPatchPtrOutput) Elem() PostgresClusterStatusMonitoringPatchOutput {
	return o.ApplyT(func(v *PostgresClusterStatusMonitoringPatch) PostgresClusterStatusMonitoringPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusMonitoringPatch
		return ret
	}).(PostgresClusterStatusMonitoringPatchOutput)
}

func (o PostgresClusterStatusMonitoringPatchPtrOutput) ExporterConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusMonitoringPatch) *string {
		if v == nil {
			return nil
		}
		return v.ExporterConfiguration
	}).(pulumi.StringPtrOutput)
}

// PostgresClusterStatus defines the observed state of PostgresCluster
type PostgresClusterStatusPatch struct {
	// conditions represent the observations of postgrescluster's current state. Known .status.conditions.type are: "PersistentVolumeResizing", "Progressing", "ProxyAvailable"
	Conditions []PostgresClusterStatusConditionsPatch `pulumi:"conditions"`
	// DatabaseInitSQL state of custom database initialization in the cluster
	DatabaseInitSQL *string `pulumi:"databaseInitSQL"`
	// Identifies the databases that have been installed into PostgreSQL.
	DatabaseRevision *string `pulumi:"databaseRevision"`
	// Current state of PostgreSQL instances.
	Instances  []PostgresClusterStatusInstancesPatch `pulumi:"instances"`
	Monitoring *PostgresClusterStatusMonitoringPatch `pulumi:"monitoring"`
	// observedGeneration represents the .metadata.generation on which the status was based.
	ObservedGeneration *int                                  `pulumi:"observedGeneration"`
	Patroni            *PostgresClusterStatusPatroniPatch    `pulumi:"patroni"`
	Pgbackrest         *PostgresClusterStatusPgbackrestPatch `pulumi:"pgbackrest"`
	// Stores the current PostgreSQL major version following a successful major PostgreSQL upgrade.
	PostgresVersion *int                             `pulumi:"postgresVersion"`
	Proxy           *PostgresClusterStatusProxyPatch `pulumi:"proxy"`
	// The instance that should be started first when bootstrapping and/or starting a PostgresCluster.
	StartupInstance *string `pulumi:"startupInstance"`
	// The instance set associated with the startupInstance
	StartupInstanceSet *string                                  `pulumi:"startupInstanceSet"`
	UserInterface      *PostgresClusterStatusUserInterfacePatch `pulumi:"userInterface"`
	// Identifies the users that have been installed into PostgreSQL.
	UsersRevision *string `pulumi:"usersRevision"`
}

// PostgresClusterStatusPatchInput is an input type that accepts PostgresClusterStatusPatchArgs and PostgresClusterStatusPatchOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPatchInput` via:
//
//	PostgresClusterStatusPatchArgs{...}
type PostgresClusterStatusPatchInput interface {
	pulumi.Input

	ToPostgresClusterStatusPatchOutput() PostgresClusterStatusPatchOutput
	ToPostgresClusterStatusPatchOutputWithContext(context.Context) PostgresClusterStatusPatchOutput
}

// PostgresClusterStatus defines the observed state of PostgresCluster
type PostgresClusterStatusPatchArgs struct {
	// conditions represent the observations of postgrescluster's current state. Known .status.conditions.type are: "PersistentVolumeResizing", "Progressing", "ProxyAvailable"
	Conditions PostgresClusterStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// DatabaseInitSQL state of custom database initialization in the cluster
	DatabaseInitSQL pulumi.StringPtrInput `pulumi:"databaseInitSQL"`
	// Identifies the databases that have been installed into PostgreSQL.
	DatabaseRevision pulumi.StringPtrInput `pulumi:"databaseRevision"`
	// Current state of PostgreSQL instances.
	Instances  PostgresClusterStatusInstancesPatchArrayInput `pulumi:"instances"`
	Monitoring PostgresClusterStatusMonitoringPatchPtrInput  `pulumi:"monitoring"`
	// observedGeneration represents the .metadata.generation on which the status was based.
	ObservedGeneration pulumi.IntPtrInput                           `pulumi:"observedGeneration"`
	Patroni            PostgresClusterStatusPatroniPatchPtrInput    `pulumi:"patroni"`
	Pgbackrest         PostgresClusterStatusPgbackrestPatchPtrInput `pulumi:"pgbackrest"`
	// Stores the current PostgreSQL major version following a successful major PostgreSQL upgrade.
	PostgresVersion pulumi.IntPtrInput                      `pulumi:"postgresVersion"`
	Proxy           PostgresClusterStatusProxyPatchPtrInput `pulumi:"proxy"`
	// The instance that should be started first when bootstrapping and/or starting a PostgresCluster.
	StartupInstance pulumi.StringPtrInput `pulumi:"startupInstance"`
	// The instance set associated with the startupInstance
	StartupInstanceSet pulumi.StringPtrInput                           `pulumi:"startupInstanceSet"`
	UserInterface      PostgresClusterStatusUserInterfacePatchPtrInput `pulumi:"userInterface"`
	// Identifies the users that have been installed into PostgreSQL.
	UsersRevision pulumi.StringPtrInput `pulumi:"usersRevision"`
}

func (PostgresClusterStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPatch)(nil)).Elem()
}

func (i PostgresClusterStatusPatchArgs) ToPostgresClusterStatusPatchOutput() PostgresClusterStatusPatchOutput {
	return i.ToPostgresClusterStatusPatchOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPatchArgs) ToPostgresClusterStatusPatchOutputWithContext(ctx context.Context) PostgresClusterStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPatchOutput)
}

func (i PostgresClusterStatusPatchArgs) ToPostgresClusterStatusPatchPtrOutput() PostgresClusterStatusPatchPtrOutput {
	return i.ToPostgresClusterStatusPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPatchArgs) ToPostgresClusterStatusPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPatchOutput).ToPostgresClusterStatusPatchPtrOutputWithContext(ctx)
}

// PostgresClusterStatusPatchPtrInput is an input type that accepts PostgresClusterStatusPatchArgs, PostgresClusterStatusPatchPtr and PostgresClusterStatusPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPatchPtrInput` via:
//
//	        PostgresClusterStatusPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusPatchPtrOutput() PostgresClusterStatusPatchPtrOutput
	ToPostgresClusterStatusPatchPtrOutputWithContext(context.Context) PostgresClusterStatusPatchPtrOutput
}

type postgresClusterStatusPatchPtrType PostgresClusterStatusPatchArgs

func PostgresClusterStatusPatchPtr(v *PostgresClusterStatusPatchArgs) PostgresClusterStatusPatchPtrInput {
	return (*postgresClusterStatusPatchPtrType)(v)
}

func (*postgresClusterStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPatch)(nil)).Elem()
}

func (i *postgresClusterStatusPatchPtrType) ToPostgresClusterStatusPatchPtrOutput() PostgresClusterStatusPatchPtrOutput {
	return i.ToPostgresClusterStatusPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusPatchPtrType) ToPostgresClusterStatusPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPatchPtrOutput)
}

// PostgresClusterStatus defines the observed state of PostgresCluster
type PostgresClusterStatusPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPatch)(nil)).Elem()
}

func (o PostgresClusterStatusPatchOutput) ToPostgresClusterStatusPatchOutput() PostgresClusterStatusPatchOutput {
	return o
}

func (o PostgresClusterStatusPatchOutput) ToPostgresClusterStatusPatchOutputWithContext(ctx context.Context) PostgresClusterStatusPatchOutput {
	return o
}

func (o PostgresClusterStatusPatchOutput) ToPostgresClusterStatusPatchPtrOutput() PostgresClusterStatusPatchPtrOutput {
	return o.ToPostgresClusterStatusPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusPatchOutput) ToPostgresClusterStatusPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusPatch) *PostgresClusterStatusPatch {
		return &v
	}).(PostgresClusterStatusPatchPtrOutput)
}

// conditions represent the observations of postgrescluster's current state. Known .status.conditions.type are: "PersistentVolumeResizing", "Progressing", "ProxyAvailable"
func (o PostgresClusterStatusPatchOutput) Conditions() PostgresClusterStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatch) []PostgresClusterStatusConditionsPatch { return v.Conditions }).(PostgresClusterStatusConditionsPatchArrayOutput)
}

// DatabaseInitSQL state of custom database initialization in the cluster
func (o PostgresClusterStatusPatchOutput) DatabaseInitSQL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatch) *string { return v.DatabaseInitSQL }).(pulumi.StringPtrOutput)
}

// Identifies the databases that have been installed into PostgreSQL.
func (o PostgresClusterStatusPatchOutput) DatabaseRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatch) *string { return v.DatabaseRevision }).(pulumi.StringPtrOutput)
}

// Current state of PostgreSQL instances.
func (o PostgresClusterStatusPatchOutput) Instances() PostgresClusterStatusInstancesPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatch) []PostgresClusterStatusInstancesPatch { return v.Instances }).(PostgresClusterStatusInstancesPatchArrayOutput)
}

func (o PostgresClusterStatusPatchOutput) Monitoring() PostgresClusterStatusMonitoringPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatch) *PostgresClusterStatusMonitoringPatch { return v.Monitoring }).(PostgresClusterStatusMonitoringPatchPtrOutput)
}

// observedGeneration represents the .metadata.generation on which the status was based.
func (o PostgresClusterStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

func (o PostgresClusterStatusPatchOutput) Patroni() PostgresClusterStatusPatroniPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatch) *PostgresClusterStatusPatroniPatch { return v.Patroni }).(PostgresClusterStatusPatroniPatchPtrOutput)
}

func (o PostgresClusterStatusPatchOutput) Pgbackrest() PostgresClusterStatusPgbackrestPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatch) *PostgresClusterStatusPgbackrestPatch { return v.Pgbackrest }).(PostgresClusterStatusPgbackrestPatchPtrOutput)
}

// Stores the current PostgreSQL major version following a successful major PostgreSQL upgrade.
func (o PostgresClusterStatusPatchOutput) PostgresVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatch) *int { return v.PostgresVersion }).(pulumi.IntPtrOutput)
}

func (o PostgresClusterStatusPatchOutput) Proxy() PostgresClusterStatusProxyPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatch) *PostgresClusterStatusProxyPatch { return v.Proxy }).(PostgresClusterStatusProxyPatchPtrOutput)
}

// The instance that should be started first when bootstrapping and/or starting a PostgresCluster.
func (o PostgresClusterStatusPatchOutput) StartupInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatch) *string { return v.StartupInstance }).(pulumi.StringPtrOutput)
}

// The instance set associated with the startupInstance
func (o PostgresClusterStatusPatchOutput) StartupInstanceSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatch) *string { return v.StartupInstanceSet }).(pulumi.StringPtrOutput)
}

func (o PostgresClusterStatusPatchOutput) UserInterface() PostgresClusterStatusUserInterfacePatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatch) *PostgresClusterStatusUserInterfacePatch { return v.UserInterface }).(PostgresClusterStatusUserInterfacePatchPtrOutput)
}

// Identifies the users that have been installed into PostgreSQL.
func (o PostgresClusterStatusPatchOutput) UsersRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatch) *string { return v.UsersRevision }).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPatch)(nil)).Elem()
}

func (o PostgresClusterStatusPatchPtrOutput) ToPostgresClusterStatusPatchPtrOutput() PostgresClusterStatusPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusPatchPtrOutput) ToPostgresClusterStatusPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusPatchPtrOutput) Elem() PostgresClusterStatusPatchOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatch) PostgresClusterStatusPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusPatch
		return ret
	}).(PostgresClusterStatusPatchOutput)
}

// conditions represent the observations of postgrescluster's current state. Known .status.conditions.type are: "PersistentVolumeResizing", "Progressing", "ProxyAvailable"
func (o PostgresClusterStatusPatchPtrOutput) Conditions() PostgresClusterStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatch) []PostgresClusterStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(PostgresClusterStatusConditionsPatchArrayOutput)
}

// DatabaseInitSQL state of custom database initialization in the cluster
func (o PostgresClusterStatusPatchPtrOutput) DatabaseInitSQL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseInitSQL
	}).(pulumi.StringPtrOutput)
}

// Identifies the databases that have been installed into PostgreSQL.
func (o PostgresClusterStatusPatchPtrOutput) DatabaseRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseRevision
	}).(pulumi.StringPtrOutput)
}

// Current state of PostgreSQL instances.
func (o PostgresClusterStatusPatchPtrOutput) Instances() PostgresClusterStatusInstancesPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatch) []PostgresClusterStatusInstancesPatch {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(PostgresClusterStatusInstancesPatchArrayOutput)
}

func (o PostgresClusterStatusPatchPtrOutput) Monitoring() PostgresClusterStatusMonitoringPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatch) *PostgresClusterStatusMonitoringPatch {
		if v == nil {
			return nil
		}
		return v.Monitoring
	}).(PostgresClusterStatusMonitoringPatchPtrOutput)
}

// observedGeneration represents the .metadata.generation on which the status was based.
func (o PostgresClusterStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

func (o PostgresClusterStatusPatchPtrOutput) Patroni() PostgresClusterStatusPatroniPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatch) *PostgresClusterStatusPatroniPatch {
		if v == nil {
			return nil
		}
		return v.Patroni
	}).(PostgresClusterStatusPatroniPatchPtrOutput)
}

func (o PostgresClusterStatusPatchPtrOutput) Pgbackrest() PostgresClusterStatusPgbackrestPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatch) *PostgresClusterStatusPgbackrestPatch {
		if v == nil {
			return nil
		}
		return v.Pgbackrest
	}).(PostgresClusterStatusPgbackrestPatchPtrOutput)
}

// Stores the current PostgreSQL major version following a successful major PostgreSQL upgrade.
func (o PostgresClusterStatusPatchPtrOutput) PostgresVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.PostgresVersion
	}).(pulumi.IntPtrOutput)
}

func (o PostgresClusterStatusPatchPtrOutput) Proxy() PostgresClusterStatusProxyPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatch) *PostgresClusterStatusProxyPatch {
		if v == nil {
			return nil
		}
		return v.Proxy
	}).(PostgresClusterStatusProxyPatchPtrOutput)
}

// The instance that should be started first when bootstrapping and/or starting a PostgresCluster.
func (o PostgresClusterStatusPatchPtrOutput) StartupInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.StartupInstance
	}).(pulumi.StringPtrOutput)
}

// The instance set associated with the startupInstance
func (o PostgresClusterStatusPatchPtrOutput) StartupInstanceSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.StartupInstanceSet
	}).(pulumi.StringPtrOutput)
}

func (o PostgresClusterStatusPatchPtrOutput) UserInterface() PostgresClusterStatusUserInterfacePatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatch) *PostgresClusterStatusUserInterfacePatch {
		if v == nil {
			return nil
		}
		return v.UserInterface
	}).(PostgresClusterStatusUserInterfacePatchPtrOutput)
}

// Identifies the users that have been installed into PostgreSQL.
func (o PostgresClusterStatusPatchPtrOutput) UsersRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.UsersRevision
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusPatroni struct {
	// Tracks the execution of the switchover requests.
	Switchover *string `pulumi:"switchover"`
	// Tracks the current timeline during switchovers
	SwitchoverTimeline *int `pulumi:"switchoverTimeline"`
	// The PostgreSQL system identifier reported by Patroni.
	SystemIdentifier *string `pulumi:"systemIdentifier"`
}

// PostgresClusterStatusPatroniInput is an input type that accepts PostgresClusterStatusPatroniArgs and PostgresClusterStatusPatroniOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPatroniInput` via:
//
//	PostgresClusterStatusPatroniArgs{...}
type PostgresClusterStatusPatroniInput interface {
	pulumi.Input

	ToPostgresClusterStatusPatroniOutput() PostgresClusterStatusPatroniOutput
	ToPostgresClusterStatusPatroniOutputWithContext(context.Context) PostgresClusterStatusPatroniOutput
}

type PostgresClusterStatusPatroniArgs struct {
	// Tracks the execution of the switchover requests.
	Switchover pulumi.StringPtrInput `pulumi:"switchover"`
	// Tracks the current timeline during switchovers
	SwitchoverTimeline pulumi.IntPtrInput `pulumi:"switchoverTimeline"`
	// The PostgreSQL system identifier reported by Patroni.
	SystemIdentifier pulumi.StringPtrInput `pulumi:"systemIdentifier"`
}

func (PostgresClusterStatusPatroniArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPatroni)(nil)).Elem()
}

func (i PostgresClusterStatusPatroniArgs) ToPostgresClusterStatusPatroniOutput() PostgresClusterStatusPatroniOutput {
	return i.ToPostgresClusterStatusPatroniOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPatroniArgs) ToPostgresClusterStatusPatroniOutputWithContext(ctx context.Context) PostgresClusterStatusPatroniOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPatroniOutput)
}

func (i PostgresClusterStatusPatroniArgs) ToPostgresClusterStatusPatroniPtrOutput() PostgresClusterStatusPatroniPtrOutput {
	return i.ToPostgresClusterStatusPatroniPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPatroniArgs) ToPostgresClusterStatusPatroniPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPatroniPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPatroniOutput).ToPostgresClusterStatusPatroniPtrOutputWithContext(ctx)
}

// PostgresClusterStatusPatroniPtrInput is an input type that accepts PostgresClusterStatusPatroniArgs, PostgresClusterStatusPatroniPtr and PostgresClusterStatusPatroniPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPatroniPtrInput` via:
//
//	        PostgresClusterStatusPatroniArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusPatroniPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusPatroniPtrOutput() PostgresClusterStatusPatroniPtrOutput
	ToPostgresClusterStatusPatroniPtrOutputWithContext(context.Context) PostgresClusterStatusPatroniPtrOutput
}

type postgresClusterStatusPatroniPtrType PostgresClusterStatusPatroniArgs

func PostgresClusterStatusPatroniPtr(v *PostgresClusterStatusPatroniArgs) PostgresClusterStatusPatroniPtrInput {
	return (*postgresClusterStatusPatroniPtrType)(v)
}

func (*postgresClusterStatusPatroniPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPatroni)(nil)).Elem()
}

func (i *postgresClusterStatusPatroniPtrType) ToPostgresClusterStatusPatroniPtrOutput() PostgresClusterStatusPatroniPtrOutput {
	return i.ToPostgresClusterStatusPatroniPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusPatroniPtrType) ToPostgresClusterStatusPatroniPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPatroniPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPatroniPtrOutput)
}

type PostgresClusterStatusPatroniOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPatroniOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPatroni)(nil)).Elem()
}

func (o PostgresClusterStatusPatroniOutput) ToPostgresClusterStatusPatroniOutput() PostgresClusterStatusPatroniOutput {
	return o
}

func (o PostgresClusterStatusPatroniOutput) ToPostgresClusterStatusPatroniOutputWithContext(ctx context.Context) PostgresClusterStatusPatroniOutput {
	return o
}

func (o PostgresClusterStatusPatroniOutput) ToPostgresClusterStatusPatroniPtrOutput() PostgresClusterStatusPatroniPtrOutput {
	return o.ToPostgresClusterStatusPatroniPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusPatroniOutput) ToPostgresClusterStatusPatroniPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPatroniPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusPatroni) *PostgresClusterStatusPatroni {
		return &v
	}).(PostgresClusterStatusPatroniPtrOutput)
}

// Tracks the execution of the switchover requests.
func (o PostgresClusterStatusPatroniOutput) Switchover() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatroni) *string { return v.Switchover }).(pulumi.StringPtrOutput)
}

// Tracks the current timeline during switchovers
func (o PostgresClusterStatusPatroniOutput) SwitchoverTimeline() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatroni) *int { return v.SwitchoverTimeline }).(pulumi.IntPtrOutput)
}

// The PostgreSQL system identifier reported by Patroni.
func (o PostgresClusterStatusPatroniOutput) SystemIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatroni) *string { return v.SystemIdentifier }).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusPatroniPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPatroniPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPatroni)(nil)).Elem()
}

func (o PostgresClusterStatusPatroniPtrOutput) ToPostgresClusterStatusPatroniPtrOutput() PostgresClusterStatusPatroniPtrOutput {
	return o
}

func (o PostgresClusterStatusPatroniPtrOutput) ToPostgresClusterStatusPatroniPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPatroniPtrOutput {
	return o
}

func (o PostgresClusterStatusPatroniPtrOutput) Elem() PostgresClusterStatusPatroniOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatroni) PostgresClusterStatusPatroni {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusPatroni
		return ret
	}).(PostgresClusterStatusPatroniOutput)
}

// Tracks the execution of the switchover requests.
func (o PostgresClusterStatusPatroniPtrOutput) Switchover() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatroni) *string {
		if v == nil {
			return nil
		}
		return v.Switchover
	}).(pulumi.StringPtrOutput)
}

// Tracks the current timeline during switchovers
func (o PostgresClusterStatusPatroniPtrOutput) SwitchoverTimeline() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatroni) *int {
		if v == nil {
			return nil
		}
		return v.SwitchoverTimeline
	}).(pulumi.IntPtrOutput)
}

// The PostgreSQL system identifier reported by Patroni.
func (o PostgresClusterStatusPatroniPtrOutput) SystemIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatroni) *string {
		if v == nil {
			return nil
		}
		return v.SystemIdentifier
	}).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusPatroniPatch struct {
	// Tracks the execution of the switchover requests.
	Switchover *string `pulumi:"switchover"`
	// Tracks the current timeline during switchovers
	SwitchoverTimeline *int `pulumi:"switchoverTimeline"`
	// The PostgreSQL system identifier reported by Patroni.
	SystemIdentifier *string `pulumi:"systemIdentifier"`
}

// PostgresClusterStatusPatroniPatchInput is an input type that accepts PostgresClusterStatusPatroniPatchArgs and PostgresClusterStatusPatroniPatchOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPatroniPatchInput` via:
//
//	PostgresClusterStatusPatroniPatchArgs{...}
type PostgresClusterStatusPatroniPatchInput interface {
	pulumi.Input

	ToPostgresClusterStatusPatroniPatchOutput() PostgresClusterStatusPatroniPatchOutput
	ToPostgresClusterStatusPatroniPatchOutputWithContext(context.Context) PostgresClusterStatusPatroniPatchOutput
}

type PostgresClusterStatusPatroniPatchArgs struct {
	// Tracks the execution of the switchover requests.
	Switchover pulumi.StringPtrInput `pulumi:"switchover"`
	// Tracks the current timeline during switchovers
	SwitchoverTimeline pulumi.IntPtrInput `pulumi:"switchoverTimeline"`
	// The PostgreSQL system identifier reported by Patroni.
	SystemIdentifier pulumi.StringPtrInput `pulumi:"systemIdentifier"`
}

func (PostgresClusterStatusPatroniPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPatroniPatch)(nil)).Elem()
}

func (i PostgresClusterStatusPatroniPatchArgs) ToPostgresClusterStatusPatroniPatchOutput() PostgresClusterStatusPatroniPatchOutput {
	return i.ToPostgresClusterStatusPatroniPatchOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPatroniPatchArgs) ToPostgresClusterStatusPatroniPatchOutputWithContext(ctx context.Context) PostgresClusterStatusPatroniPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPatroniPatchOutput)
}

func (i PostgresClusterStatusPatroniPatchArgs) ToPostgresClusterStatusPatroniPatchPtrOutput() PostgresClusterStatusPatroniPatchPtrOutput {
	return i.ToPostgresClusterStatusPatroniPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPatroniPatchArgs) ToPostgresClusterStatusPatroniPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPatroniPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPatroniPatchOutput).ToPostgresClusterStatusPatroniPatchPtrOutputWithContext(ctx)
}

// PostgresClusterStatusPatroniPatchPtrInput is an input type that accepts PostgresClusterStatusPatroniPatchArgs, PostgresClusterStatusPatroniPatchPtr and PostgresClusterStatusPatroniPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPatroniPatchPtrInput` via:
//
//	        PostgresClusterStatusPatroniPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusPatroniPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusPatroniPatchPtrOutput() PostgresClusterStatusPatroniPatchPtrOutput
	ToPostgresClusterStatusPatroniPatchPtrOutputWithContext(context.Context) PostgresClusterStatusPatroniPatchPtrOutput
}

type postgresClusterStatusPatroniPatchPtrType PostgresClusterStatusPatroniPatchArgs

func PostgresClusterStatusPatroniPatchPtr(v *PostgresClusterStatusPatroniPatchArgs) PostgresClusterStatusPatroniPatchPtrInput {
	return (*postgresClusterStatusPatroniPatchPtrType)(v)
}

func (*postgresClusterStatusPatroniPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPatroniPatch)(nil)).Elem()
}

func (i *postgresClusterStatusPatroniPatchPtrType) ToPostgresClusterStatusPatroniPatchPtrOutput() PostgresClusterStatusPatroniPatchPtrOutput {
	return i.ToPostgresClusterStatusPatroniPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusPatroniPatchPtrType) ToPostgresClusterStatusPatroniPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPatroniPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPatroniPatchPtrOutput)
}

type PostgresClusterStatusPatroniPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPatroniPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPatroniPatch)(nil)).Elem()
}

func (o PostgresClusterStatusPatroniPatchOutput) ToPostgresClusterStatusPatroniPatchOutput() PostgresClusterStatusPatroniPatchOutput {
	return o
}

func (o PostgresClusterStatusPatroniPatchOutput) ToPostgresClusterStatusPatroniPatchOutputWithContext(ctx context.Context) PostgresClusterStatusPatroniPatchOutput {
	return o
}

func (o PostgresClusterStatusPatroniPatchOutput) ToPostgresClusterStatusPatroniPatchPtrOutput() PostgresClusterStatusPatroniPatchPtrOutput {
	return o.ToPostgresClusterStatusPatroniPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusPatroniPatchOutput) ToPostgresClusterStatusPatroniPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPatroniPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusPatroniPatch) *PostgresClusterStatusPatroniPatch {
		return &v
	}).(PostgresClusterStatusPatroniPatchPtrOutput)
}

// Tracks the execution of the switchover requests.
func (o PostgresClusterStatusPatroniPatchOutput) Switchover() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatroniPatch) *string { return v.Switchover }).(pulumi.StringPtrOutput)
}

// Tracks the current timeline during switchovers
func (o PostgresClusterStatusPatroniPatchOutput) SwitchoverTimeline() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatroniPatch) *int { return v.SwitchoverTimeline }).(pulumi.IntPtrOutput)
}

// The PostgreSQL system identifier reported by Patroni.
func (o PostgresClusterStatusPatroniPatchOutput) SystemIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPatroniPatch) *string { return v.SystemIdentifier }).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusPatroniPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPatroniPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPatroniPatch)(nil)).Elem()
}

func (o PostgresClusterStatusPatroniPatchPtrOutput) ToPostgresClusterStatusPatroniPatchPtrOutput() PostgresClusterStatusPatroniPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusPatroniPatchPtrOutput) ToPostgresClusterStatusPatroniPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPatroniPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusPatroniPatchPtrOutput) Elem() PostgresClusterStatusPatroniPatchOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatroniPatch) PostgresClusterStatusPatroniPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusPatroniPatch
		return ret
	}).(PostgresClusterStatusPatroniPatchOutput)
}

// Tracks the execution of the switchover requests.
func (o PostgresClusterStatusPatroniPatchPtrOutput) Switchover() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatroniPatch) *string {
		if v == nil {
			return nil
		}
		return v.Switchover
	}).(pulumi.StringPtrOutput)
}

// Tracks the current timeline during switchovers
func (o PostgresClusterStatusPatroniPatchPtrOutput) SwitchoverTimeline() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatroniPatch) *int {
		if v == nil {
			return nil
		}
		return v.SwitchoverTimeline
	}).(pulumi.IntPtrOutput)
}

// The PostgreSQL system identifier reported by Patroni.
func (o PostgresClusterStatusPatroniPatchPtrOutput) SystemIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPatroniPatch) *string {
		if v == nil {
			return nil
		}
		return v.SystemIdentifier
	}).(pulumi.StringPtrOutput)
}

// Status information for pgBackRest
type PostgresClusterStatusPgbackrest struct {
	ManualBackup *PostgresClusterStatusPgbackrestManualBackup `pulumi:"manualBackup"`
	RepoHost     *PostgresClusterStatusPgbackrestRepoHost     `pulumi:"repoHost"`
	// Status information for pgBackRest repositories
	Repos   []PostgresClusterStatusPgbackrestRepos  `pulumi:"repos"`
	Restore *PostgresClusterStatusPgbackrestRestore `pulumi:"restore"`
	// Status information for scheduled backups
	ScheduledBackups []PostgresClusterStatusPgbackrestScheduledBackups `pulumi:"scheduledBackups"`
}

// PostgresClusterStatusPgbackrestInput is an input type that accepts PostgresClusterStatusPgbackrestArgs and PostgresClusterStatusPgbackrestOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestInput` via:
//
//	PostgresClusterStatusPgbackrestArgs{...}
type PostgresClusterStatusPgbackrestInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestOutput() PostgresClusterStatusPgbackrestOutput
	ToPostgresClusterStatusPgbackrestOutputWithContext(context.Context) PostgresClusterStatusPgbackrestOutput
}

// Status information for pgBackRest
type PostgresClusterStatusPgbackrestArgs struct {
	ManualBackup PostgresClusterStatusPgbackrestManualBackupPtrInput `pulumi:"manualBackup"`
	RepoHost     PostgresClusterStatusPgbackrestRepoHostPtrInput     `pulumi:"repoHost"`
	// Status information for pgBackRest repositories
	Repos   PostgresClusterStatusPgbackrestReposArrayInput `pulumi:"repos"`
	Restore PostgresClusterStatusPgbackrestRestorePtrInput `pulumi:"restore"`
	// Status information for scheduled backups
	ScheduledBackups PostgresClusterStatusPgbackrestScheduledBackupsArrayInput `pulumi:"scheduledBackups"`
}

func (PostgresClusterStatusPgbackrestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrest)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestArgs) ToPostgresClusterStatusPgbackrestOutput() PostgresClusterStatusPgbackrestOutput {
	return i.ToPostgresClusterStatusPgbackrestOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestArgs) ToPostgresClusterStatusPgbackrestOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestOutput)
}

func (i PostgresClusterStatusPgbackrestArgs) ToPostgresClusterStatusPgbackrestPtrOutput() PostgresClusterStatusPgbackrestPtrOutput {
	return i.ToPostgresClusterStatusPgbackrestPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestArgs) ToPostgresClusterStatusPgbackrestPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestOutput).ToPostgresClusterStatusPgbackrestPtrOutputWithContext(ctx)
}

// PostgresClusterStatusPgbackrestPtrInput is an input type that accepts PostgresClusterStatusPgbackrestArgs, PostgresClusterStatusPgbackrestPtr and PostgresClusterStatusPgbackrestPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestPtrInput` via:
//
//	        PostgresClusterStatusPgbackrestArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusPgbackrestPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestPtrOutput() PostgresClusterStatusPgbackrestPtrOutput
	ToPostgresClusterStatusPgbackrestPtrOutputWithContext(context.Context) PostgresClusterStatusPgbackrestPtrOutput
}

type postgresClusterStatusPgbackrestPtrType PostgresClusterStatusPgbackrestArgs

func PostgresClusterStatusPgbackrestPtr(v *PostgresClusterStatusPgbackrestArgs) PostgresClusterStatusPgbackrestPtrInput {
	return (*postgresClusterStatusPgbackrestPtrType)(v)
}

func (*postgresClusterStatusPgbackrestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrest)(nil)).Elem()
}

func (i *postgresClusterStatusPgbackrestPtrType) ToPostgresClusterStatusPgbackrestPtrOutput() PostgresClusterStatusPgbackrestPtrOutput {
	return i.ToPostgresClusterStatusPgbackrestPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusPgbackrestPtrType) ToPostgresClusterStatusPgbackrestPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestPtrOutput)
}

// Status information for pgBackRest
type PostgresClusterStatusPgbackrestOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrest)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestOutput) ToPostgresClusterStatusPgbackrestOutput() PostgresClusterStatusPgbackrestOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestOutput) ToPostgresClusterStatusPgbackrestOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestOutput) ToPostgresClusterStatusPgbackrestPtrOutput() PostgresClusterStatusPgbackrestPtrOutput {
	return o.ToPostgresClusterStatusPgbackrestPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusPgbackrestOutput) ToPostgresClusterStatusPgbackrestPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusPgbackrest) *PostgresClusterStatusPgbackrest {
		return &v
	}).(PostgresClusterStatusPgbackrestPtrOutput)
}

func (o PostgresClusterStatusPgbackrestOutput) ManualBackup() PostgresClusterStatusPgbackrestManualBackupPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrest) *PostgresClusterStatusPgbackrestManualBackup {
		return v.ManualBackup
	}).(PostgresClusterStatusPgbackrestManualBackupPtrOutput)
}

func (o PostgresClusterStatusPgbackrestOutput) RepoHost() PostgresClusterStatusPgbackrestRepoHostPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrest) *PostgresClusterStatusPgbackrestRepoHost { return v.RepoHost }).(PostgresClusterStatusPgbackrestRepoHostPtrOutput)
}

// Status information for pgBackRest repositories
func (o PostgresClusterStatusPgbackrestOutput) Repos() PostgresClusterStatusPgbackrestReposArrayOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrest) []PostgresClusterStatusPgbackrestRepos { return v.Repos }).(PostgresClusterStatusPgbackrestReposArrayOutput)
}

func (o PostgresClusterStatusPgbackrestOutput) Restore() PostgresClusterStatusPgbackrestRestorePtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrest) *PostgresClusterStatusPgbackrestRestore { return v.Restore }).(PostgresClusterStatusPgbackrestRestorePtrOutput)
}

// Status information for scheduled backups
func (o PostgresClusterStatusPgbackrestOutput) ScheduledBackups() PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrest) []PostgresClusterStatusPgbackrestScheduledBackups {
		return v.ScheduledBackups
	}).(PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput)
}

type PostgresClusterStatusPgbackrestPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrest)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestPtrOutput) ToPostgresClusterStatusPgbackrestPtrOutput() PostgresClusterStatusPgbackrestPtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestPtrOutput) ToPostgresClusterStatusPgbackrestPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestPtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestPtrOutput) Elem() PostgresClusterStatusPgbackrestOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrest) PostgresClusterStatusPgbackrest {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusPgbackrest
		return ret
	}).(PostgresClusterStatusPgbackrestOutput)
}

func (o PostgresClusterStatusPgbackrestPtrOutput) ManualBackup() PostgresClusterStatusPgbackrestManualBackupPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrest) *PostgresClusterStatusPgbackrestManualBackup {
		if v == nil {
			return nil
		}
		return v.ManualBackup
	}).(PostgresClusterStatusPgbackrestManualBackupPtrOutput)
}

func (o PostgresClusterStatusPgbackrestPtrOutput) RepoHost() PostgresClusterStatusPgbackrestRepoHostPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrest) *PostgresClusterStatusPgbackrestRepoHost {
		if v == nil {
			return nil
		}
		return v.RepoHost
	}).(PostgresClusterStatusPgbackrestRepoHostPtrOutput)
}

// Status information for pgBackRest repositories
func (o PostgresClusterStatusPgbackrestPtrOutput) Repos() PostgresClusterStatusPgbackrestReposArrayOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrest) []PostgresClusterStatusPgbackrestRepos {
		if v == nil {
			return nil
		}
		return v.Repos
	}).(PostgresClusterStatusPgbackrestReposArrayOutput)
}

func (o PostgresClusterStatusPgbackrestPtrOutput) Restore() PostgresClusterStatusPgbackrestRestorePtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrest) *PostgresClusterStatusPgbackrestRestore {
		if v == nil {
			return nil
		}
		return v.Restore
	}).(PostgresClusterStatusPgbackrestRestorePtrOutput)
}

// Status information for scheduled backups
func (o PostgresClusterStatusPgbackrestPtrOutput) ScheduledBackups() PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrest) []PostgresClusterStatusPgbackrestScheduledBackups {
		if v == nil {
			return nil
		}
		return v.ScheduledBackups
	}).(PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput)
}

// Status information for manual backups
type PostgresClusterStatusPgbackrestManualBackup struct {
	// The number of actively running manual backup Pods.
	Active *int `pulumi:"active"`
	// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
	CompletionTime *string `pulumi:"completionTime"`
	// The number of Pods for the manual backup Job that reached the "Failed" phase.
	Failed *int `pulumi:"failed"`
	// Specifies whether or not the Job is finished executing (does not indicate success or failure).
	Finished *bool `pulumi:"finished"`
	// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
	Id *string `pulumi:"id"`
	// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
	StartTime *string `pulumi:"startTime"`
	// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
	Succeeded *int `pulumi:"succeeded"`
}

// PostgresClusterStatusPgbackrestManualBackupInput is an input type that accepts PostgresClusterStatusPgbackrestManualBackupArgs and PostgresClusterStatusPgbackrestManualBackupOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestManualBackupInput` via:
//
//	PostgresClusterStatusPgbackrestManualBackupArgs{...}
type PostgresClusterStatusPgbackrestManualBackupInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestManualBackupOutput() PostgresClusterStatusPgbackrestManualBackupOutput
	ToPostgresClusterStatusPgbackrestManualBackupOutputWithContext(context.Context) PostgresClusterStatusPgbackrestManualBackupOutput
}

// Status information for manual backups
type PostgresClusterStatusPgbackrestManualBackupArgs struct {
	// The number of actively running manual backup Pods.
	Active pulumi.IntPtrInput `pulumi:"active"`
	// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
	CompletionTime pulumi.StringPtrInput `pulumi:"completionTime"`
	// The number of Pods for the manual backup Job that reached the "Failed" phase.
	Failed pulumi.IntPtrInput `pulumi:"failed"`
	// Specifies whether or not the Job is finished executing (does not indicate success or failure).
	Finished pulumi.BoolPtrInput `pulumi:"finished"`
	// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
	Succeeded pulumi.IntPtrInput `pulumi:"succeeded"`
}

func (PostgresClusterStatusPgbackrestManualBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestManualBackup)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestManualBackupArgs) ToPostgresClusterStatusPgbackrestManualBackupOutput() PostgresClusterStatusPgbackrestManualBackupOutput {
	return i.ToPostgresClusterStatusPgbackrestManualBackupOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestManualBackupArgs) ToPostgresClusterStatusPgbackrestManualBackupOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestManualBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestManualBackupOutput)
}

func (i PostgresClusterStatusPgbackrestManualBackupArgs) ToPostgresClusterStatusPgbackrestManualBackupPtrOutput() PostgresClusterStatusPgbackrestManualBackupPtrOutput {
	return i.ToPostgresClusterStatusPgbackrestManualBackupPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestManualBackupArgs) ToPostgresClusterStatusPgbackrestManualBackupPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestManualBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestManualBackupOutput).ToPostgresClusterStatusPgbackrestManualBackupPtrOutputWithContext(ctx)
}

// PostgresClusterStatusPgbackrestManualBackupPtrInput is an input type that accepts PostgresClusterStatusPgbackrestManualBackupArgs, PostgresClusterStatusPgbackrestManualBackupPtr and PostgresClusterStatusPgbackrestManualBackupPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestManualBackupPtrInput` via:
//
//	        PostgresClusterStatusPgbackrestManualBackupArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusPgbackrestManualBackupPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestManualBackupPtrOutput() PostgresClusterStatusPgbackrestManualBackupPtrOutput
	ToPostgresClusterStatusPgbackrestManualBackupPtrOutputWithContext(context.Context) PostgresClusterStatusPgbackrestManualBackupPtrOutput
}

type postgresClusterStatusPgbackrestManualBackupPtrType PostgresClusterStatusPgbackrestManualBackupArgs

func PostgresClusterStatusPgbackrestManualBackupPtr(v *PostgresClusterStatusPgbackrestManualBackupArgs) PostgresClusterStatusPgbackrestManualBackupPtrInput {
	return (*postgresClusterStatusPgbackrestManualBackupPtrType)(v)
}

func (*postgresClusterStatusPgbackrestManualBackupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrestManualBackup)(nil)).Elem()
}

func (i *postgresClusterStatusPgbackrestManualBackupPtrType) ToPostgresClusterStatusPgbackrestManualBackupPtrOutput() PostgresClusterStatusPgbackrestManualBackupPtrOutput {
	return i.ToPostgresClusterStatusPgbackrestManualBackupPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusPgbackrestManualBackupPtrType) ToPostgresClusterStatusPgbackrestManualBackupPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestManualBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestManualBackupPtrOutput)
}

// Status information for manual backups
type PostgresClusterStatusPgbackrestManualBackupOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestManualBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestManualBackup)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestManualBackupOutput) ToPostgresClusterStatusPgbackrestManualBackupOutput() PostgresClusterStatusPgbackrestManualBackupOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestManualBackupOutput) ToPostgresClusterStatusPgbackrestManualBackupOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestManualBackupOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestManualBackupOutput) ToPostgresClusterStatusPgbackrestManualBackupPtrOutput() PostgresClusterStatusPgbackrestManualBackupPtrOutput {
	return o.ToPostgresClusterStatusPgbackrestManualBackupPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusPgbackrestManualBackupOutput) ToPostgresClusterStatusPgbackrestManualBackupPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestManualBackupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusPgbackrestManualBackup) *PostgresClusterStatusPgbackrestManualBackup {
		return &v
	}).(PostgresClusterStatusPgbackrestManualBackupPtrOutput)
}

// The number of actively running manual backup Pods.
func (o PostgresClusterStatusPgbackrestManualBackupOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestManualBackup) *int { return v.Active }).(pulumi.IntPtrOutput)
}

// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestManualBackupOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestManualBackup) *string { return v.CompletionTime }).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Failed" phase.
func (o PostgresClusterStatusPgbackrestManualBackupOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestManualBackup) *int { return v.Failed }).(pulumi.IntPtrOutput)
}

// Specifies whether or not the Job is finished executing (does not indicate success or failure).
func (o PostgresClusterStatusPgbackrestManualBackupOutput) Finished() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestManualBackup) *bool { return v.Finished }).(pulumi.BoolPtrOutput)
}

// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
func (o PostgresClusterStatusPgbackrestManualBackupOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestManualBackup) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestManualBackupOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestManualBackup) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
func (o PostgresClusterStatusPgbackrestManualBackupOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestManualBackup) *int { return v.Succeeded }).(pulumi.IntPtrOutput)
}

type PostgresClusterStatusPgbackrestManualBackupPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestManualBackupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrestManualBackup)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestManualBackupPtrOutput) ToPostgresClusterStatusPgbackrestManualBackupPtrOutput() PostgresClusterStatusPgbackrestManualBackupPtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestManualBackupPtrOutput) ToPostgresClusterStatusPgbackrestManualBackupPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestManualBackupPtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestManualBackupPtrOutput) Elem() PostgresClusterStatusPgbackrestManualBackupOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackup) PostgresClusterStatusPgbackrestManualBackup {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusPgbackrestManualBackup
		return ret
	}).(PostgresClusterStatusPgbackrestManualBackupOutput)
}

// The number of actively running manual backup Pods.
func (o PostgresClusterStatusPgbackrestManualBackupPtrOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackup) *int {
		if v == nil {
			return nil
		}
		return v.Active
	}).(pulumi.IntPtrOutput)
}

// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestManualBackupPtrOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackup) *string {
		if v == nil {
			return nil
		}
		return v.CompletionTime
	}).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Failed" phase.
func (o PostgresClusterStatusPgbackrestManualBackupPtrOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackup) *int {
		if v == nil {
			return nil
		}
		return v.Failed
	}).(pulumi.IntPtrOutput)
}

// Specifies whether or not the Job is finished executing (does not indicate success or failure).
func (o PostgresClusterStatusPgbackrestManualBackupPtrOutput) Finished() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackup) *bool {
		if v == nil {
			return nil
		}
		return v.Finished
	}).(pulumi.BoolPtrOutput)
}

// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
func (o PostgresClusterStatusPgbackrestManualBackupPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackup) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestManualBackupPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackup) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
func (o PostgresClusterStatusPgbackrestManualBackupPtrOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackup) *int {
		if v == nil {
			return nil
		}
		return v.Succeeded
	}).(pulumi.IntPtrOutput)
}

// Status information for manual backups
type PostgresClusterStatusPgbackrestManualBackupPatch struct {
	// The number of actively running manual backup Pods.
	Active *int `pulumi:"active"`
	// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
	CompletionTime *string `pulumi:"completionTime"`
	// The number of Pods for the manual backup Job that reached the "Failed" phase.
	Failed *int `pulumi:"failed"`
	// Specifies whether or not the Job is finished executing (does not indicate success or failure).
	Finished *bool `pulumi:"finished"`
	// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
	Id *string `pulumi:"id"`
	// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
	StartTime *string `pulumi:"startTime"`
	// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
	Succeeded *int `pulumi:"succeeded"`
}

// PostgresClusterStatusPgbackrestManualBackupPatchInput is an input type that accepts PostgresClusterStatusPgbackrestManualBackupPatchArgs and PostgresClusterStatusPgbackrestManualBackupPatchOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestManualBackupPatchInput` via:
//
//	PostgresClusterStatusPgbackrestManualBackupPatchArgs{...}
type PostgresClusterStatusPgbackrestManualBackupPatchInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestManualBackupPatchOutput() PostgresClusterStatusPgbackrestManualBackupPatchOutput
	ToPostgresClusterStatusPgbackrestManualBackupPatchOutputWithContext(context.Context) PostgresClusterStatusPgbackrestManualBackupPatchOutput
}

// Status information for manual backups
type PostgresClusterStatusPgbackrestManualBackupPatchArgs struct {
	// The number of actively running manual backup Pods.
	Active pulumi.IntPtrInput `pulumi:"active"`
	// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
	CompletionTime pulumi.StringPtrInput `pulumi:"completionTime"`
	// The number of Pods for the manual backup Job that reached the "Failed" phase.
	Failed pulumi.IntPtrInput `pulumi:"failed"`
	// Specifies whether or not the Job is finished executing (does not indicate success or failure).
	Finished pulumi.BoolPtrInput `pulumi:"finished"`
	// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
	Succeeded pulumi.IntPtrInput `pulumi:"succeeded"`
}

func (PostgresClusterStatusPgbackrestManualBackupPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestManualBackupPatch)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestManualBackupPatchArgs) ToPostgresClusterStatusPgbackrestManualBackupPatchOutput() PostgresClusterStatusPgbackrestManualBackupPatchOutput {
	return i.ToPostgresClusterStatusPgbackrestManualBackupPatchOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestManualBackupPatchArgs) ToPostgresClusterStatusPgbackrestManualBackupPatchOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestManualBackupPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestManualBackupPatchOutput)
}

func (i PostgresClusterStatusPgbackrestManualBackupPatchArgs) ToPostgresClusterStatusPgbackrestManualBackupPatchPtrOutput() PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput {
	return i.ToPostgresClusterStatusPgbackrestManualBackupPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestManualBackupPatchArgs) ToPostgresClusterStatusPgbackrestManualBackupPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestManualBackupPatchOutput).ToPostgresClusterStatusPgbackrestManualBackupPatchPtrOutputWithContext(ctx)
}

// PostgresClusterStatusPgbackrestManualBackupPatchPtrInput is an input type that accepts PostgresClusterStatusPgbackrestManualBackupPatchArgs, PostgresClusterStatusPgbackrestManualBackupPatchPtr and PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestManualBackupPatchPtrInput` via:
//
//	        PostgresClusterStatusPgbackrestManualBackupPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusPgbackrestManualBackupPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestManualBackupPatchPtrOutput() PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput
	ToPostgresClusterStatusPgbackrestManualBackupPatchPtrOutputWithContext(context.Context) PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput
}

type postgresClusterStatusPgbackrestManualBackupPatchPtrType PostgresClusterStatusPgbackrestManualBackupPatchArgs

func PostgresClusterStatusPgbackrestManualBackupPatchPtr(v *PostgresClusterStatusPgbackrestManualBackupPatchArgs) PostgresClusterStatusPgbackrestManualBackupPatchPtrInput {
	return (*postgresClusterStatusPgbackrestManualBackupPatchPtrType)(v)
}

func (*postgresClusterStatusPgbackrestManualBackupPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrestManualBackupPatch)(nil)).Elem()
}

func (i *postgresClusterStatusPgbackrestManualBackupPatchPtrType) ToPostgresClusterStatusPgbackrestManualBackupPatchPtrOutput() PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput {
	return i.ToPostgresClusterStatusPgbackrestManualBackupPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusPgbackrestManualBackupPatchPtrType) ToPostgresClusterStatusPgbackrestManualBackupPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput)
}

// Status information for manual backups
type PostgresClusterStatusPgbackrestManualBackupPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestManualBackupPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestManualBackupPatch)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestManualBackupPatchOutput) ToPostgresClusterStatusPgbackrestManualBackupPatchOutput() PostgresClusterStatusPgbackrestManualBackupPatchOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestManualBackupPatchOutput) ToPostgresClusterStatusPgbackrestManualBackupPatchOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestManualBackupPatchOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestManualBackupPatchOutput) ToPostgresClusterStatusPgbackrestManualBackupPatchPtrOutput() PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput {
	return o.ToPostgresClusterStatusPgbackrestManualBackupPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusPgbackrestManualBackupPatchOutput) ToPostgresClusterStatusPgbackrestManualBackupPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusPgbackrestManualBackupPatch) *PostgresClusterStatusPgbackrestManualBackupPatch {
		return &v
	}).(PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput)
}

// The number of actively running manual backup Pods.
func (o PostgresClusterStatusPgbackrestManualBackupPatchOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestManualBackupPatch) *int { return v.Active }).(pulumi.IntPtrOutput)
}

// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestManualBackupPatchOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestManualBackupPatch) *string { return v.CompletionTime }).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Failed" phase.
func (o PostgresClusterStatusPgbackrestManualBackupPatchOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestManualBackupPatch) *int { return v.Failed }).(pulumi.IntPtrOutput)
}

// Specifies whether or not the Job is finished executing (does not indicate success or failure).
func (o PostgresClusterStatusPgbackrestManualBackupPatchOutput) Finished() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestManualBackupPatch) *bool { return v.Finished }).(pulumi.BoolPtrOutput)
}

// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
func (o PostgresClusterStatusPgbackrestManualBackupPatchOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestManualBackupPatch) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestManualBackupPatchOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestManualBackupPatch) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
func (o PostgresClusterStatusPgbackrestManualBackupPatchOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestManualBackupPatch) *int { return v.Succeeded }).(pulumi.IntPtrOutput)
}

type PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrestManualBackupPatch)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput) ToPostgresClusterStatusPgbackrestManualBackupPatchPtrOutput() PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput) ToPostgresClusterStatusPgbackrestManualBackupPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput) Elem() PostgresClusterStatusPgbackrestManualBackupPatchOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackupPatch) PostgresClusterStatusPgbackrestManualBackupPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusPgbackrestManualBackupPatch
		return ret
	}).(PostgresClusterStatusPgbackrestManualBackupPatchOutput)
}

// The number of actively running manual backup Pods.
func (o PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackupPatch) *int {
		if v == nil {
			return nil
		}
		return v.Active
	}).(pulumi.IntPtrOutput)
}

// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackupPatch) *string {
		if v == nil {
			return nil
		}
		return v.CompletionTime
	}).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Failed" phase.
func (o PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackupPatch) *int {
		if v == nil {
			return nil
		}
		return v.Failed
	}).(pulumi.IntPtrOutput)
}

// Specifies whether or not the Job is finished executing (does not indicate success or failure).
func (o PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput) Finished() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackupPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Finished
	}).(pulumi.BoolPtrOutput)
}

// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
func (o PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackupPatch) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackupPatch) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
func (o PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestManualBackupPatch) *int {
		if v == nil {
			return nil
		}
		return v.Succeeded
	}).(pulumi.IntPtrOutput)
}

// Status information for pgBackRest
type PostgresClusterStatusPgbackrestPatch struct {
	ManualBackup *PostgresClusterStatusPgbackrestManualBackupPatch `pulumi:"manualBackup"`
	RepoHost     *PostgresClusterStatusPgbackrestRepoHostPatch     `pulumi:"repoHost"`
	// Status information for pgBackRest repositories
	Repos   []PostgresClusterStatusPgbackrestReposPatch  `pulumi:"repos"`
	Restore *PostgresClusterStatusPgbackrestRestorePatch `pulumi:"restore"`
	// Status information for scheduled backups
	ScheduledBackups []PostgresClusterStatusPgbackrestScheduledBackupsPatch `pulumi:"scheduledBackups"`
}

// PostgresClusterStatusPgbackrestPatchInput is an input type that accepts PostgresClusterStatusPgbackrestPatchArgs and PostgresClusterStatusPgbackrestPatchOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestPatchInput` via:
//
//	PostgresClusterStatusPgbackrestPatchArgs{...}
type PostgresClusterStatusPgbackrestPatchInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestPatchOutput() PostgresClusterStatusPgbackrestPatchOutput
	ToPostgresClusterStatusPgbackrestPatchOutputWithContext(context.Context) PostgresClusterStatusPgbackrestPatchOutput
}

// Status information for pgBackRest
type PostgresClusterStatusPgbackrestPatchArgs struct {
	ManualBackup PostgresClusterStatusPgbackrestManualBackupPatchPtrInput `pulumi:"manualBackup"`
	RepoHost     PostgresClusterStatusPgbackrestRepoHostPatchPtrInput     `pulumi:"repoHost"`
	// Status information for pgBackRest repositories
	Repos   PostgresClusterStatusPgbackrestReposPatchArrayInput `pulumi:"repos"`
	Restore PostgresClusterStatusPgbackrestRestorePatchPtrInput `pulumi:"restore"`
	// Status information for scheduled backups
	ScheduledBackups PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayInput `pulumi:"scheduledBackups"`
}

func (PostgresClusterStatusPgbackrestPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestPatch)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestPatchArgs) ToPostgresClusterStatusPgbackrestPatchOutput() PostgresClusterStatusPgbackrestPatchOutput {
	return i.ToPostgresClusterStatusPgbackrestPatchOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestPatchArgs) ToPostgresClusterStatusPgbackrestPatchOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestPatchOutput)
}

func (i PostgresClusterStatusPgbackrestPatchArgs) ToPostgresClusterStatusPgbackrestPatchPtrOutput() PostgresClusterStatusPgbackrestPatchPtrOutput {
	return i.ToPostgresClusterStatusPgbackrestPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestPatchArgs) ToPostgresClusterStatusPgbackrestPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestPatchOutput).ToPostgresClusterStatusPgbackrestPatchPtrOutputWithContext(ctx)
}

// PostgresClusterStatusPgbackrestPatchPtrInput is an input type that accepts PostgresClusterStatusPgbackrestPatchArgs, PostgresClusterStatusPgbackrestPatchPtr and PostgresClusterStatusPgbackrestPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestPatchPtrInput` via:
//
//	        PostgresClusterStatusPgbackrestPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusPgbackrestPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestPatchPtrOutput() PostgresClusterStatusPgbackrestPatchPtrOutput
	ToPostgresClusterStatusPgbackrestPatchPtrOutputWithContext(context.Context) PostgresClusterStatusPgbackrestPatchPtrOutput
}

type postgresClusterStatusPgbackrestPatchPtrType PostgresClusterStatusPgbackrestPatchArgs

func PostgresClusterStatusPgbackrestPatchPtr(v *PostgresClusterStatusPgbackrestPatchArgs) PostgresClusterStatusPgbackrestPatchPtrInput {
	return (*postgresClusterStatusPgbackrestPatchPtrType)(v)
}

func (*postgresClusterStatusPgbackrestPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrestPatch)(nil)).Elem()
}

func (i *postgresClusterStatusPgbackrestPatchPtrType) ToPostgresClusterStatusPgbackrestPatchPtrOutput() PostgresClusterStatusPgbackrestPatchPtrOutput {
	return i.ToPostgresClusterStatusPgbackrestPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusPgbackrestPatchPtrType) ToPostgresClusterStatusPgbackrestPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestPatchPtrOutput)
}

// Status information for pgBackRest
type PostgresClusterStatusPgbackrestPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestPatch)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestPatchOutput) ToPostgresClusterStatusPgbackrestPatchOutput() PostgresClusterStatusPgbackrestPatchOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestPatchOutput) ToPostgresClusterStatusPgbackrestPatchOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestPatchOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestPatchOutput) ToPostgresClusterStatusPgbackrestPatchPtrOutput() PostgresClusterStatusPgbackrestPatchPtrOutput {
	return o.ToPostgresClusterStatusPgbackrestPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusPgbackrestPatchOutput) ToPostgresClusterStatusPgbackrestPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusPgbackrestPatch) *PostgresClusterStatusPgbackrestPatch {
		return &v
	}).(PostgresClusterStatusPgbackrestPatchPtrOutput)
}

func (o PostgresClusterStatusPgbackrestPatchOutput) ManualBackup() PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestPatch) *PostgresClusterStatusPgbackrestManualBackupPatch {
		return v.ManualBackup
	}).(PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput)
}

func (o PostgresClusterStatusPgbackrestPatchOutput) RepoHost() PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestPatch) *PostgresClusterStatusPgbackrestRepoHostPatch {
		return v.RepoHost
	}).(PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput)
}

// Status information for pgBackRest repositories
func (o PostgresClusterStatusPgbackrestPatchOutput) Repos() PostgresClusterStatusPgbackrestReposPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestPatch) []PostgresClusterStatusPgbackrestReposPatch {
		return v.Repos
	}).(PostgresClusterStatusPgbackrestReposPatchArrayOutput)
}

func (o PostgresClusterStatusPgbackrestPatchOutput) Restore() PostgresClusterStatusPgbackrestRestorePatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestPatch) *PostgresClusterStatusPgbackrestRestorePatch {
		return v.Restore
	}).(PostgresClusterStatusPgbackrestRestorePatchPtrOutput)
}

// Status information for scheduled backups
func (o PostgresClusterStatusPgbackrestPatchOutput) ScheduledBackups() PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestPatch) []PostgresClusterStatusPgbackrestScheduledBackupsPatch {
		return v.ScheduledBackups
	}).(PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput)
}

type PostgresClusterStatusPgbackrestPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrestPatch)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestPatchPtrOutput) ToPostgresClusterStatusPgbackrestPatchPtrOutput() PostgresClusterStatusPgbackrestPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestPatchPtrOutput) ToPostgresClusterStatusPgbackrestPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestPatchPtrOutput) Elem() PostgresClusterStatusPgbackrestPatchOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestPatch) PostgresClusterStatusPgbackrestPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusPgbackrestPatch
		return ret
	}).(PostgresClusterStatusPgbackrestPatchOutput)
}

func (o PostgresClusterStatusPgbackrestPatchPtrOutput) ManualBackup() PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestPatch) *PostgresClusterStatusPgbackrestManualBackupPatch {
		if v == nil {
			return nil
		}
		return v.ManualBackup
	}).(PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput)
}

func (o PostgresClusterStatusPgbackrestPatchPtrOutput) RepoHost() PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestPatch) *PostgresClusterStatusPgbackrestRepoHostPatch {
		if v == nil {
			return nil
		}
		return v.RepoHost
	}).(PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput)
}

// Status information for pgBackRest repositories
func (o PostgresClusterStatusPgbackrestPatchPtrOutput) Repos() PostgresClusterStatusPgbackrestReposPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestPatch) []PostgresClusterStatusPgbackrestReposPatch {
		if v == nil {
			return nil
		}
		return v.Repos
	}).(PostgresClusterStatusPgbackrestReposPatchArrayOutput)
}

func (o PostgresClusterStatusPgbackrestPatchPtrOutput) Restore() PostgresClusterStatusPgbackrestRestorePatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestPatch) *PostgresClusterStatusPgbackrestRestorePatch {
		if v == nil {
			return nil
		}
		return v.Restore
	}).(PostgresClusterStatusPgbackrestRestorePatchPtrOutput)
}

// Status information for scheduled backups
func (o PostgresClusterStatusPgbackrestPatchPtrOutput) ScheduledBackups() PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestPatch) []PostgresClusterStatusPgbackrestScheduledBackupsPatch {
		if v == nil {
			return nil
		}
		return v.ScheduledBackups
	}).(PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput)
}

// Status information for the pgBackRest dedicated repository host
type PostgresClusterStatusPgbackrestRepoHost struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Whether or not the pgBackRest repository host is ready for use
	Ready *bool `pulumi:"ready"`
}

// PostgresClusterStatusPgbackrestRepoHostInput is an input type that accepts PostgresClusterStatusPgbackrestRepoHostArgs and PostgresClusterStatusPgbackrestRepoHostOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestRepoHostInput` via:
//
//	PostgresClusterStatusPgbackrestRepoHostArgs{...}
type PostgresClusterStatusPgbackrestRepoHostInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestRepoHostOutput() PostgresClusterStatusPgbackrestRepoHostOutput
	ToPostgresClusterStatusPgbackrestRepoHostOutputWithContext(context.Context) PostgresClusterStatusPgbackrestRepoHostOutput
}

// Status information for the pgBackRest dedicated repository host
type PostgresClusterStatusPgbackrestRepoHostArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Whether or not the pgBackRest repository host is ready for use
	Ready pulumi.BoolPtrInput `pulumi:"ready"`
}

func (PostgresClusterStatusPgbackrestRepoHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestRepoHost)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestRepoHostArgs) ToPostgresClusterStatusPgbackrestRepoHostOutput() PostgresClusterStatusPgbackrestRepoHostOutput {
	return i.ToPostgresClusterStatusPgbackrestRepoHostOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestRepoHostArgs) ToPostgresClusterStatusPgbackrestRepoHostOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRepoHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestRepoHostOutput)
}

func (i PostgresClusterStatusPgbackrestRepoHostArgs) ToPostgresClusterStatusPgbackrestRepoHostPtrOutput() PostgresClusterStatusPgbackrestRepoHostPtrOutput {
	return i.ToPostgresClusterStatusPgbackrestRepoHostPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestRepoHostArgs) ToPostgresClusterStatusPgbackrestRepoHostPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRepoHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestRepoHostOutput).ToPostgresClusterStatusPgbackrestRepoHostPtrOutputWithContext(ctx)
}

// PostgresClusterStatusPgbackrestRepoHostPtrInput is an input type that accepts PostgresClusterStatusPgbackrestRepoHostArgs, PostgresClusterStatusPgbackrestRepoHostPtr and PostgresClusterStatusPgbackrestRepoHostPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestRepoHostPtrInput` via:
//
//	        PostgresClusterStatusPgbackrestRepoHostArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusPgbackrestRepoHostPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestRepoHostPtrOutput() PostgresClusterStatusPgbackrestRepoHostPtrOutput
	ToPostgresClusterStatusPgbackrestRepoHostPtrOutputWithContext(context.Context) PostgresClusterStatusPgbackrestRepoHostPtrOutput
}

type postgresClusterStatusPgbackrestRepoHostPtrType PostgresClusterStatusPgbackrestRepoHostArgs

func PostgresClusterStatusPgbackrestRepoHostPtr(v *PostgresClusterStatusPgbackrestRepoHostArgs) PostgresClusterStatusPgbackrestRepoHostPtrInput {
	return (*postgresClusterStatusPgbackrestRepoHostPtrType)(v)
}

func (*postgresClusterStatusPgbackrestRepoHostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrestRepoHost)(nil)).Elem()
}

func (i *postgresClusterStatusPgbackrestRepoHostPtrType) ToPostgresClusterStatusPgbackrestRepoHostPtrOutput() PostgresClusterStatusPgbackrestRepoHostPtrOutput {
	return i.ToPostgresClusterStatusPgbackrestRepoHostPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusPgbackrestRepoHostPtrType) ToPostgresClusterStatusPgbackrestRepoHostPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRepoHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestRepoHostPtrOutput)
}

// Status information for the pgBackRest dedicated repository host
type PostgresClusterStatusPgbackrestRepoHostOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestRepoHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestRepoHost)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestRepoHostOutput) ToPostgresClusterStatusPgbackrestRepoHostOutput() PostgresClusterStatusPgbackrestRepoHostOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRepoHostOutput) ToPostgresClusterStatusPgbackrestRepoHostOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRepoHostOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRepoHostOutput) ToPostgresClusterStatusPgbackrestRepoHostPtrOutput() PostgresClusterStatusPgbackrestRepoHostPtrOutput {
	return o.ToPostgresClusterStatusPgbackrestRepoHostPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusPgbackrestRepoHostOutput) ToPostgresClusterStatusPgbackrestRepoHostPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRepoHostPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusPgbackrestRepoHost) *PostgresClusterStatusPgbackrestRepoHost {
		return &v
	}).(PostgresClusterStatusPgbackrestRepoHostPtrOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PostgresClusterStatusPgbackrestRepoHostOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRepoHost) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgresClusterStatusPgbackrestRepoHostOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRepoHost) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Whether or not the pgBackRest repository host is ready for use
func (o PostgresClusterStatusPgbackrestRepoHostOutput) Ready() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRepoHost) *bool { return v.Ready }).(pulumi.BoolPtrOutput)
}

type PostgresClusterStatusPgbackrestRepoHostPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestRepoHostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrestRepoHost)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestRepoHostPtrOutput) ToPostgresClusterStatusPgbackrestRepoHostPtrOutput() PostgresClusterStatusPgbackrestRepoHostPtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRepoHostPtrOutput) ToPostgresClusterStatusPgbackrestRepoHostPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRepoHostPtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRepoHostPtrOutput) Elem() PostgresClusterStatusPgbackrestRepoHostOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRepoHost) PostgresClusterStatusPgbackrestRepoHost {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusPgbackrestRepoHost
		return ret
	}).(PostgresClusterStatusPgbackrestRepoHostOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PostgresClusterStatusPgbackrestRepoHostPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRepoHost) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgresClusterStatusPgbackrestRepoHostPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRepoHost) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Whether or not the pgBackRest repository host is ready for use
func (o PostgresClusterStatusPgbackrestRepoHostPtrOutput) Ready() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRepoHost) *bool {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.BoolPtrOutput)
}

// Status information for the pgBackRest dedicated repository host
type PostgresClusterStatusPgbackrestRepoHostPatch struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Whether or not the pgBackRest repository host is ready for use
	Ready *bool `pulumi:"ready"`
}

// PostgresClusterStatusPgbackrestRepoHostPatchInput is an input type that accepts PostgresClusterStatusPgbackrestRepoHostPatchArgs and PostgresClusterStatusPgbackrestRepoHostPatchOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestRepoHostPatchInput` via:
//
//	PostgresClusterStatusPgbackrestRepoHostPatchArgs{...}
type PostgresClusterStatusPgbackrestRepoHostPatchInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestRepoHostPatchOutput() PostgresClusterStatusPgbackrestRepoHostPatchOutput
	ToPostgresClusterStatusPgbackrestRepoHostPatchOutputWithContext(context.Context) PostgresClusterStatusPgbackrestRepoHostPatchOutput
}

// Status information for the pgBackRest dedicated repository host
type PostgresClusterStatusPgbackrestRepoHostPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Whether or not the pgBackRest repository host is ready for use
	Ready pulumi.BoolPtrInput `pulumi:"ready"`
}

func (PostgresClusterStatusPgbackrestRepoHostPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestRepoHostPatch)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestRepoHostPatchArgs) ToPostgresClusterStatusPgbackrestRepoHostPatchOutput() PostgresClusterStatusPgbackrestRepoHostPatchOutput {
	return i.ToPostgresClusterStatusPgbackrestRepoHostPatchOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestRepoHostPatchArgs) ToPostgresClusterStatusPgbackrestRepoHostPatchOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRepoHostPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestRepoHostPatchOutput)
}

func (i PostgresClusterStatusPgbackrestRepoHostPatchArgs) ToPostgresClusterStatusPgbackrestRepoHostPatchPtrOutput() PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput {
	return i.ToPostgresClusterStatusPgbackrestRepoHostPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestRepoHostPatchArgs) ToPostgresClusterStatusPgbackrestRepoHostPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestRepoHostPatchOutput).ToPostgresClusterStatusPgbackrestRepoHostPatchPtrOutputWithContext(ctx)
}

// PostgresClusterStatusPgbackrestRepoHostPatchPtrInput is an input type that accepts PostgresClusterStatusPgbackrestRepoHostPatchArgs, PostgresClusterStatusPgbackrestRepoHostPatchPtr and PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestRepoHostPatchPtrInput` via:
//
//	        PostgresClusterStatusPgbackrestRepoHostPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusPgbackrestRepoHostPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestRepoHostPatchPtrOutput() PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput
	ToPostgresClusterStatusPgbackrestRepoHostPatchPtrOutputWithContext(context.Context) PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput
}

type postgresClusterStatusPgbackrestRepoHostPatchPtrType PostgresClusterStatusPgbackrestRepoHostPatchArgs

func PostgresClusterStatusPgbackrestRepoHostPatchPtr(v *PostgresClusterStatusPgbackrestRepoHostPatchArgs) PostgresClusterStatusPgbackrestRepoHostPatchPtrInput {
	return (*postgresClusterStatusPgbackrestRepoHostPatchPtrType)(v)
}

func (*postgresClusterStatusPgbackrestRepoHostPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrestRepoHostPatch)(nil)).Elem()
}

func (i *postgresClusterStatusPgbackrestRepoHostPatchPtrType) ToPostgresClusterStatusPgbackrestRepoHostPatchPtrOutput() PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput {
	return i.ToPostgresClusterStatusPgbackrestRepoHostPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusPgbackrestRepoHostPatchPtrType) ToPostgresClusterStatusPgbackrestRepoHostPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput)
}

// Status information for the pgBackRest dedicated repository host
type PostgresClusterStatusPgbackrestRepoHostPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestRepoHostPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestRepoHostPatch)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestRepoHostPatchOutput) ToPostgresClusterStatusPgbackrestRepoHostPatchOutput() PostgresClusterStatusPgbackrestRepoHostPatchOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRepoHostPatchOutput) ToPostgresClusterStatusPgbackrestRepoHostPatchOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRepoHostPatchOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRepoHostPatchOutput) ToPostgresClusterStatusPgbackrestRepoHostPatchPtrOutput() PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput {
	return o.ToPostgresClusterStatusPgbackrestRepoHostPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusPgbackrestRepoHostPatchOutput) ToPostgresClusterStatusPgbackrestRepoHostPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusPgbackrestRepoHostPatch) *PostgresClusterStatusPgbackrestRepoHostPatch {
		return &v
	}).(PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PostgresClusterStatusPgbackrestRepoHostPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRepoHostPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgresClusterStatusPgbackrestRepoHostPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRepoHostPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Whether or not the pgBackRest repository host is ready for use
func (o PostgresClusterStatusPgbackrestRepoHostPatchOutput) Ready() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRepoHostPatch) *bool { return v.Ready }).(pulumi.BoolPtrOutput)
}

type PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrestRepoHostPatch)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput) ToPostgresClusterStatusPgbackrestRepoHostPatchPtrOutput() PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput) ToPostgresClusterStatusPgbackrestRepoHostPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput) Elem() PostgresClusterStatusPgbackrestRepoHostPatchOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRepoHostPatch) PostgresClusterStatusPgbackrestRepoHostPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusPgbackrestRepoHostPatch
		return ret
	}).(PostgresClusterStatusPgbackrestRepoHostPatchOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRepoHostPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRepoHostPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Whether or not the pgBackRest repository host is ready for use
func (o PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput) Ready() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRepoHostPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.BoolPtrOutput)
}

// RepoStatus the status of a pgBackRest repository
type PostgresClusterStatusPgbackrestRepos struct {
	// Whether or not the pgBackRest repository PersistentVolumeClaim is bound to a volume
	Bound *bool `pulumi:"bound"`
	// The name of the pgBackRest repository
	Name *string `pulumi:"name"`
	// ReplicaCreateBackupReady indicates whether a backup exists in the repository as needed to bootstrap replicas.
	ReplicaCreateBackupComplete *bool `pulumi:"replicaCreateBackupComplete"`
	// A hash of the required fields in the spec for defining an Azure, GCS or S3 repository, Utilizd to detect changes to these fields and then execute pgBackRest stanza-create commands accordingly.
	RepoOptionsHash *string `pulumi:"repoOptionsHash"`
	// Specifies whether or not a stanza has been successfully created for the repository
	StanzaCreated *bool `pulumi:"stanzaCreated"`
	// The name of the volume the containing the pgBackRest repository
	Volume *string `pulumi:"volume"`
}

// PostgresClusterStatusPgbackrestReposInput is an input type that accepts PostgresClusterStatusPgbackrestReposArgs and PostgresClusterStatusPgbackrestReposOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestReposInput` via:
//
//	PostgresClusterStatusPgbackrestReposArgs{...}
type PostgresClusterStatusPgbackrestReposInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestReposOutput() PostgresClusterStatusPgbackrestReposOutput
	ToPostgresClusterStatusPgbackrestReposOutputWithContext(context.Context) PostgresClusterStatusPgbackrestReposOutput
}

// RepoStatus the status of a pgBackRest repository
type PostgresClusterStatusPgbackrestReposArgs struct {
	// Whether or not the pgBackRest repository PersistentVolumeClaim is bound to a volume
	Bound pulumi.BoolPtrInput `pulumi:"bound"`
	// The name of the pgBackRest repository
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ReplicaCreateBackupReady indicates whether a backup exists in the repository as needed to bootstrap replicas.
	ReplicaCreateBackupComplete pulumi.BoolPtrInput `pulumi:"replicaCreateBackupComplete"`
	// A hash of the required fields in the spec for defining an Azure, GCS or S3 repository, Utilizd to detect changes to these fields and then execute pgBackRest stanza-create commands accordingly.
	RepoOptionsHash pulumi.StringPtrInput `pulumi:"repoOptionsHash"`
	// Specifies whether or not a stanza has been successfully created for the repository
	StanzaCreated pulumi.BoolPtrInput `pulumi:"stanzaCreated"`
	// The name of the volume the containing the pgBackRest repository
	Volume pulumi.StringPtrInput `pulumi:"volume"`
}

func (PostgresClusterStatusPgbackrestReposArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestRepos)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestReposArgs) ToPostgresClusterStatusPgbackrestReposOutput() PostgresClusterStatusPgbackrestReposOutput {
	return i.ToPostgresClusterStatusPgbackrestReposOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestReposArgs) ToPostgresClusterStatusPgbackrestReposOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestReposOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestReposOutput)
}

// PostgresClusterStatusPgbackrestReposArrayInput is an input type that accepts PostgresClusterStatusPgbackrestReposArray and PostgresClusterStatusPgbackrestReposArrayOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestReposArrayInput` via:
//
//	PostgresClusterStatusPgbackrestReposArray{ PostgresClusterStatusPgbackrestReposArgs{...} }
type PostgresClusterStatusPgbackrestReposArrayInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestReposArrayOutput() PostgresClusterStatusPgbackrestReposArrayOutput
	ToPostgresClusterStatusPgbackrestReposArrayOutputWithContext(context.Context) PostgresClusterStatusPgbackrestReposArrayOutput
}

type PostgresClusterStatusPgbackrestReposArray []PostgresClusterStatusPgbackrestReposInput

func (PostgresClusterStatusPgbackrestReposArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusPgbackrestRepos)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestReposArray) ToPostgresClusterStatusPgbackrestReposArrayOutput() PostgresClusterStatusPgbackrestReposArrayOutput {
	return i.ToPostgresClusterStatusPgbackrestReposArrayOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestReposArray) ToPostgresClusterStatusPgbackrestReposArrayOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestReposArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestReposArrayOutput)
}

// RepoStatus the status of a pgBackRest repository
type PostgresClusterStatusPgbackrestReposOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestReposOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestRepos)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestReposOutput) ToPostgresClusterStatusPgbackrestReposOutput() PostgresClusterStatusPgbackrestReposOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestReposOutput) ToPostgresClusterStatusPgbackrestReposOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestReposOutput {
	return o
}

// Whether or not the pgBackRest repository PersistentVolumeClaim is bound to a volume
func (o PostgresClusterStatusPgbackrestReposOutput) Bound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRepos) *bool { return v.Bound }).(pulumi.BoolPtrOutput)
}

// The name of the pgBackRest repository
func (o PostgresClusterStatusPgbackrestReposOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRepos) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// ReplicaCreateBackupReady indicates whether a backup exists in the repository as needed to bootstrap replicas.
func (o PostgresClusterStatusPgbackrestReposOutput) ReplicaCreateBackupComplete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRepos) *bool { return v.ReplicaCreateBackupComplete }).(pulumi.BoolPtrOutput)
}

// A hash of the required fields in the spec for defining an Azure, GCS or S3 repository, Utilizd to detect changes to these fields and then execute pgBackRest stanza-create commands accordingly.
func (o PostgresClusterStatusPgbackrestReposOutput) RepoOptionsHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRepos) *string { return v.RepoOptionsHash }).(pulumi.StringPtrOutput)
}

// Specifies whether or not a stanza has been successfully created for the repository
func (o PostgresClusterStatusPgbackrestReposOutput) StanzaCreated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRepos) *bool { return v.StanzaCreated }).(pulumi.BoolPtrOutput)
}

// The name of the volume the containing the pgBackRest repository
func (o PostgresClusterStatusPgbackrestReposOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRepos) *string { return v.Volume }).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusPgbackrestReposArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestReposArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusPgbackrestRepos)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestReposArrayOutput) ToPostgresClusterStatusPgbackrestReposArrayOutput() PostgresClusterStatusPgbackrestReposArrayOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestReposArrayOutput) ToPostgresClusterStatusPgbackrestReposArrayOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestReposArrayOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestReposArrayOutput) Index(i pulumi.IntInput) PostgresClusterStatusPgbackrestReposOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterStatusPgbackrestRepos {
		return vs[0].([]PostgresClusterStatusPgbackrestRepos)[vs[1].(int)]
	}).(PostgresClusterStatusPgbackrestReposOutput)
}

// RepoStatus the status of a pgBackRest repository
type PostgresClusterStatusPgbackrestReposPatch struct {
	// Whether or not the pgBackRest repository PersistentVolumeClaim is bound to a volume
	Bound *bool `pulumi:"bound"`
	// The name of the pgBackRest repository
	Name *string `pulumi:"name"`
	// ReplicaCreateBackupReady indicates whether a backup exists in the repository as needed to bootstrap replicas.
	ReplicaCreateBackupComplete *bool `pulumi:"replicaCreateBackupComplete"`
	// A hash of the required fields in the spec for defining an Azure, GCS or S3 repository, Utilizd to detect changes to these fields and then execute pgBackRest stanza-create commands accordingly.
	RepoOptionsHash *string `pulumi:"repoOptionsHash"`
	// Specifies whether or not a stanza has been successfully created for the repository
	StanzaCreated *bool `pulumi:"stanzaCreated"`
	// The name of the volume the containing the pgBackRest repository
	Volume *string `pulumi:"volume"`
}

// PostgresClusterStatusPgbackrestReposPatchInput is an input type that accepts PostgresClusterStatusPgbackrestReposPatchArgs and PostgresClusterStatusPgbackrestReposPatchOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestReposPatchInput` via:
//
//	PostgresClusterStatusPgbackrestReposPatchArgs{...}
type PostgresClusterStatusPgbackrestReposPatchInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestReposPatchOutput() PostgresClusterStatusPgbackrestReposPatchOutput
	ToPostgresClusterStatusPgbackrestReposPatchOutputWithContext(context.Context) PostgresClusterStatusPgbackrestReposPatchOutput
}

// RepoStatus the status of a pgBackRest repository
type PostgresClusterStatusPgbackrestReposPatchArgs struct {
	// Whether or not the pgBackRest repository PersistentVolumeClaim is bound to a volume
	Bound pulumi.BoolPtrInput `pulumi:"bound"`
	// The name of the pgBackRest repository
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ReplicaCreateBackupReady indicates whether a backup exists in the repository as needed to bootstrap replicas.
	ReplicaCreateBackupComplete pulumi.BoolPtrInput `pulumi:"replicaCreateBackupComplete"`
	// A hash of the required fields in the spec for defining an Azure, GCS or S3 repository, Utilizd to detect changes to these fields and then execute pgBackRest stanza-create commands accordingly.
	RepoOptionsHash pulumi.StringPtrInput `pulumi:"repoOptionsHash"`
	// Specifies whether or not a stanza has been successfully created for the repository
	StanzaCreated pulumi.BoolPtrInput `pulumi:"stanzaCreated"`
	// The name of the volume the containing the pgBackRest repository
	Volume pulumi.StringPtrInput `pulumi:"volume"`
}

func (PostgresClusterStatusPgbackrestReposPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestReposPatch)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestReposPatchArgs) ToPostgresClusterStatusPgbackrestReposPatchOutput() PostgresClusterStatusPgbackrestReposPatchOutput {
	return i.ToPostgresClusterStatusPgbackrestReposPatchOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestReposPatchArgs) ToPostgresClusterStatusPgbackrestReposPatchOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestReposPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestReposPatchOutput)
}

// PostgresClusterStatusPgbackrestReposPatchArrayInput is an input type that accepts PostgresClusterStatusPgbackrestReposPatchArray and PostgresClusterStatusPgbackrestReposPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestReposPatchArrayInput` via:
//
//	PostgresClusterStatusPgbackrestReposPatchArray{ PostgresClusterStatusPgbackrestReposPatchArgs{...} }
type PostgresClusterStatusPgbackrestReposPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestReposPatchArrayOutput() PostgresClusterStatusPgbackrestReposPatchArrayOutput
	ToPostgresClusterStatusPgbackrestReposPatchArrayOutputWithContext(context.Context) PostgresClusterStatusPgbackrestReposPatchArrayOutput
}

type PostgresClusterStatusPgbackrestReposPatchArray []PostgresClusterStatusPgbackrestReposPatchInput

func (PostgresClusterStatusPgbackrestReposPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusPgbackrestReposPatch)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestReposPatchArray) ToPostgresClusterStatusPgbackrestReposPatchArrayOutput() PostgresClusterStatusPgbackrestReposPatchArrayOutput {
	return i.ToPostgresClusterStatusPgbackrestReposPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestReposPatchArray) ToPostgresClusterStatusPgbackrestReposPatchArrayOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestReposPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestReposPatchArrayOutput)
}

// RepoStatus the status of a pgBackRest repository
type PostgresClusterStatusPgbackrestReposPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestReposPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestReposPatch)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestReposPatchOutput) ToPostgresClusterStatusPgbackrestReposPatchOutput() PostgresClusterStatusPgbackrestReposPatchOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestReposPatchOutput) ToPostgresClusterStatusPgbackrestReposPatchOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestReposPatchOutput {
	return o
}

// Whether or not the pgBackRest repository PersistentVolumeClaim is bound to a volume
func (o PostgresClusterStatusPgbackrestReposPatchOutput) Bound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestReposPatch) *bool { return v.Bound }).(pulumi.BoolPtrOutput)
}

// The name of the pgBackRest repository
func (o PostgresClusterStatusPgbackrestReposPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestReposPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// ReplicaCreateBackupReady indicates whether a backup exists in the repository as needed to bootstrap replicas.
func (o PostgresClusterStatusPgbackrestReposPatchOutput) ReplicaCreateBackupComplete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestReposPatch) *bool { return v.ReplicaCreateBackupComplete }).(pulumi.BoolPtrOutput)
}

// A hash of the required fields in the spec for defining an Azure, GCS or S3 repository, Utilizd to detect changes to these fields and then execute pgBackRest stanza-create commands accordingly.
func (o PostgresClusterStatusPgbackrestReposPatchOutput) RepoOptionsHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestReposPatch) *string { return v.RepoOptionsHash }).(pulumi.StringPtrOutput)
}

// Specifies whether or not a stanza has been successfully created for the repository
func (o PostgresClusterStatusPgbackrestReposPatchOutput) StanzaCreated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestReposPatch) *bool { return v.StanzaCreated }).(pulumi.BoolPtrOutput)
}

// The name of the volume the containing the pgBackRest repository
func (o PostgresClusterStatusPgbackrestReposPatchOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestReposPatch) *string { return v.Volume }).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusPgbackrestReposPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestReposPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusPgbackrestReposPatch)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestReposPatchArrayOutput) ToPostgresClusterStatusPgbackrestReposPatchArrayOutput() PostgresClusterStatusPgbackrestReposPatchArrayOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestReposPatchArrayOutput) ToPostgresClusterStatusPgbackrestReposPatchArrayOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestReposPatchArrayOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestReposPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterStatusPgbackrestReposPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterStatusPgbackrestReposPatch {
		return vs[0].([]PostgresClusterStatusPgbackrestReposPatch)[vs[1].(int)]
	}).(PostgresClusterStatusPgbackrestReposPatchOutput)
}

// Status information for in-place restores
type PostgresClusterStatusPgbackrestRestore struct {
	// The number of actively running manual backup Pods.
	Active *int `pulumi:"active"`
	// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
	CompletionTime *string `pulumi:"completionTime"`
	// The number of Pods for the manual backup Job that reached the "Failed" phase.
	Failed *int `pulumi:"failed"`
	// Specifies whether or not the Job is finished executing (does not indicate success or failure).
	Finished *bool `pulumi:"finished"`
	// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
	Id *string `pulumi:"id"`
	// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
	StartTime *string `pulumi:"startTime"`
	// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
	Succeeded *int `pulumi:"succeeded"`
}

// PostgresClusterStatusPgbackrestRestoreInput is an input type that accepts PostgresClusterStatusPgbackrestRestoreArgs and PostgresClusterStatusPgbackrestRestoreOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestRestoreInput` via:
//
//	PostgresClusterStatusPgbackrestRestoreArgs{...}
type PostgresClusterStatusPgbackrestRestoreInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestRestoreOutput() PostgresClusterStatusPgbackrestRestoreOutput
	ToPostgresClusterStatusPgbackrestRestoreOutputWithContext(context.Context) PostgresClusterStatusPgbackrestRestoreOutput
}

// Status information for in-place restores
type PostgresClusterStatusPgbackrestRestoreArgs struct {
	// The number of actively running manual backup Pods.
	Active pulumi.IntPtrInput `pulumi:"active"`
	// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
	CompletionTime pulumi.StringPtrInput `pulumi:"completionTime"`
	// The number of Pods for the manual backup Job that reached the "Failed" phase.
	Failed pulumi.IntPtrInput `pulumi:"failed"`
	// Specifies whether or not the Job is finished executing (does not indicate success or failure).
	Finished pulumi.BoolPtrInput `pulumi:"finished"`
	// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
	Succeeded pulumi.IntPtrInput `pulumi:"succeeded"`
}

func (PostgresClusterStatusPgbackrestRestoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestRestore)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestRestoreArgs) ToPostgresClusterStatusPgbackrestRestoreOutput() PostgresClusterStatusPgbackrestRestoreOutput {
	return i.ToPostgresClusterStatusPgbackrestRestoreOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestRestoreArgs) ToPostgresClusterStatusPgbackrestRestoreOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRestoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestRestoreOutput)
}

func (i PostgresClusterStatusPgbackrestRestoreArgs) ToPostgresClusterStatusPgbackrestRestorePtrOutput() PostgresClusterStatusPgbackrestRestorePtrOutput {
	return i.ToPostgresClusterStatusPgbackrestRestorePtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestRestoreArgs) ToPostgresClusterStatusPgbackrestRestorePtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRestorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestRestoreOutput).ToPostgresClusterStatusPgbackrestRestorePtrOutputWithContext(ctx)
}

// PostgresClusterStatusPgbackrestRestorePtrInput is an input type that accepts PostgresClusterStatusPgbackrestRestoreArgs, PostgresClusterStatusPgbackrestRestorePtr and PostgresClusterStatusPgbackrestRestorePtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestRestorePtrInput` via:
//
//	        PostgresClusterStatusPgbackrestRestoreArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusPgbackrestRestorePtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestRestorePtrOutput() PostgresClusterStatusPgbackrestRestorePtrOutput
	ToPostgresClusterStatusPgbackrestRestorePtrOutputWithContext(context.Context) PostgresClusterStatusPgbackrestRestorePtrOutput
}

type postgresClusterStatusPgbackrestRestorePtrType PostgresClusterStatusPgbackrestRestoreArgs

func PostgresClusterStatusPgbackrestRestorePtr(v *PostgresClusterStatusPgbackrestRestoreArgs) PostgresClusterStatusPgbackrestRestorePtrInput {
	return (*postgresClusterStatusPgbackrestRestorePtrType)(v)
}

func (*postgresClusterStatusPgbackrestRestorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrestRestore)(nil)).Elem()
}

func (i *postgresClusterStatusPgbackrestRestorePtrType) ToPostgresClusterStatusPgbackrestRestorePtrOutput() PostgresClusterStatusPgbackrestRestorePtrOutput {
	return i.ToPostgresClusterStatusPgbackrestRestorePtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusPgbackrestRestorePtrType) ToPostgresClusterStatusPgbackrestRestorePtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRestorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestRestorePtrOutput)
}

// Status information for in-place restores
type PostgresClusterStatusPgbackrestRestoreOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestRestoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestRestore)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestRestoreOutput) ToPostgresClusterStatusPgbackrestRestoreOutput() PostgresClusterStatusPgbackrestRestoreOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRestoreOutput) ToPostgresClusterStatusPgbackrestRestoreOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRestoreOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRestoreOutput) ToPostgresClusterStatusPgbackrestRestorePtrOutput() PostgresClusterStatusPgbackrestRestorePtrOutput {
	return o.ToPostgresClusterStatusPgbackrestRestorePtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusPgbackrestRestoreOutput) ToPostgresClusterStatusPgbackrestRestorePtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRestorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusPgbackrestRestore) *PostgresClusterStatusPgbackrestRestore {
		return &v
	}).(PostgresClusterStatusPgbackrestRestorePtrOutput)
}

// The number of actively running manual backup Pods.
func (o PostgresClusterStatusPgbackrestRestoreOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRestore) *int { return v.Active }).(pulumi.IntPtrOutput)
}

// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestRestoreOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRestore) *string { return v.CompletionTime }).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Failed" phase.
func (o PostgresClusterStatusPgbackrestRestoreOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRestore) *int { return v.Failed }).(pulumi.IntPtrOutput)
}

// Specifies whether or not the Job is finished executing (does not indicate success or failure).
func (o PostgresClusterStatusPgbackrestRestoreOutput) Finished() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRestore) *bool { return v.Finished }).(pulumi.BoolPtrOutput)
}

// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
func (o PostgresClusterStatusPgbackrestRestoreOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRestore) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestRestoreOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRestore) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
func (o PostgresClusterStatusPgbackrestRestoreOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRestore) *int { return v.Succeeded }).(pulumi.IntPtrOutput)
}

type PostgresClusterStatusPgbackrestRestorePtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestRestorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrestRestore)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestRestorePtrOutput) ToPostgresClusterStatusPgbackrestRestorePtrOutput() PostgresClusterStatusPgbackrestRestorePtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRestorePtrOutput) ToPostgresClusterStatusPgbackrestRestorePtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRestorePtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRestorePtrOutput) Elem() PostgresClusterStatusPgbackrestRestoreOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestore) PostgresClusterStatusPgbackrestRestore {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusPgbackrestRestore
		return ret
	}).(PostgresClusterStatusPgbackrestRestoreOutput)
}

// The number of actively running manual backup Pods.
func (o PostgresClusterStatusPgbackrestRestorePtrOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestore) *int {
		if v == nil {
			return nil
		}
		return v.Active
	}).(pulumi.IntPtrOutput)
}

// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestRestorePtrOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestore) *string {
		if v == nil {
			return nil
		}
		return v.CompletionTime
	}).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Failed" phase.
func (o PostgresClusterStatusPgbackrestRestorePtrOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestore) *int {
		if v == nil {
			return nil
		}
		return v.Failed
	}).(pulumi.IntPtrOutput)
}

// Specifies whether or not the Job is finished executing (does not indicate success or failure).
func (o PostgresClusterStatusPgbackrestRestorePtrOutput) Finished() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestore) *bool {
		if v == nil {
			return nil
		}
		return v.Finished
	}).(pulumi.BoolPtrOutput)
}

// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
func (o PostgresClusterStatusPgbackrestRestorePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestore) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestRestorePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestore) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
func (o PostgresClusterStatusPgbackrestRestorePtrOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestore) *int {
		if v == nil {
			return nil
		}
		return v.Succeeded
	}).(pulumi.IntPtrOutput)
}

// Status information for in-place restores
type PostgresClusterStatusPgbackrestRestorePatch struct {
	// The number of actively running manual backup Pods.
	Active *int `pulumi:"active"`
	// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
	CompletionTime *string `pulumi:"completionTime"`
	// The number of Pods for the manual backup Job that reached the "Failed" phase.
	Failed *int `pulumi:"failed"`
	// Specifies whether or not the Job is finished executing (does not indicate success or failure).
	Finished *bool `pulumi:"finished"`
	// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
	Id *string `pulumi:"id"`
	// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
	StartTime *string `pulumi:"startTime"`
	// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
	Succeeded *int `pulumi:"succeeded"`
}

// PostgresClusterStatusPgbackrestRestorePatchInput is an input type that accepts PostgresClusterStatusPgbackrestRestorePatchArgs and PostgresClusterStatusPgbackrestRestorePatchOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestRestorePatchInput` via:
//
//	PostgresClusterStatusPgbackrestRestorePatchArgs{...}
type PostgresClusterStatusPgbackrestRestorePatchInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestRestorePatchOutput() PostgresClusterStatusPgbackrestRestorePatchOutput
	ToPostgresClusterStatusPgbackrestRestorePatchOutputWithContext(context.Context) PostgresClusterStatusPgbackrestRestorePatchOutput
}

// Status information for in-place restores
type PostgresClusterStatusPgbackrestRestorePatchArgs struct {
	// The number of actively running manual backup Pods.
	Active pulumi.IntPtrInput `pulumi:"active"`
	// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
	CompletionTime pulumi.StringPtrInput `pulumi:"completionTime"`
	// The number of Pods for the manual backup Job that reached the "Failed" phase.
	Failed pulumi.IntPtrInput `pulumi:"failed"`
	// Specifies whether or not the Job is finished executing (does not indicate success or failure).
	Finished pulumi.BoolPtrInput `pulumi:"finished"`
	// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
	Succeeded pulumi.IntPtrInput `pulumi:"succeeded"`
}

func (PostgresClusterStatusPgbackrestRestorePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestRestorePatch)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestRestorePatchArgs) ToPostgresClusterStatusPgbackrestRestorePatchOutput() PostgresClusterStatusPgbackrestRestorePatchOutput {
	return i.ToPostgresClusterStatusPgbackrestRestorePatchOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestRestorePatchArgs) ToPostgresClusterStatusPgbackrestRestorePatchOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRestorePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestRestorePatchOutput)
}

func (i PostgresClusterStatusPgbackrestRestorePatchArgs) ToPostgresClusterStatusPgbackrestRestorePatchPtrOutput() PostgresClusterStatusPgbackrestRestorePatchPtrOutput {
	return i.ToPostgresClusterStatusPgbackrestRestorePatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestRestorePatchArgs) ToPostgresClusterStatusPgbackrestRestorePatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRestorePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestRestorePatchOutput).ToPostgresClusterStatusPgbackrestRestorePatchPtrOutputWithContext(ctx)
}

// PostgresClusterStatusPgbackrestRestorePatchPtrInput is an input type that accepts PostgresClusterStatusPgbackrestRestorePatchArgs, PostgresClusterStatusPgbackrestRestorePatchPtr and PostgresClusterStatusPgbackrestRestorePatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestRestorePatchPtrInput` via:
//
//	        PostgresClusterStatusPgbackrestRestorePatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusPgbackrestRestorePatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestRestorePatchPtrOutput() PostgresClusterStatusPgbackrestRestorePatchPtrOutput
	ToPostgresClusterStatusPgbackrestRestorePatchPtrOutputWithContext(context.Context) PostgresClusterStatusPgbackrestRestorePatchPtrOutput
}

type postgresClusterStatusPgbackrestRestorePatchPtrType PostgresClusterStatusPgbackrestRestorePatchArgs

func PostgresClusterStatusPgbackrestRestorePatchPtr(v *PostgresClusterStatusPgbackrestRestorePatchArgs) PostgresClusterStatusPgbackrestRestorePatchPtrInput {
	return (*postgresClusterStatusPgbackrestRestorePatchPtrType)(v)
}

func (*postgresClusterStatusPgbackrestRestorePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrestRestorePatch)(nil)).Elem()
}

func (i *postgresClusterStatusPgbackrestRestorePatchPtrType) ToPostgresClusterStatusPgbackrestRestorePatchPtrOutput() PostgresClusterStatusPgbackrestRestorePatchPtrOutput {
	return i.ToPostgresClusterStatusPgbackrestRestorePatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusPgbackrestRestorePatchPtrType) ToPostgresClusterStatusPgbackrestRestorePatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRestorePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestRestorePatchPtrOutput)
}

// Status information for in-place restores
type PostgresClusterStatusPgbackrestRestorePatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestRestorePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestRestorePatch)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestRestorePatchOutput) ToPostgresClusterStatusPgbackrestRestorePatchOutput() PostgresClusterStatusPgbackrestRestorePatchOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRestorePatchOutput) ToPostgresClusterStatusPgbackrestRestorePatchOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRestorePatchOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRestorePatchOutput) ToPostgresClusterStatusPgbackrestRestorePatchPtrOutput() PostgresClusterStatusPgbackrestRestorePatchPtrOutput {
	return o.ToPostgresClusterStatusPgbackrestRestorePatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusPgbackrestRestorePatchOutput) ToPostgresClusterStatusPgbackrestRestorePatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRestorePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusPgbackrestRestorePatch) *PostgresClusterStatusPgbackrestRestorePatch {
		return &v
	}).(PostgresClusterStatusPgbackrestRestorePatchPtrOutput)
}

// The number of actively running manual backup Pods.
func (o PostgresClusterStatusPgbackrestRestorePatchOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRestorePatch) *int { return v.Active }).(pulumi.IntPtrOutput)
}

// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestRestorePatchOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRestorePatch) *string { return v.CompletionTime }).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Failed" phase.
func (o PostgresClusterStatusPgbackrestRestorePatchOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRestorePatch) *int { return v.Failed }).(pulumi.IntPtrOutput)
}

// Specifies whether or not the Job is finished executing (does not indicate success or failure).
func (o PostgresClusterStatusPgbackrestRestorePatchOutput) Finished() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRestorePatch) *bool { return v.Finished }).(pulumi.BoolPtrOutput)
}

// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
func (o PostgresClusterStatusPgbackrestRestorePatchOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRestorePatch) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestRestorePatchOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRestorePatch) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
func (o PostgresClusterStatusPgbackrestRestorePatchOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestRestorePatch) *int { return v.Succeeded }).(pulumi.IntPtrOutput)
}

type PostgresClusterStatusPgbackrestRestorePatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestRestorePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusPgbackrestRestorePatch)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestRestorePatchPtrOutput) ToPostgresClusterStatusPgbackrestRestorePatchPtrOutput() PostgresClusterStatusPgbackrestRestorePatchPtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRestorePatchPtrOutput) ToPostgresClusterStatusPgbackrestRestorePatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestRestorePatchPtrOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestRestorePatchPtrOutput) Elem() PostgresClusterStatusPgbackrestRestorePatchOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestorePatch) PostgresClusterStatusPgbackrestRestorePatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusPgbackrestRestorePatch
		return ret
	}).(PostgresClusterStatusPgbackrestRestorePatchOutput)
}

// The number of actively running manual backup Pods.
func (o PostgresClusterStatusPgbackrestRestorePatchPtrOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestorePatch) *int {
		if v == nil {
			return nil
		}
		return v.Active
	}).(pulumi.IntPtrOutput)
}

// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestRestorePatchPtrOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestorePatch) *string {
		if v == nil {
			return nil
		}
		return v.CompletionTime
	}).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Failed" phase.
func (o PostgresClusterStatusPgbackrestRestorePatchPtrOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestorePatch) *int {
		if v == nil {
			return nil
		}
		return v.Failed
	}).(pulumi.IntPtrOutput)
}

// Specifies whether or not the Job is finished executing (does not indicate success or failure).
func (o PostgresClusterStatusPgbackrestRestorePatchPtrOutput) Finished() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestorePatch) *bool {
		if v == nil {
			return nil
		}
		return v.Finished
	}).(pulumi.BoolPtrOutput)
}

// A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
func (o PostgresClusterStatusPgbackrestRestorePatchPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestorePatch) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestRestorePatchPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestorePatch) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
func (o PostgresClusterStatusPgbackrestRestorePatchPtrOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusPgbackrestRestorePatch) *int {
		if v == nil {
			return nil
		}
		return v.Succeeded
	}).(pulumi.IntPtrOutput)
}

type PostgresClusterStatusPgbackrestScheduledBackups struct {
	// The number of actively running manual backup Pods.
	Active *int `pulumi:"active"`
	// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
	CompletionTime *string `pulumi:"completionTime"`
	// The name of the associated pgBackRest scheduled backup CronJob
	CronJobName *string `pulumi:"cronJobName"`
	// The number of Pods for the manual backup Job that reached the "Failed" phase.
	Failed *int `pulumi:"failed"`
	// The name of the associated pgBackRest repository
	Repo *string `pulumi:"repo"`
	// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
	StartTime *string `pulumi:"startTime"`
	// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
	Succeeded *int `pulumi:"succeeded"`
	// The pgBackRest backup type for this Job
	Type *string `pulumi:"type"`
}

// PostgresClusterStatusPgbackrestScheduledBackupsInput is an input type that accepts PostgresClusterStatusPgbackrestScheduledBackupsArgs and PostgresClusterStatusPgbackrestScheduledBackupsOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestScheduledBackupsInput` via:
//
//	PostgresClusterStatusPgbackrestScheduledBackupsArgs{...}
type PostgresClusterStatusPgbackrestScheduledBackupsInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestScheduledBackupsOutput() PostgresClusterStatusPgbackrestScheduledBackupsOutput
	ToPostgresClusterStatusPgbackrestScheduledBackupsOutputWithContext(context.Context) PostgresClusterStatusPgbackrestScheduledBackupsOutput
}

type PostgresClusterStatusPgbackrestScheduledBackupsArgs struct {
	// The number of actively running manual backup Pods.
	Active pulumi.IntPtrInput `pulumi:"active"`
	// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
	CompletionTime pulumi.StringPtrInput `pulumi:"completionTime"`
	// The name of the associated pgBackRest scheduled backup CronJob
	CronJobName pulumi.StringPtrInput `pulumi:"cronJobName"`
	// The number of Pods for the manual backup Job that reached the "Failed" phase.
	Failed pulumi.IntPtrInput `pulumi:"failed"`
	// The name of the associated pgBackRest repository
	Repo pulumi.StringPtrInput `pulumi:"repo"`
	// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
	Succeeded pulumi.IntPtrInput `pulumi:"succeeded"`
	// The pgBackRest backup type for this Job
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PostgresClusterStatusPgbackrestScheduledBackupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestScheduledBackups)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestScheduledBackupsArgs) ToPostgresClusterStatusPgbackrestScheduledBackupsOutput() PostgresClusterStatusPgbackrestScheduledBackupsOutput {
	return i.ToPostgresClusterStatusPgbackrestScheduledBackupsOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestScheduledBackupsArgs) ToPostgresClusterStatusPgbackrestScheduledBackupsOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestScheduledBackupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestScheduledBackupsOutput)
}

// PostgresClusterStatusPgbackrestScheduledBackupsArrayInput is an input type that accepts PostgresClusterStatusPgbackrestScheduledBackupsArray and PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestScheduledBackupsArrayInput` via:
//
//	PostgresClusterStatusPgbackrestScheduledBackupsArray{ PostgresClusterStatusPgbackrestScheduledBackupsArgs{...} }
type PostgresClusterStatusPgbackrestScheduledBackupsArrayInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestScheduledBackupsArrayOutput() PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput
	ToPostgresClusterStatusPgbackrestScheduledBackupsArrayOutputWithContext(context.Context) PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput
}

type PostgresClusterStatusPgbackrestScheduledBackupsArray []PostgresClusterStatusPgbackrestScheduledBackupsInput

func (PostgresClusterStatusPgbackrestScheduledBackupsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusPgbackrestScheduledBackups)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestScheduledBackupsArray) ToPostgresClusterStatusPgbackrestScheduledBackupsArrayOutput() PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput {
	return i.ToPostgresClusterStatusPgbackrestScheduledBackupsArrayOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestScheduledBackupsArray) ToPostgresClusterStatusPgbackrestScheduledBackupsArrayOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput)
}

type PostgresClusterStatusPgbackrestScheduledBackupsOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestScheduledBackupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestScheduledBackups)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestScheduledBackupsOutput) ToPostgresClusterStatusPgbackrestScheduledBackupsOutput() PostgresClusterStatusPgbackrestScheduledBackupsOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestScheduledBackupsOutput) ToPostgresClusterStatusPgbackrestScheduledBackupsOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestScheduledBackupsOutput {
	return o
}

// The number of actively running manual backup Pods.
func (o PostgresClusterStatusPgbackrestScheduledBackupsOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackups) *int { return v.Active }).(pulumi.IntPtrOutput)
}

// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestScheduledBackupsOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackups) *string { return v.CompletionTime }).(pulumi.StringPtrOutput)
}

// The name of the associated pgBackRest scheduled backup CronJob
func (o PostgresClusterStatusPgbackrestScheduledBackupsOutput) CronJobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackups) *string { return v.CronJobName }).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Failed" phase.
func (o PostgresClusterStatusPgbackrestScheduledBackupsOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackups) *int { return v.Failed }).(pulumi.IntPtrOutput)
}

// The name of the associated pgBackRest repository
func (o PostgresClusterStatusPgbackrestScheduledBackupsOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackups) *string { return v.Repo }).(pulumi.StringPtrOutput)
}

// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestScheduledBackupsOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackups) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
func (o PostgresClusterStatusPgbackrestScheduledBackupsOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackups) *int { return v.Succeeded }).(pulumi.IntPtrOutput)
}

// The pgBackRest backup type for this Job
func (o PostgresClusterStatusPgbackrestScheduledBackupsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackups) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusPgbackrestScheduledBackups)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput) ToPostgresClusterStatusPgbackrestScheduledBackupsArrayOutput() PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput) ToPostgresClusterStatusPgbackrestScheduledBackupsArrayOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput) Index(i pulumi.IntInput) PostgresClusterStatusPgbackrestScheduledBackupsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterStatusPgbackrestScheduledBackups {
		return vs[0].([]PostgresClusterStatusPgbackrestScheduledBackups)[vs[1].(int)]
	}).(PostgresClusterStatusPgbackrestScheduledBackupsOutput)
}

type PostgresClusterStatusPgbackrestScheduledBackupsPatch struct {
	// The number of actively running manual backup Pods.
	Active *int `pulumi:"active"`
	// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
	CompletionTime *string `pulumi:"completionTime"`
	// The name of the associated pgBackRest scheduled backup CronJob
	CronJobName *string `pulumi:"cronJobName"`
	// The number of Pods for the manual backup Job that reached the "Failed" phase.
	Failed *int `pulumi:"failed"`
	// The name of the associated pgBackRest repository
	Repo *string `pulumi:"repo"`
	// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
	StartTime *string `pulumi:"startTime"`
	// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
	Succeeded *int `pulumi:"succeeded"`
	// The pgBackRest backup type for this Job
	Type *string `pulumi:"type"`
}

// PostgresClusterStatusPgbackrestScheduledBackupsPatchInput is an input type that accepts PostgresClusterStatusPgbackrestScheduledBackupsPatchArgs and PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestScheduledBackupsPatchInput` via:
//
//	PostgresClusterStatusPgbackrestScheduledBackupsPatchArgs{...}
type PostgresClusterStatusPgbackrestScheduledBackupsPatchInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestScheduledBackupsPatchOutput() PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput
	ToPostgresClusterStatusPgbackrestScheduledBackupsPatchOutputWithContext(context.Context) PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput
}

type PostgresClusterStatusPgbackrestScheduledBackupsPatchArgs struct {
	// The number of actively running manual backup Pods.
	Active pulumi.IntPtrInput `pulumi:"active"`
	// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
	CompletionTime pulumi.StringPtrInput `pulumi:"completionTime"`
	// The name of the associated pgBackRest scheduled backup CronJob
	CronJobName pulumi.StringPtrInput `pulumi:"cronJobName"`
	// The number of Pods for the manual backup Job that reached the "Failed" phase.
	Failed pulumi.IntPtrInput `pulumi:"failed"`
	// The name of the associated pgBackRest repository
	Repo pulumi.StringPtrInput `pulumi:"repo"`
	// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
	Succeeded pulumi.IntPtrInput `pulumi:"succeeded"`
	// The pgBackRest backup type for this Job
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PostgresClusterStatusPgbackrestScheduledBackupsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestScheduledBackupsPatch)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestScheduledBackupsPatchArgs) ToPostgresClusterStatusPgbackrestScheduledBackupsPatchOutput() PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput {
	return i.ToPostgresClusterStatusPgbackrestScheduledBackupsPatchOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestScheduledBackupsPatchArgs) ToPostgresClusterStatusPgbackrestScheduledBackupsPatchOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput)
}

// PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayInput is an input type that accepts PostgresClusterStatusPgbackrestScheduledBackupsPatchArray and PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput values.
// You can construct a concrete instance of `PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayInput` via:
//
//	PostgresClusterStatusPgbackrestScheduledBackupsPatchArray{ PostgresClusterStatusPgbackrestScheduledBackupsPatchArgs{...} }
type PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayInput interface {
	pulumi.Input

	ToPostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput() PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput
	ToPostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutputWithContext(context.Context) PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput
}

type PostgresClusterStatusPgbackrestScheduledBackupsPatchArray []PostgresClusterStatusPgbackrestScheduledBackupsPatchInput

func (PostgresClusterStatusPgbackrestScheduledBackupsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusPgbackrestScheduledBackupsPatch)(nil)).Elem()
}

func (i PostgresClusterStatusPgbackrestScheduledBackupsPatchArray) ToPostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput() PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput {
	return i.ToPostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutputWithContext(context.Background())
}

func (i PostgresClusterStatusPgbackrestScheduledBackupsPatchArray) ToPostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput)
}

type PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusPgbackrestScheduledBackupsPatch)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput) ToPostgresClusterStatusPgbackrestScheduledBackupsPatchOutput() PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput) ToPostgresClusterStatusPgbackrestScheduledBackupsPatchOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput {
	return o
}

// The number of actively running manual backup Pods.
func (o PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackupsPatch) *int { return v.Active }).(pulumi.IntPtrOutput)
}

// Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackupsPatch) *string { return v.CompletionTime }).(pulumi.StringPtrOutput)
}

// The name of the associated pgBackRest scheduled backup CronJob
func (o PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput) CronJobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackupsPatch) *string { return v.CronJobName }).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Failed" phase.
func (o PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackupsPatch) *int { return v.Failed }).(pulumi.IntPtrOutput)
}

// The name of the associated pgBackRest repository
func (o PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackupsPatch) *string { return v.Repo }).(pulumi.StringPtrOutput)
}

// Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
func (o PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackupsPatch) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The number of Pods for the manual backup Job that reached the "Succeeded" phase.
func (o PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackupsPatch) *int { return v.Succeeded }).(pulumi.IntPtrOutput)
}

// The pgBackRest backup type for this Job
func (o PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusPgbackrestScheduledBackupsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresClusterStatusPgbackrestScheduledBackupsPatch)(nil)).Elem()
}

func (o PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput) ToPostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput() PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput) ToPostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutputWithContext(ctx context.Context) PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput {
	return o
}

func (o PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput) Index(i pulumi.IntInput) PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresClusterStatusPgbackrestScheduledBackupsPatch {
		return vs[0].([]PostgresClusterStatusPgbackrestScheduledBackupsPatch)[vs[1].(int)]
	}).(PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput)
}

// Current state of the PostgreSQL proxy.
type PostgresClusterStatusProxy struct {
	PgBouncer *PostgresClusterStatusProxyPgBouncer `pulumi:"pgBouncer"`
}

// PostgresClusterStatusProxyInput is an input type that accepts PostgresClusterStatusProxyArgs and PostgresClusterStatusProxyOutput values.
// You can construct a concrete instance of `PostgresClusterStatusProxyInput` via:
//
//	PostgresClusterStatusProxyArgs{...}
type PostgresClusterStatusProxyInput interface {
	pulumi.Input

	ToPostgresClusterStatusProxyOutput() PostgresClusterStatusProxyOutput
	ToPostgresClusterStatusProxyOutputWithContext(context.Context) PostgresClusterStatusProxyOutput
}

// Current state of the PostgreSQL proxy.
type PostgresClusterStatusProxyArgs struct {
	PgBouncer PostgresClusterStatusProxyPgBouncerPtrInput `pulumi:"pgBouncer"`
}

func (PostgresClusterStatusProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusProxy)(nil)).Elem()
}

func (i PostgresClusterStatusProxyArgs) ToPostgresClusterStatusProxyOutput() PostgresClusterStatusProxyOutput {
	return i.ToPostgresClusterStatusProxyOutputWithContext(context.Background())
}

func (i PostgresClusterStatusProxyArgs) ToPostgresClusterStatusProxyOutputWithContext(ctx context.Context) PostgresClusterStatusProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusProxyOutput)
}

func (i PostgresClusterStatusProxyArgs) ToPostgresClusterStatusProxyPtrOutput() PostgresClusterStatusProxyPtrOutput {
	return i.ToPostgresClusterStatusProxyPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusProxyArgs) ToPostgresClusterStatusProxyPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusProxyOutput).ToPostgresClusterStatusProxyPtrOutputWithContext(ctx)
}

// PostgresClusterStatusProxyPtrInput is an input type that accepts PostgresClusterStatusProxyArgs, PostgresClusterStatusProxyPtr and PostgresClusterStatusProxyPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusProxyPtrInput` via:
//
//	        PostgresClusterStatusProxyArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusProxyPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusProxyPtrOutput() PostgresClusterStatusProxyPtrOutput
	ToPostgresClusterStatusProxyPtrOutputWithContext(context.Context) PostgresClusterStatusProxyPtrOutput
}

type postgresClusterStatusProxyPtrType PostgresClusterStatusProxyArgs

func PostgresClusterStatusProxyPtr(v *PostgresClusterStatusProxyArgs) PostgresClusterStatusProxyPtrInput {
	return (*postgresClusterStatusProxyPtrType)(v)
}

func (*postgresClusterStatusProxyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusProxy)(nil)).Elem()
}

func (i *postgresClusterStatusProxyPtrType) ToPostgresClusterStatusProxyPtrOutput() PostgresClusterStatusProxyPtrOutput {
	return i.ToPostgresClusterStatusProxyPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusProxyPtrType) ToPostgresClusterStatusProxyPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusProxyPtrOutput)
}

// Current state of the PostgreSQL proxy.
type PostgresClusterStatusProxyOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusProxy)(nil)).Elem()
}

func (o PostgresClusterStatusProxyOutput) ToPostgresClusterStatusProxyOutput() PostgresClusterStatusProxyOutput {
	return o
}

func (o PostgresClusterStatusProxyOutput) ToPostgresClusterStatusProxyOutputWithContext(ctx context.Context) PostgresClusterStatusProxyOutput {
	return o
}

func (o PostgresClusterStatusProxyOutput) ToPostgresClusterStatusProxyPtrOutput() PostgresClusterStatusProxyPtrOutput {
	return o.ToPostgresClusterStatusProxyPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusProxyOutput) ToPostgresClusterStatusProxyPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusProxy) *PostgresClusterStatusProxy {
		return &v
	}).(PostgresClusterStatusProxyPtrOutput)
}

func (o PostgresClusterStatusProxyOutput) PgBouncer() PostgresClusterStatusProxyPgBouncerPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusProxy) *PostgresClusterStatusProxyPgBouncer { return v.PgBouncer }).(PostgresClusterStatusProxyPgBouncerPtrOutput)
}

type PostgresClusterStatusProxyPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusProxyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusProxy)(nil)).Elem()
}

func (o PostgresClusterStatusProxyPtrOutput) ToPostgresClusterStatusProxyPtrOutput() PostgresClusterStatusProxyPtrOutput {
	return o
}

func (o PostgresClusterStatusProxyPtrOutput) ToPostgresClusterStatusProxyPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPtrOutput {
	return o
}

func (o PostgresClusterStatusProxyPtrOutput) Elem() PostgresClusterStatusProxyOutput {
	return o.ApplyT(func(v *PostgresClusterStatusProxy) PostgresClusterStatusProxy {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusProxy
		return ret
	}).(PostgresClusterStatusProxyOutput)
}

func (o PostgresClusterStatusProxyPtrOutput) PgBouncer() PostgresClusterStatusProxyPgBouncerPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusProxy) *PostgresClusterStatusProxyPgBouncer {
		if v == nil {
			return nil
		}
		return v.PgBouncer
	}).(PostgresClusterStatusProxyPgBouncerPtrOutput)
}

// Current state of the PostgreSQL proxy.
type PostgresClusterStatusProxyPatch struct {
	PgBouncer *PostgresClusterStatusProxyPgBouncerPatch `pulumi:"pgBouncer"`
}

// PostgresClusterStatusProxyPatchInput is an input type that accepts PostgresClusterStatusProxyPatchArgs and PostgresClusterStatusProxyPatchOutput values.
// You can construct a concrete instance of `PostgresClusterStatusProxyPatchInput` via:
//
//	PostgresClusterStatusProxyPatchArgs{...}
type PostgresClusterStatusProxyPatchInput interface {
	pulumi.Input

	ToPostgresClusterStatusProxyPatchOutput() PostgresClusterStatusProxyPatchOutput
	ToPostgresClusterStatusProxyPatchOutputWithContext(context.Context) PostgresClusterStatusProxyPatchOutput
}

// Current state of the PostgreSQL proxy.
type PostgresClusterStatusProxyPatchArgs struct {
	PgBouncer PostgresClusterStatusProxyPgBouncerPatchPtrInput `pulumi:"pgBouncer"`
}

func (PostgresClusterStatusProxyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusProxyPatch)(nil)).Elem()
}

func (i PostgresClusterStatusProxyPatchArgs) ToPostgresClusterStatusProxyPatchOutput() PostgresClusterStatusProxyPatchOutput {
	return i.ToPostgresClusterStatusProxyPatchOutputWithContext(context.Background())
}

func (i PostgresClusterStatusProxyPatchArgs) ToPostgresClusterStatusProxyPatchOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusProxyPatchOutput)
}

func (i PostgresClusterStatusProxyPatchArgs) ToPostgresClusterStatusProxyPatchPtrOutput() PostgresClusterStatusProxyPatchPtrOutput {
	return i.ToPostgresClusterStatusProxyPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusProxyPatchArgs) ToPostgresClusterStatusProxyPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusProxyPatchOutput).ToPostgresClusterStatusProxyPatchPtrOutputWithContext(ctx)
}

// PostgresClusterStatusProxyPatchPtrInput is an input type that accepts PostgresClusterStatusProxyPatchArgs, PostgresClusterStatusProxyPatchPtr and PostgresClusterStatusProxyPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusProxyPatchPtrInput` via:
//
//	        PostgresClusterStatusProxyPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusProxyPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusProxyPatchPtrOutput() PostgresClusterStatusProxyPatchPtrOutput
	ToPostgresClusterStatusProxyPatchPtrOutputWithContext(context.Context) PostgresClusterStatusProxyPatchPtrOutput
}

type postgresClusterStatusProxyPatchPtrType PostgresClusterStatusProxyPatchArgs

func PostgresClusterStatusProxyPatchPtr(v *PostgresClusterStatusProxyPatchArgs) PostgresClusterStatusProxyPatchPtrInput {
	return (*postgresClusterStatusProxyPatchPtrType)(v)
}

func (*postgresClusterStatusProxyPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusProxyPatch)(nil)).Elem()
}

func (i *postgresClusterStatusProxyPatchPtrType) ToPostgresClusterStatusProxyPatchPtrOutput() PostgresClusterStatusProxyPatchPtrOutput {
	return i.ToPostgresClusterStatusProxyPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusProxyPatchPtrType) ToPostgresClusterStatusProxyPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusProxyPatchPtrOutput)
}

// Current state of the PostgreSQL proxy.
type PostgresClusterStatusProxyPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusProxyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusProxyPatch)(nil)).Elem()
}

func (o PostgresClusterStatusProxyPatchOutput) ToPostgresClusterStatusProxyPatchOutput() PostgresClusterStatusProxyPatchOutput {
	return o
}

func (o PostgresClusterStatusProxyPatchOutput) ToPostgresClusterStatusProxyPatchOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPatchOutput {
	return o
}

func (o PostgresClusterStatusProxyPatchOutput) ToPostgresClusterStatusProxyPatchPtrOutput() PostgresClusterStatusProxyPatchPtrOutput {
	return o.ToPostgresClusterStatusProxyPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusProxyPatchOutput) ToPostgresClusterStatusProxyPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusProxyPatch) *PostgresClusterStatusProxyPatch {
		return &v
	}).(PostgresClusterStatusProxyPatchPtrOutput)
}

func (o PostgresClusterStatusProxyPatchOutput) PgBouncer() PostgresClusterStatusProxyPgBouncerPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusProxyPatch) *PostgresClusterStatusProxyPgBouncerPatch { return v.PgBouncer }).(PostgresClusterStatusProxyPgBouncerPatchPtrOutput)
}

type PostgresClusterStatusProxyPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusProxyPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusProxyPatch)(nil)).Elem()
}

func (o PostgresClusterStatusProxyPatchPtrOutput) ToPostgresClusterStatusProxyPatchPtrOutput() PostgresClusterStatusProxyPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusProxyPatchPtrOutput) ToPostgresClusterStatusProxyPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusProxyPatchPtrOutput) Elem() PostgresClusterStatusProxyPatchOutput {
	return o.ApplyT(func(v *PostgresClusterStatusProxyPatch) PostgresClusterStatusProxyPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusProxyPatch
		return ret
	}).(PostgresClusterStatusProxyPatchOutput)
}

func (o PostgresClusterStatusProxyPatchPtrOutput) PgBouncer() PostgresClusterStatusProxyPgBouncerPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusProxyPatch) *PostgresClusterStatusProxyPgBouncerPatch {
		if v == nil {
			return nil
		}
		return v.PgBouncer
	}).(PostgresClusterStatusProxyPgBouncerPatchPtrOutput)
}

type PostgresClusterStatusProxyPgBouncer struct {
	// Identifies the revision of PgBouncer assets that have been installed into PostgreSQL.
	PostgresRevision *string `pulumi:"postgresRevision"`
	// Total number of ready pods.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Total number of non-terminated pods.
	Replicas *int `pulumi:"replicas"`
}

// PostgresClusterStatusProxyPgBouncerInput is an input type that accepts PostgresClusterStatusProxyPgBouncerArgs and PostgresClusterStatusProxyPgBouncerOutput values.
// You can construct a concrete instance of `PostgresClusterStatusProxyPgBouncerInput` via:
//
//	PostgresClusterStatusProxyPgBouncerArgs{...}
type PostgresClusterStatusProxyPgBouncerInput interface {
	pulumi.Input

	ToPostgresClusterStatusProxyPgBouncerOutput() PostgresClusterStatusProxyPgBouncerOutput
	ToPostgresClusterStatusProxyPgBouncerOutputWithContext(context.Context) PostgresClusterStatusProxyPgBouncerOutput
}

type PostgresClusterStatusProxyPgBouncerArgs struct {
	// Identifies the revision of PgBouncer assets that have been installed into PostgreSQL.
	PostgresRevision pulumi.StringPtrInput `pulumi:"postgresRevision"`
	// Total number of ready pods.
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// Total number of non-terminated pods.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
}

func (PostgresClusterStatusProxyPgBouncerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusProxyPgBouncer)(nil)).Elem()
}

func (i PostgresClusterStatusProxyPgBouncerArgs) ToPostgresClusterStatusProxyPgBouncerOutput() PostgresClusterStatusProxyPgBouncerOutput {
	return i.ToPostgresClusterStatusProxyPgBouncerOutputWithContext(context.Background())
}

func (i PostgresClusterStatusProxyPgBouncerArgs) ToPostgresClusterStatusProxyPgBouncerOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPgBouncerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusProxyPgBouncerOutput)
}

func (i PostgresClusterStatusProxyPgBouncerArgs) ToPostgresClusterStatusProxyPgBouncerPtrOutput() PostgresClusterStatusProxyPgBouncerPtrOutput {
	return i.ToPostgresClusterStatusProxyPgBouncerPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusProxyPgBouncerArgs) ToPostgresClusterStatusProxyPgBouncerPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPgBouncerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusProxyPgBouncerOutput).ToPostgresClusterStatusProxyPgBouncerPtrOutputWithContext(ctx)
}

// PostgresClusterStatusProxyPgBouncerPtrInput is an input type that accepts PostgresClusterStatusProxyPgBouncerArgs, PostgresClusterStatusProxyPgBouncerPtr and PostgresClusterStatusProxyPgBouncerPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusProxyPgBouncerPtrInput` via:
//
//	        PostgresClusterStatusProxyPgBouncerArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusProxyPgBouncerPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusProxyPgBouncerPtrOutput() PostgresClusterStatusProxyPgBouncerPtrOutput
	ToPostgresClusterStatusProxyPgBouncerPtrOutputWithContext(context.Context) PostgresClusterStatusProxyPgBouncerPtrOutput
}

type postgresClusterStatusProxyPgBouncerPtrType PostgresClusterStatusProxyPgBouncerArgs

func PostgresClusterStatusProxyPgBouncerPtr(v *PostgresClusterStatusProxyPgBouncerArgs) PostgresClusterStatusProxyPgBouncerPtrInput {
	return (*postgresClusterStatusProxyPgBouncerPtrType)(v)
}

func (*postgresClusterStatusProxyPgBouncerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusProxyPgBouncer)(nil)).Elem()
}

func (i *postgresClusterStatusProxyPgBouncerPtrType) ToPostgresClusterStatusProxyPgBouncerPtrOutput() PostgresClusterStatusProxyPgBouncerPtrOutput {
	return i.ToPostgresClusterStatusProxyPgBouncerPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusProxyPgBouncerPtrType) ToPostgresClusterStatusProxyPgBouncerPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPgBouncerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusProxyPgBouncerPtrOutput)
}

type PostgresClusterStatusProxyPgBouncerOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusProxyPgBouncerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusProxyPgBouncer)(nil)).Elem()
}

func (o PostgresClusterStatusProxyPgBouncerOutput) ToPostgresClusterStatusProxyPgBouncerOutput() PostgresClusterStatusProxyPgBouncerOutput {
	return o
}

func (o PostgresClusterStatusProxyPgBouncerOutput) ToPostgresClusterStatusProxyPgBouncerOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPgBouncerOutput {
	return o
}

func (o PostgresClusterStatusProxyPgBouncerOutput) ToPostgresClusterStatusProxyPgBouncerPtrOutput() PostgresClusterStatusProxyPgBouncerPtrOutput {
	return o.ToPostgresClusterStatusProxyPgBouncerPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusProxyPgBouncerOutput) ToPostgresClusterStatusProxyPgBouncerPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPgBouncerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusProxyPgBouncer) *PostgresClusterStatusProxyPgBouncer {
		return &v
	}).(PostgresClusterStatusProxyPgBouncerPtrOutput)
}

// Identifies the revision of PgBouncer assets that have been installed into PostgreSQL.
func (o PostgresClusterStatusProxyPgBouncerOutput) PostgresRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusProxyPgBouncer) *string { return v.PostgresRevision }).(pulumi.StringPtrOutput)
}

// Total number of ready pods.
func (o PostgresClusterStatusProxyPgBouncerOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusProxyPgBouncer) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods.
func (o PostgresClusterStatusProxyPgBouncerOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusProxyPgBouncer) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type PostgresClusterStatusProxyPgBouncerPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusProxyPgBouncerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusProxyPgBouncer)(nil)).Elem()
}

func (o PostgresClusterStatusProxyPgBouncerPtrOutput) ToPostgresClusterStatusProxyPgBouncerPtrOutput() PostgresClusterStatusProxyPgBouncerPtrOutput {
	return o
}

func (o PostgresClusterStatusProxyPgBouncerPtrOutput) ToPostgresClusterStatusProxyPgBouncerPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPgBouncerPtrOutput {
	return o
}

func (o PostgresClusterStatusProxyPgBouncerPtrOutput) Elem() PostgresClusterStatusProxyPgBouncerOutput {
	return o.ApplyT(func(v *PostgresClusterStatusProxyPgBouncer) PostgresClusterStatusProxyPgBouncer {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusProxyPgBouncer
		return ret
	}).(PostgresClusterStatusProxyPgBouncerOutput)
}

// Identifies the revision of PgBouncer assets that have been installed into PostgreSQL.
func (o PostgresClusterStatusProxyPgBouncerPtrOutput) PostgresRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusProxyPgBouncer) *string {
		if v == nil {
			return nil
		}
		return v.PostgresRevision
	}).(pulumi.StringPtrOutput)
}

// Total number of ready pods.
func (o PostgresClusterStatusProxyPgBouncerPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusProxyPgBouncer) *int {
		if v == nil {
			return nil
		}
		return v.ReadyReplicas
	}).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods.
func (o PostgresClusterStatusProxyPgBouncerPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusProxyPgBouncer) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

type PostgresClusterStatusProxyPgBouncerPatch struct {
	// Identifies the revision of PgBouncer assets that have been installed into PostgreSQL.
	PostgresRevision *string `pulumi:"postgresRevision"`
	// Total number of ready pods.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Total number of non-terminated pods.
	Replicas *int `pulumi:"replicas"`
}

// PostgresClusterStatusProxyPgBouncerPatchInput is an input type that accepts PostgresClusterStatusProxyPgBouncerPatchArgs and PostgresClusterStatusProxyPgBouncerPatchOutput values.
// You can construct a concrete instance of `PostgresClusterStatusProxyPgBouncerPatchInput` via:
//
//	PostgresClusterStatusProxyPgBouncerPatchArgs{...}
type PostgresClusterStatusProxyPgBouncerPatchInput interface {
	pulumi.Input

	ToPostgresClusterStatusProxyPgBouncerPatchOutput() PostgresClusterStatusProxyPgBouncerPatchOutput
	ToPostgresClusterStatusProxyPgBouncerPatchOutputWithContext(context.Context) PostgresClusterStatusProxyPgBouncerPatchOutput
}

type PostgresClusterStatusProxyPgBouncerPatchArgs struct {
	// Identifies the revision of PgBouncer assets that have been installed into PostgreSQL.
	PostgresRevision pulumi.StringPtrInput `pulumi:"postgresRevision"`
	// Total number of ready pods.
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// Total number of non-terminated pods.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
}

func (PostgresClusterStatusProxyPgBouncerPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusProxyPgBouncerPatch)(nil)).Elem()
}

func (i PostgresClusterStatusProxyPgBouncerPatchArgs) ToPostgresClusterStatusProxyPgBouncerPatchOutput() PostgresClusterStatusProxyPgBouncerPatchOutput {
	return i.ToPostgresClusterStatusProxyPgBouncerPatchOutputWithContext(context.Background())
}

func (i PostgresClusterStatusProxyPgBouncerPatchArgs) ToPostgresClusterStatusProxyPgBouncerPatchOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPgBouncerPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusProxyPgBouncerPatchOutput)
}

func (i PostgresClusterStatusProxyPgBouncerPatchArgs) ToPostgresClusterStatusProxyPgBouncerPatchPtrOutput() PostgresClusterStatusProxyPgBouncerPatchPtrOutput {
	return i.ToPostgresClusterStatusProxyPgBouncerPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusProxyPgBouncerPatchArgs) ToPostgresClusterStatusProxyPgBouncerPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPgBouncerPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusProxyPgBouncerPatchOutput).ToPostgresClusterStatusProxyPgBouncerPatchPtrOutputWithContext(ctx)
}

// PostgresClusterStatusProxyPgBouncerPatchPtrInput is an input type that accepts PostgresClusterStatusProxyPgBouncerPatchArgs, PostgresClusterStatusProxyPgBouncerPatchPtr and PostgresClusterStatusProxyPgBouncerPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusProxyPgBouncerPatchPtrInput` via:
//
//	        PostgresClusterStatusProxyPgBouncerPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusProxyPgBouncerPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusProxyPgBouncerPatchPtrOutput() PostgresClusterStatusProxyPgBouncerPatchPtrOutput
	ToPostgresClusterStatusProxyPgBouncerPatchPtrOutputWithContext(context.Context) PostgresClusterStatusProxyPgBouncerPatchPtrOutput
}

type postgresClusterStatusProxyPgBouncerPatchPtrType PostgresClusterStatusProxyPgBouncerPatchArgs

func PostgresClusterStatusProxyPgBouncerPatchPtr(v *PostgresClusterStatusProxyPgBouncerPatchArgs) PostgresClusterStatusProxyPgBouncerPatchPtrInput {
	return (*postgresClusterStatusProxyPgBouncerPatchPtrType)(v)
}

func (*postgresClusterStatusProxyPgBouncerPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusProxyPgBouncerPatch)(nil)).Elem()
}

func (i *postgresClusterStatusProxyPgBouncerPatchPtrType) ToPostgresClusterStatusProxyPgBouncerPatchPtrOutput() PostgresClusterStatusProxyPgBouncerPatchPtrOutput {
	return i.ToPostgresClusterStatusProxyPgBouncerPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusProxyPgBouncerPatchPtrType) ToPostgresClusterStatusProxyPgBouncerPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPgBouncerPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusProxyPgBouncerPatchPtrOutput)
}

type PostgresClusterStatusProxyPgBouncerPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusProxyPgBouncerPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusProxyPgBouncerPatch)(nil)).Elem()
}

func (o PostgresClusterStatusProxyPgBouncerPatchOutput) ToPostgresClusterStatusProxyPgBouncerPatchOutput() PostgresClusterStatusProxyPgBouncerPatchOutput {
	return o
}

func (o PostgresClusterStatusProxyPgBouncerPatchOutput) ToPostgresClusterStatusProxyPgBouncerPatchOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPgBouncerPatchOutput {
	return o
}

func (o PostgresClusterStatusProxyPgBouncerPatchOutput) ToPostgresClusterStatusProxyPgBouncerPatchPtrOutput() PostgresClusterStatusProxyPgBouncerPatchPtrOutput {
	return o.ToPostgresClusterStatusProxyPgBouncerPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusProxyPgBouncerPatchOutput) ToPostgresClusterStatusProxyPgBouncerPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPgBouncerPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusProxyPgBouncerPatch) *PostgresClusterStatusProxyPgBouncerPatch {
		return &v
	}).(PostgresClusterStatusProxyPgBouncerPatchPtrOutput)
}

// Identifies the revision of PgBouncer assets that have been installed into PostgreSQL.
func (o PostgresClusterStatusProxyPgBouncerPatchOutput) PostgresRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusProxyPgBouncerPatch) *string { return v.PostgresRevision }).(pulumi.StringPtrOutput)
}

// Total number of ready pods.
func (o PostgresClusterStatusProxyPgBouncerPatchOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusProxyPgBouncerPatch) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods.
func (o PostgresClusterStatusProxyPgBouncerPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusProxyPgBouncerPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type PostgresClusterStatusProxyPgBouncerPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusProxyPgBouncerPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusProxyPgBouncerPatch)(nil)).Elem()
}

func (o PostgresClusterStatusProxyPgBouncerPatchPtrOutput) ToPostgresClusterStatusProxyPgBouncerPatchPtrOutput() PostgresClusterStatusProxyPgBouncerPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusProxyPgBouncerPatchPtrOutput) ToPostgresClusterStatusProxyPgBouncerPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusProxyPgBouncerPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusProxyPgBouncerPatchPtrOutput) Elem() PostgresClusterStatusProxyPgBouncerPatchOutput {
	return o.ApplyT(func(v *PostgresClusterStatusProxyPgBouncerPatch) PostgresClusterStatusProxyPgBouncerPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusProxyPgBouncerPatch
		return ret
	}).(PostgresClusterStatusProxyPgBouncerPatchOutput)
}

// Identifies the revision of PgBouncer assets that have been installed into PostgreSQL.
func (o PostgresClusterStatusProxyPgBouncerPatchPtrOutput) PostgresRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusProxyPgBouncerPatch) *string {
		if v == nil {
			return nil
		}
		return v.PostgresRevision
	}).(pulumi.StringPtrOutput)
}

// Total number of ready pods.
func (o PostgresClusterStatusProxyPgBouncerPatchPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusProxyPgBouncerPatch) *int {
		if v == nil {
			return nil
		}
		return v.ReadyReplicas
	}).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods.
func (o PostgresClusterStatusProxyPgBouncerPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusProxyPgBouncerPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Current state of the PostgreSQL user interface.
type PostgresClusterStatusUserInterface struct {
	PgAdmin *PostgresClusterStatusUserInterfacePgAdmin `pulumi:"pgAdmin"`
}

// PostgresClusterStatusUserInterfaceInput is an input type that accepts PostgresClusterStatusUserInterfaceArgs and PostgresClusterStatusUserInterfaceOutput values.
// You can construct a concrete instance of `PostgresClusterStatusUserInterfaceInput` via:
//
//	PostgresClusterStatusUserInterfaceArgs{...}
type PostgresClusterStatusUserInterfaceInput interface {
	pulumi.Input

	ToPostgresClusterStatusUserInterfaceOutput() PostgresClusterStatusUserInterfaceOutput
	ToPostgresClusterStatusUserInterfaceOutputWithContext(context.Context) PostgresClusterStatusUserInterfaceOutput
}

// Current state of the PostgreSQL user interface.
type PostgresClusterStatusUserInterfaceArgs struct {
	PgAdmin PostgresClusterStatusUserInterfacePgAdminPtrInput `pulumi:"pgAdmin"`
}

func (PostgresClusterStatusUserInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusUserInterface)(nil)).Elem()
}

func (i PostgresClusterStatusUserInterfaceArgs) ToPostgresClusterStatusUserInterfaceOutput() PostgresClusterStatusUserInterfaceOutput {
	return i.ToPostgresClusterStatusUserInterfaceOutputWithContext(context.Background())
}

func (i PostgresClusterStatusUserInterfaceArgs) ToPostgresClusterStatusUserInterfaceOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusUserInterfaceOutput)
}

func (i PostgresClusterStatusUserInterfaceArgs) ToPostgresClusterStatusUserInterfacePtrOutput() PostgresClusterStatusUserInterfacePtrOutput {
	return i.ToPostgresClusterStatusUserInterfacePtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusUserInterfaceArgs) ToPostgresClusterStatusUserInterfacePtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusUserInterfaceOutput).ToPostgresClusterStatusUserInterfacePtrOutputWithContext(ctx)
}

// PostgresClusterStatusUserInterfacePtrInput is an input type that accepts PostgresClusterStatusUserInterfaceArgs, PostgresClusterStatusUserInterfacePtr and PostgresClusterStatusUserInterfacePtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusUserInterfacePtrInput` via:
//
//	        PostgresClusterStatusUserInterfaceArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusUserInterfacePtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusUserInterfacePtrOutput() PostgresClusterStatusUserInterfacePtrOutput
	ToPostgresClusterStatusUserInterfacePtrOutputWithContext(context.Context) PostgresClusterStatusUserInterfacePtrOutput
}

type postgresClusterStatusUserInterfacePtrType PostgresClusterStatusUserInterfaceArgs

func PostgresClusterStatusUserInterfacePtr(v *PostgresClusterStatusUserInterfaceArgs) PostgresClusterStatusUserInterfacePtrInput {
	return (*postgresClusterStatusUserInterfacePtrType)(v)
}

func (*postgresClusterStatusUserInterfacePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusUserInterface)(nil)).Elem()
}

func (i *postgresClusterStatusUserInterfacePtrType) ToPostgresClusterStatusUserInterfacePtrOutput() PostgresClusterStatusUserInterfacePtrOutput {
	return i.ToPostgresClusterStatusUserInterfacePtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusUserInterfacePtrType) ToPostgresClusterStatusUserInterfacePtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusUserInterfacePtrOutput)
}

// Current state of the PostgreSQL user interface.
type PostgresClusterStatusUserInterfaceOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusUserInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusUserInterface)(nil)).Elem()
}

func (o PostgresClusterStatusUserInterfaceOutput) ToPostgresClusterStatusUserInterfaceOutput() PostgresClusterStatusUserInterfaceOutput {
	return o
}

func (o PostgresClusterStatusUserInterfaceOutput) ToPostgresClusterStatusUserInterfaceOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfaceOutput {
	return o
}

func (o PostgresClusterStatusUserInterfaceOutput) ToPostgresClusterStatusUserInterfacePtrOutput() PostgresClusterStatusUserInterfacePtrOutput {
	return o.ToPostgresClusterStatusUserInterfacePtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusUserInterfaceOutput) ToPostgresClusterStatusUserInterfacePtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusUserInterface) *PostgresClusterStatusUserInterface {
		return &v
	}).(PostgresClusterStatusUserInterfacePtrOutput)
}

func (o PostgresClusterStatusUserInterfaceOutput) PgAdmin() PostgresClusterStatusUserInterfacePgAdminPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusUserInterface) *PostgresClusterStatusUserInterfacePgAdmin {
		return v.PgAdmin
	}).(PostgresClusterStatusUserInterfacePgAdminPtrOutput)
}

type PostgresClusterStatusUserInterfacePtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusUserInterfacePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusUserInterface)(nil)).Elem()
}

func (o PostgresClusterStatusUserInterfacePtrOutput) ToPostgresClusterStatusUserInterfacePtrOutput() PostgresClusterStatusUserInterfacePtrOutput {
	return o
}

func (o PostgresClusterStatusUserInterfacePtrOutput) ToPostgresClusterStatusUserInterfacePtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePtrOutput {
	return o
}

func (o PostgresClusterStatusUserInterfacePtrOutput) Elem() PostgresClusterStatusUserInterfaceOutput {
	return o.ApplyT(func(v *PostgresClusterStatusUserInterface) PostgresClusterStatusUserInterface {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusUserInterface
		return ret
	}).(PostgresClusterStatusUserInterfaceOutput)
}

func (o PostgresClusterStatusUserInterfacePtrOutput) PgAdmin() PostgresClusterStatusUserInterfacePgAdminPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusUserInterface) *PostgresClusterStatusUserInterfacePgAdmin {
		if v == nil {
			return nil
		}
		return v.PgAdmin
	}).(PostgresClusterStatusUserInterfacePgAdminPtrOutput)
}

// Current state of the PostgreSQL user interface.
type PostgresClusterStatusUserInterfacePatch struct {
	PgAdmin *PostgresClusterStatusUserInterfacePgAdminPatch `pulumi:"pgAdmin"`
}

// PostgresClusterStatusUserInterfacePatchInput is an input type that accepts PostgresClusterStatusUserInterfacePatchArgs and PostgresClusterStatusUserInterfacePatchOutput values.
// You can construct a concrete instance of `PostgresClusterStatusUserInterfacePatchInput` via:
//
//	PostgresClusterStatusUserInterfacePatchArgs{...}
type PostgresClusterStatusUserInterfacePatchInput interface {
	pulumi.Input

	ToPostgresClusterStatusUserInterfacePatchOutput() PostgresClusterStatusUserInterfacePatchOutput
	ToPostgresClusterStatusUserInterfacePatchOutputWithContext(context.Context) PostgresClusterStatusUserInterfacePatchOutput
}

// Current state of the PostgreSQL user interface.
type PostgresClusterStatusUserInterfacePatchArgs struct {
	PgAdmin PostgresClusterStatusUserInterfacePgAdminPatchPtrInput `pulumi:"pgAdmin"`
}

func (PostgresClusterStatusUserInterfacePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusUserInterfacePatch)(nil)).Elem()
}

func (i PostgresClusterStatusUserInterfacePatchArgs) ToPostgresClusterStatusUserInterfacePatchOutput() PostgresClusterStatusUserInterfacePatchOutput {
	return i.ToPostgresClusterStatusUserInterfacePatchOutputWithContext(context.Background())
}

func (i PostgresClusterStatusUserInterfacePatchArgs) ToPostgresClusterStatusUserInterfacePatchOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusUserInterfacePatchOutput)
}

func (i PostgresClusterStatusUserInterfacePatchArgs) ToPostgresClusterStatusUserInterfacePatchPtrOutput() PostgresClusterStatusUserInterfacePatchPtrOutput {
	return i.ToPostgresClusterStatusUserInterfacePatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusUserInterfacePatchArgs) ToPostgresClusterStatusUserInterfacePatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusUserInterfacePatchOutput).ToPostgresClusterStatusUserInterfacePatchPtrOutputWithContext(ctx)
}

// PostgresClusterStatusUserInterfacePatchPtrInput is an input type that accepts PostgresClusterStatusUserInterfacePatchArgs, PostgresClusterStatusUserInterfacePatchPtr and PostgresClusterStatusUserInterfacePatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusUserInterfacePatchPtrInput` via:
//
//	        PostgresClusterStatusUserInterfacePatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusUserInterfacePatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusUserInterfacePatchPtrOutput() PostgresClusterStatusUserInterfacePatchPtrOutput
	ToPostgresClusterStatusUserInterfacePatchPtrOutputWithContext(context.Context) PostgresClusterStatusUserInterfacePatchPtrOutput
}

type postgresClusterStatusUserInterfacePatchPtrType PostgresClusterStatusUserInterfacePatchArgs

func PostgresClusterStatusUserInterfacePatchPtr(v *PostgresClusterStatusUserInterfacePatchArgs) PostgresClusterStatusUserInterfacePatchPtrInput {
	return (*postgresClusterStatusUserInterfacePatchPtrType)(v)
}

func (*postgresClusterStatusUserInterfacePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusUserInterfacePatch)(nil)).Elem()
}

func (i *postgresClusterStatusUserInterfacePatchPtrType) ToPostgresClusterStatusUserInterfacePatchPtrOutput() PostgresClusterStatusUserInterfacePatchPtrOutput {
	return i.ToPostgresClusterStatusUserInterfacePatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusUserInterfacePatchPtrType) ToPostgresClusterStatusUserInterfacePatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusUserInterfacePatchPtrOutput)
}

// Current state of the PostgreSQL user interface.
type PostgresClusterStatusUserInterfacePatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusUserInterfacePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusUserInterfacePatch)(nil)).Elem()
}

func (o PostgresClusterStatusUserInterfacePatchOutput) ToPostgresClusterStatusUserInterfacePatchOutput() PostgresClusterStatusUserInterfacePatchOutput {
	return o
}

func (o PostgresClusterStatusUserInterfacePatchOutput) ToPostgresClusterStatusUserInterfacePatchOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePatchOutput {
	return o
}

func (o PostgresClusterStatusUserInterfacePatchOutput) ToPostgresClusterStatusUserInterfacePatchPtrOutput() PostgresClusterStatusUserInterfacePatchPtrOutput {
	return o.ToPostgresClusterStatusUserInterfacePatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusUserInterfacePatchOutput) ToPostgresClusterStatusUserInterfacePatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusUserInterfacePatch) *PostgresClusterStatusUserInterfacePatch {
		return &v
	}).(PostgresClusterStatusUserInterfacePatchPtrOutput)
}

func (o PostgresClusterStatusUserInterfacePatchOutput) PgAdmin() PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusUserInterfacePatch) *PostgresClusterStatusUserInterfacePgAdminPatch {
		return v.PgAdmin
	}).(PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput)
}

type PostgresClusterStatusUserInterfacePatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusUserInterfacePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusUserInterfacePatch)(nil)).Elem()
}

func (o PostgresClusterStatusUserInterfacePatchPtrOutput) ToPostgresClusterStatusUserInterfacePatchPtrOutput() PostgresClusterStatusUserInterfacePatchPtrOutput {
	return o
}

func (o PostgresClusterStatusUserInterfacePatchPtrOutput) ToPostgresClusterStatusUserInterfacePatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePatchPtrOutput {
	return o
}

func (o PostgresClusterStatusUserInterfacePatchPtrOutput) Elem() PostgresClusterStatusUserInterfacePatchOutput {
	return o.ApplyT(func(v *PostgresClusterStatusUserInterfacePatch) PostgresClusterStatusUserInterfacePatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusUserInterfacePatch
		return ret
	}).(PostgresClusterStatusUserInterfacePatchOutput)
}

func (o PostgresClusterStatusUserInterfacePatchPtrOutput) PgAdmin() PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusUserInterfacePatch) *PostgresClusterStatusUserInterfacePgAdminPatch {
		if v == nil {
			return nil
		}
		return v.PgAdmin
	}).(PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput)
}

// The state of the pgAdmin user interface.
type PostgresClusterStatusUserInterfacePgAdmin struct {
	// Hash that indicates which users have been installed into pgAdmin.
	UsersRevision *string `pulumi:"usersRevision"`
}

// PostgresClusterStatusUserInterfacePgAdminInput is an input type that accepts PostgresClusterStatusUserInterfacePgAdminArgs and PostgresClusterStatusUserInterfacePgAdminOutput values.
// You can construct a concrete instance of `PostgresClusterStatusUserInterfacePgAdminInput` via:
//
//	PostgresClusterStatusUserInterfacePgAdminArgs{...}
type PostgresClusterStatusUserInterfacePgAdminInput interface {
	pulumi.Input

	ToPostgresClusterStatusUserInterfacePgAdminOutput() PostgresClusterStatusUserInterfacePgAdminOutput
	ToPostgresClusterStatusUserInterfacePgAdminOutputWithContext(context.Context) PostgresClusterStatusUserInterfacePgAdminOutput
}

// The state of the pgAdmin user interface.
type PostgresClusterStatusUserInterfacePgAdminArgs struct {
	// Hash that indicates which users have been installed into pgAdmin.
	UsersRevision pulumi.StringPtrInput `pulumi:"usersRevision"`
}

func (PostgresClusterStatusUserInterfacePgAdminArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusUserInterfacePgAdmin)(nil)).Elem()
}

func (i PostgresClusterStatusUserInterfacePgAdminArgs) ToPostgresClusterStatusUserInterfacePgAdminOutput() PostgresClusterStatusUserInterfacePgAdminOutput {
	return i.ToPostgresClusterStatusUserInterfacePgAdminOutputWithContext(context.Background())
}

func (i PostgresClusterStatusUserInterfacePgAdminArgs) ToPostgresClusterStatusUserInterfacePgAdminOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePgAdminOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusUserInterfacePgAdminOutput)
}

func (i PostgresClusterStatusUserInterfacePgAdminArgs) ToPostgresClusterStatusUserInterfacePgAdminPtrOutput() PostgresClusterStatusUserInterfacePgAdminPtrOutput {
	return i.ToPostgresClusterStatusUserInterfacePgAdminPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusUserInterfacePgAdminArgs) ToPostgresClusterStatusUserInterfacePgAdminPtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePgAdminPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusUserInterfacePgAdminOutput).ToPostgresClusterStatusUserInterfacePgAdminPtrOutputWithContext(ctx)
}

// PostgresClusterStatusUserInterfacePgAdminPtrInput is an input type that accepts PostgresClusterStatusUserInterfacePgAdminArgs, PostgresClusterStatusUserInterfacePgAdminPtr and PostgresClusterStatusUserInterfacePgAdminPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusUserInterfacePgAdminPtrInput` via:
//
//	        PostgresClusterStatusUserInterfacePgAdminArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusUserInterfacePgAdminPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusUserInterfacePgAdminPtrOutput() PostgresClusterStatusUserInterfacePgAdminPtrOutput
	ToPostgresClusterStatusUserInterfacePgAdminPtrOutputWithContext(context.Context) PostgresClusterStatusUserInterfacePgAdminPtrOutput
}

type postgresClusterStatusUserInterfacePgAdminPtrType PostgresClusterStatusUserInterfacePgAdminArgs

func PostgresClusterStatusUserInterfacePgAdminPtr(v *PostgresClusterStatusUserInterfacePgAdminArgs) PostgresClusterStatusUserInterfacePgAdminPtrInput {
	return (*postgresClusterStatusUserInterfacePgAdminPtrType)(v)
}

func (*postgresClusterStatusUserInterfacePgAdminPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusUserInterfacePgAdmin)(nil)).Elem()
}

func (i *postgresClusterStatusUserInterfacePgAdminPtrType) ToPostgresClusterStatusUserInterfacePgAdminPtrOutput() PostgresClusterStatusUserInterfacePgAdminPtrOutput {
	return i.ToPostgresClusterStatusUserInterfacePgAdminPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusUserInterfacePgAdminPtrType) ToPostgresClusterStatusUserInterfacePgAdminPtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePgAdminPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusUserInterfacePgAdminPtrOutput)
}

// The state of the pgAdmin user interface.
type PostgresClusterStatusUserInterfacePgAdminOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusUserInterfacePgAdminOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusUserInterfacePgAdmin)(nil)).Elem()
}

func (o PostgresClusterStatusUserInterfacePgAdminOutput) ToPostgresClusterStatusUserInterfacePgAdminOutput() PostgresClusterStatusUserInterfacePgAdminOutput {
	return o
}

func (o PostgresClusterStatusUserInterfacePgAdminOutput) ToPostgresClusterStatusUserInterfacePgAdminOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePgAdminOutput {
	return o
}

func (o PostgresClusterStatusUserInterfacePgAdminOutput) ToPostgresClusterStatusUserInterfacePgAdminPtrOutput() PostgresClusterStatusUserInterfacePgAdminPtrOutput {
	return o.ToPostgresClusterStatusUserInterfacePgAdminPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusUserInterfacePgAdminOutput) ToPostgresClusterStatusUserInterfacePgAdminPtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePgAdminPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusUserInterfacePgAdmin) *PostgresClusterStatusUserInterfacePgAdmin {
		return &v
	}).(PostgresClusterStatusUserInterfacePgAdminPtrOutput)
}

// Hash that indicates which users have been installed into pgAdmin.
func (o PostgresClusterStatusUserInterfacePgAdminOutput) UsersRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusUserInterfacePgAdmin) *string { return v.UsersRevision }).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusUserInterfacePgAdminPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusUserInterfacePgAdminPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusUserInterfacePgAdmin)(nil)).Elem()
}

func (o PostgresClusterStatusUserInterfacePgAdminPtrOutput) ToPostgresClusterStatusUserInterfacePgAdminPtrOutput() PostgresClusterStatusUserInterfacePgAdminPtrOutput {
	return o
}

func (o PostgresClusterStatusUserInterfacePgAdminPtrOutput) ToPostgresClusterStatusUserInterfacePgAdminPtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePgAdminPtrOutput {
	return o
}

func (o PostgresClusterStatusUserInterfacePgAdminPtrOutput) Elem() PostgresClusterStatusUserInterfacePgAdminOutput {
	return o.ApplyT(func(v *PostgresClusterStatusUserInterfacePgAdmin) PostgresClusterStatusUserInterfacePgAdmin {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusUserInterfacePgAdmin
		return ret
	}).(PostgresClusterStatusUserInterfacePgAdminOutput)
}

// Hash that indicates which users have been installed into pgAdmin.
func (o PostgresClusterStatusUserInterfacePgAdminPtrOutput) UsersRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusUserInterfacePgAdmin) *string {
		if v == nil {
			return nil
		}
		return v.UsersRevision
	}).(pulumi.StringPtrOutput)
}

// The state of the pgAdmin user interface.
type PostgresClusterStatusUserInterfacePgAdminPatch struct {
	// Hash that indicates which users have been installed into pgAdmin.
	UsersRevision *string `pulumi:"usersRevision"`
}

// PostgresClusterStatusUserInterfacePgAdminPatchInput is an input type that accepts PostgresClusterStatusUserInterfacePgAdminPatchArgs and PostgresClusterStatusUserInterfacePgAdminPatchOutput values.
// You can construct a concrete instance of `PostgresClusterStatusUserInterfacePgAdminPatchInput` via:
//
//	PostgresClusterStatusUserInterfacePgAdminPatchArgs{...}
type PostgresClusterStatusUserInterfacePgAdminPatchInput interface {
	pulumi.Input

	ToPostgresClusterStatusUserInterfacePgAdminPatchOutput() PostgresClusterStatusUserInterfacePgAdminPatchOutput
	ToPostgresClusterStatusUserInterfacePgAdminPatchOutputWithContext(context.Context) PostgresClusterStatusUserInterfacePgAdminPatchOutput
}

// The state of the pgAdmin user interface.
type PostgresClusterStatusUserInterfacePgAdminPatchArgs struct {
	// Hash that indicates which users have been installed into pgAdmin.
	UsersRevision pulumi.StringPtrInput `pulumi:"usersRevision"`
}

func (PostgresClusterStatusUserInterfacePgAdminPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusUserInterfacePgAdminPatch)(nil)).Elem()
}

func (i PostgresClusterStatusUserInterfacePgAdminPatchArgs) ToPostgresClusterStatusUserInterfacePgAdminPatchOutput() PostgresClusterStatusUserInterfacePgAdminPatchOutput {
	return i.ToPostgresClusterStatusUserInterfacePgAdminPatchOutputWithContext(context.Background())
}

func (i PostgresClusterStatusUserInterfacePgAdminPatchArgs) ToPostgresClusterStatusUserInterfacePgAdminPatchOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePgAdminPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusUserInterfacePgAdminPatchOutput)
}

func (i PostgresClusterStatusUserInterfacePgAdminPatchArgs) ToPostgresClusterStatusUserInterfacePgAdminPatchPtrOutput() PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput {
	return i.ToPostgresClusterStatusUserInterfacePgAdminPatchPtrOutputWithContext(context.Background())
}

func (i PostgresClusterStatusUserInterfacePgAdminPatchArgs) ToPostgresClusterStatusUserInterfacePgAdminPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusUserInterfacePgAdminPatchOutput).ToPostgresClusterStatusUserInterfacePgAdminPatchPtrOutputWithContext(ctx)
}

// PostgresClusterStatusUserInterfacePgAdminPatchPtrInput is an input type that accepts PostgresClusterStatusUserInterfacePgAdminPatchArgs, PostgresClusterStatusUserInterfacePgAdminPatchPtr and PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput values.
// You can construct a concrete instance of `PostgresClusterStatusUserInterfacePgAdminPatchPtrInput` via:
//
//	        PostgresClusterStatusUserInterfacePgAdminPatchArgs{...}
//
//	or:
//
//	        nil
type PostgresClusterStatusUserInterfacePgAdminPatchPtrInput interface {
	pulumi.Input

	ToPostgresClusterStatusUserInterfacePgAdminPatchPtrOutput() PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput
	ToPostgresClusterStatusUserInterfacePgAdminPatchPtrOutputWithContext(context.Context) PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput
}

type postgresClusterStatusUserInterfacePgAdminPatchPtrType PostgresClusterStatusUserInterfacePgAdminPatchArgs

func PostgresClusterStatusUserInterfacePgAdminPatchPtr(v *PostgresClusterStatusUserInterfacePgAdminPatchArgs) PostgresClusterStatusUserInterfacePgAdminPatchPtrInput {
	return (*postgresClusterStatusUserInterfacePgAdminPatchPtrType)(v)
}

func (*postgresClusterStatusUserInterfacePgAdminPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusUserInterfacePgAdminPatch)(nil)).Elem()
}

func (i *postgresClusterStatusUserInterfacePgAdminPatchPtrType) ToPostgresClusterStatusUserInterfacePgAdminPatchPtrOutput() PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput {
	return i.ToPostgresClusterStatusUserInterfacePgAdminPatchPtrOutputWithContext(context.Background())
}

func (i *postgresClusterStatusUserInterfacePgAdminPatchPtrType) ToPostgresClusterStatusUserInterfacePgAdminPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput)
}

// The state of the pgAdmin user interface.
type PostgresClusterStatusUserInterfacePgAdminPatchOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusUserInterfacePgAdminPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresClusterStatusUserInterfacePgAdminPatch)(nil)).Elem()
}

func (o PostgresClusterStatusUserInterfacePgAdminPatchOutput) ToPostgresClusterStatusUserInterfacePgAdminPatchOutput() PostgresClusterStatusUserInterfacePgAdminPatchOutput {
	return o
}

func (o PostgresClusterStatusUserInterfacePgAdminPatchOutput) ToPostgresClusterStatusUserInterfacePgAdminPatchOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePgAdminPatchOutput {
	return o
}

func (o PostgresClusterStatusUserInterfacePgAdminPatchOutput) ToPostgresClusterStatusUserInterfacePgAdminPatchPtrOutput() PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput {
	return o.ToPostgresClusterStatusUserInterfacePgAdminPatchPtrOutputWithContext(context.Background())
}

func (o PostgresClusterStatusUserInterfacePgAdminPatchOutput) ToPostgresClusterStatusUserInterfacePgAdminPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresClusterStatusUserInterfacePgAdminPatch) *PostgresClusterStatusUserInterfacePgAdminPatch {
		return &v
	}).(PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput)
}

// Hash that indicates which users have been installed into pgAdmin.
func (o PostgresClusterStatusUserInterfacePgAdminPatchOutput) UsersRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresClusterStatusUserInterfacePgAdminPatch) *string { return v.UsersRevision }).(pulumi.StringPtrOutput)
}

type PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput struct{ *pulumi.OutputState }

func (PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresClusterStatusUserInterfacePgAdminPatch)(nil)).Elem()
}

func (o PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput) ToPostgresClusterStatusUserInterfacePgAdminPatchPtrOutput() PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput) ToPostgresClusterStatusUserInterfacePgAdminPatchPtrOutputWithContext(ctx context.Context) PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput {
	return o
}

func (o PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput) Elem() PostgresClusterStatusUserInterfacePgAdminPatchOutput {
	return o.ApplyT(func(v *PostgresClusterStatusUserInterfacePgAdminPatch) PostgresClusterStatusUserInterfacePgAdminPatch {
		if v != nil {
			return *v
		}
		var ret PostgresClusterStatusUserInterfacePgAdminPatch
		return ret
	}).(PostgresClusterStatusUserInterfacePgAdminPatchOutput)
}

// Hash that indicates which users have been installed into pgAdmin.
func (o PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput) UsersRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresClusterStatusUserInterfacePgAdminPatch) *string {
		if v == nil {
			return nil
		}
		return v.UsersRevision
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchInput)(nil)).Elem(), PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecServiceInput)(nil)).Elem(), PostgresClusterSpecServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecServicePtrInput)(nil)).Elem(), PostgresClusterSpecServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecServiceMetadataInput)(nil)).Elem(), PostgresClusterSpecServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecServiceMetadataPtrInput)(nil)).Elem(), PostgresClusterSpecServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecServiceMetadataPatchInput)(nil)).Elem(), PostgresClusterSpecServiceMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecServiceMetadataPatchPtrInput)(nil)).Elem(), PostgresClusterSpecServiceMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecServicePatchInput)(nil)).Elem(), PostgresClusterSpecServicePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecServicePatchPtrInput)(nil)).Elem(), PostgresClusterSpecServicePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecStandbyInput)(nil)).Elem(), PostgresClusterSpecStandbyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecStandbyPtrInput)(nil)).Elem(), PostgresClusterSpecStandbyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecStandbyPatchInput)(nil)).Elem(), PostgresClusterSpecStandbyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecStandbyPatchPtrInput)(nil)).Elem(), PostgresClusterSpecStandbyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfaceInput)(nil)).Elem(), PostgresClusterSpecUserInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminMetadataInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminMetadataPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminMetadataPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminResourcesInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminResourcesPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminResourcesPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminServiceInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminServicePtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminServiceMetadataInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminServicePatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminServicePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminServicePatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminServicePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTolerationsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTolerationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTolerationsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTolerationsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTolerationsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUsersInput)(nil)).Elem(), PostgresClusterSpecUsersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUsersArrayInput)(nil)).Elem(), PostgresClusterSpecUsersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUsersPasswordInput)(nil)).Elem(), PostgresClusterSpecUsersPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUsersPasswordPtrInput)(nil)).Elem(), PostgresClusterSpecUsersPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUsersPasswordPatchInput)(nil)).Elem(), PostgresClusterSpecUsersPasswordPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUsersPasswordPatchPtrInput)(nil)).Elem(), PostgresClusterSpecUsersPasswordPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUsersPatchInput)(nil)).Elem(), PostgresClusterSpecUsersPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterSpecUsersPatchArrayInput)(nil)).Elem(), PostgresClusterSpecUsersPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusInput)(nil)).Elem(), PostgresClusterStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPtrInput)(nil)).Elem(), PostgresClusterStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusConditionsInput)(nil)).Elem(), PostgresClusterStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusConditionsArrayInput)(nil)).Elem(), PostgresClusterStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusConditionsPatchInput)(nil)).Elem(), PostgresClusterStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusConditionsPatchArrayInput)(nil)).Elem(), PostgresClusterStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusInstancesInput)(nil)).Elem(), PostgresClusterStatusInstancesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusInstancesArrayInput)(nil)).Elem(), PostgresClusterStatusInstancesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusInstancesPatchInput)(nil)).Elem(), PostgresClusterStatusInstancesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusInstancesPatchArrayInput)(nil)).Elem(), PostgresClusterStatusInstancesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusMonitoringInput)(nil)).Elem(), PostgresClusterStatusMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusMonitoringPtrInput)(nil)).Elem(), PostgresClusterStatusMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusMonitoringPatchInput)(nil)).Elem(), PostgresClusterStatusMonitoringPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusMonitoringPatchPtrInput)(nil)).Elem(), PostgresClusterStatusMonitoringPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPatchInput)(nil)).Elem(), PostgresClusterStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPatchPtrInput)(nil)).Elem(), PostgresClusterStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPatroniInput)(nil)).Elem(), PostgresClusterStatusPatroniArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPatroniPtrInput)(nil)).Elem(), PostgresClusterStatusPatroniArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPatroniPatchInput)(nil)).Elem(), PostgresClusterStatusPatroniPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPatroniPatchPtrInput)(nil)).Elem(), PostgresClusterStatusPatroniPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestInput)(nil)).Elem(), PostgresClusterStatusPgbackrestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestPtrInput)(nil)).Elem(), PostgresClusterStatusPgbackrestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestManualBackupInput)(nil)).Elem(), PostgresClusterStatusPgbackrestManualBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestManualBackupPtrInput)(nil)).Elem(), PostgresClusterStatusPgbackrestManualBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestManualBackupPatchInput)(nil)).Elem(), PostgresClusterStatusPgbackrestManualBackupPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestManualBackupPatchPtrInput)(nil)).Elem(), PostgresClusterStatusPgbackrestManualBackupPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestPatchInput)(nil)).Elem(), PostgresClusterStatusPgbackrestPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestPatchPtrInput)(nil)).Elem(), PostgresClusterStatusPgbackrestPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestRepoHostInput)(nil)).Elem(), PostgresClusterStatusPgbackrestRepoHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestRepoHostPtrInput)(nil)).Elem(), PostgresClusterStatusPgbackrestRepoHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestRepoHostPatchInput)(nil)).Elem(), PostgresClusterStatusPgbackrestRepoHostPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestRepoHostPatchPtrInput)(nil)).Elem(), PostgresClusterStatusPgbackrestRepoHostPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestReposInput)(nil)).Elem(), PostgresClusterStatusPgbackrestReposArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestReposArrayInput)(nil)).Elem(), PostgresClusterStatusPgbackrestReposArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestReposPatchInput)(nil)).Elem(), PostgresClusterStatusPgbackrestReposPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestReposPatchArrayInput)(nil)).Elem(), PostgresClusterStatusPgbackrestReposPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestRestoreInput)(nil)).Elem(), PostgresClusterStatusPgbackrestRestoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestRestorePtrInput)(nil)).Elem(), PostgresClusterStatusPgbackrestRestoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestRestorePatchInput)(nil)).Elem(), PostgresClusterStatusPgbackrestRestorePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestRestorePatchPtrInput)(nil)).Elem(), PostgresClusterStatusPgbackrestRestorePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestScheduledBackupsInput)(nil)).Elem(), PostgresClusterStatusPgbackrestScheduledBackupsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestScheduledBackupsArrayInput)(nil)).Elem(), PostgresClusterStatusPgbackrestScheduledBackupsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestScheduledBackupsPatchInput)(nil)).Elem(), PostgresClusterStatusPgbackrestScheduledBackupsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayInput)(nil)).Elem(), PostgresClusterStatusPgbackrestScheduledBackupsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusProxyInput)(nil)).Elem(), PostgresClusterStatusProxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusProxyPtrInput)(nil)).Elem(), PostgresClusterStatusProxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusProxyPatchInput)(nil)).Elem(), PostgresClusterStatusProxyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusProxyPatchPtrInput)(nil)).Elem(), PostgresClusterStatusProxyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusProxyPgBouncerInput)(nil)).Elem(), PostgresClusterStatusProxyPgBouncerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusProxyPgBouncerPtrInput)(nil)).Elem(), PostgresClusterStatusProxyPgBouncerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusProxyPgBouncerPatchInput)(nil)).Elem(), PostgresClusterStatusProxyPgBouncerPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusProxyPgBouncerPatchPtrInput)(nil)).Elem(), PostgresClusterStatusProxyPgBouncerPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusUserInterfaceInput)(nil)).Elem(), PostgresClusterStatusUserInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusUserInterfacePtrInput)(nil)).Elem(), PostgresClusterStatusUserInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusUserInterfacePatchInput)(nil)).Elem(), PostgresClusterStatusUserInterfacePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusUserInterfacePatchPtrInput)(nil)).Elem(), PostgresClusterStatusUserInterfacePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusUserInterfacePgAdminInput)(nil)).Elem(), PostgresClusterStatusUserInterfacePgAdminArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusUserInterfacePgAdminPtrInput)(nil)).Elem(), PostgresClusterStatusUserInterfacePgAdminArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusUserInterfacePgAdminPatchInput)(nil)).Elem(), PostgresClusterStatusUserInterfacePgAdminPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterStatusUserInterfacePgAdminPatchPtrInput)(nil)).Elem(), PostgresClusterStatusUserInterfacePgAdminPatchArgs{})
	pulumi.RegisterOutputType(PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecServiceOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecServicePtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecServiceMetadataOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecServiceMetadataPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecServiceMetadataPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecServiceMetadataPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecServicePatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecServicePatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecStandbyOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecStandbyPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecStandbyPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecStandbyPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfaceOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminConfigPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceRefPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminMetadataOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminMetadataPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminMetadataPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminMetadataPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminResourcesOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminResourcesPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminResourcesPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminResourcesPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminServiceOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminServicePtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminServiceMetadataOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminServiceMetadataPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminServiceMetadataPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminServicePatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminServicePatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTolerationsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTolerationsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTolerationsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTolerationsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUsersOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUsersArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUsersPasswordOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUsersPasswordPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUsersPasswordPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUsersPasswordPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUsersPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterSpecUsersPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusConditionsOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusInstancesOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusInstancesArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusInstancesPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusInstancesPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusMonitoringOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusMonitoringPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusMonitoringPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusMonitoringPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPatroniOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPatroniPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPatroniPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPatroniPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestManualBackupOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestManualBackupPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestManualBackupPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestManualBackupPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestRepoHostOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestRepoHostPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestRepoHostPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestRepoHostPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestReposOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestReposArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestReposPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestReposPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestRestoreOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestRestorePtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestRestorePatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestRestorePatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestScheduledBackupsOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestScheduledBackupsArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestScheduledBackupsPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusPgbackrestScheduledBackupsPatchArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusProxyOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusProxyPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusProxyPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusProxyPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusProxyPgBouncerOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusProxyPgBouncerPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusProxyPgBouncerPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusProxyPgBouncerPatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusUserInterfaceOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusUserInterfacePtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusUserInterfacePatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusUserInterfacePatchPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusUserInterfacePgAdminOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusUserInterfacePgAdminPtrOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusUserInterfacePgAdminPatchOutput{})
	pulumi.RegisterOutputType(PostgresClusterStatusUserInterfacePgAdminPatchPtrOutput{})
}
