// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PostgresCluster is the Schema for the postgresclusters API
type PostgresCluster struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput        `pulumi:"metadata"`
	Spec     PostgresClusterSpecOutput      `pulumi:"spec"`
	Status   PostgresClusterStatusPtrOutput `pulumi:"status"`
}

// NewPostgresCluster registers a new resource with the given unique name, arguments, and options.
func NewPostgresCluster(ctx *pulumi.Context,
	name string, args *PostgresClusterArgs, opts ...pulumi.ResourceOption) (*PostgresCluster, error) {
	if args == nil {
		args = &PostgresClusterArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("postgres-operator.crunchydata.com/v1beta1")
	args.Kind = pulumi.StringPtr("PostgresCluster")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PostgresCluster
	err := ctx.RegisterResource("kubernetes:postgres-operator.crunchydata.com/v1beta1:PostgresCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresCluster gets an existing PostgresCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresClusterState, opts ...pulumi.ResourceOption) (*PostgresCluster, error) {
	var resource PostgresCluster
	err := ctx.ReadResource("kubernetes:postgres-operator.crunchydata.com/v1beta1:PostgresCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresCluster resources.
type postgresClusterState struct {
}

type PostgresClusterState struct {
}

func (PostgresClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresClusterState)(nil)).Elem()
}

type postgresClusterArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta   `pulumi:"metadata"`
	Spec     *PostgresClusterSpec `pulumi:"spec"`
}

// The set of arguments for constructing a PostgresCluster resource.
type PostgresClusterArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     PostgresClusterSpecPtrInput
}

func (PostgresClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresClusterArgs)(nil)).Elem()
}

type PostgresClusterInput interface {
	pulumi.Input

	ToPostgresClusterOutput() PostgresClusterOutput
	ToPostgresClusterOutputWithContext(ctx context.Context) PostgresClusterOutput
}

func (*PostgresCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresCluster)(nil)).Elem()
}

func (i *PostgresCluster) ToPostgresClusterOutput() PostgresClusterOutput {
	return i.ToPostgresClusterOutputWithContext(context.Background())
}

func (i *PostgresCluster) ToPostgresClusterOutputWithContext(ctx context.Context) PostgresClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterOutput)
}

// PostgresClusterArrayInput is an input type that accepts PostgresClusterArray and PostgresClusterArrayOutput values.
// You can construct a concrete instance of `PostgresClusterArrayInput` via:
//
//	PostgresClusterArray{ PostgresClusterArgs{...} }
type PostgresClusterArrayInput interface {
	pulumi.Input

	ToPostgresClusterArrayOutput() PostgresClusterArrayOutput
	ToPostgresClusterArrayOutputWithContext(context.Context) PostgresClusterArrayOutput
}

type PostgresClusterArray []PostgresClusterInput

func (PostgresClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresCluster)(nil)).Elem()
}

func (i PostgresClusterArray) ToPostgresClusterArrayOutput() PostgresClusterArrayOutput {
	return i.ToPostgresClusterArrayOutputWithContext(context.Background())
}

func (i PostgresClusterArray) ToPostgresClusterArrayOutputWithContext(ctx context.Context) PostgresClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterArrayOutput)
}

// PostgresClusterMapInput is an input type that accepts PostgresClusterMap and PostgresClusterMapOutput values.
// You can construct a concrete instance of `PostgresClusterMapInput` via:
//
//	PostgresClusterMap{ "key": PostgresClusterArgs{...} }
type PostgresClusterMapInput interface {
	pulumi.Input

	ToPostgresClusterMapOutput() PostgresClusterMapOutput
	ToPostgresClusterMapOutputWithContext(context.Context) PostgresClusterMapOutput
}

type PostgresClusterMap map[string]PostgresClusterInput

func (PostgresClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresCluster)(nil)).Elem()
}

func (i PostgresClusterMap) ToPostgresClusterMapOutput() PostgresClusterMapOutput {
	return i.ToPostgresClusterMapOutputWithContext(context.Background())
}

func (i PostgresClusterMap) ToPostgresClusterMapOutputWithContext(ctx context.Context) PostgresClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresClusterMapOutput)
}

type PostgresClusterOutput struct{ *pulumi.OutputState }

func (PostgresClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresCluster)(nil)).Elem()
}

func (o PostgresClusterOutput) ToPostgresClusterOutput() PostgresClusterOutput {
	return o
}

func (o PostgresClusterOutput) ToPostgresClusterOutputWithContext(ctx context.Context) PostgresClusterOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PostgresClusterOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresCluster) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgresClusterOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresCluster) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PostgresClusterOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *PostgresCluster) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o PostgresClusterOutput) Spec() PostgresClusterSpecOutput {
	return o.ApplyT(func(v *PostgresCluster) PostgresClusterSpecOutput { return v.Spec }).(PostgresClusterSpecOutput)
}

func (o PostgresClusterOutput) Status() PostgresClusterStatusPtrOutput {
	return o.ApplyT(func(v *PostgresCluster) PostgresClusterStatusPtrOutput { return v.Status }).(PostgresClusterStatusPtrOutput)
}

type PostgresClusterArrayOutput struct{ *pulumi.OutputState }

func (PostgresClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresCluster)(nil)).Elem()
}

func (o PostgresClusterArrayOutput) ToPostgresClusterArrayOutput() PostgresClusterArrayOutput {
	return o
}

func (o PostgresClusterArrayOutput) ToPostgresClusterArrayOutputWithContext(ctx context.Context) PostgresClusterArrayOutput {
	return o
}

func (o PostgresClusterArrayOutput) Index(i pulumi.IntInput) PostgresClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostgresCluster {
		return vs[0].([]*PostgresCluster)[vs[1].(int)]
	}).(PostgresClusterOutput)
}

type PostgresClusterMapOutput struct{ *pulumi.OutputState }

func (PostgresClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresCluster)(nil)).Elem()
}

func (o PostgresClusterMapOutput) ToPostgresClusterMapOutput() PostgresClusterMapOutput {
	return o
}

func (o PostgresClusterMapOutput) ToPostgresClusterMapOutputWithContext(ctx context.Context) PostgresClusterMapOutput {
	return o
}

func (o PostgresClusterMapOutput) MapIndex(k pulumi.StringInput) PostgresClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostgresCluster {
		return vs[0].(map[string]*PostgresCluster)[vs[1].(string)]
	}).(PostgresClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterInput)(nil)).Elem(), &PostgresCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterArrayInput)(nil)).Elem(), PostgresClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresClusterMapInput)(nil)).Elem(), PostgresClusterMap{})
	pulumi.RegisterOutputType(PostgresClusterOutput{})
	pulumi.RegisterOutputType(PostgresClusterArrayOutput{})
	pulumi.RegisterOutputType(PostgresClusterMapOutput{})
}
