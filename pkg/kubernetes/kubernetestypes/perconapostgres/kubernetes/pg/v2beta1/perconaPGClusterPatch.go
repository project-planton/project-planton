// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// PerconaPGCluster is the CRD that defines a Percona PG Cluster
type PerconaPGClusterPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput      `pulumi:"metadata"`
	Spec     PerconaPGClusterSpecPatchPtrOutput   `pulumi:"spec"`
	Status   PerconaPGClusterStatusPatchPtrOutput `pulumi:"status"`
}

// NewPerconaPGClusterPatch registers a new resource with the given unique name, arguments, and options.
func NewPerconaPGClusterPatch(ctx *pulumi.Context,
	name string, args *PerconaPGClusterPatchArgs, opts ...pulumi.ResourceOption) (*PerconaPGClusterPatch, error) {
	if args == nil {
		args = &PerconaPGClusterPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("pg.percona.com/v2beta1")
	args.Kind = pulumi.StringPtr("PerconaPGCluster")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PerconaPGClusterPatch
	err := ctx.RegisterResource("kubernetes:pg.percona.com/v2beta1:PerconaPGClusterPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPerconaPGClusterPatch gets an existing PerconaPGClusterPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPerconaPGClusterPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PerconaPGClusterPatchState, opts ...pulumi.ResourceOption) (*PerconaPGClusterPatch, error) {
	var resource PerconaPGClusterPatch
	err := ctx.ReadResource("kubernetes:pg.percona.com/v2beta1:PerconaPGClusterPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PerconaPGClusterPatch resources.
type perconaPGClusterPatchState struct {
}

type PerconaPGClusterPatchState struct {
}

func (PerconaPGClusterPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaPGClusterPatchState)(nil)).Elem()
}

type perconaPGClusterPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch    `pulumi:"metadata"`
	Spec     *PerconaPGClusterSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a PerconaPGClusterPatch resource.
type PerconaPGClusterPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     PerconaPGClusterSpecPatchPtrInput
}

func (PerconaPGClusterPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaPGClusterPatchArgs)(nil)).Elem()
}

type PerconaPGClusterPatchInput interface {
	pulumi.Input

	ToPerconaPGClusterPatchOutput() PerconaPGClusterPatchOutput
	ToPerconaPGClusterPatchOutputWithContext(ctx context.Context) PerconaPGClusterPatchOutput
}

func (*PerconaPGClusterPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaPGClusterPatch)(nil)).Elem()
}

func (i *PerconaPGClusterPatch) ToPerconaPGClusterPatchOutput() PerconaPGClusterPatchOutput {
	return i.ToPerconaPGClusterPatchOutputWithContext(context.Background())
}

func (i *PerconaPGClusterPatch) ToPerconaPGClusterPatchOutputWithContext(ctx context.Context) PerconaPGClusterPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaPGClusterPatchOutput)
}

// PerconaPGClusterPatchArrayInput is an input type that accepts PerconaPGClusterPatchArray and PerconaPGClusterPatchArrayOutput values.
// You can construct a concrete instance of `PerconaPGClusterPatchArrayInput` via:
//
//	PerconaPGClusterPatchArray{ PerconaPGClusterPatchArgs{...} }
type PerconaPGClusterPatchArrayInput interface {
	pulumi.Input

	ToPerconaPGClusterPatchArrayOutput() PerconaPGClusterPatchArrayOutput
	ToPerconaPGClusterPatchArrayOutputWithContext(context.Context) PerconaPGClusterPatchArrayOutput
}

type PerconaPGClusterPatchArray []PerconaPGClusterPatchInput

func (PerconaPGClusterPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaPGClusterPatch)(nil)).Elem()
}

func (i PerconaPGClusterPatchArray) ToPerconaPGClusterPatchArrayOutput() PerconaPGClusterPatchArrayOutput {
	return i.ToPerconaPGClusterPatchArrayOutputWithContext(context.Background())
}

func (i PerconaPGClusterPatchArray) ToPerconaPGClusterPatchArrayOutputWithContext(ctx context.Context) PerconaPGClusterPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaPGClusterPatchArrayOutput)
}

// PerconaPGClusterPatchMapInput is an input type that accepts PerconaPGClusterPatchMap and PerconaPGClusterPatchMapOutput values.
// You can construct a concrete instance of `PerconaPGClusterPatchMapInput` via:
//
//	PerconaPGClusterPatchMap{ "key": PerconaPGClusterPatchArgs{...} }
type PerconaPGClusterPatchMapInput interface {
	pulumi.Input

	ToPerconaPGClusterPatchMapOutput() PerconaPGClusterPatchMapOutput
	ToPerconaPGClusterPatchMapOutputWithContext(context.Context) PerconaPGClusterPatchMapOutput
}

type PerconaPGClusterPatchMap map[string]PerconaPGClusterPatchInput

func (PerconaPGClusterPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaPGClusterPatch)(nil)).Elem()
}

func (i PerconaPGClusterPatchMap) ToPerconaPGClusterPatchMapOutput() PerconaPGClusterPatchMapOutput {
	return i.ToPerconaPGClusterPatchMapOutputWithContext(context.Background())
}

func (i PerconaPGClusterPatchMap) ToPerconaPGClusterPatchMapOutputWithContext(ctx context.Context) PerconaPGClusterPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaPGClusterPatchMapOutput)
}

type PerconaPGClusterPatchOutput struct{ *pulumi.OutputState }

func (PerconaPGClusterPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaPGClusterPatch)(nil)).Elem()
}

func (o PerconaPGClusterPatchOutput) ToPerconaPGClusterPatchOutput() PerconaPGClusterPatchOutput {
	return o
}

func (o PerconaPGClusterPatchOutput) ToPerconaPGClusterPatchOutputWithContext(ctx context.Context) PerconaPGClusterPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaPGClusterPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PerconaPGClusterPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaPGClusterPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PerconaPGClusterPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PerconaPGClusterPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PerconaPGClusterPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PerconaPGClusterPatchOutput) Spec() PerconaPGClusterSpecPatchPtrOutput {
	return o.ApplyT(func(v *PerconaPGClusterPatch) PerconaPGClusterSpecPatchPtrOutput { return v.Spec }).(PerconaPGClusterSpecPatchPtrOutput)
}

func (o PerconaPGClusterPatchOutput) Status() PerconaPGClusterStatusPatchPtrOutput {
	return o.ApplyT(func(v *PerconaPGClusterPatch) PerconaPGClusterStatusPatchPtrOutput { return v.Status }).(PerconaPGClusterStatusPatchPtrOutput)
}

type PerconaPGClusterPatchArrayOutput struct{ *pulumi.OutputState }

func (PerconaPGClusterPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaPGClusterPatch)(nil)).Elem()
}

func (o PerconaPGClusterPatchArrayOutput) ToPerconaPGClusterPatchArrayOutput() PerconaPGClusterPatchArrayOutput {
	return o
}

func (o PerconaPGClusterPatchArrayOutput) ToPerconaPGClusterPatchArrayOutputWithContext(ctx context.Context) PerconaPGClusterPatchArrayOutput {
	return o
}

func (o PerconaPGClusterPatchArrayOutput) Index(i pulumi.IntInput) PerconaPGClusterPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PerconaPGClusterPatch {
		return vs[0].([]*PerconaPGClusterPatch)[vs[1].(int)]
	}).(PerconaPGClusterPatchOutput)
}

type PerconaPGClusterPatchMapOutput struct{ *pulumi.OutputState }

func (PerconaPGClusterPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaPGClusterPatch)(nil)).Elem()
}

func (o PerconaPGClusterPatchMapOutput) ToPerconaPGClusterPatchMapOutput() PerconaPGClusterPatchMapOutput {
	return o
}

func (o PerconaPGClusterPatchMapOutput) ToPerconaPGClusterPatchMapOutputWithContext(ctx context.Context) PerconaPGClusterPatchMapOutput {
	return o
}

func (o PerconaPGClusterPatchMapOutput) MapIndex(k pulumi.StringInput) PerconaPGClusterPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PerconaPGClusterPatch {
		return vs[0].(map[string]*PerconaPGClusterPatch)[vs[1].(string)]
	}).(PerconaPGClusterPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaPGClusterPatchInput)(nil)).Elem(), &PerconaPGClusterPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaPGClusterPatchArrayInput)(nil)).Elem(), PerconaPGClusterPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaPGClusterPatchMapInput)(nil)).Elem(), PerconaPGClusterPatchMap{})
	pulumi.RegisterOutputType(PerconaPGClusterPatchOutput{})
	pulumi.RegisterOutputType(PerconaPGClusterPatchArrayOutput{})
	pulumi.RegisterOutputType(PerconaPGClusterPatchMapOutput{})
}
