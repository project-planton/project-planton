// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PerconaPGCluster is the CRD that defines a Percona PG Cluster
type PerconaPGCluster struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput         `pulumi:"metadata"`
	Spec     PerconaPGClusterSpecOutput      `pulumi:"spec"`
	Status   PerconaPGClusterStatusPtrOutput `pulumi:"status"`
}

// NewPerconaPGCluster registers a new resource with the given unique name, arguments, and options.
func NewPerconaPGCluster(ctx *pulumi.Context,
	name string, args *PerconaPGClusterArgs, opts ...pulumi.ResourceOption) (*PerconaPGCluster, error) {
	if args == nil {
		args = &PerconaPGClusterArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("pg.percona.com/v2beta1")
	args.Kind = pulumi.StringPtr("PerconaPGCluster")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PerconaPGCluster
	err := ctx.RegisterResource("kubernetes:pg.percona.com/v2beta1:PerconaPGCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPerconaPGCluster gets an existing PerconaPGCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPerconaPGCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PerconaPGClusterState, opts ...pulumi.ResourceOption) (*PerconaPGCluster, error) {
	var resource PerconaPGCluster
	err := ctx.ReadResource("kubernetes:pg.percona.com/v2beta1:PerconaPGCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PerconaPGCluster resources.
type perconaPGClusterState struct {
}

type PerconaPGClusterState struct {
}

func (PerconaPGClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaPGClusterState)(nil)).Elem()
}

type perconaPGClusterArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta    `pulumi:"metadata"`
	Spec     *PerconaPGClusterSpec `pulumi:"spec"`
}

// The set of arguments for constructing a PerconaPGCluster resource.
type PerconaPGClusterArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     PerconaPGClusterSpecPtrInput
}

func (PerconaPGClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaPGClusterArgs)(nil)).Elem()
}

type PerconaPGClusterInput interface {
	pulumi.Input

	ToPerconaPGClusterOutput() PerconaPGClusterOutput
	ToPerconaPGClusterOutputWithContext(ctx context.Context) PerconaPGClusterOutput
}

func (*PerconaPGCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaPGCluster)(nil)).Elem()
}

func (i *PerconaPGCluster) ToPerconaPGClusterOutput() PerconaPGClusterOutput {
	return i.ToPerconaPGClusterOutputWithContext(context.Background())
}

func (i *PerconaPGCluster) ToPerconaPGClusterOutputWithContext(ctx context.Context) PerconaPGClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaPGClusterOutput)
}

// PerconaPGClusterArrayInput is an input type that accepts PerconaPGClusterArray and PerconaPGClusterArrayOutput values.
// You can construct a concrete instance of `PerconaPGClusterArrayInput` via:
//
//	PerconaPGClusterArray{ PerconaPGClusterArgs{...} }
type PerconaPGClusterArrayInput interface {
	pulumi.Input

	ToPerconaPGClusterArrayOutput() PerconaPGClusterArrayOutput
	ToPerconaPGClusterArrayOutputWithContext(context.Context) PerconaPGClusterArrayOutput
}

type PerconaPGClusterArray []PerconaPGClusterInput

func (PerconaPGClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaPGCluster)(nil)).Elem()
}

func (i PerconaPGClusterArray) ToPerconaPGClusterArrayOutput() PerconaPGClusterArrayOutput {
	return i.ToPerconaPGClusterArrayOutputWithContext(context.Background())
}

func (i PerconaPGClusterArray) ToPerconaPGClusterArrayOutputWithContext(ctx context.Context) PerconaPGClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaPGClusterArrayOutput)
}

// PerconaPGClusterMapInput is an input type that accepts PerconaPGClusterMap and PerconaPGClusterMapOutput values.
// You can construct a concrete instance of `PerconaPGClusterMapInput` via:
//
//	PerconaPGClusterMap{ "key": PerconaPGClusterArgs{...} }
type PerconaPGClusterMapInput interface {
	pulumi.Input

	ToPerconaPGClusterMapOutput() PerconaPGClusterMapOutput
	ToPerconaPGClusterMapOutputWithContext(context.Context) PerconaPGClusterMapOutput
}

type PerconaPGClusterMap map[string]PerconaPGClusterInput

func (PerconaPGClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaPGCluster)(nil)).Elem()
}

func (i PerconaPGClusterMap) ToPerconaPGClusterMapOutput() PerconaPGClusterMapOutput {
	return i.ToPerconaPGClusterMapOutputWithContext(context.Background())
}

func (i PerconaPGClusterMap) ToPerconaPGClusterMapOutputWithContext(ctx context.Context) PerconaPGClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaPGClusterMapOutput)
}

type PerconaPGClusterOutput struct{ *pulumi.OutputState }

func (PerconaPGClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaPGCluster)(nil)).Elem()
}

func (o PerconaPGClusterOutput) ToPerconaPGClusterOutput() PerconaPGClusterOutput {
	return o
}

func (o PerconaPGClusterOutput) ToPerconaPGClusterOutputWithContext(ctx context.Context) PerconaPGClusterOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaPGClusterOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaPGCluster) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaPGClusterOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaPGCluster) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PerconaPGClusterOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *PerconaPGCluster) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o PerconaPGClusterOutput) Spec() PerconaPGClusterSpecOutput {
	return o.ApplyT(func(v *PerconaPGCluster) PerconaPGClusterSpecOutput { return v.Spec }).(PerconaPGClusterSpecOutput)
}

func (o PerconaPGClusterOutput) Status() PerconaPGClusterStatusPtrOutput {
	return o.ApplyT(func(v *PerconaPGCluster) PerconaPGClusterStatusPtrOutput { return v.Status }).(PerconaPGClusterStatusPtrOutput)
}

type PerconaPGClusterArrayOutput struct{ *pulumi.OutputState }

func (PerconaPGClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaPGCluster)(nil)).Elem()
}

func (o PerconaPGClusterArrayOutput) ToPerconaPGClusterArrayOutput() PerconaPGClusterArrayOutput {
	return o
}

func (o PerconaPGClusterArrayOutput) ToPerconaPGClusterArrayOutputWithContext(ctx context.Context) PerconaPGClusterArrayOutput {
	return o
}

func (o PerconaPGClusterArrayOutput) Index(i pulumi.IntInput) PerconaPGClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PerconaPGCluster {
		return vs[0].([]*PerconaPGCluster)[vs[1].(int)]
	}).(PerconaPGClusterOutput)
}

type PerconaPGClusterMapOutput struct{ *pulumi.OutputState }

func (PerconaPGClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaPGCluster)(nil)).Elem()
}

func (o PerconaPGClusterMapOutput) ToPerconaPGClusterMapOutput() PerconaPGClusterMapOutput {
	return o
}

func (o PerconaPGClusterMapOutput) ToPerconaPGClusterMapOutputWithContext(ctx context.Context) PerconaPGClusterMapOutput {
	return o
}

func (o PerconaPGClusterMapOutput) MapIndex(k pulumi.StringInput) PerconaPGClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PerconaPGCluster {
		return vs[0].(map[string]*PerconaPGCluster)[vs[1].(string)]
	}).(PerconaPGClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaPGClusterInput)(nil)).Elem(), &PerconaPGCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaPGClusterArrayInput)(nil)).Elem(), PerconaPGClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaPGClusterMapInput)(nil)).Elem(), PerconaPGClusterMap{})
	pulumi.RegisterOutputType(PerconaPGClusterOutput{})
	pulumi.RegisterOutputType(PerconaPGClusterArrayOutput{})
	pulumi.RegisterOutputType(PerconaPGClusterMapOutput{})
}
