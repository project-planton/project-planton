// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1_9_0

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PerconaServerMongoDBList is a list of PerconaServerMongoDB
type PerconaServerMongoDBList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of perconaservermongodbs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PerconaServerMongoDBTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewPerconaServerMongoDBList registers a new resource with the given unique name, arguments, and options.
func NewPerconaServerMongoDBList(ctx *pulumi.Context,
	name string, args *PerconaServerMongoDBListArgs, opts ...pulumi.ResourceOption) (*PerconaServerMongoDBList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("psmdb.percona.com/v1-9-0")
	args.Kind = pulumi.StringPtr("PerconaServerMongoDBList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PerconaServerMongoDBList
	err := ctx.RegisterResource("kubernetes:psmdb.percona.com/v1-9-0:PerconaServerMongoDBList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPerconaServerMongoDBList gets an existing PerconaServerMongoDBList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPerconaServerMongoDBList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PerconaServerMongoDBListState, opts ...pulumi.ResourceOption) (*PerconaServerMongoDBList, error) {
	var resource PerconaServerMongoDBList
	err := ctx.ReadResource("kubernetes:psmdb.percona.com/v1-9-0:PerconaServerMongoDBList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PerconaServerMongoDBList resources.
type perconaServerMongoDBListState struct {
}

type PerconaServerMongoDBListState struct {
}

func (PerconaServerMongoDBListState) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMongoDBListState)(nil)).Elem()
}

type perconaServerMongoDBListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of perconaservermongodbs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []PerconaServerMongoDBType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a PerconaServerMongoDBList resource.
type PerconaServerMongoDBListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of perconaservermongodbs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PerconaServerMongoDBTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (PerconaServerMongoDBListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMongoDBListArgs)(nil)).Elem()
}

type PerconaServerMongoDBListInput interface {
	pulumi.Input

	ToPerconaServerMongoDBListOutput() PerconaServerMongoDBListOutput
	ToPerconaServerMongoDBListOutputWithContext(ctx context.Context) PerconaServerMongoDBListOutput
}

func (*PerconaServerMongoDBList) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMongoDBList)(nil)).Elem()
}

func (i *PerconaServerMongoDBList) ToPerconaServerMongoDBListOutput() PerconaServerMongoDBListOutput {
	return i.ToPerconaServerMongoDBListOutputWithContext(context.Background())
}

func (i *PerconaServerMongoDBList) ToPerconaServerMongoDBListOutputWithContext(ctx context.Context) PerconaServerMongoDBListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBListOutput)
}

// PerconaServerMongoDBListArrayInput is an input type that accepts PerconaServerMongoDBListArray and PerconaServerMongoDBListArrayOutput values.
// You can construct a concrete instance of `PerconaServerMongoDBListArrayInput` via:
//
//	PerconaServerMongoDBListArray{ PerconaServerMongoDBListArgs{...} }
type PerconaServerMongoDBListArrayInput interface {
	pulumi.Input

	ToPerconaServerMongoDBListArrayOutput() PerconaServerMongoDBListArrayOutput
	ToPerconaServerMongoDBListArrayOutputWithContext(context.Context) PerconaServerMongoDBListArrayOutput
}

type PerconaServerMongoDBListArray []PerconaServerMongoDBListInput

func (PerconaServerMongoDBListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMongoDBList)(nil)).Elem()
}

func (i PerconaServerMongoDBListArray) ToPerconaServerMongoDBListArrayOutput() PerconaServerMongoDBListArrayOutput {
	return i.ToPerconaServerMongoDBListArrayOutputWithContext(context.Background())
}

func (i PerconaServerMongoDBListArray) ToPerconaServerMongoDBListArrayOutputWithContext(ctx context.Context) PerconaServerMongoDBListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBListArrayOutput)
}

// PerconaServerMongoDBListMapInput is an input type that accepts PerconaServerMongoDBListMap and PerconaServerMongoDBListMapOutput values.
// You can construct a concrete instance of `PerconaServerMongoDBListMapInput` via:
//
//	PerconaServerMongoDBListMap{ "key": PerconaServerMongoDBListArgs{...} }
type PerconaServerMongoDBListMapInput interface {
	pulumi.Input

	ToPerconaServerMongoDBListMapOutput() PerconaServerMongoDBListMapOutput
	ToPerconaServerMongoDBListMapOutputWithContext(context.Context) PerconaServerMongoDBListMapOutput
}

type PerconaServerMongoDBListMap map[string]PerconaServerMongoDBListInput

func (PerconaServerMongoDBListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMongoDBList)(nil)).Elem()
}

func (i PerconaServerMongoDBListMap) ToPerconaServerMongoDBListMapOutput() PerconaServerMongoDBListMapOutput {
	return i.ToPerconaServerMongoDBListMapOutputWithContext(context.Background())
}

func (i PerconaServerMongoDBListMap) ToPerconaServerMongoDBListMapOutputWithContext(ctx context.Context) PerconaServerMongoDBListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBListMapOutput)
}

type PerconaServerMongoDBListOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMongoDBList)(nil)).Elem()
}

func (o PerconaServerMongoDBListOutput) ToPerconaServerMongoDBListOutput() PerconaServerMongoDBListOutput {
	return o
}

func (o PerconaServerMongoDBListOutput) ToPerconaServerMongoDBListOutputWithContext(ctx context.Context) PerconaServerMongoDBListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaServerMongoDBListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of perconaservermongodbs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o PerconaServerMongoDBListOutput) Items() PerconaServerMongoDBTypeArrayOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBList) PerconaServerMongoDBTypeArrayOutput { return v.Items }).(PerconaServerMongoDBTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMongoDBListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMongoDBListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type PerconaServerMongoDBListArrayOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMongoDBList)(nil)).Elem()
}

func (o PerconaServerMongoDBListArrayOutput) ToPerconaServerMongoDBListArrayOutput() PerconaServerMongoDBListArrayOutput {
	return o
}

func (o PerconaServerMongoDBListArrayOutput) ToPerconaServerMongoDBListArrayOutputWithContext(ctx context.Context) PerconaServerMongoDBListArrayOutput {
	return o
}

func (o PerconaServerMongoDBListArrayOutput) Index(i pulumi.IntInput) PerconaServerMongoDBListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PerconaServerMongoDBList {
		return vs[0].([]*PerconaServerMongoDBList)[vs[1].(int)]
	}).(PerconaServerMongoDBListOutput)
}

type PerconaServerMongoDBListMapOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMongoDBList)(nil)).Elem()
}

func (o PerconaServerMongoDBListMapOutput) ToPerconaServerMongoDBListMapOutput() PerconaServerMongoDBListMapOutput {
	return o
}

func (o PerconaServerMongoDBListMapOutput) ToPerconaServerMongoDBListMapOutputWithContext(ctx context.Context) PerconaServerMongoDBListMapOutput {
	return o
}

func (o PerconaServerMongoDBListMapOutput) MapIndex(k pulumi.StringInput) PerconaServerMongoDBListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PerconaServerMongoDBList {
		return vs[0].(map[string]*PerconaServerMongoDBList)[vs[1].(string)]
	}).(PerconaServerMongoDBListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBListInput)(nil)).Elem(), &PerconaServerMongoDBList{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBListArrayInput)(nil)).Elem(), PerconaServerMongoDBListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBListMapInput)(nil)).Elem(), PerconaServerMongoDBListMap{})
	pulumi.RegisterOutputType(PerconaServerMongoDBListOutput{})
	pulumi.RegisterOutputType(PerconaServerMongoDBListArrayOutput{})
	pulumi.RegisterOutputType(PerconaServerMongoDBListMapOutput{})
}
