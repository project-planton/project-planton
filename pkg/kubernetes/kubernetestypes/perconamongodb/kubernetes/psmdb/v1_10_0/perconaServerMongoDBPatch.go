// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1_10_0

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type PerconaServerMongoDBPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     pulumi.MapOutput                `pulumi:"spec"`
	Status   pulumi.MapOutput                `pulumi:"status"`
}

// NewPerconaServerMongoDBPatch registers a new resource with the given unique name, arguments, and options.
func NewPerconaServerMongoDBPatch(ctx *pulumi.Context,
	name string, args *PerconaServerMongoDBPatchArgs, opts ...pulumi.ResourceOption) (*PerconaServerMongoDBPatch, error) {
	if args == nil {
		args = &PerconaServerMongoDBPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("psmdb.percona.com/v1-10-0")
	args.Kind = pulumi.StringPtr("PerconaServerMongoDB")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1:PerconaServerMongoDBPatch"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-11-0:PerconaServerMongoDBPatch"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-12-0:PerconaServerMongoDBPatch"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-2-0:PerconaServerMongoDBPatch"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-3-0:PerconaServerMongoDBPatch"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-4-0:PerconaServerMongoDBPatch"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-5-0:PerconaServerMongoDBPatch"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-6-0:PerconaServerMongoDBPatch"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-7-0:PerconaServerMongoDBPatch"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-8-0:PerconaServerMongoDBPatch"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-9-0:PerconaServerMongoDBPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PerconaServerMongoDBPatch
	err := ctx.RegisterResource("kubernetes:psmdb.percona.com/v1-10-0:PerconaServerMongoDBPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPerconaServerMongoDBPatch gets an existing PerconaServerMongoDBPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPerconaServerMongoDBPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PerconaServerMongoDBPatchState, opts ...pulumi.ResourceOption) (*PerconaServerMongoDBPatch, error) {
	var resource PerconaServerMongoDBPatch
	err := ctx.ReadResource("kubernetes:psmdb.percona.com/v1-10-0:PerconaServerMongoDBPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PerconaServerMongoDBPatch resources.
type perconaServerMongoDBPatchState struct {
}

type PerconaServerMongoDBPatchState struct {
}

func (PerconaServerMongoDBPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMongoDBPatchState)(nil)).Elem()
}

type perconaServerMongoDBPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     map[string]interface{}  `pulumi:"spec"`
}

// The set of arguments for constructing a PerconaServerMongoDBPatch resource.
type PerconaServerMongoDBPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     pulumi.MapInput
}

func (PerconaServerMongoDBPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMongoDBPatchArgs)(nil)).Elem()
}

type PerconaServerMongoDBPatchInput interface {
	pulumi.Input

	ToPerconaServerMongoDBPatchOutput() PerconaServerMongoDBPatchOutput
	ToPerconaServerMongoDBPatchOutputWithContext(ctx context.Context) PerconaServerMongoDBPatchOutput
}

func (*PerconaServerMongoDBPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMongoDBPatch)(nil)).Elem()
}

func (i *PerconaServerMongoDBPatch) ToPerconaServerMongoDBPatchOutput() PerconaServerMongoDBPatchOutput {
	return i.ToPerconaServerMongoDBPatchOutputWithContext(context.Background())
}

func (i *PerconaServerMongoDBPatch) ToPerconaServerMongoDBPatchOutputWithContext(ctx context.Context) PerconaServerMongoDBPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBPatchOutput)
}

// PerconaServerMongoDBPatchArrayInput is an input type that accepts PerconaServerMongoDBPatchArray and PerconaServerMongoDBPatchArrayOutput values.
// You can construct a concrete instance of `PerconaServerMongoDBPatchArrayInput` via:
//
//	PerconaServerMongoDBPatchArray{ PerconaServerMongoDBPatchArgs{...} }
type PerconaServerMongoDBPatchArrayInput interface {
	pulumi.Input

	ToPerconaServerMongoDBPatchArrayOutput() PerconaServerMongoDBPatchArrayOutput
	ToPerconaServerMongoDBPatchArrayOutputWithContext(context.Context) PerconaServerMongoDBPatchArrayOutput
}

type PerconaServerMongoDBPatchArray []PerconaServerMongoDBPatchInput

func (PerconaServerMongoDBPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMongoDBPatch)(nil)).Elem()
}

func (i PerconaServerMongoDBPatchArray) ToPerconaServerMongoDBPatchArrayOutput() PerconaServerMongoDBPatchArrayOutput {
	return i.ToPerconaServerMongoDBPatchArrayOutputWithContext(context.Background())
}

func (i PerconaServerMongoDBPatchArray) ToPerconaServerMongoDBPatchArrayOutputWithContext(ctx context.Context) PerconaServerMongoDBPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBPatchArrayOutput)
}

// PerconaServerMongoDBPatchMapInput is an input type that accepts PerconaServerMongoDBPatchMap and PerconaServerMongoDBPatchMapOutput values.
// You can construct a concrete instance of `PerconaServerMongoDBPatchMapInput` via:
//
//	PerconaServerMongoDBPatchMap{ "key": PerconaServerMongoDBPatchArgs{...} }
type PerconaServerMongoDBPatchMapInput interface {
	pulumi.Input

	ToPerconaServerMongoDBPatchMapOutput() PerconaServerMongoDBPatchMapOutput
	ToPerconaServerMongoDBPatchMapOutputWithContext(context.Context) PerconaServerMongoDBPatchMapOutput
}

type PerconaServerMongoDBPatchMap map[string]PerconaServerMongoDBPatchInput

func (PerconaServerMongoDBPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMongoDBPatch)(nil)).Elem()
}

func (i PerconaServerMongoDBPatchMap) ToPerconaServerMongoDBPatchMapOutput() PerconaServerMongoDBPatchMapOutput {
	return i.ToPerconaServerMongoDBPatchMapOutputWithContext(context.Background())
}

func (i PerconaServerMongoDBPatchMap) ToPerconaServerMongoDBPatchMapOutputWithContext(ctx context.Context) PerconaServerMongoDBPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBPatchMapOutput)
}

type PerconaServerMongoDBPatchOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMongoDBPatch)(nil)).Elem()
}

func (o PerconaServerMongoDBPatchOutput) ToPerconaServerMongoDBPatchOutput() PerconaServerMongoDBPatchOutput {
	return o
}

func (o PerconaServerMongoDBPatchOutput) ToPerconaServerMongoDBPatchOutputWithContext(ctx context.Context) PerconaServerMongoDBPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaServerMongoDBPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMongoDBPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PerconaServerMongoDBPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PerconaServerMongoDBPatchOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBPatch) pulumi.MapOutput { return v.Spec }).(pulumi.MapOutput)
}

func (o PerconaServerMongoDBPatchOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBPatch) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type PerconaServerMongoDBPatchArrayOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMongoDBPatch)(nil)).Elem()
}

func (o PerconaServerMongoDBPatchArrayOutput) ToPerconaServerMongoDBPatchArrayOutput() PerconaServerMongoDBPatchArrayOutput {
	return o
}

func (o PerconaServerMongoDBPatchArrayOutput) ToPerconaServerMongoDBPatchArrayOutputWithContext(ctx context.Context) PerconaServerMongoDBPatchArrayOutput {
	return o
}

func (o PerconaServerMongoDBPatchArrayOutput) Index(i pulumi.IntInput) PerconaServerMongoDBPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PerconaServerMongoDBPatch {
		return vs[0].([]*PerconaServerMongoDBPatch)[vs[1].(int)]
	}).(PerconaServerMongoDBPatchOutput)
}

type PerconaServerMongoDBPatchMapOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMongoDBPatch)(nil)).Elem()
}

func (o PerconaServerMongoDBPatchMapOutput) ToPerconaServerMongoDBPatchMapOutput() PerconaServerMongoDBPatchMapOutput {
	return o
}

func (o PerconaServerMongoDBPatchMapOutput) ToPerconaServerMongoDBPatchMapOutputWithContext(ctx context.Context) PerconaServerMongoDBPatchMapOutput {
	return o
}

func (o PerconaServerMongoDBPatchMapOutput) MapIndex(k pulumi.StringInput) PerconaServerMongoDBPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PerconaServerMongoDBPatch {
		return vs[0].(map[string]*PerconaServerMongoDBPatch)[vs[1].(string)]
	}).(PerconaServerMongoDBPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBPatchInput)(nil)).Elem(), &PerconaServerMongoDBPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBPatchArrayInput)(nil)).Elem(), PerconaServerMongoDBPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBPatchMapInput)(nil)).Elem(), PerconaServerMongoDBPatchMap{})
	pulumi.RegisterOutputType(PerconaServerMongoDBPatchOutput{})
	pulumi.RegisterOutputType(PerconaServerMongoDBPatchArrayOutput{})
	pulumi.RegisterOutputType(PerconaServerMongoDBPatchMapOutput{})
}
