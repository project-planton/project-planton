// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type PerconaServerMongoDBBackupPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput                `pulumi:"metadata"`
	Spec     PerconaServerMongoDBBackupSpecPatchPtrOutput   `pulumi:"spec"`
	Status   PerconaServerMongoDBBackupStatusPatchPtrOutput `pulumi:"status"`
}

// NewPerconaServerMongoDBBackupPatch registers a new resource with the given unique name, arguments, and options.
func NewPerconaServerMongoDBBackupPatch(ctx *pulumi.Context,
	name string, args *PerconaServerMongoDBBackupPatchArgs, opts ...pulumi.ResourceOption) (*PerconaServerMongoDBBackupPatch, error) {
	if args == nil {
		args = &PerconaServerMongoDBBackupPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("psmdb.percona.com/v1")
	args.Kind = pulumi.StringPtr("PerconaServerMongoDBBackup")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PerconaServerMongoDBBackupPatch
	err := ctx.RegisterResource("kubernetes:psmdb.percona.com/v1:PerconaServerMongoDBBackupPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPerconaServerMongoDBBackupPatch gets an existing PerconaServerMongoDBBackupPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPerconaServerMongoDBBackupPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PerconaServerMongoDBBackupPatchState, opts ...pulumi.ResourceOption) (*PerconaServerMongoDBBackupPatch, error) {
	var resource PerconaServerMongoDBBackupPatch
	err := ctx.ReadResource("kubernetes:psmdb.percona.com/v1:PerconaServerMongoDBBackupPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PerconaServerMongoDBBackupPatch resources.
type perconaServerMongoDBBackupPatchState struct {
}

type PerconaServerMongoDBBackupPatchState struct {
}

func (PerconaServerMongoDBBackupPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMongoDBBackupPatchState)(nil)).Elem()
}

type perconaServerMongoDBBackupPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch              `pulumi:"metadata"`
	Spec     *PerconaServerMongoDBBackupSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a PerconaServerMongoDBBackupPatch resource.
type PerconaServerMongoDBBackupPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     PerconaServerMongoDBBackupSpecPatchPtrInput
}

func (PerconaServerMongoDBBackupPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMongoDBBackupPatchArgs)(nil)).Elem()
}

type PerconaServerMongoDBBackupPatchInput interface {
	pulumi.Input

	ToPerconaServerMongoDBBackupPatchOutput() PerconaServerMongoDBBackupPatchOutput
	ToPerconaServerMongoDBBackupPatchOutputWithContext(ctx context.Context) PerconaServerMongoDBBackupPatchOutput
}

func (*PerconaServerMongoDBBackupPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMongoDBBackupPatch)(nil)).Elem()
}

func (i *PerconaServerMongoDBBackupPatch) ToPerconaServerMongoDBBackupPatchOutput() PerconaServerMongoDBBackupPatchOutput {
	return i.ToPerconaServerMongoDBBackupPatchOutputWithContext(context.Background())
}

func (i *PerconaServerMongoDBBackupPatch) ToPerconaServerMongoDBBackupPatchOutputWithContext(ctx context.Context) PerconaServerMongoDBBackupPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBBackupPatchOutput)
}

// PerconaServerMongoDBBackupPatchArrayInput is an input type that accepts PerconaServerMongoDBBackupPatchArray and PerconaServerMongoDBBackupPatchArrayOutput values.
// You can construct a concrete instance of `PerconaServerMongoDBBackupPatchArrayInput` via:
//
//	PerconaServerMongoDBBackupPatchArray{ PerconaServerMongoDBBackupPatchArgs{...} }
type PerconaServerMongoDBBackupPatchArrayInput interface {
	pulumi.Input

	ToPerconaServerMongoDBBackupPatchArrayOutput() PerconaServerMongoDBBackupPatchArrayOutput
	ToPerconaServerMongoDBBackupPatchArrayOutputWithContext(context.Context) PerconaServerMongoDBBackupPatchArrayOutput
}

type PerconaServerMongoDBBackupPatchArray []PerconaServerMongoDBBackupPatchInput

func (PerconaServerMongoDBBackupPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMongoDBBackupPatch)(nil)).Elem()
}

func (i PerconaServerMongoDBBackupPatchArray) ToPerconaServerMongoDBBackupPatchArrayOutput() PerconaServerMongoDBBackupPatchArrayOutput {
	return i.ToPerconaServerMongoDBBackupPatchArrayOutputWithContext(context.Background())
}

func (i PerconaServerMongoDBBackupPatchArray) ToPerconaServerMongoDBBackupPatchArrayOutputWithContext(ctx context.Context) PerconaServerMongoDBBackupPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBBackupPatchArrayOutput)
}

// PerconaServerMongoDBBackupPatchMapInput is an input type that accepts PerconaServerMongoDBBackupPatchMap and PerconaServerMongoDBBackupPatchMapOutput values.
// You can construct a concrete instance of `PerconaServerMongoDBBackupPatchMapInput` via:
//
//	PerconaServerMongoDBBackupPatchMap{ "key": PerconaServerMongoDBBackupPatchArgs{...} }
type PerconaServerMongoDBBackupPatchMapInput interface {
	pulumi.Input

	ToPerconaServerMongoDBBackupPatchMapOutput() PerconaServerMongoDBBackupPatchMapOutput
	ToPerconaServerMongoDBBackupPatchMapOutputWithContext(context.Context) PerconaServerMongoDBBackupPatchMapOutput
}

type PerconaServerMongoDBBackupPatchMap map[string]PerconaServerMongoDBBackupPatchInput

func (PerconaServerMongoDBBackupPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMongoDBBackupPatch)(nil)).Elem()
}

func (i PerconaServerMongoDBBackupPatchMap) ToPerconaServerMongoDBBackupPatchMapOutput() PerconaServerMongoDBBackupPatchMapOutput {
	return i.ToPerconaServerMongoDBBackupPatchMapOutputWithContext(context.Background())
}

func (i PerconaServerMongoDBBackupPatchMap) ToPerconaServerMongoDBBackupPatchMapOutputWithContext(ctx context.Context) PerconaServerMongoDBBackupPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBBackupPatchMapOutput)
}

type PerconaServerMongoDBBackupPatchOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBBackupPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMongoDBBackupPatch)(nil)).Elem()
}

func (o PerconaServerMongoDBBackupPatchOutput) ToPerconaServerMongoDBBackupPatchOutput() PerconaServerMongoDBBackupPatchOutput {
	return o
}

func (o PerconaServerMongoDBBackupPatchOutput) ToPerconaServerMongoDBBackupPatchOutputWithContext(ctx context.Context) PerconaServerMongoDBBackupPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaServerMongoDBBackupPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBBackupPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMongoDBBackupPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBBackupPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PerconaServerMongoDBBackupPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBBackupPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PerconaServerMongoDBBackupPatchOutput) Spec() PerconaServerMongoDBBackupSpecPatchPtrOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBBackupPatch) PerconaServerMongoDBBackupSpecPatchPtrOutput { return v.Spec }).(PerconaServerMongoDBBackupSpecPatchPtrOutput)
}

func (o PerconaServerMongoDBBackupPatchOutput) Status() PerconaServerMongoDBBackupStatusPatchPtrOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBBackupPatch) PerconaServerMongoDBBackupStatusPatchPtrOutput {
		return v.Status
	}).(PerconaServerMongoDBBackupStatusPatchPtrOutput)
}

type PerconaServerMongoDBBackupPatchArrayOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBBackupPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMongoDBBackupPatch)(nil)).Elem()
}

func (o PerconaServerMongoDBBackupPatchArrayOutput) ToPerconaServerMongoDBBackupPatchArrayOutput() PerconaServerMongoDBBackupPatchArrayOutput {
	return o
}

func (o PerconaServerMongoDBBackupPatchArrayOutput) ToPerconaServerMongoDBBackupPatchArrayOutputWithContext(ctx context.Context) PerconaServerMongoDBBackupPatchArrayOutput {
	return o
}

func (o PerconaServerMongoDBBackupPatchArrayOutput) Index(i pulumi.IntInput) PerconaServerMongoDBBackupPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PerconaServerMongoDBBackupPatch {
		return vs[0].([]*PerconaServerMongoDBBackupPatch)[vs[1].(int)]
	}).(PerconaServerMongoDBBackupPatchOutput)
}

type PerconaServerMongoDBBackupPatchMapOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBBackupPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMongoDBBackupPatch)(nil)).Elem()
}

func (o PerconaServerMongoDBBackupPatchMapOutput) ToPerconaServerMongoDBBackupPatchMapOutput() PerconaServerMongoDBBackupPatchMapOutput {
	return o
}

func (o PerconaServerMongoDBBackupPatchMapOutput) ToPerconaServerMongoDBBackupPatchMapOutputWithContext(ctx context.Context) PerconaServerMongoDBBackupPatchMapOutput {
	return o
}

func (o PerconaServerMongoDBBackupPatchMapOutput) MapIndex(k pulumi.StringInput) PerconaServerMongoDBBackupPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PerconaServerMongoDBBackupPatch {
		return vs[0].(map[string]*PerconaServerMongoDBBackupPatch)[vs[1].(string)]
	}).(PerconaServerMongoDBBackupPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBBackupPatchInput)(nil)).Elem(), &PerconaServerMongoDBBackupPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBBackupPatchArrayInput)(nil)).Elem(), PerconaServerMongoDBBackupPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBBackupPatchMapInput)(nil)).Elem(), PerconaServerMongoDBBackupPatchMap{})
	pulumi.RegisterOutputType(PerconaServerMongoDBBackupPatchOutput{})
	pulumi.RegisterOutputType(PerconaServerMongoDBBackupPatchArrayOutput{})
	pulumi.RegisterOutputType(PerconaServerMongoDBBackupPatchMapOutput{})
}
