// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PerconaServerMongoDBBackup struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput                   `pulumi:"metadata"`
	Spec     PerconaServerMongoDBBackupSpecOutput      `pulumi:"spec"`
	Status   PerconaServerMongoDBBackupStatusPtrOutput `pulumi:"status"`
}

// NewPerconaServerMongoDBBackup registers a new resource with the given unique name, arguments, and options.
func NewPerconaServerMongoDBBackup(ctx *pulumi.Context,
	name string, args *PerconaServerMongoDBBackupArgs, opts ...pulumi.ResourceOption) (*PerconaServerMongoDBBackup, error) {
	if args == nil {
		args = &PerconaServerMongoDBBackupArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("psmdb.percona.com/v1")
	args.Kind = pulumi.StringPtr("PerconaServerMongoDBBackup")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PerconaServerMongoDBBackup
	err := ctx.RegisterResource("kubernetes:psmdb.percona.com/v1:PerconaServerMongoDBBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPerconaServerMongoDBBackup gets an existing PerconaServerMongoDBBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPerconaServerMongoDBBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PerconaServerMongoDBBackupState, opts ...pulumi.ResourceOption) (*PerconaServerMongoDBBackup, error) {
	var resource PerconaServerMongoDBBackup
	err := ctx.ReadResource("kubernetes:psmdb.percona.com/v1:PerconaServerMongoDBBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PerconaServerMongoDBBackup resources.
type perconaServerMongoDBBackupState struct {
}

type PerconaServerMongoDBBackupState struct {
}

func (PerconaServerMongoDBBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMongoDBBackupState)(nil)).Elem()
}

type perconaServerMongoDBBackupArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta              `pulumi:"metadata"`
	Spec     *PerconaServerMongoDBBackupSpec `pulumi:"spec"`
}

// The set of arguments for constructing a PerconaServerMongoDBBackup resource.
type PerconaServerMongoDBBackupArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     PerconaServerMongoDBBackupSpecPtrInput
}

func (PerconaServerMongoDBBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMongoDBBackupArgs)(nil)).Elem()
}

type PerconaServerMongoDBBackupInput interface {
	pulumi.Input

	ToPerconaServerMongoDBBackupOutput() PerconaServerMongoDBBackupOutput
	ToPerconaServerMongoDBBackupOutputWithContext(ctx context.Context) PerconaServerMongoDBBackupOutput
}

func (*PerconaServerMongoDBBackup) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMongoDBBackup)(nil)).Elem()
}

func (i *PerconaServerMongoDBBackup) ToPerconaServerMongoDBBackupOutput() PerconaServerMongoDBBackupOutput {
	return i.ToPerconaServerMongoDBBackupOutputWithContext(context.Background())
}

func (i *PerconaServerMongoDBBackup) ToPerconaServerMongoDBBackupOutputWithContext(ctx context.Context) PerconaServerMongoDBBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBBackupOutput)
}

// PerconaServerMongoDBBackupArrayInput is an input type that accepts PerconaServerMongoDBBackupArray and PerconaServerMongoDBBackupArrayOutput values.
// You can construct a concrete instance of `PerconaServerMongoDBBackupArrayInput` via:
//
//	PerconaServerMongoDBBackupArray{ PerconaServerMongoDBBackupArgs{...} }
type PerconaServerMongoDBBackupArrayInput interface {
	pulumi.Input

	ToPerconaServerMongoDBBackupArrayOutput() PerconaServerMongoDBBackupArrayOutput
	ToPerconaServerMongoDBBackupArrayOutputWithContext(context.Context) PerconaServerMongoDBBackupArrayOutput
}

type PerconaServerMongoDBBackupArray []PerconaServerMongoDBBackupInput

func (PerconaServerMongoDBBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMongoDBBackup)(nil)).Elem()
}

func (i PerconaServerMongoDBBackupArray) ToPerconaServerMongoDBBackupArrayOutput() PerconaServerMongoDBBackupArrayOutput {
	return i.ToPerconaServerMongoDBBackupArrayOutputWithContext(context.Background())
}

func (i PerconaServerMongoDBBackupArray) ToPerconaServerMongoDBBackupArrayOutputWithContext(ctx context.Context) PerconaServerMongoDBBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBBackupArrayOutput)
}

// PerconaServerMongoDBBackupMapInput is an input type that accepts PerconaServerMongoDBBackupMap and PerconaServerMongoDBBackupMapOutput values.
// You can construct a concrete instance of `PerconaServerMongoDBBackupMapInput` via:
//
//	PerconaServerMongoDBBackupMap{ "key": PerconaServerMongoDBBackupArgs{...} }
type PerconaServerMongoDBBackupMapInput interface {
	pulumi.Input

	ToPerconaServerMongoDBBackupMapOutput() PerconaServerMongoDBBackupMapOutput
	ToPerconaServerMongoDBBackupMapOutputWithContext(context.Context) PerconaServerMongoDBBackupMapOutput
}

type PerconaServerMongoDBBackupMap map[string]PerconaServerMongoDBBackupInput

func (PerconaServerMongoDBBackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMongoDBBackup)(nil)).Elem()
}

func (i PerconaServerMongoDBBackupMap) ToPerconaServerMongoDBBackupMapOutput() PerconaServerMongoDBBackupMapOutput {
	return i.ToPerconaServerMongoDBBackupMapOutputWithContext(context.Background())
}

func (i PerconaServerMongoDBBackupMap) ToPerconaServerMongoDBBackupMapOutputWithContext(ctx context.Context) PerconaServerMongoDBBackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBBackupMapOutput)
}

type PerconaServerMongoDBBackupOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMongoDBBackup)(nil)).Elem()
}

func (o PerconaServerMongoDBBackupOutput) ToPerconaServerMongoDBBackupOutput() PerconaServerMongoDBBackupOutput {
	return o
}

func (o PerconaServerMongoDBBackupOutput) ToPerconaServerMongoDBBackupOutputWithContext(ctx context.Context) PerconaServerMongoDBBackupOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaServerMongoDBBackupOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBBackup) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMongoDBBackupOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBBackup) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PerconaServerMongoDBBackupOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBBackup) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o PerconaServerMongoDBBackupOutput) Spec() PerconaServerMongoDBBackupSpecOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBBackup) PerconaServerMongoDBBackupSpecOutput { return v.Spec }).(PerconaServerMongoDBBackupSpecOutput)
}

func (o PerconaServerMongoDBBackupOutput) Status() PerconaServerMongoDBBackupStatusPtrOutput {
	return o.ApplyT(func(v *PerconaServerMongoDBBackup) PerconaServerMongoDBBackupStatusPtrOutput { return v.Status }).(PerconaServerMongoDBBackupStatusPtrOutput)
}

type PerconaServerMongoDBBackupArrayOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMongoDBBackup)(nil)).Elem()
}

func (o PerconaServerMongoDBBackupArrayOutput) ToPerconaServerMongoDBBackupArrayOutput() PerconaServerMongoDBBackupArrayOutput {
	return o
}

func (o PerconaServerMongoDBBackupArrayOutput) ToPerconaServerMongoDBBackupArrayOutputWithContext(ctx context.Context) PerconaServerMongoDBBackupArrayOutput {
	return o
}

func (o PerconaServerMongoDBBackupArrayOutput) Index(i pulumi.IntInput) PerconaServerMongoDBBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PerconaServerMongoDBBackup {
		return vs[0].([]*PerconaServerMongoDBBackup)[vs[1].(int)]
	}).(PerconaServerMongoDBBackupOutput)
}

type PerconaServerMongoDBBackupMapOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBBackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMongoDBBackup)(nil)).Elem()
}

func (o PerconaServerMongoDBBackupMapOutput) ToPerconaServerMongoDBBackupMapOutput() PerconaServerMongoDBBackupMapOutput {
	return o
}

func (o PerconaServerMongoDBBackupMapOutput) ToPerconaServerMongoDBBackupMapOutputWithContext(ctx context.Context) PerconaServerMongoDBBackupMapOutput {
	return o
}

func (o PerconaServerMongoDBBackupMapOutput) MapIndex(k pulumi.StringInput) PerconaServerMongoDBBackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PerconaServerMongoDBBackup {
		return vs[0].(map[string]*PerconaServerMongoDBBackup)[vs[1].(string)]
	}).(PerconaServerMongoDBBackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBBackupInput)(nil)).Elem(), &PerconaServerMongoDBBackup{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBBackupArrayInput)(nil)).Elem(), PerconaServerMongoDBBackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBBackupMapInput)(nil)).Elem(), PerconaServerMongoDBBackupMap{})
	pulumi.RegisterOutputType(PerconaServerMongoDBBackupOutput{})
	pulumi.RegisterOutputType(PerconaServerMongoDBBackupArrayOutput{})
	pulumi.RegisterOutputType(PerconaServerMongoDBBackupMapOutput{})
}
