// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1_6_0

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

type PerconaServerMongoDBType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     map[string]interface{} `pulumi:"spec"`
	Status   map[string]interface{} `pulumi:"status"`
}

// PerconaServerMongoDBTypeInput is an input type that accepts PerconaServerMongoDBTypeArgs and PerconaServerMongoDBTypeOutput values.
// You can construct a concrete instance of `PerconaServerMongoDBTypeInput` via:
//
//	PerconaServerMongoDBTypeArgs{...}
type PerconaServerMongoDBTypeInput interface {
	pulumi.Input

	ToPerconaServerMongoDBTypeOutput() PerconaServerMongoDBTypeOutput
	ToPerconaServerMongoDBTypeOutputWithContext(context.Context) PerconaServerMongoDBTypeOutput
}

type PerconaServerMongoDBTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     pulumi.MapInput           `pulumi:"spec"`
	Status   pulumi.MapInput           `pulumi:"status"`
}

func (PerconaServerMongoDBTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PerconaServerMongoDBType)(nil)).Elem()
}

func (i PerconaServerMongoDBTypeArgs) ToPerconaServerMongoDBTypeOutput() PerconaServerMongoDBTypeOutput {
	return i.ToPerconaServerMongoDBTypeOutputWithContext(context.Background())
}

func (i PerconaServerMongoDBTypeArgs) ToPerconaServerMongoDBTypeOutputWithContext(ctx context.Context) PerconaServerMongoDBTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBTypeOutput)
}

// PerconaServerMongoDBTypeArrayInput is an input type that accepts PerconaServerMongoDBTypeArray and PerconaServerMongoDBTypeArrayOutput values.
// You can construct a concrete instance of `PerconaServerMongoDBTypeArrayInput` via:
//
//	PerconaServerMongoDBTypeArray{ PerconaServerMongoDBTypeArgs{...} }
type PerconaServerMongoDBTypeArrayInput interface {
	pulumi.Input

	ToPerconaServerMongoDBTypeArrayOutput() PerconaServerMongoDBTypeArrayOutput
	ToPerconaServerMongoDBTypeArrayOutputWithContext(context.Context) PerconaServerMongoDBTypeArrayOutput
}

type PerconaServerMongoDBTypeArray []PerconaServerMongoDBTypeInput

func (PerconaServerMongoDBTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PerconaServerMongoDBType)(nil)).Elem()
}

func (i PerconaServerMongoDBTypeArray) ToPerconaServerMongoDBTypeArrayOutput() PerconaServerMongoDBTypeArrayOutput {
	return i.ToPerconaServerMongoDBTypeArrayOutputWithContext(context.Background())
}

func (i PerconaServerMongoDBTypeArray) ToPerconaServerMongoDBTypeArrayOutputWithContext(ctx context.Context) PerconaServerMongoDBTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBTypeArrayOutput)
}

type PerconaServerMongoDBTypeOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerconaServerMongoDBType)(nil)).Elem()
}

func (o PerconaServerMongoDBTypeOutput) ToPerconaServerMongoDBTypeOutput() PerconaServerMongoDBTypeOutput {
	return o
}

func (o PerconaServerMongoDBTypeOutput) ToPerconaServerMongoDBTypeOutputWithContext(ctx context.Context) PerconaServerMongoDBTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaServerMongoDBTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PerconaServerMongoDBType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMongoDBTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PerconaServerMongoDBType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PerconaServerMongoDBTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PerconaServerMongoDBType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o PerconaServerMongoDBTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v PerconaServerMongoDBType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

func (o PerconaServerMongoDBTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v PerconaServerMongoDBType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type PerconaServerMongoDBTypeArrayOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PerconaServerMongoDBType)(nil)).Elem()
}

func (o PerconaServerMongoDBTypeArrayOutput) ToPerconaServerMongoDBTypeArrayOutput() PerconaServerMongoDBTypeArrayOutput {
	return o
}

func (o PerconaServerMongoDBTypeArrayOutput) ToPerconaServerMongoDBTypeArrayOutputWithContext(ctx context.Context) PerconaServerMongoDBTypeArrayOutput {
	return o
}

func (o PerconaServerMongoDBTypeArrayOutput) Index(i pulumi.IntInput) PerconaServerMongoDBTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PerconaServerMongoDBType {
		return vs[0].([]PerconaServerMongoDBType)[vs[1].(int)]
	}).(PerconaServerMongoDBTypeOutput)
}

// PerconaServerMongoDBList is a list of PerconaServerMongoDB
type PerconaServerMongoDBListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of perconaservermongodbs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []PerconaServerMongoDBType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// PerconaServerMongoDBListTypeInput is an input type that accepts PerconaServerMongoDBListTypeArgs and PerconaServerMongoDBListTypeOutput values.
// You can construct a concrete instance of `PerconaServerMongoDBListTypeInput` via:
//
//	PerconaServerMongoDBListTypeArgs{...}
type PerconaServerMongoDBListTypeInput interface {
	pulumi.Input

	ToPerconaServerMongoDBListTypeOutput() PerconaServerMongoDBListTypeOutput
	ToPerconaServerMongoDBListTypeOutputWithContext(context.Context) PerconaServerMongoDBListTypeOutput
}

// PerconaServerMongoDBList is a list of PerconaServerMongoDB
type PerconaServerMongoDBListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of perconaservermongodbs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PerconaServerMongoDBTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (PerconaServerMongoDBListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PerconaServerMongoDBListType)(nil)).Elem()
}

func (i PerconaServerMongoDBListTypeArgs) ToPerconaServerMongoDBListTypeOutput() PerconaServerMongoDBListTypeOutput {
	return i.ToPerconaServerMongoDBListTypeOutputWithContext(context.Background())
}

func (i PerconaServerMongoDBListTypeArgs) ToPerconaServerMongoDBListTypeOutputWithContext(ctx context.Context) PerconaServerMongoDBListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBListTypeOutput)
}

// PerconaServerMongoDBList is a list of PerconaServerMongoDB
type PerconaServerMongoDBListTypeOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerconaServerMongoDBListType)(nil)).Elem()
}

func (o PerconaServerMongoDBListTypeOutput) ToPerconaServerMongoDBListTypeOutput() PerconaServerMongoDBListTypeOutput {
	return o
}

func (o PerconaServerMongoDBListTypeOutput) ToPerconaServerMongoDBListTypeOutputWithContext(ctx context.Context) PerconaServerMongoDBListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaServerMongoDBListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PerconaServerMongoDBListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of perconaservermongodbs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o PerconaServerMongoDBListTypeOutput) Items() PerconaServerMongoDBTypeArrayOutput {
	return o.ApplyT(func(v PerconaServerMongoDBListType) []PerconaServerMongoDBType { return v.Items }).(PerconaServerMongoDBTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMongoDBListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PerconaServerMongoDBListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMongoDBListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v PerconaServerMongoDBListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

type PerconaServerMongoDBPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     map[string]interface{}  `pulumi:"spec"`
	Status   map[string]interface{}  `pulumi:"status"`
}

// PerconaServerMongoDBPatchTypeInput is an input type that accepts PerconaServerMongoDBPatchTypeArgs and PerconaServerMongoDBPatchTypeOutput values.
// You can construct a concrete instance of `PerconaServerMongoDBPatchTypeInput` via:
//
//	PerconaServerMongoDBPatchTypeArgs{...}
type PerconaServerMongoDBPatchTypeInput interface {
	pulumi.Input

	ToPerconaServerMongoDBPatchTypeOutput() PerconaServerMongoDBPatchTypeOutput
	ToPerconaServerMongoDBPatchTypeOutputWithContext(context.Context) PerconaServerMongoDBPatchTypeOutput
}

type PerconaServerMongoDBPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     pulumi.MapInput                `pulumi:"spec"`
	Status   pulumi.MapInput                `pulumi:"status"`
}

func (PerconaServerMongoDBPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PerconaServerMongoDBPatchType)(nil)).Elem()
}

func (i PerconaServerMongoDBPatchTypeArgs) ToPerconaServerMongoDBPatchTypeOutput() PerconaServerMongoDBPatchTypeOutput {
	return i.ToPerconaServerMongoDBPatchTypeOutputWithContext(context.Background())
}

func (i PerconaServerMongoDBPatchTypeArgs) ToPerconaServerMongoDBPatchTypeOutputWithContext(ctx context.Context) PerconaServerMongoDBPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBPatchTypeOutput)
}

type PerconaServerMongoDBPatchTypeOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerconaServerMongoDBPatchType)(nil)).Elem()
}

func (o PerconaServerMongoDBPatchTypeOutput) ToPerconaServerMongoDBPatchTypeOutput() PerconaServerMongoDBPatchTypeOutput {
	return o
}

func (o PerconaServerMongoDBPatchTypeOutput) ToPerconaServerMongoDBPatchTypeOutputWithContext(ctx context.Context) PerconaServerMongoDBPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaServerMongoDBPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PerconaServerMongoDBPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMongoDBPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PerconaServerMongoDBPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PerconaServerMongoDBPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v PerconaServerMongoDBPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PerconaServerMongoDBPatchTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v PerconaServerMongoDBPatchType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

func (o PerconaServerMongoDBPatchTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v PerconaServerMongoDBPatchType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBTypeInput)(nil)).Elem(), PerconaServerMongoDBTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBTypeArrayInput)(nil)).Elem(), PerconaServerMongoDBTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBListTypeInput)(nil)).Elem(), PerconaServerMongoDBListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBPatchTypeInput)(nil)).Elem(), PerconaServerMongoDBPatchTypeArgs{})
	pulumi.RegisterOutputType(PerconaServerMongoDBTypeOutput{})
	pulumi.RegisterOutputType(PerconaServerMongoDBTypeArrayOutput{})
	pulumi.RegisterOutputType(PerconaServerMongoDBListTypeOutput{})
	pulumi.RegisterOutputType(PerconaServerMongoDBPatchTypeOutput{})
}
