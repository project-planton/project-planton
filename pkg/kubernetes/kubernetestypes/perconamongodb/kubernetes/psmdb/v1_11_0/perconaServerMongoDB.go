// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1_11_0

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PerconaServerMongoDB struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     pulumi.MapOutput        `pulumi:"spec"`
	Status   pulumi.MapOutput        `pulumi:"status"`
}

// NewPerconaServerMongoDB registers a new resource with the given unique name, arguments, and options.
func NewPerconaServerMongoDB(ctx *pulumi.Context,
	name string, args *PerconaServerMongoDBArgs, opts ...pulumi.ResourceOption) (*PerconaServerMongoDB, error) {
	if args == nil {
		args = &PerconaServerMongoDBArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("psmdb.percona.com/v1-11-0")
	args.Kind = pulumi.StringPtr("PerconaServerMongoDB")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1:PerconaServerMongoDB"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-10-0:PerconaServerMongoDB"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-12-0:PerconaServerMongoDB"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-2-0:PerconaServerMongoDB"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-3-0:PerconaServerMongoDB"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-4-0:PerconaServerMongoDB"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-5-0:PerconaServerMongoDB"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-6-0:PerconaServerMongoDB"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-7-0:PerconaServerMongoDB"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-8-0:PerconaServerMongoDB"),
		},
		{
			Type: pulumi.String("kubernetes:psmdb.percona.com/v1-9-0:PerconaServerMongoDB"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PerconaServerMongoDB
	err := ctx.RegisterResource("kubernetes:psmdb.percona.com/v1-11-0:PerconaServerMongoDB", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPerconaServerMongoDB gets an existing PerconaServerMongoDB resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPerconaServerMongoDB(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PerconaServerMongoDBState, opts ...pulumi.ResourceOption) (*PerconaServerMongoDB, error) {
	var resource PerconaServerMongoDB
	err := ctx.ReadResource("kubernetes:psmdb.percona.com/v1-11-0:PerconaServerMongoDB", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PerconaServerMongoDB resources.
type perconaServerMongoDBState struct {
}

type PerconaServerMongoDBState struct {
}

func (PerconaServerMongoDBState) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMongoDBState)(nil)).Elem()
}

type perconaServerMongoDBArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     map[string]interface{} `pulumi:"spec"`
}

// The set of arguments for constructing a PerconaServerMongoDB resource.
type PerconaServerMongoDBArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     pulumi.MapInput
}

func (PerconaServerMongoDBArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMongoDBArgs)(nil)).Elem()
}

type PerconaServerMongoDBInput interface {
	pulumi.Input

	ToPerconaServerMongoDBOutput() PerconaServerMongoDBOutput
	ToPerconaServerMongoDBOutputWithContext(ctx context.Context) PerconaServerMongoDBOutput
}

func (*PerconaServerMongoDB) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMongoDB)(nil)).Elem()
}

func (i *PerconaServerMongoDB) ToPerconaServerMongoDBOutput() PerconaServerMongoDBOutput {
	return i.ToPerconaServerMongoDBOutputWithContext(context.Background())
}

func (i *PerconaServerMongoDB) ToPerconaServerMongoDBOutputWithContext(ctx context.Context) PerconaServerMongoDBOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBOutput)
}

// PerconaServerMongoDBArrayInput is an input type that accepts PerconaServerMongoDBArray and PerconaServerMongoDBArrayOutput values.
// You can construct a concrete instance of `PerconaServerMongoDBArrayInput` via:
//
//	PerconaServerMongoDBArray{ PerconaServerMongoDBArgs{...} }
type PerconaServerMongoDBArrayInput interface {
	pulumi.Input

	ToPerconaServerMongoDBArrayOutput() PerconaServerMongoDBArrayOutput
	ToPerconaServerMongoDBArrayOutputWithContext(context.Context) PerconaServerMongoDBArrayOutput
}

type PerconaServerMongoDBArray []PerconaServerMongoDBInput

func (PerconaServerMongoDBArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMongoDB)(nil)).Elem()
}

func (i PerconaServerMongoDBArray) ToPerconaServerMongoDBArrayOutput() PerconaServerMongoDBArrayOutput {
	return i.ToPerconaServerMongoDBArrayOutputWithContext(context.Background())
}

func (i PerconaServerMongoDBArray) ToPerconaServerMongoDBArrayOutputWithContext(ctx context.Context) PerconaServerMongoDBArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBArrayOutput)
}

// PerconaServerMongoDBMapInput is an input type that accepts PerconaServerMongoDBMap and PerconaServerMongoDBMapOutput values.
// You can construct a concrete instance of `PerconaServerMongoDBMapInput` via:
//
//	PerconaServerMongoDBMap{ "key": PerconaServerMongoDBArgs{...} }
type PerconaServerMongoDBMapInput interface {
	pulumi.Input

	ToPerconaServerMongoDBMapOutput() PerconaServerMongoDBMapOutput
	ToPerconaServerMongoDBMapOutputWithContext(context.Context) PerconaServerMongoDBMapOutput
}

type PerconaServerMongoDBMap map[string]PerconaServerMongoDBInput

func (PerconaServerMongoDBMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMongoDB)(nil)).Elem()
}

func (i PerconaServerMongoDBMap) ToPerconaServerMongoDBMapOutput() PerconaServerMongoDBMapOutput {
	return i.ToPerconaServerMongoDBMapOutputWithContext(context.Background())
}

func (i PerconaServerMongoDBMap) ToPerconaServerMongoDBMapOutputWithContext(ctx context.Context) PerconaServerMongoDBMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMongoDBMapOutput)
}

type PerconaServerMongoDBOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMongoDB)(nil)).Elem()
}

func (o PerconaServerMongoDBOutput) ToPerconaServerMongoDBOutput() PerconaServerMongoDBOutput {
	return o
}

func (o PerconaServerMongoDBOutput) ToPerconaServerMongoDBOutputWithContext(ctx context.Context) PerconaServerMongoDBOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaServerMongoDBOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaServerMongoDB) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMongoDBOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaServerMongoDB) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PerconaServerMongoDBOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *PerconaServerMongoDB) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o PerconaServerMongoDBOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v *PerconaServerMongoDB) pulumi.MapOutput { return v.Spec }).(pulumi.MapOutput)
}

func (o PerconaServerMongoDBOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *PerconaServerMongoDB) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type PerconaServerMongoDBArrayOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMongoDB)(nil)).Elem()
}

func (o PerconaServerMongoDBArrayOutput) ToPerconaServerMongoDBArrayOutput() PerconaServerMongoDBArrayOutput {
	return o
}

func (o PerconaServerMongoDBArrayOutput) ToPerconaServerMongoDBArrayOutputWithContext(ctx context.Context) PerconaServerMongoDBArrayOutput {
	return o
}

func (o PerconaServerMongoDBArrayOutput) Index(i pulumi.IntInput) PerconaServerMongoDBOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PerconaServerMongoDB {
		return vs[0].([]*PerconaServerMongoDB)[vs[1].(int)]
	}).(PerconaServerMongoDBOutput)
}

type PerconaServerMongoDBMapOutput struct{ *pulumi.OutputState }

func (PerconaServerMongoDBMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMongoDB)(nil)).Elem()
}

func (o PerconaServerMongoDBMapOutput) ToPerconaServerMongoDBMapOutput() PerconaServerMongoDBMapOutput {
	return o
}

func (o PerconaServerMongoDBMapOutput) ToPerconaServerMongoDBMapOutputWithContext(ctx context.Context) PerconaServerMongoDBMapOutput {
	return o
}

func (o PerconaServerMongoDBMapOutput) MapIndex(k pulumi.StringInput) PerconaServerMongoDBOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PerconaServerMongoDB {
		return vs[0].(map[string]*PerconaServerMongoDB)[vs[1].(string)]
	}).(PerconaServerMongoDBOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBInput)(nil)).Elem(), &PerconaServerMongoDB{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBArrayInput)(nil)).Elem(), PerconaServerMongoDBArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMongoDBMapInput)(nil)).Elem(), PerconaServerMongoDBMap{})
	pulumi.RegisterOutputType(PerconaServerMongoDBOutput{})
	pulumi.RegisterOutputType(PerconaServerMongoDBArrayOutput{})
	pulumi.RegisterOutputType(PerconaServerMongoDBMapOutput{})
}
