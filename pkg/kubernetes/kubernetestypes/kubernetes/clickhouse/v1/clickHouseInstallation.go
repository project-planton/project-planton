// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// define a set of Kubernetes resources (StatefulSet, PVC, Service, ConfigMap) which describe behavior one or more clusters
type ClickHouseInstallation struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Specification of the desired behavior of one or more ClickHouse clusters
	// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
	Spec ClickHouseInstallationSpecOutput `pulumi:"spec"`
	// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
	Status ClickHouseInstallationStatusPtrOutput `pulumi:"status"`
}

// NewClickHouseInstallation registers a new resource with the given unique name, arguments, and options.
func NewClickHouseInstallation(ctx *pulumi.Context,
	name string, args *ClickHouseInstallationArgs, opts ...pulumi.ResourceOption) (*ClickHouseInstallation, error) {
	if args == nil {
		args = &ClickHouseInstallationArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("clickhouse.altinity.com/v1")
	args.Kind = pulumi.StringPtr("ClickHouseInstallation")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ClickHouseInstallation
	err := ctx.RegisterResource("kubernetes:clickhouse.altinity.com/v1:ClickHouseInstallation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClickHouseInstallation gets an existing ClickHouseInstallation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClickHouseInstallation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClickHouseInstallationState, opts ...pulumi.ResourceOption) (*ClickHouseInstallation, error) {
	var resource ClickHouseInstallation
	err := ctx.ReadResource("kubernetes:clickhouse.altinity.com/v1:ClickHouseInstallation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClickHouseInstallation resources.
type clickHouseInstallationState struct {
}

type ClickHouseInstallationState struct {
}

func (ClickHouseInstallationState) ElementType() reflect.Type {
	return reflect.TypeOf((*clickHouseInstallationState)(nil)).Elem()
}

type clickHouseInstallationArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of one or more ClickHouse clusters
	// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
	Spec *ClickHouseInstallationSpec `pulumi:"spec"`
	// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
	Status *ClickHouseInstallationStatus `pulumi:"status"`
}

// The set of arguments for constructing a ClickHouseInstallation resource.
type ClickHouseInstallationArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Specification of the desired behavior of one or more ClickHouse clusters
	// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
	Spec ClickHouseInstallationSpecPtrInput
	// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
	Status ClickHouseInstallationStatusPtrInput
}

func (ClickHouseInstallationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clickHouseInstallationArgs)(nil)).Elem()
}

type ClickHouseInstallationInput interface {
	pulumi.Input

	ToClickHouseInstallationOutput() ClickHouseInstallationOutput
	ToClickHouseInstallationOutputWithContext(ctx context.Context) ClickHouseInstallationOutput
}

func (*ClickHouseInstallation) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallation)(nil)).Elem()
}

func (i *ClickHouseInstallation) ToClickHouseInstallationOutput() ClickHouseInstallationOutput {
	return i.ToClickHouseInstallationOutputWithContext(context.Background())
}

func (i *ClickHouseInstallation) ToClickHouseInstallationOutputWithContext(ctx context.Context) ClickHouseInstallationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationOutput)
}

type ClickHouseInstallationOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallation)(nil)).Elem()
}

func (o ClickHouseInstallationOutput) ToClickHouseInstallationOutput() ClickHouseInstallationOutput {
	return o
}

func (o ClickHouseInstallationOutput) ToClickHouseInstallationOutputWithContext(ctx context.Context) ClickHouseInstallationOutput {
	return o
}

func (o ClickHouseInstallationOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallation) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ClickHouseInstallationOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallation) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ClickHouseInstallationOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallation) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of one or more ClickHouse clusters
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
func (o ClickHouseInstallationOutput) Spec() ClickHouseInstallationSpecOutput {
	return o.ApplyT(func(v *ClickHouseInstallation) ClickHouseInstallationSpecOutput { return v.Spec }).(ClickHouseInstallationSpecOutput)
}

// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
func (o ClickHouseInstallationOutput) Status() ClickHouseInstallationStatusPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallation) ClickHouseInstallationStatusPtrOutput { return v.Status }).(ClickHouseInstallationStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationInput)(nil)).Elem(), &ClickHouseInstallation{})
	pulumi.RegisterOutputType(ClickHouseInstallationOutput{})
}
