// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// define a set of Kubernetes resources (StatefulSet, PVC, Service, ConfigMap) which describe behavior one or more clusters
type ClickHouseInstallationType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of one or more ClickHouse clusters
	// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
	Spec ClickHouseInstallationSpec `pulumi:"spec"`
	// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
	Status *ClickHouseInstallationStatus `pulumi:"status"`
}

type ClickHouseInstallationMetadata struct {
}

// Specification of the desired behavior of one or more ClickHouse clusters
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
type ClickHouseInstallationSpec struct {
	// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
	Configuration *ClickHouseInstallationSpecConfiguration `pulumi:"configuration"`
	// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
	// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
	Defaults *ClickHouseInstallationSpecDefaults `pulumi:"defaults"`
	// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
	// Typical use scenario - custom cluster domain in Kubernetes cluster
	// Example: %s.svc.my.test
	NamespaceDomainPattern *string `pulumi:"namespaceDomainPattern"`
	// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
	Reconcile *ClickHouseInstallationSpecReconcile `pulumi:"reconcile"`
	// [OBSOLETED] Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
	Reconciling *ClickHouseInstallationSpecReconciling `pulumi:"reconciling"`
	// In case 'RollingUpdate' specified, the operator will always restart ClickHouse pods during reconcile.
	// This options is used in rare cases when force restart is required and is typically removed after the use in order to avoid unneeded restarts.
	Restart *string `pulumi:"restart"`
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Stop *string `pulumi:"stop"`
	// Suspend reconciliation of resources managed by a ClickHouse Installation.
	// Works as the following:
	//  - When `suspend` is `true` operator stops reconciling all resources.
	//  - When `suspend` is `false` or not set, operator reconciles all resources.
	Suspend *string `pulumi:"suspend"`
	// Allows to define custom taskID for CHI update and watch status of this update execution.
	// Displayed in all .status.taskID* fields.
	// By default (if not filled) every update of CHI manifest will generate random taskID
	TaskID *string `pulumi:"taskID"`
	// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
	Templates *ClickHouseInstallationSpecTemplates `pulumi:"templates"`
	// Optional, applicable inside ClickHouseInstallationTemplate only.
	// Defines current ClickHouseInstallationTemplate application options to target ClickHouseInstallation(s)."
	Templating *ClickHouseInstallationSpecTemplating `pulumi:"templating"`
	// Allows to troubleshoot Pods during CrashLoopBack state.
	// This may happen when wrong configuration applied, in this case `clickhouse-server` wouldn't start.
	// Command within ClickHouse container is modified with `sleep` in order to avoid quick restarts
	// and give time to troubleshoot via CLI.
	// Liveness and Readiness probes are disabled as well.
	Troubleshoot *string `pulumi:"troubleshoot"`
	// list of `ClickHouseInstallationTemplate` (chit) resource names which will merge with current `CHI`
	// manifest during render Kubernetes resources to create related ClickHouse clusters"
	UseTemplates []ClickHouseInstallationSpecUseTemplates `pulumi:"useTemplates"`
}

// ClickHouseInstallationSpecInput is an input type that accepts ClickHouseInstallationSpecArgs and ClickHouseInstallationSpecOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecInput` via:
//
//	ClickHouseInstallationSpecArgs{...}
type ClickHouseInstallationSpecInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecOutput() ClickHouseInstallationSpecOutput
	ToClickHouseInstallationSpecOutputWithContext(context.Context) ClickHouseInstallationSpecOutput
}

// Specification of the desired behavior of one or more ClickHouse clusters
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
type ClickHouseInstallationSpecArgs struct {
	// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
	Configuration ClickHouseInstallationSpecConfigurationPtrInput `pulumi:"configuration"`
	// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
	// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
	Defaults ClickHouseInstallationSpecDefaultsPtrInput `pulumi:"defaults"`
	// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
	// Typical use scenario - custom cluster domain in Kubernetes cluster
	// Example: %s.svc.my.test
	NamespaceDomainPattern pulumi.StringPtrInput `pulumi:"namespaceDomainPattern"`
	// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
	Reconcile ClickHouseInstallationSpecReconcilePtrInput `pulumi:"reconcile"`
	// [OBSOLETED] Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
	Reconciling ClickHouseInstallationSpecReconcilingPtrInput `pulumi:"reconciling"`
	// In case 'RollingUpdate' specified, the operator will always restart ClickHouse pods during reconcile.
	// This options is used in rare cases when force restart is required and is typically removed after the use in order to avoid unneeded restarts.
	Restart pulumi.StringPtrInput `pulumi:"restart"`
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Stop pulumi.StringPtrInput `pulumi:"stop"`
	// Suspend reconciliation of resources managed by a ClickHouse Installation.
	// Works as the following:
	//  - When `suspend` is `true` operator stops reconciling all resources.
	//  - When `suspend` is `false` or not set, operator reconciles all resources.
	Suspend pulumi.StringPtrInput `pulumi:"suspend"`
	// Allows to define custom taskID for CHI update and watch status of this update execution.
	// Displayed in all .status.taskID* fields.
	// By default (if not filled) every update of CHI manifest will generate random taskID
	TaskID pulumi.StringPtrInput `pulumi:"taskID"`
	// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
	Templates ClickHouseInstallationSpecTemplatesPtrInput `pulumi:"templates"`
	// Optional, applicable inside ClickHouseInstallationTemplate only.
	// Defines current ClickHouseInstallationTemplate application options to target ClickHouseInstallation(s)."
	Templating ClickHouseInstallationSpecTemplatingPtrInput `pulumi:"templating"`
	// Allows to troubleshoot Pods during CrashLoopBack state.
	// This may happen when wrong configuration applied, in this case `clickhouse-server` wouldn't start.
	// Command within ClickHouse container is modified with `sleep` in order to avoid quick restarts
	// and give time to troubleshoot via CLI.
	// Liveness and Readiness probes are disabled as well.
	Troubleshoot pulumi.StringPtrInput `pulumi:"troubleshoot"`
	// list of `ClickHouseInstallationTemplate` (chit) resource names which will merge with current `CHI`
	// manifest during render Kubernetes resources to create related ClickHouse clusters"
	UseTemplates ClickHouseInstallationSpecUseTemplatesArrayInput `pulumi:"useTemplates"`
}

func (ClickHouseInstallationSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpec)(nil)).Elem()
}

func (i ClickHouseInstallationSpecArgs) ToClickHouseInstallationSpecOutput() ClickHouseInstallationSpecOutput {
	return i.ToClickHouseInstallationSpecOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecArgs) ToClickHouseInstallationSpecOutputWithContext(ctx context.Context) ClickHouseInstallationSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecOutput)
}

func (i ClickHouseInstallationSpecArgs) ToClickHouseInstallationSpecPtrOutput() ClickHouseInstallationSpecPtrOutput {
	return i.ToClickHouseInstallationSpecPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecArgs) ToClickHouseInstallationSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecOutput).ToClickHouseInstallationSpecPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecPtrInput is an input type that accepts ClickHouseInstallationSpecArgs, ClickHouseInstallationSpecPtr and ClickHouseInstallationSpecPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecPtrInput` via:
//
//	        ClickHouseInstallationSpecArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecPtrOutput() ClickHouseInstallationSpecPtrOutput
	ToClickHouseInstallationSpecPtrOutputWithContext(context.Context) ClickHouseInstallationSpecPtrOutput
}

type clickHouseInstallationSpecPtrType ClickHouseInstallationSpecArgs

func ClickHouseInstallationSpecPtr(v *ClickHouseInstallationSpecArgs) ClickHouseInstallationSpecPtrInput {
	return (*clickHouseInstallationSpecPtrType)(v)
}

func (*clickHouseInstallationSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpec)(nil)).Elem()
}

func (i *clickHouseInstallationSpecPtrType) ToClickHouseInstallationSpecPtrOutput() ClickHouseInstallationSpecPtrOutput {
	return i.ToClickHouseInstallationSpecPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecPtrType) ToClickHouseInstallationSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecPtrOutput)
}

// Specification of the desired behavior of one or more ClickHouse clusters
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
type ClickHouseInstallationSpecOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpec)(nil)).Elem()
}

func (o ClickHouseInstallationSpecOutput) ToClickHouseInstallationSpecOutput() ClickHouseInstallationSpecOutput {
	return o
}

func (o ClickHouseInstallationSpecOutput) ToClickHouseInstallationSpecOutputWithContext(ctx context.Context) ClickHouseInstallationSpecOutput {
	return o
}

func (o ClickHouseInstallationSpecOutput) ToClickHouseInstallationSpecPtrOutput() ClickHouseInstallationSpecPtrOutput {
	return o.ToClickHouseInstallationSpecPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecOutput) ToClickHouseInstallationSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpec) *ClickHouseInstallationSpec {
		return &v
	}).(ClickHouseInstallationSpecPtrOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
func (o ClickHouseInstallationSpecOutput) Configuration() ClickHouseInstallationSpecConfigurationPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpec) *ClickHouseInstallationSpecConfiguration { return v.Configuration }).(ClickHouseInstallationSpecConfigurationPtrOutput)
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
func (o ClickHouseInstallationSpecOutput) Defaults() ClickHouseInstallationSpecDefaultsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpec) *ClickHouseInstallationSpecDefaults { return v.Defaults }).(ClickHouseInstallationSpecDefaultsPtrOutput)
}

// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
// Typical use scenario - custom cluster domain in Kubernetes cluster
// Example: %s.svc.my.test
func (o ClickHouseInstallationSpecOutput) NamespaceDomainPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpec) *string { return v.NamespaceDomainPattern }).(pulumi.StringPtrOutput)
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
func (o ClickHouseInstallationSpecOutput) Reconcile() ClickHouseInstallationSpecReconcilePtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpec) *ClickHouseInstallationSpecReconcile { return v.Reconcile }).(ClickHouseInstallationSpecReconcilePtrOutput)
}

// [OBSOLETED] Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
func (o ClickHouseInstallationSpecOutput) Reconciling() ClickHouseInstallationSpecReconcilingPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpec) *ClickHouseInstallationSpecReconciling { return v.Reconciling }).(ClickHouseInstallationSpecReconcilingPtrOutput)
}

// In case 'RollingUpdate' specified, the operator will always restart ClickHouse pods during reconcile.
// This options is used in rare cases when force restart is required and is typically removed after the use in order to avoid unneeded restarts.
func (o ClickHouseInstallationSpecOutput) Restart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpec) *string { return v.Restart }).(pulumi.StringPtrOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationSpecOutput) Stop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpec) *string { return v.Stop }).(pulumi.StringPtrOutput)
}

// Suspend reconciliation of resources managed by a ClickHouse Installation.
// Works as the following:
//   - When `suspend` is `true` operator stops reconciling all resources.
//   - When `suspend` is `false` or not set, operator reconciles all resources.
func (o ClickHouseInstallationSpecOutput) Suspend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpec) *string { return v.Suspend }).(pulumi.StringPtrOutput)
}

// Allows to define custom taskID for CHI update and watch status of this update execution.
// Displayed in all .status.taskID* fields.
// By default (if not filled) every update of CHI manifest will generate random taskID
func (o ClickHouseInstallationSpecOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpec) *string { return v.TaskID }).(pulumi.StringPtrOutput)
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
func (o ClickHouseInstallationSpecOutput) Templates() ClickHouseInstallationSpecTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpec) *ClickHouseInstallationSpecTemplates { return v.Templates }).(ClickHouseInstallationSpecTemplatesPtrOutput)
}

// Optional, applicable inside ClickHouseInstallationTemplate only.
// Defines current ClickHouseInstallationTemplate application options to target ClickHouseInstallation(s)."
func (o ClickHouseInstallationSpecOutput) Templating() ClickHouseInstallationSpecTemplatingPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpec) *ClickHouseInstallationSpecTemplating { return v.Templating }).(ClickHouseInstallationSpecTemplatingPtrOutput)
}

// Allows to troubleshoot Pods during CrashLoopBack state.
// This may happen when wrong configuration applied, in this case `clickhouse-server` wouldn't start.
// Command within ClickHouse container is modified with `sleep` in order to avoid quick restarts
// and give time to troubleshoot via CLI.
// Liveness and Readiness probes are disabled as well.
func (o ClickHouseInstallationSpecOutput) Troubleshoot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpec) *string { return v.Troubleshoot }).(pulumi.StringPtrOutput)
}

// list of `ClickHouseInstallationTemplate` (chit) resource names which will merge with current `CHI`
// manifest during render Kubernetes resources to create related ClickHouse clusters"
func (o ClickHouseInstallationSpecOutput) UseTemplates() ClickHouseInstallationSpecUseTemplatesArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpec) []ClickHouseInstallationSpecUseTemplates { return v.UseTemplates }).(ClickHouseInstallationSpecUseTemplatesArrayOutput)
}

type ClickHouseInstallationSpecPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpec)(nil)).Elem()
}

func (o ClickHouseInstallationSpecPtrOutput) ToClickHouseInstallationSpecPtrOutput() ClickHouseInstallationSpecPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecPtrOutput) ToClickHouseInstallationSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecPtrOutput) Elem() ClickHouseInstallationSpecOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpec) ClickHouseInstallationSpec {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpec
		return ret
	}).(ClickHouseInstallationSpecOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
func (o ClickHouseInstallationSpecPtrOutput) Configuration() ClickHouseInstallationSpecConfigurationPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpec) *ClickHouseInstallationSpecConfiguration {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ClickHouseInstallationSpecConfigurationPtrOutput)
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
func (o ClickHouseInstallationSpecPtrOutput) Defaults() ClickHouseInstallationSpecDefaultsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpec) *ClickHouseInstallationSpecDefaults {
		if v == nil {
			return nil
		}
		return v.Defaults
	}).(ClickHouseInstallationSpecDefaultsPtrOutput)
}

// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
// Typical use scenario - custom cluster domain in Kubernetes cluster
// Example: %s.svc.my.test
func (o ClickHouseInstallationSpecPtrOutput) NamespaceDomainPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpec) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceDomainPattern
	}).(pulumi.StringPtrOutput)
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
func (o ClickHouseInstallationSpecPtrOutput) Reconcile() ClickHouseInstallationSpecReconcilePtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpec) *ClickHouseInstallationSpecReconcile {
		if v == nil {
			return nil
		}
		return v.Reconcile
	}).(ClickHouseInstallationSpecReconcilePtrOutput)
}

// [OBSOLETED] Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
func (o ClickHouseInstallationSpecPtrOutput) Reconciling() ClickHouseInstallationSpecReconcilingPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpec) *ClickHouseInstallationSpecReconciling {
		if v == nil {
			return nil
		}
		return v.Reconciling
	}).(ClickHouseInstallationSpecReconcilingPtrOutput)
}

// In case 'RollingUpdate' specified, the operator will always restart ClickHouse pods during reconcile.
// This options is used in rare cases when force restart is required and is typically removed after the use in order to avoid unneeded restarts.
func (o ClickHouseInstallationSpecPtrOutput) Restart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpec) *string {
		if v == nil {
			return nil
		}
		return v.Restart
	}).(pulumi.StringPtrOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationSpecPtrOutput) Stop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpec) *string {
		if v == nil {
			return nil
		}
		return v.Stop
	}).(pulumi.StringPtrOutput)
}

// Suspend reconciliation of resources managed by a ClickHouse Installation.
// Works as the following:
//   - When `suspend` is `true` operator stops reconciling all resources.
//   - When `suspend` is `false` or not set, operator reconciles all resources.
func (o ClickHouseInstallationSpecPtrOutput) Suspend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpec) *string {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.StringPtrOutput)
}

// Allows to define custom taskID for CHI update and watch status of this update execution.
// Displayed in all .status.taskID* fields.
// By default (if not filled) every update of CHI manifest will generate random taskID
func (o ClickHouseInstallationSpecPtrOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpec) *string {
		if v == nil {
			return nil
		}
		return v.TaskID
	}).(pulumi.StringPtrOutput)
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
func (o ClickHouseInstallationSpecPtrOutput) Templates() ClickHouseInstallationSpecTemplatesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpec) *ClickHouseInstallationSpecTemplates {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ClickHouseInstallationSpecTemplatesPtrOutput)
}

// Optional, applicable inside ClickHouseInstallationTemplate only.
// Defines current ClickHouseInstallationTemplate application options to target ClickHouseInstallation(s)."
func (o ClickHouseInstallationSpecPtrOutput) Templating() ClickHouseInstallationSpecTemplatingPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpec) *ClickHouseInstallationSpecTemplating {
		if v == nil {
			return nil
		}
		return v.Templating
	}).(ClickHouseInstallationSpecTemplatingPtrOutput)
}

// Allows to troubleshoot Pods during CrashLoopBack state.
// This may happen when wrong configuration applied, in this case `clickhouse-server` wouldn't start.
// Command within ClickHouse container is modified with `sleep` in order to avoid quick restarts
// and give time to troubleshoot via CLI.
// Liveness and Readiness probes are disabled as well.
func (o ClickHouseInstallationSpecPtrOutput) Troubleshoot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpec) *string {
		if v == nil {
			return nil
		}
		return v.Troubleshoot
	}).(pulumi.StringPtrOutput)
}

// list of `ClickHouseInstallationTemplate` (chit) resource names which will merge with current `CHI`
// manifest during render Kubernetes resources to create related ClickHouse clusters"
func (o ClickHouseInstallationSpecPtrOutput) UseTemplates() ClickHouseInstallationSpecUseTemplatesArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpec) []ClickHouseInstallationSpecUseTemplates {
		if v == nil {
			return nil
		}
		return v.UseTemplates
	}).(ClickHouseInstallationSpecUseTemplatesArrayOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
type ClickHouseInstallationSpecConfiguration struct {
	// describes clusters layout and allows change settings on cluster-level, shard-level and replica-level
	// every cluster is a set of StatefulSet, one StatefulSet contains only one Pod with `clickhouse-server`
	// all Pods will rendered in <remote_server> part of ClickHouse configs, mounted from ConfigMap as `/etc/clickhouse-server/config.d/chop-generated-remote_servers.xml`
	// Clusters will use for Distributed table engine, more details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
	// If `cluster` contains zookeeper settings (could be inherited from top `chi` level), when you can create *ReplicatedMergeTree tables
	Clusters []ClickHouseInstallationSpecConfigurationClusters `pulumi:"clusters"`
	// allows define content of any setting file inside each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// every key in this object is the file name
	// every value in this object is the file content
	// you can use `!!binary |` and base64 for binary files, see details here https://yaml.org/type/binary.html
	// each key could contains prefix like {common}, {users}, {hosts} or config.d, users.d, conf.d, wrong prefixes will be ignored, subfolders also will be ignored
	// More details: https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-05-files-nested.yaml
	//
	// any key could contains `valueFrom` with `secretKeyRef` which allow pass values from kubernetes secrets
	// secrets will mounted into pod as separate volume in /etc/clickhouse-server/secrets.d/
	// and will automatically update when update secret
	// it useful for pass SSL certificates from cert-manager or similar tool
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	Files map[string]interface{} `pulumi:"files"`
	// allows configure <yandex><profiles>..</profiles></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
	// you can configure any aspect of settings profile
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings-profiles/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationprofiles
	Profiles map[string]interface{} `pulumi:"profiles"`
	// allows configure <yandex><quotas>..</quotas></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
	// you can configure any aspect of resource quotas
	// More details: https://clickhouse.tech/docs/en/operations/quotas/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationquotas
	Quotas map[string]interface{} `pulumi:"quotas"`
	// allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationsettings
	//
	// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	//
	// secret value will pass in `pod.spec.env`, and generate with from_env=XXX in XML in /etc/clickhouse-server/config.d/chop-generated-settings.xml
	// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
	Settings map[string]interface{} `pulumi:"settings"`
	// allows configure <yandex><users>..</users></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
	// you can configure password hashed, authorization restrictions, database level security row filters etc.
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings-users/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationusers
	//
	// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
	// secret value will pass in `pod.spec.containers.evn`, and generate with from_env=XXX in XML in /etc/clickhouse-server/users.d/chop-generated-users.xml
	// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
	//
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	//
	// any key with prefix `k8s_secret_` shall has value with format namespace/secret/key or secret/key
	// in this case value from secret will write directly into XML tag during render *-usersd ConfigMap
	//
	// any key with prefix `k8s_secret_env` shall has value with format namespace/secret/key or secret/key
	// in this case value from secret will write into environment variable and write to XML tag via from_env=XXX
	//
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	Users map[string]interface{} `pulumi:"users"`
	// allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
	// `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
	// currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
	// More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
	Zookeeper *ClickHouseInstallationSpecConfigurationZookeeper `pulumi:"zookeeper"`
}

// ClickHouseInstallationSpecConfigurationInput is an input type that accepts ClickHouseInstallationSpecConfigurationArgs and ClickHouseInstallationSpecConfigurationOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationInput` via:
//
//	ClickHouseInstallationSpecConfigurationArgs{...}
type ClickHouseInstallationSpecConfigurationInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationOutput() ClickHouseInstallationSpecConfigurationOutput
	ToClickHouseInstallationSpecConfigurationOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationOutput
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
type ClickHouseInstallationSpecConfigurationArgs struct {
	// describes clusters layout and allows change settings on cluster-level, shard-level and replica-level
	// every cluster is a set of StatefulSet, one StatefulSet contains only one Pod with `clickhouse-server`
	// all Pods will rendered in <remote_server> part of ClickHouse configs, mounted from ConfigMap as `/etc/clickhouse-server/config.d/chop-generated-remote_servers.xml`
	// Clusters will use for Distributed table engine, more details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
	// If `cluster` contains zookeeper settings (could be inherited from top `chi` level), when you can create *ReplicatedMergeTree tables
	Clusters ClickHouseInstallationSpecConfigurationClustersArrayInput `pulumi:"clusters"`
	// allows define content of any setting file inside each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// every key in this object is the file name
	// every value in this object is the file content
	// you can use `!!binary |` and base64 for binary files, see details here https://yaml.org/type/binary.html
	// each key could contains prefix like {common}, {users}, {hosts} or config.d, users.d, conf.d, wrong prefixes will be ignored, subfolders also will be ignored
	// More details: https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-05-files-nested.yaml
	//
	// any key could contains `valueFrom` with `secretKeyRef` which allow pass values from kubernetes secrets
	// secrets will mounted into pod as separate volume in /etc/clickhouse-server/secrets.d/
	// and will automatically update when update secret
	// it useful for pass SSL certificates from cert-manager or similar tool
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	Files pulumi.MapInput `pulumi:"files"`
	// allows configure <yandex><profiles>..</profiles></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
	// you can configure any aspect of settings profile
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings-profiles/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationprofiles
	Profiles pulumi.MapInput `pulumi:"profiles"`
	// allows configure <yandex><quotas>..</quotas></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
	// you can configure any aspect of resource quotas
	// More details: https://clickhouse.tech/docs/en/operations/quotas/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationquotas
	Quotas pulumi.MapInput `pulumi:"quotas"`
	// allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationsettings
	//
	// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	//
	// secret value will pass in `pod.spec.env`, and generate with from_env=XXX in XML in /etc/clickhouse-server/config.d/chop-generated-settings.xml
	// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
	Settings pulumi.MapInput `pulumi:"settings"`
	// allows configure <yandex><users>..</users></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
	// you can configure password hashed, authorization restrictions, database level security row filters etc.
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings-users/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationusers
	//
	// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
	// secret value will pass in `pod.spec.containers.evn`, and generate with from_env=XXX in XML in /etc/clickhouse-server/users.d/chop-generated-users.xml
	// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
	//
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	//
	// any key with prefix `k8s_secret_` shall has value with format namespace/secret/key or secret/key
	// in this case value from secret will write directly into XML tag during render *-usersd ConfigMap
	//
	// any key with prefix `k8s_secret_env` shall has value with format namespace/secret/key or secret/key
	// in this case value from secret will write into environment variable and write to XML tag via from_env=XXX
	//
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	Users pulumi.MapInput `pulumi:"users"`
	// allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
	// `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
	// currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
	// More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
	Zookeeper ClickHouseInstallationSpecConfigurationZookeeperPtrInput `pulumi:"zookeeper"`
}

func (ClickHouseInstallationSpecConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfiguration)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationArgs) ToClickHouseInstallationSpecConfigurationOutput() ClickHouseInstallationSpecConfigurationOutput {
	return i.ToClickHouseInstallationSpecConfigurationOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationArgs) ToClickHouseInstallationSpecConfigurationOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationOutput)
}

func (i ClickHouseInstallationSpecConfigurationArgs) ToClickHouseInstallationSpecConfigurationPtrOutput() ClickHouseInstallationSpecConfigurationPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationArgs) ToClickHouseInstallationSpecConfigurationPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationOutput).ToClickHouseInstallationSpecConfigurationPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationArgs, ClickHouseInstallationSpecConfigurationPtr and ClickHouseInstallationSpecConfigurationPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationPtrOutput() ClickHouseInstallationSpecConfigurationPtrOutput
	ToClickHouseInstallationSpecConfigurationPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationPtrOutput
}

type clickHouseInstallationSpecConfigurationPtrType ClickHouseInstallationSpecConfigurationArgs

func ClickHouseInstallationSpecConfigurationPtr(v *ClickHouseInstallationSpecConfigurationArgs) ClickHouseInstallationSpecConfigurationPtrInput {
	return (*clickHouseInstallationSpecConfigurationPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfiguration)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationPtrType) ToClickHouseInstallationSpecConfigurationPtrOutput() ClickHouseInstallationSpecConfigurationPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationPtrType) ToClickHouseInstallationSpecConfigurationPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationPtrOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
type ClickHouseInstallationSpecConfigurationOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfiguration)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationOutput) ToClickHouseInstallationSpecConfigurationOutput() ClickHouseInstallationSpecConfigurationOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationOutput) ToClickHouseInstallationSpecConfigurationOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationOutput) ToClickHouseInstallationSpecConfigurationPtrOutput() ClickHouseInstallationSpecConfigurationPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationOutput) ToClickHouseInstallationSpecConfigurationPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfiguration) *ClickHouseInstallationSpecConfiguration {
		return &v
	}).(ClickHouseInstallationSpecConfigurationPtrOutput)
}

// describes clusters layout and allows change settings on cluster-level, shard-level and replica-level
// every cluster is a set of StatefulSet, one StatefulSet contains only one Pod with `clickhouse-server`
// all Pods will rendered in <remote_server> part of ClickHouse configs, mounted from ConfigMap as `/etc/clickhouse-server/config.d/chop-generated-remote_servers.xml`
// Clusters will use for Distributed table engine, more details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
// If `cluster` contains zookeeper settings (could be inherited from top `chi` level), when you can create *ReplicatedMergeTree tables
func (o ClickHouseInstallationSpecConfigurationOutput) Clusters() ClickHouseInstallationSpecConfigurationClustersArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfiguration) []ClickHouseInstallationSpecConfigurationClusters {
		return v.Clusters
	}).(ClickHouseInstallationSpecConfigurationClustersArrayOutput)
}

// allows define content of any setting file inside each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// every key in this object is the file name
// every value in this object is the file content
// you can use `!!binary |` and base64 for binary files, see details here https://yaml.org/type/binary.html
// each key could contains prefix like {common}, {users}, {hosts} or config.d, users.d, conf.d, wrong prefixes will be ignored, subfolders also will be ignored
// More details: https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-05-files-nested.yaml
//
// any key could contains `valueFrom` with `secretKeyRef` which allow pass values from kubernetes secrets
// secrets will mounted into pod as separate volume in /etc/clickhouse-server/secrets.d/
// and will automatically update when update secret
// it useful for pass SSL certificates from cert-manager or similar tool
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
func (o ClickHouseInstallationSpecConfigurationOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfiguration) map[string]interface{} { return v.Files }).(pulumi.MapOutput)
}

// allows configure <yandex><profiles>..</profiles></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
// you can configure any aspect of settings profile
// More details: https://clickhouse.tech/docs/en/operations/settings/settings-profiles/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationprofiles
func (o ClickHouseInstallationSpecConfigurationOutput) Profiles() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfiguration) map[string]interface{} { return v.Profiles }).(pulumi.MapOutput)
}

// allows configure <yandex><quotas>..</quotas></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
// you can configure any aspect of resource quotas
// More details: https://clickhouse.tech/docs/en/operations/quotas/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationquotas
func (o ClickHouseInstallationSpecConfigurationOutput) Quotas() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfiguration) map[string]interface{} { return v.Quotas }).(pulumi.MapOutput)
}

// allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationsettings
//
// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
//
// secret value will pass in `pod.spec.env`, and generate with from_env=XXX in XML in /etc/clickhouse-server/config.d/chop-generated-settings.xml
// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
func (o ClickHouseInstallationSpecConfigurationOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfiguration) map[string]interface{} { return v.Settings }).(pulumi.MapOutput)
}

// allows configure <yandex><users>..</users></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
// you can configure password hashed, authorization restrictions, database level security row filters etc.
// More details: https://clickhouse.tech/docs/en/operations/settings/settings-users/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationusers
//
// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
// secret value will pass in `pod.spec.containers.evn`, and generate with from_env=XXX in XML in /etc/clickhouse-server/users.d/chop-generated-users.xml
// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
//
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
//
// any key with prefix `k8s_secret_` shall has value with format namespace/secret/key or secret/key
// in this case value from secret will write directly into XML tag during render *-usersd ConfigMap
//
// any key with prefix `k8s_secret_env` shall has value with format namespace/secret/key or secret/key
// in this case value from secret will write into environment variable and write to XML tag via from_env=XXX
//
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
func (o ClickHouseInstallationSpecConfigurationOutput) Users() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfiguration) map[string]interface{} { return v.Users }).(pulumi.MapOutput)
}

// allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
// currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
// More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
func (o ClickHouseInstallationSpecConfigurationOutput) Zookeeper() ClickHouseInstallationSpecConfigurationZookeeperPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfiguration) *ClickHouseInstallationSpecConfigurationZookeeper {
		return v.Zookeeper
	}).(ClickHouseInstallationSpecConfigurationZookeeperPtrOutput)
}

type ClickHouseInstallationSpecConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfiguration)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationPtrOutput) ToClickHouseInstallationSpecConfigurationPtrOutput() ClickHouseInstallationSpecConfigurationPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationPtrOutput) ToClickHouseInstallationSpecConfigurationPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationPtrOutput) Elem() ClickHouseInstallationSpecConfigurationOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfiguration) ClickHouseInstallationSpecConfiguration {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfiguration
		return ret
	}).(ClickHouseInstallationSpecConfigurationOutput)
}

// describes clusters layout and allows change settings on cluster-level, shard-level and replica-level
// every cluster is a set of StatefulSet, one StatefulSet contains only one Pod with `clickhouse-server`
// all Pods will rendered in <remote_server> part of ClickHouse configs, mounted from ConfigMap as `/etc/clickhouse-server/config.d/chop-generated-remote_servers.xml`
// Clusters will use for Distributed table engine, more details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
// If `cluster` contains zookeeper settings (could be inherited from top `chi` level), when you can create *ReplicatedMergeTree tables
func (o ClickHouseInstallationSpecConfigurationPtrOutput) Clusters() ClickHouseInstallationSpecConfigurationClustersArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfiguration) []ClickHouseInstallationSpecConfigurationClusters {
		if v == nil {
			return nil
		}
		return v.Clusters
	}).(ClickHouseInstallationSpecConfigurationClustersArrayOutput)
}

// allows define content of any setting file inside each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// every key in this object is the file name
// every value in this object is the file content
// you can use `!!binary |` and base64 for binary files, see details here https://yaml.org/type/binary.html
// each key could contains prefix like {common}, {users}, {hosts} or config.d, users.d, conf.d, wrong prefixes will be ignored, subfolders also will be ignored
// More details: https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-05-files-nested.yaml
//
// any key could contains `valueFrom` with `secretKeyRef` which allow pass values from kubernetes secrets
// secrets will mounted into pod as separate volume in /etc/clickhouse-server/secrets.d/
// and will automatically update when update secret
// it useful for pass SSL certificates from cert-manager or similar tool
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
func (o ClickHouseInstallationSpecConfigurationPtrOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.MapOutput)
}

// allows configure <yandex><profiles>..</profiles></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
// you can configure any aspect of settings profile
// More details: https://clickhouse.tech/docs/en/operations/settings/settings-profiles/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationprofiles
func (o ClickHouseInstallationSpecConfigurationPtrOutput) Profiles() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Profiles
	}).(pulumi.MapOutput)
}

// allows configure <yandex><quotas>..</quotas></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
// you can configure any aspect of resource quotas
// More details: https://clickhouse.tech/docs/en/operations/quotas/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationquotas
func (o ClickHouseInstallationSpecConfigurationPtrOutput) Quotas() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Quotas
	}).(pulumi.MapOutput)
}

// allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationsettings
//
// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
//
// secret value will pass in `pod.spec.env`, and generate with from_env=XXX in XML in /etc/clickhouse-server/config.d/chop-generated-settings.xml
// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
func (o ClickHouseInstallationSpecConfigurationPtrOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.MapOutput)
}

// allows configure <yandex><users>..</users></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
// you can configure password hashed, authorization restrictions, database level security row filters etc.
// More details: https://clickhouse.tech/docs/en/operations/settings/settings-users/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationusers
//
// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
// secret value will pass in `pod.spec.containers.evn`, and generate with from_env=XXX in XML in /etc/clickhouse-server/users.d/chop-generated-users.xml
// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
//
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
//
// any key with prefix `k8s_secret_` shall has value with format namespace/secret/key or secret/key
// in this case value from secret will write directly into XML tag during render *-usersd ConfigMap
//
// any key with prefix `k8s_secret_env` shall has value with format namespace/secret/key or secret/key
// in this case value from secret will write into environment variable and write to XML tag via from_env=XXX
//
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
func (o ClickHouseInstallationSpecConfigurationPtrOutput) Users() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Users
	}).(pulumi.MapOutput)
}

// allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
// currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
// More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
func (o ClickHouseInstallationSpecConfigurationPtrOutput) Zookeeper() ClickHouseInstallationSpecConfigurationZookeeperPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfiguration) *ClickHouseInstallationSpecConfigurationZookeeper {
		if v == nil {
			return nil
		}
		return v.Zookeeper
	}).(ClickHouseInstallationSpecConfigurationZookeeperPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClusters struct {
	// optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files`
	Files map[string]interface{} `pulumi:"files"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure *string `pulumi:"insecure"`
	// describe current cluster layout, how much shards in cluster, how much replica in shard
	// allows override settings on each shard and replica separatelly
	Layout *ClickHouseInstallationSpecConfigurationClustersLayout `pulumi:"layout"`
	// cluster name, used to identify set of servers and wide used during generate names of related Kubernetes resources
	Name *string `pulumi:"name"`
	// Specifies whether the Pod Disruption Budget (PDB) should be managed.
	// During the next installation, if PDB management is enabled, the operator will
	// attempt to retrieve any existing PDB. If none is found, it will create a new one
	// and initiate a reconciliation loop. If PDB management is disabled, the existing PDB
	// will remain intact, and the reconciliation loop will not be executed. By default,
	// PDB management is enabled.
	PdbManaged *string `pulumi:"pdbManaged"`
	// Pod eviction is allowed if at most "pdbMaxUnavailable" pods are unavailable after the eviction,
	// i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	PdbMaxUnavailable *int `pulumi:"pdbMaxUnavailable"`
	// allow tuning reconciling process
	Reconcile *ClickHouseInstallationSpecConfigurationClustersReconcile `pulumi:"reconcile"`
	// describes how schema is propagated within replicas and shards
	SchemaPolicy *ClickHouseInstallationSpecConfigurationClustersSchemaPolicy `pulumi:"schemaPolicy"`
	// optional, shared secret value to secure cluster communications
	Secret *ClickHouseInstallationSpecConfigurationClustersSecret `pulumi:"secret"`
	// optional, open secure ports for cluster
	Secure *string `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings map[string]interface{} `pulumi:"settings"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
	// override top-level `chi.spec.configuration.templates`
	Templates *ClickHouseInstallationSpecConfigurationClustersTemplates `pulumi:"templates"`
	// optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.zookeeper` settings
	Zookeeper *ClickHouseInstallationSpecConfigurationClustersZookeeper `pulumi:"zookeeper"`
}

// ClickHouseInstallationSpecConfigurationClustersInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersArgs and ClickHouseInstallationSpecConfigurationClustersOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersArgs{...}
type ClickHouseInstallationSpecConfigurationClustersInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersOutput() ClickHouseInstallationSpecConfigurationClustersOutput
	ToClickHouseInstallationSpecConfigurationClustersOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersOutput
}

type ClickHouseInstallationSpecConfigurationClustersArgs struct {
	// optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files`
	Files pulumi.MapInput `pulumi:"files"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure pulumi.StringPtrInput `pulumi:"insecure"`
	// describe current cluster layout, how much shards in cluster, how much replica in shard
	// allows override settings on each shard and replica separatelly
	Layout ClickHouseInstallationSpecConfigurationClustersLayoutPtrInput `pulumi:"layout"`
	// cluster name, used to identify set of servers and wide used during generate names of related Kubernetes resources
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies whether the Pod Disruption Budget (PDB) should be managed.
	// During the next installation, if PDB management is enabled, the operator will
	// attempt to retrieve any existing PDB. If none is found, it will create a new one
	// and initiate a reconciliation loop. If PDB management is disabled, the existing PDB
	// will remain intact, and the reconciliation loop will not be executed. By default,
	// PDB management is enabled.
	PdbManaged pulumi.StringPtrInput `pulumi:"pdbManaged"`
	// Pod eviction is allowed if at most "pdbMaxUnavailable" pods are unavailable after the eviction,
	// i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	PdbMaxUnavailable pulumi.IntPtrInput `pulumi:"pdbMaxUnavailable"`
	// allow tuning reconciling process
	Reconcile ClickHouseInstallationSpecConfigurationClustersReconcilePtrInput `pulumi:"reconcile"`
	// describes how schema is propagated within replicas and shards
	SchemaPolicy ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrInput `pulumi:"schemaPolicy"`
	// optional, shared secret value to secure cluster communications
	Secret ClickHouseInstallationSpecConfigurationClustersSecretPtrInput `pulumi:"secret"`
	// optional, open secure ports for cluster
	Secure pulumi.StringPtrInput `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings pulumi.MapInput `pulumi:"settings"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
	// override top-level `chi.spec.configuration.templates`
	Templates ClickHouseInstallationSpecConfigurationClustersTemplatesPtrInput `pulumi:"templates"`
	// optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.zookeeper` settings
	Zookeeper ClickHouseInstallationSpecConfigurationClustersZookeeperPtrInput `pulumi:"zookeeper"`
}

func (ClickHouseInstallationSpecConfigurationClustersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClusters)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersArgs) ToClickHouseInstallationSpecConfigurationClustersOutput() ClickHouseInstallationSpecConfigurationClustersOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersArgs) ToClickHouseInstallationSpecConfigurationClustersOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersOutput)
}

// ClickHouseInstallationSpecConfigurationClustersArrayInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersArray and ClickHouseInstallationSpecConfigurationClustersArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersArrayInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersArray{ ClickHouseInstallationSpecConfigurationClustersArgs{...} }
type ClickHouseInstallationSpecConfigurationClustersArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersArrayOutput() ClickHouseInstallationSpecConfigurationClustersArrayOutput
	ToClickHouseInstallationSpecConfigurationClustersArrayOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersArrayOutput
}

type ClickHouseInstallationSpecConfigurationClustersArray []ClickHouseInstallationSpecConfigurationClustersInput

func (ClickHouseInstallationSpecConfigurationClustersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecConfigurationClusters)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersArray) ToClickHouseInstallationSpecConfigurationClustersArrayOutput() ClickHouseInstallationSpecConfigurationClustersArrayOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersArray) ToClickHouseInstallationSpecConfigurationClustersArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersArrayOutput)
}

type ClickHouseInstallationSpecConfigurationClustersOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClusters)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersOutput) ToClickHouseInstallationSpecConfigurationClustersOutput() ClickHouseInstallationSpecConfigurationClustersOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersOutput) ToClickHouseInstallationSpecConfigurationClustersOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersOutput {
	return o
}

// optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files`
func (o ClickHouseInstallationSpecConfigurationClustersOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClusters) map[string]interface{} { return v.Files }).(pulumi.MapOutput)
}

// optional, open insecure ports for cluster, defaults to "yes"
func (o ClickHouseInstallationSpecConfigurationClustersOutput) Insecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClusters) *string { return v.Insecure }).(pulumi.StringPtrOutput)
}

// describe current cluster layout, how much shards in cluster, how much replica in shard
// allows override settings on each shard and replica separatelly
func (o ClickHouseInstallationSpecConfigurationClustersOutput) Layout() ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClusters) *ClickHouseInstallationSpecConfigurationClustersLayout {
		return v.Layout
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput)
}

// cluster name, used to identify set of servers and wide used during generate names of related Kubernetes resources
func (o ClickHouseInstallationSpecConfigurationClustersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClusters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies whether the Pod Disruption Budget (PDB) should be managed.
// During the next installation, if PDB management is enabled, the operator will
// attempt to retrieve any existing PDB. If none is found, it will create a new one
// and initiate a reconciliation loop. If PDB management is disabled, the existing PDB
// will remain intact, and the reconciliation loop will not be executed. By default,
// PDB management is enabled.
func (o ClickHouseInstallationSpecConfigurationClustersOutput) PdbManaged() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClusters) *string { return v.PdbManaged }).(pulumi.StringPtrOutput)
}

// Pod eviction is allowed if at most "pdbMaxUnavailable" pods are unavailable after the eviction,
// i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions
// by specifying 0. This is a mutually exclusive setting with "minAvailable".
func (o ClickHouseInstallationSpecConfigurationClustersOutput) PdbMaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClusters) *int { return v.PdbMaxUnavailable }).(pulumi.IntPtrOutput)
}

// allow tuning reconciling process
func (o ClickHouseInstallationSpecConfigurationClustersOutput) Reconcile() ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClusters) *ClickHouseInstallationSpecConfigurationClustersReconcile {
		return v.Reconcile
	}).(ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput)
}

// describes how schema is propagated within replicas and shards
func (o ClickHouseInstallationSpecConfigurationClustersOutput) SchemaPolicy() ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClusters) *ClickHouseInstallationSpecConfigurationClustersSchemaPolicy {
		return v.SchemaPolicy
	}).(ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput)
}

// optional, shared secret value to secure cluster communications
func (o ClickHouseInstallationSpecConfigurationClustersOutput) Secret() ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClusters) *ClickHouseInstallationSpecConfigurationClustersSecret {
		return v.Secret
	}).(ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput)
}

// optional, open secure ports for cluster
func (o ClickHouseInstallationSpecConfigurationClustersOutput) Secure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClusters) *string { return v.Secure }).(pulumi.StringPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
// override top-level `chi.spec.configuration.settings`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseInstallationSpecConfigurationClustersOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClusters) map[string]interface{} { return v.Settings }).(pulumi.MapOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
// override top-level `chi.spec.configuration.templates`
func (o ClickHouseInstallationSpecConfigurationClustersOutput) Templates() ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClusters) *ClickHouseInstallationSpecConfigurationClustersTemplates {
		return v.Templates
	}).(ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput)
}

// optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// override top-level `chi.spec.configuration.zookeeper` settings
func (o ClickHouseInstallationSpecConfigurationClustersOutput) Zookeeper() ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClusters) *ClickHouseInstallationSpecConfigurationClustersZookeeper {
		return v.Zookeeper
	}).(ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecConfigurationClusters)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersArrayOutput) ToClickHouseInstallationSpecConfigurationClustersArrayOutput() ClickHouseInstallationSpecConfigurationClustersArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersArrayOutput) ToClickHouseInstallationSpecConfigurationClustersArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationSpecConfigurationClustersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationSpecConfigurationClusters {
		return vs[0].([]ClickHouseInstallationSpecConfigurationClusters)[vs[1].(int)]
	}).(ClickHouseInstallationSpecConfigurationClustersOutput)
}

// describe current cluster layout, how much shards in cluster, how much replica in shard
// allows override settings on each shard and replica separatelly
type ClickHouseInstallationSpecConfigurationClustersLayout struct {
	// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
	Replicas []ClickHouseInstallationSpecConfigurationClustersLayoutReplicas `pulumi:"replicas"`
	// how much replicas in each shards for current cluster will run in Kubernetes,
	// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
	// every shard contains 1 replica by default"
	ReplicasCount *int `pulumi:"replicasCount"`
	// optional, allows override top-level `chi.spec.configuration`, cluster-level
	// `chi.spec.configuration.clusters` settings for each shard separately,
	// use it only if you fully understand what you do"
	Shards []ClickHouseInstallationSpecConfigurationClustersLayoutShards `pulumi:"shards"`
	// how much shards for current ClickHouse cluster will run in Kubernetes,
	// each shard contains shared-nothing part of data and contains set of replicas,
	// cluster contains 1 shard by default"
	ShardsCount *int `pulumi:"shardsCount"`
}

// ClickHouseInstallationSpecConfigurationClustersLayoutInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutArgs and ClickHouseInstallationSpecConfigurationClustersLayoutOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersLayoutArgs{...}
type ClickHouseInstallationSpecConfigurationClustersLayoutInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutOutput() ClickHouseInstallationSpecConfigurationClustersLayoutOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutOutput
}

// describe current cluster layout, how much shards in cluster, how much replica in shard
// allows override settings on each shard and replica separatelly
type ClickHouseInstallationSpecConfigurationClustersLayoutArgs struct {
	// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
	Replicas ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayInput `pulumi:"replicas"`
	// how much replicas in each shards for current cluster will run in Kubernetes,
	// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
	// every shard contains 1 replica by default"
	ReplicasCount pulumi.IntPtrInput `pulumi:"replicasCount"`
	// optional, allows override top-level `chi.spec.configuration`, cluster-level
	// `chi.spec.configuration.clusters` settings for each shard separately,
	// use it only if you fully understand what you do"
	Shards ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayInput `pulumi:"shards"`
	// how much shards for current ClickHouse cluster will run in Kubernetes,
	// each shard contains shared-nothing part of data and contains set of replicas,
	// cluster contains 1 shard by default"
	ShardsCount pulumi.IntPtrInput `pulumi:"shardsCount"`
}

func (ClickHouseInstallationSpecConfigurationClustersLayoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayout)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutOutput() ClickHouseInstallationSpecConfigurationClustersLayoutOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutOutput).ToClickHouseInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersLayoutPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutArgs, ClickHouseInstallationSpecConfigurationClustersLayoutPtr and ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersLayoutArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersLayoutPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput
}

type clickHouseInstallationSpecConfigurationClustersLayoutPtrType ClickHouseInstallationSpecConfigurationClustersLayoutArgs

func ClickHouseInstallationSpecConfigurationClustersLayoutPtr(v *ClickHouseInstallationSpecConfigurationClustersLayoutArgs) ClickHouseInstallationSpecConfigurationClustersLayoutPtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersLayoutPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersLayoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersLayout)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersLayoutPtrType) ToClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersLayoutPtrType) ToClickHouseInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput)
}

// describe current cluster layout, how much shards in cluster, how much replica in shard
// allows override settings on each shard and replica separatelly
type ClickHouseInstallationSpecConfigurationClustersLayoutOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayout)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutOutput() ClickHouseInstallationSpecConfigurationClustersLayoutOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersLayout) *ClickHouseInstallationSpecConfigurationClustersLayout {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput)
}

// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
func (o ClickHouseInstallationSpecConfigurationClustersLayoutOutput) Replicas() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayout) []ClickHouseInstallationSpecConfigurationClustersLayoutReplicas {
		return v.Replicas
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput)
}

// how much replicas in each shards for current cluster will run in Kubernetes,
// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
// every shard contains 1 replica by default"
func (o ClickHouseInstallationSpecConfigurationClustersLayoutOutput) ReplicasCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayout) *int { return v.ReplicasCount }).(pulumi.IntPtrOutput)
}

// optional, allows override top-level `chi.spec.configuration`, cluster-level
// `chi.spec.configuration.clusters` settings for each shard separately,
// use it only if you fully understand what you do"
func (o ClickHouseInstallationSpecConfigurationClustersLayoutOutput) Shards() ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayout) []ClickHouseInstallationSpecConfigurationClustersLayoutShards {
		return v.Shards
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput)
}

// how much shards for current ClickHouse cluster will run in Kubernetes,
// each shard contains shared-nothing part of data and contains set of replicas,
// cluster contains 1 shard by default"
func (o ClickHouseInstallationSpecConfigurationClustersLayoutOutput) ShardsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayout) *int { return v.ShardsCount }).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersLayout)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersLayoutOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayout) ClickHouseInstallationSpecConfigurationClustersLayout {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersLayout
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutOutput)
}

// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
func (o ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput) Replicas() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayout) []ClickHouseInstallationSpecConfigurationClustersLayoutReplicas {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput)
}

// how much replicas in each shards for current cluster will run in Kubernetes,
// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
// every shard contains 1 replica by default"
func (o ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput) ReplicasCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayout) *int {
		if v == nil {
			return nil
		}
		return v.ReplicasCount
	}).(pulumi.IntPtrOutput)
}

// optional, allows override top-level `chi.spec.configuration`, cluster-level
// `chi.spec.configuration.clusters` settings for each shard separately,
// use it only if you fully understand what you do"
func (o ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput) Shards() ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayout) []ClickHouseInstallationSpecConfigurationClustersLayoutShards {
		if v == nil {
			return nil
		}
		return v.Shards
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput)
}

// how much shards for current ClickHouse cluster will run in Kubernetes,
// each shard contains shared-nothing part of data and contains set of replicas,
// cluster contains 1 shard by default"
func (o ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput) ShardsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayout) *int {
		if v == nil {
			return nil
		}
		return v.ShardsCount
	}).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutReplicas struct {
	// optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files map[string]interface{} `pulumi:"files"`
	// optional, by default replica name is generated, but you can override it and setup custom name
	Name *string `pulumi:"name"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings map[string]interface{} `pulumi:"settings"`
	// optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Shards []ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards `pulumi:"shards"`
	// optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`
	ShardsCount *int `pulumi:"shardsCount"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
	// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
	Templates *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates `pulumi:"templates"`
}

// ClickHouseInstallationSpecConfigurationClustersLayoutReplicasInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArgs and ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutReplicasInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArgs{...}
type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput
}

type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArgs struct {
	// optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files pulumi.MapInput `pulumi:"files"`
	// optional, by default replica name is generated, but you can override it and setup custom name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings pulumi.MapInput `pulumi:"settings"`
	// optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Shards ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayInput `pulumi:"shards"`
	// optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`
	ShardsCount pulumi.IntPtrInput `pulumi:"shardsCount"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
	// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
	Templates ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrInput `pulumi:"templates"`
}

func (ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicas)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput)
}

// ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArray and ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArray{ ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArgs{...} }
type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput
}

type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArray []ClickHouseInstallationSpecConfigurationClustersLayoutReplicasInput

func (ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecConfigurationClustersLayoutReplicas)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArray) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArray) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput {
	return o
}

// optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicas) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

// optional, by default replica name is generated, but you can override it and setup custom name
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicas) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicas) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

// optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput) Shards() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicas) []ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards {
		return v.Shards
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput)
}

// optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput) ShardsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicas) *int { return v.ShardsCount }).(pulumi.IntPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput) Templates() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicas) *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates {
		return v.Templates
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecConfigurationClustersLayoutReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationSpecConfigurationClustersLayoutReplicas {
		return vs[0].([]ClickHouseInstallationSpecConfigurationClustersLayoutReplicas)[vs[1].(int)]
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards struct {
	// optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files map[string]interface{} `pulumi:"files"`
	// optional, setup `Pod.spec.containers.ports` with name `http` for selected shard, override `chi.spec.templates.hostTemplates.spec.httpPort`
	// allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
	HttpPort  *int `pulumi:"httpPort"`
	HttpsPort *int `pulumi:"httpsPort"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure *string `pulumi:"insecure"`
	// optional, setup `Pod.spec.containers.ports` with name `interserver` for selected shard, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
	// allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
	InterserverHTTPPort *int `pulumi:"interserverHTTPPort"`
	// optional, by default shard name is generated, but you can override it and setup custom name
	Name *string `pulumi:"name"`
	// optional, open secure ports
	Secure *string `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings map[string]interface{} `pulumi:"settings"`
	// optional, setup `Pod.spec.containers.ports` with name `tcp` for selected shard, override `chi.spec.templates.hostTemplates.spec.tcpPort`
	// allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
	TcpPort *int `pulumi:"tcpPort"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
	// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
	Templates *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates `pulumi:"templates"`
	TlsPort   *int                                                                          `pulumi:"tlsPort"`
}

// ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArgs and ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArgs{...}
type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput
}

type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArgs struct {
	// optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files pulumi.MapInput `pulumi:"files"`
	// optional, setup `Pod.spec.containers.ports` with name `http` for selected shard, override `chi.spec.templates.hostTemplates.spec.httpPort`
	// allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
	HttpPort  pulumi.IntPtrInput `pulumi:"httpPort"`
	HttpsPort pulumi.IntPtrInput `pulumi:"httpsPort"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure pulumi.StringPtrInput `pulumi:"insecure"`
	// optional, setup `Pod.spec.containers.ports` with name `interserver` for selected shard, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
	// allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
	InterserverHTTPPort pulumi.IntPtrInput `pulumi:"interserverHTTPPort"`
	// optional, by default shard name is generated, but you can override it and setup custom name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional, open secure ports
	Secure pulumi.StringPtrInput `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings pulumi.MapInput `pulumi:"settings"`
	// optional, setup `Pod.spec.containers.ports` with name `tcp` for selected shard, override `chi.spec.templates.hostTemplates.spec.tcpPort`
	// allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
	TcpPort pulumi.IntPtrInput `pulumi:"tcpPort"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
	// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
	Templates ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput `pulumi:"templates"`
	TlsPort   pulumi.IntPtrInput                                                                   `pulumi:"tlsPort"`
}

func (ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput)
}

// ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArray and ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArray{ ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArgs{...} }
type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput
}

type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArray []ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsInput

func (ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArray) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArray) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput {
	return o
}

// optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

// optional, setup `Pod.spec.containers.ports` with name `http` for selected shard, override `chi.spec.templates.hostTemplates.spec.httpPort`
// allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards) *int { return v.HttpsPort }).(pulumi.IntPtrOutput)
}

// optional, open insecure ports for cluster, defaults to "yes"
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) Insecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards) *string { return v.Insecure }).(pulumi.StringPtrOutput)
}

// optional, setup `Pod.spec.containers.ports` with name `interserver` for selected shard, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
// allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) InterserverHTTPPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards) *int {
		return v.InterserverHTTPPort
	}).(pulumi.IntPtrOutput)
}

// optional, by default shard name is generated, but you can override it and setup custom name
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional, open secure ports
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) Secure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards) *string { return v.Secure }).(pulumi.StringPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

// optional, setup `Pod.spec.containers.ports` with name `tcp` for selected shard, override `chi.spec.templates.hostTemplates.spec.tcpPort`
// allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) TcpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards) *int { return v.TcpPort }).(pulumi.IntPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) Templates() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards) *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates {
		return v.Templates
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput)
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) TlsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards) *int { return v.TlsPort }).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards {
		return vs[0].([]ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShards)[vs[1].(int)]
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs and ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs{...}
type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput).ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs, ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtr and ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput
}

type clickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrType ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs

func ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtr(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrType) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrType) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs and ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs{...}
type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput).ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs, ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtr and ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput
}

type clickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrType ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs

func ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtr(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrType) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrType) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutShards struct {
	// DEPRECATED - to be removed soon
	DefinitionType *string `pulumi:"definitionType"`
	// optional, allows define content of any setting file inside each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`
	Files map[string]interface{} `pulumi:"files"`
	// optional, `true` by default when `chi.spec.configuration.clusters[].layout.ReplicaCount` > 1 and 0 otherwise
	// allows setup <internal_replication> setting which will use during insert into tables with `Distributed` engine for insert only in one live replica and other replicas will download inserted data during replication,
	// will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
	// More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
	InternalReplication *string `pulumi:"internalReplication"`
	// optional, by default shard name is generated, but you can override it and setup custom name
	Name *string `pulumi:"name"`
	// optional, allows override behavior for selected replicas from cluster-level `chi.spec.configuration.clusters` and shard-level `chi.spec.configuration.clusters.layout.shards`
	Replicas []ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas `pulumi:"replicas"`
	// optional, how much replicas in selected shard for selected ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
	// shard contains 1 replica by default
	// override cluster-level `chi.spec.configuration.clusters.layout.replicasCount`
	ReplicasCount *int `pulumi:"replicasCount"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.settings` and cluster-level `chi.spec.configuration.clusters.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings map[string]interface{} `pulumi:"settings"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
	// override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
	Templates *ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates `pulumi:"templates"`
	// optional, 1 by default, allows setup shard <weight> setting which will use during insert into tables with `Distributed` engine,
	// will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
	// More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
	Weight *int `pulumi:"weight"`
}

// ClickHouseInstallationSpecConfigurationClustersLayoutShardsInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutShardsArgs and ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutShardsInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersLayoutShardsArgs{...}
type ClickHouseInstallationSpecConfigurationClustersLayoutShardsInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput
}

type ClickHouseInstallationSpecConfigurationClustersLayoutShardsArgs struct {
	// DEPRECATED - to be removed soon
	DefinitionType pulumi.StringPtrInput `pulumi:"definitionType"`
	// optional, allows define content of any setting file inside each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`
	Files pulumi.MapInput `pulumi:"files"`
	// optional, `true` by default when `chi.spec.configuration.clusters[].layout.ReplicaCount` > 1 and 0 otherwise
	// allows setup <internal_replication> setting which will use during insert into tables with `Distributed` engine for insert only in one live replica and other replicas will download inserted data during replication,
	// will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
	// More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
	InternalReplication pulumi.StringPtrInput `pulumi:"internalReplication"`
	// optional, by default shard name is generated, but you can override it and setup custom name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional, allows override behavior for selected replicas from cluster-level `chi.spec.configuration.clusters` and shard-level `chi.spec.configuration.clusters.layout.shards`
	Replicas ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayInput `pulumi:"replicas"`
	// optional, how much replicas in selected shard for selected ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
	// shard contains 1 replica by default
	// override cluster-level `chi.spec.configuration.clusters.layout.replicasCount`
	ReplicasCount pulumi.IntPtrInput `pulumi:"replicasCount"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.settings` and cluster-level `chi.spec.configuration.clusters.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings pulumi.MapInput `pulumi:"settings"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
	// override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
	Templates ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrInput `pulumi:"templates"`
	// optional, 1 by default, allows setup shard <weight> setting which will use during insert into tables with `Distributed` engine,
	// will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
	// More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (ClickHouseInstallationSpecConfigurationClustersLayoutShardsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShards)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutShardsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput)
}

// ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutShardsArray and ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersLayoutShardsArray{ ClickHouseInstallationSpecConfigurationClustersLayoutShardsArgs{...} }
type ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput
}

type ClickHouseInstallationSpecConfigurationClustersLayoutShardsArray []ClickHouseInstallationSpecConfigurationClustersLayoutShardsInput

func (ClickHouseInstallationSpecConfigurationClustersLayoutShardsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecConfigurationClustersLayoutShards)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsArray) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsArray) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShards)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput {
	return o
}

// DEPRECATED - to be removed soon
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput) DefinitionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShards) *string { return v.DefinitionType }).(pulumi.StringPtrOutput)
}

// optional, allows define content of any setting file inside each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShards) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

// optional, `true` by default when `chi.spec.configuration.clusters[].layout.ReplicaCount` > 1 and 0 otherwise
// allows setup <internal_replication> setting which will use during insert into tables with `Distributed` engine for insert only in one live replica and other replicas will download inserted data during replication,
// will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
// More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput) InternalReplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShards) *string {
		return v.InternalReplication
	}).(pulumi.StringPtrOutput)
}

// optional, by default shard name is generated, but you can override it and setup custom name
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShards) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional, allows override behavior for selected replicas from cluster-level `chi.spec.configuration.clusters` and shard-level `chi.spec.configuration.clusters.layout.shards`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput) Replicas() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShards) []ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas {
		return v.Replicas
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput)
}

// optional, how much replicas in selected shard for selected ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
// shard contains 1 replica by default
// override cluster-level `chi.spec.configuration.clusters.layout.replicasCount`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput) ReplicasCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShards) *int { return v.ReplicasCount }).(pulumi.IntPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
// override top-level `chi.spec.configuration.settings` and cluster-level `chi.spec.configuration.clusters.settings`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShards) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
// override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput) Templates() ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShards) *ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates {
		return v.Templates
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput)
}

// optional, 1 by default, allows setup shard <weight> setting which will use during insert into tables with `Distributed` engine,
// will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
// More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShards) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecConfigurationClustersLayoutShards)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationSpecConfigurationClustersLayoutShards {
		return vs[0].([]ClickHouseInstallationSpecConfigurationClustersLayoutShards)[vs[1].(int)]
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas struct {
	// optional, allows define content of any setting file inside `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files`, cluster-level `chi.spec.configuration.clusters.files` and shard-level `chi.spec.configuration.clusters.layout.shards.files`
	Files map[string]interface{} `pulumi:"files"`
	// optional, setup `Pod.spec.containers.ports` with name `http` for selected replica, override `chi.spec.templates.hostTemplates.spec.httpPort`
	// allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
	HttpPort  *int `pulumi:"httpPort"`
	HttpsPort *int `pulumi:"httpsPort"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure *string `pulumi:"insecure"`
	// optional, setup `Pod.spec.containers.ports` with name `interserver` for selected replica, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
	// allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
	InterserverHTTPPort *int `pulumi:"interserverHTTPPort"`
	// optional, by default replica name is generated, but you can override it and setup custom name
	Name *string `pulumi:"name"`
	// optional, open secure ports
	Secure *string `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and shard-level `chi.spec.configuration.clusters.layout.shards.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings map[string]interface{} `pulumi:"settings"`
	// optional, setup `Pod.spec.containers.ports` with name `tcp` for selected replica, override `chi.spec.templates.hostTemplates.spec.tcpPort`
	// allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
	TcpPort *int `pulumi:"tcpPort"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
	// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
	Templates *ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates `pulumi:"templates"`
	TlsPort   *int                                                                          `pulumi:"tlsPort"`
}

// ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArgs and ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArgs{...}
type ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput
}

type ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArgs struct {
	// optional, allows define content of any setting file inside `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files`, cluster-level `chi.spec.configuration.clusters.files` and shard-level `chi.spec.configuration.clusters.layout.shards.files`
	Files pulumi.MapInput `pulumi:"files"`
	// optional, setup `Pod.spec.containers.ports` with name `http` for selected replica, override `chi.spec.templates.hostTemplates.spec.httpPort`
	// allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
	HttpPort  pulumi.IntPtrInput `pulumi:"httpPort"`
	HttpsPort pulumi.IntPtrInput `pulumi:"httpsPort"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure pulumi.StringPtrInput `pulumi:"insecure"`
	// optional, setup `Pod.spec.containers.ports` with name `interserver` for selected replica, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
	// allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
	InterserverHTTPPort pulumi.IntPtrInput `pulumi:"interserverHTTPPort"`
	// optional, by default replica name is generated, but you can override it and setup custom name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional, open secure ports
	Secure pulumi.StringPtrInput `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and shard-level `chi.spec.configuration.clusters.layout.shards.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings pulumi.MapInput `pulumi:"settings"`
	// optional, setup `Pod.spec.containers.ports` with name `tcp` for selected replica, override `chi.spec.templates.hostTemplates.spec.tcpPort`
	// allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
	TcpPort pulumi.IntPtrInput `pulumi:"tcpPort"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
	// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
	Templates ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrInput `pulumi:"templates"`
	TlsPort   pulumi.IntPtrInput                                                                   `pulumi:"tlsPort"`
}

func (ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput)
}

// ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArray and ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArray{ ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArgs{...} }
type ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput
}

type ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArray []ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasInput

func (ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArray) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArray) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput {
	return o
}

// optional, allows define content of any setting file inside `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files`, cluster-level `chi.spec.configuration.clusters.files` and shard-level `chi.spec.configuration.clusters.layout.shards.files`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

// optional, setup `Pod.spec.containers.ports` with name `http` for selected replica, override `chi.spec.templates.hostTemplates.spec.httpPort`
// allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas) *int { return v.HttpsPort }).(pulumi.IntPtrOutput)
}

// optional, open insecure ports for cluster, defaults to "yes"
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput) Insecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas) *string { return v.Insecure }).(pulumi.StringPtrOutput)
}

// optional, setup `Pod.spec.containers.ports` with name `interserver` for selected replica, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
// allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput) InterserverHTTPPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas) *int {
		return v.InterserverHTTPPort
	}).(pulumi.IntPtrOutput)
}

// optional, by default replica name is generated, but you can override it and setup custom name
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional, open secure ports
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput) Secure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas) *string { return v.Secure }).(pulumi.StringPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and shard-level `chi.spec.configuration.clusters.layout.shards.settings`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

// optional, setup `Pod.spec.containers.ports` with name `tcp` for selected replica, override `chi.spec.templates.hostTemplates.spec.tcpPort`
// allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput) TcpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas) *int { return v.TcpPort }).(pulumi.IntPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput) Templates() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas) *ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates {
		return v.Templates
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput)
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput) TlsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas) *int { return v.TlsPort }).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas {
		return vs[0].([]ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicas)[vs[1].(int)]
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
type ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs and ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs{...}
type ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
type ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput).ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs, ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtr and ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput
}

type clickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrType ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs

func ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtr(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrType) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrType) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
type ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
// override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs and ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs{...}
type ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
// override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput).ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs, ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtr and ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput
	ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput
}

type clickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrType ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs

func ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtr(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs) ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrType) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrType) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
// override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ToClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// allow tuning reconciling process
type ClickHouseInstallationSpecConfigurationClustersReconcile struct {
	// Whether the operator during reconcile procedure should wait for a ClickHouse host:
	//   - to be excluded from a ClickHouse cluster
	//   - to complete all running queries
	//   - to be included into a ClickHouse cluster
	//     respectfully before moving forward
	Host *ClickHouseInstallationSpecConfigurationClustersReconcileHost `pulumi:"host"`
	// runtime parameters for clickhouse-operator process which are used during reconcile cycle
	Runtime *ClickHouseInstallationSpecConfigurationClustersReconcileRuntime `pulumi:"runtime"`
}

// ClickHouseInstallationSpecConfigurationClustersReconcileInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersReconcileArgs and ClickHouseInstallationSpecConfigurationClustersReconcileOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersReconcileInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersReconcileArgs{...}
type ClickHouseInstallationSpecConfigurationClustersReconcileInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersReconcileOutput() ClickHouseInstallationSpecConfigurationClustersReconcileOutput
	ToClickHouseInstallationSpecConfigurationClustersReconcileOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileOutput
}

// allow tuning reconciling process
type ClickHouseInstallationSpecConfigurationClustersReconcileArgs struct {
	// Whether the operator during reconcile procedure should wait for a ClickHouse host:
	//   - to be excluded from a ClickHouse cluster
	//   - to complete all running queries
	//   - to be included into a ClickHouse cluster
	//     respectfully before moving forward
	Host ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrInput `pulumi:"host"`
	// runtime parameters for clickhouse-operator process which are used during reconcile cycle
	Runtime ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrInput `pulumi:"runtime"`
}

func (ClickHouseInstallationSpecConfigurationClustersReconcileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcile)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileOutput() ClickHouseInstallationSpecConfigurationClustersReconcileOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileArgs) ToClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcilePtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileArgs) ToClickHouseInstallationSpecConfigurationClustersReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileOutput).ToClickHouseInstallationSpecConfigurationClustersReconcilePtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersReconcilePtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersReconcileArgs, ClickHouseInstallationSpecConfigurationClustersReconcilePtr and ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersReconcilePtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersReconcileArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersReconcilePtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput
	ToClickHouseInstallationSpecConfigurationClustersReconcilePtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput
}

type clickHouseInstallationSpecConfigurationClustersReconcilePtrType ClickHouseInstallationSpecConfigurationClustersReconcileArgs

func ClickHouseInstallationSpecConfigurationClustersReconcilePtr(v *ClickHouseInstallationSpecConfigurationClustersReconcileArgs) ClickHouseInstallationSpecConfigurationClustersReconcilePtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersReconcilePtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersReconcilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersReconcile)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersReconcilePtrType) ToClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcilePtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersReconcilePtrType) ToClickHouseInstallationSpecConfigurationClustersReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput)
}

// allow tuning reconciling process
type ClickHouseInstallationSpecConfigurationClustersReconcileOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersReconcileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcile)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileOutput() ClickHouseInstallationSpecConfigurationClustersReconcileOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileOutput) ToClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersReconcilePtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileOutput) ToClickHouseInstallationSpecConfigurationClustersReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersReconcile) *ClickHouseInstallationSpecConfigurationClustersReconcile {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
func (o ClickHouseInstallationSpecConfigurationClustersReconcileOutput) Host() ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersReconcile) *ClickHouseInstallationSpecConfigurationClustersReconcileHost {
		return v.Host
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
func (o ClickHouseInstallationSpecConfigurationClustersReconcileOutput) Runtime() ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersReconcile) *ClickHouseInstallationSpecConfigurationClustersReconcileRuntime {
		return v.Runtime
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersReconcile)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput) ToClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput) ToClickHouseInstallationSpecConfigurationClustersReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersReconcileOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcile) ClickHouseInstallationSpecConfigurationClustersReconcile {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersReconcile
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
func (o ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput) Host() ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcile) *ClickHouseInstallationSpecConfigurationClustersReconcileHost {
		if v == nil {
			return nil
		}
		return v.Host
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
func (o ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput) Runtime() ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcile) *ClickHouseInstallationSpecConfigurationClustersReconcileRuntime {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationSpecConfigurationClustersReconcileHost struct {
	Wait *ClickHouseInstallationSpecConfigurationClustersReconcileHostWait `pulumi:"wait"`
}

// ClickHouseInstallationSpecConfigurationClustersReconcileHostInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersReconcileHostArgs and ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersReconcileHostInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersReconcileHostArgs{...}
type ClickHouseInstallationSpecConfigurationClustersReconcileHostInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersReconcileHostOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput
	ToClickHouseInstallationSpecConfigurationClustersReconcileHostOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationSpecConfigurationClustersReconcileHostArgs struct {
	Wait ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrInput `pulumi:"wait"`
}

func (ClickHouseInstallationSpecConfigurationClustersReconcileHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHost)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileHostOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput).ToClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersReconcileHostArgs, ClickHouseInstallationSpecConfigurationClustersReconcileHostPtr and ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersReconcileHostArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput
	ToClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput
}

type clickHouseInstallationSpecConfigurationClustersReconcileHostPtrType ClickHouseInstallationSpecConfigurationClustersReconcileHostArgs

func ClickHouseInstallationSpecConfigurationClustersReconcileHostPtr(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostArgs) ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersReconcileHostPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersReconcileHostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersReconcileHost)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersReconcileHostPtrType) ToClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersReconcileHostPtrType) ToClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHost)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersReconcileHost) *ClickHouseInstallationSpecConfigurationClustersReconcileHost {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput)
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput) Wait() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersReconcileHost) *ClickHouseInstallationSpecConfigurationClustersReconcileHostWait {
		return v.Wait
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersReconcileHost)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileHost) ClickHouseInstallationSpecConfigurationClustersReconcileHost {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersReconcileHost
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput)
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput) Wait() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileHost) *ClickHouseInstallationSpecConfigurationClustersReconcileHostWait {
		if v == nil {
			return nil
		}
		return v.Wait
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersReconcileHostWait struct {
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Exclude *string `pulumi:"exclude"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
	Include *string `pulumi:"include"`
	// What probes the operator should wait during host launch procedure
	Probes *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes `pulumi:"probes"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
	Queries *string `pulumi:"queries"`
	// Whether the operator during reconcile procedure should wait for replicas to catch-up
	Replicas *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas `pulumi:"replicas"`
}

// ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitArgs and ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitArgs{...}
type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput
	ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput
}

type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitArgs struct {
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Exclude pulumi.StringPtrInput `pulumi:"exclude"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
	Include pulumi.StringPtrInput `pulumi:"include"`
	// What probes the operator should wait during host launch procedure
	Probes ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrInput `pulumi:"probes"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
	Queries pulumi.StringPtrInput `pulumi:"queries"`
	// Whether the operator during reconcile procedure should wait for replicas to catch-up
	Replicas ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrInput `pulumi:"replicas"`
}

func (ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHostWait)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput).ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitArgs, ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtr and ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput
	ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput
}

type clickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrType ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitArgs

func ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtr(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitArgs) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersReconcileHostWait)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrType) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrType) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHostWait)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersReconcileHostWait) *ClickHouseInstallationSpecConfigurationClustersReconcileHostWait {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput) Exclude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersReconcileHostWait) *string { return v.Exclude }).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput) Include() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersReconcileHostWait) *string { return v.Include }).(pulumi.StringPtrOutput)
}

// What probes the operator should wait during host launch procedure
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput) Probes() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersReconcileHostWait) *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes {
		return v.Probes
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput) Queries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersReconcileHostWait) *string { return v.Queries }).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput) Replicas() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersReconcileHostWait) *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas {
		return v.Replicas
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersReconcileHostWait)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWait) ClickHouseInstallationSpecConfigurationClustersReconcileHostWait {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersReconcileHostWait
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput) Exclude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Exclude
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput) Include() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Include
	}).(pulumi.StringPtrOutput)
}

// What probes the operator should wait during host launch procedure
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput) Probes() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWait) *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput) Queries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Queries
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput) Replicas() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWait) *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput)
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes struct {
	// Whether the operator during host launch procedure should wait for ready probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to wait.
	Readiness *string `pulumi:"readiness"`
	// Whether the operator during host launch procedure should wait for startup probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to do not wait.
	Startup *string `pulumi:"startup"`
}

// ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesArgs and ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesArgs{...}
type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput
	ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesArgs struct {
	// Whether the operator during host launch procedure should wait for ready probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to wait.
	Readiness pulumi.StringPtrInput `pulumi:"readiness"`
	// Whether the operator during host launch procedure should wait for startup probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to do not wait.
	Startup pulumi.StringPtrInput `pulumi:"startup"`
}

func (ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput).ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesArgs, ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtr and ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput
	ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput
}

type clickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrType ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesArgs

func ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtr(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesArgs) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrType) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrType) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput)
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes) *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput)
}

// Whether the operator during host launch procedure should wait for ready probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to wait.
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput) Readiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes) *string {
		return v.Readiness
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during host launch procedure should wait for startup probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to do not wait.
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput) Startup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes) *string {
		return v.Startup
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput)
}

// Whether the operator during host launch procedure should wait for ready probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to wait.
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput) Readiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes) *string {
		if v == nil {
			return nil
		}
		return v.Readiness
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during host launch procedure should wait for startup probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to do not wait.
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput) Startup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbes) *string {
		if v == nil {
			return nil
		}
		return v.Startup
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas struct {
	// Whether the operator during reconcile procedure should wait for all replicas to catch-up
	All *string `pulumi:"all"`
	// replication max absolute delay to consider replica is not delayed
	Delay *int `pulumi:"delay"`
	// Whether the operator during reconcile procedure should wait for new replicas to catch-up
	New *string `pulumi:"new"`
}

// ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasArgs and ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasArgs{...}
type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput
	ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasArgs struct {
	// Whether the operator during reconcile procedure should wait for all replicas to catch-up
	All pulumi.StringPtrInput `pulumi:"all"`
	// replication max absolute delay to consider replica is not delayed
	Delay pulumi.IntPtrInput `pulumi:"delay"`
	// Whether the operator during reconcile procedure should wait for new replicas to catch-up
	New pulumi.StringPtrInput `pulumi:"new"`
}

func (ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput).ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasArgs, ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtr and ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput
	ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput
}

type clickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrType ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasArgs

func ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtr(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasArgs) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrType) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrType) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas) *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput)
}

// Whether the operator during reconcile procedure should wait for all replicas to catch-up
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput) All() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas) *string { return v.All }).(pulumi.StringPtrOutput)
}

// replication max absolute delay to consider replica is not delayed
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput) Delay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas) *int { return v.Delay }).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for new replicas to catch-up
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput) New() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas) *string { return v.New }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas) ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput)
}

// Whether the operator during reconcile procedure should wait for all replicas to catch-up
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput) All() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas) *string {
		if v == nil {
			return nil
		}
		return v.All
	}).(pulumi.StringPtrOutput)
}

// replication max absolute delay to consider replica is not delayed
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput) Delay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas) *int {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for new replicas to catch-up
func (o ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput) New() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicas) *string {
		if v == nil {
			return nil
		}
		return v.New
	}).(pulumi.StringPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationSpecConfigurationClustersReconcileRuntime struct {
	// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
	ReconcileShardsMaxConcurrencyPercent *int `pulumi:"reconcileShardsMaxConcurrencyPercent"`
	// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
	ReconcileShardsThreadsNumber *int `pulumi:"reconcileShardsThreadsNumber"`
}

// ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeArgs and ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeArgs{...}
type ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput() ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput
	ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeArgs struct {
	// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
	ReconcileShardsMaxConcurrencyPercent pulumi.IntPtrInput `pulumi:"reconcileShardsMaxConcurrencyPercent"`
	// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
	ReconcileShardsThreadsNumber pulumi.IntPtrInput `pulumi:"reconcileShardsThreadsNumber"`
}

func (ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileRuntime)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput() ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeArgs) ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput).ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeArgs, ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtr and ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput
	ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput
}

type clickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrType ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeArgs

func ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtr(v *ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeArgs) ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersReconcileRuntime)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrType) ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrType) ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileRuntime)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput() ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersReconcileRuntime) *ClickHouseInstallationSpecConfigurationClustersReconcileRuntime {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput)
}

// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
func (o ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput) ReconcileShardsMaxConcurrencyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersReconcileRuntime) *int {
		return v.ReconcileShardsMaxConcurrencyPercent
	}).(pulumi.IntPtrOutput)
}

// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
func (o ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput) ReconcileShardsThreadsNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersReconcileRuntime) *int {
		return v.ReconcileShardsThreadsNumber
	}).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersReconcileRuntime)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput() ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput) ToClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileRuntime) ClickHouseInstallationSpecConfigurationClustersReconcileRuntime {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersReconcileRuntime
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput)
}

// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
func (o ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput) ReconcileShardsMaxConcurrencyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileRuntime) *int {
		if v == nil {
			return nil
		}
		return v.ReconcileShardsMaxConcurrencyPercent
	}).(pulumi.IntPtrOutput)
}

// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
func (o ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput) ReconcileShardsThreadsNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersReconcileRuntime) *int {
		if v == nil {
			return nil
		}
		return v.ReconcileShardsThreadsNumber
	}).(pulumi.IntPtrOutput)
}

// describes how schema is propagated within replicas and shards
type ClickHouseInstallationSpecConfigurationClustersSchemaPolicy struct {
	// how schema is propagated within a replica
	Replica *string `pulumi:"replica"`
	// how schema is propagated between shards
	Shard *string `pulumi:"shard"`
}

// ClickHouseInstallationSpecConfigurationClustersSchemaPolicyInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersSchemaPolicyArgs and ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersSchemaPolicyInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersSchemaPolicyArgs{...}
type ClickHouseInstallationSpecConfigurationClustersSchemaPolicyInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput() ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput
	ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput
}

// describes how schema is propagated within replicas and shards
type ClickHouseInstallationSpecConfigurationClustersSchemaPolicyArgs struct {
	// how schema is propagated within a replica
	Replica pulumi.StringPtrInput `pulumi:"replica"`
	// how schema is propagated between shards
	Shard pulumi.StringPtrInput `pulumi:"shard"`
}

func (ClickHouseInstallationSpecConfigurationClustersSchemaPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSchemaPolicy)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersSchemaPolicyArgs) ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput() ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersSchemaPolicyArgs) ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersSchemaPolicyArgs) ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput() ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersSchemaPolicyArgs) ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput).ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersSchemaPolicyArgs, ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtr and ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersSchemaPolicyArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput() ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput
	ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput
}

type clickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrType ClickHouseInstallationSpecConfigurationClustersSchemaPolicyArgs

func ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtr(v *ClickHouseInstallationSpecConfigurationClustersSchemaPolicyArgs) ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersSchemaPolicy)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrType) ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput() ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrType) ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput)
}

// describes how schema is propagated within replicas and shards
type ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSchemaPolicy)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput) ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput() ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput) ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput) ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput() ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput) ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersSchemaPolicy) *ClickHouseInstallationSpecConfigurationClustersSchemaPolicy {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput)
}

// how schema is propagated within a replica
func (o ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput) Replica() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersSchemaPolicy) *string { return v.Replica }).(pulumi.StringPtrOutput)
}

// how schema is propagated between shards
func (o ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput) Shard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersSchemaPolicy) *string { return v.Shard }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersSchemaPolicy)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput) ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput() ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput) ToClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersSchemaPolicy) ClickHouseInstallationSpecConfigurationClustersSchemaPolicy {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersSchemaPolicy
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput)
}

// how schema is propagated within a replica
func (o ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput) Replica() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersSchemaPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Replica
	}).(pulumi.StringPtrOutput)
}

// how schema is propagated between shards
func (o ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput) Shard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersSchemaPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Shard
	}).(pulumi.StringPtrOutput)
}

// optional, shared secret value to secure cluster communications
type ClickHouseInstallationSpecConfigurationClustersSecret struct {
	// Auto-generate shared secret value to secure cluster communications
	Auto *string `pulumi:"auto"`
	// Cluster shared secret value in plain text
	Value *string `pulumi:"value"`
	// Cluster shared secret source
	ValueFrom *ClickHouseInstallationSpecConfigurationClustersSecretValueFrom `pulumi:"valueFrom"`
}

// ClickHouseInstallationSpecConfigurationClustersSecretInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersSecretArgs and ClickHouseInstallationSpecConfigurationClustersSecretOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersSecretInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersSecretArgs{...}
type ClickHouseInstallationSpecConfigurationClustersSecretInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersSecretOutput() ClickHouseInstallationSpecConfigurationClustersSecretOutput
	ToClickHouseInstallationSpecConfigurationClustersSecretOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersSecretOutput
}

// optional, shared secret value to secure cluster communications
type ClickHouseInstallationSpecConfigurationClustersSecretArgs struct {
	// Auto-generate shared secret value to secure cluster communications
	Auto pulumi.StringPtrInput `pulumi:"auto"`
	// Cluster shared secret value in plain text
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Cluster shared secret source
	ValueFrom ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrInput `pulumi:"valueFrom"`
}

func (ClickHouseInstallationSpecConfigurationClustersSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSecret)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersSecretArgs) ToClickHouseInstallationSpecConfigurationClustersSecretOutput() ClickHouseInstallationSpecConfigurationClustersSecretOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersSecretOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersSecretArgs) ToClickHouseInstallationSpecConfigurationClustersSecretOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersSecretOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersSecretArgs) ToClickHouseInstallationSpecConfigurationClustersSecretPtrOutput() ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersSecretPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersSecretArgs) ToClickHouseInstallationSpecConfigurationClustersSecretPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersSecretOutput).ToClickHouseInstallationSpecConfigurationClustersSecretPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersSecretPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersSecretArgs, ClickHouseInstallationSpecConfigurationClustersSecretPtr and ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersSecretPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersSecretArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersSecretPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersSecretPtrOutput() ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput
	ToClickHouseInstallationSpecConfigurationClustersSecretPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput
}

type clickHouseInstallationSpecConfigurationClustersSecretPtrType ClickHouseInstallationSpecConfigurationClustersSecretArgs

func ClickHouseInstallationSpecConfigurationClustersSecretPtr(v *ClickHouseInstallationSpecConfigurationClustersSecretArgs) ClickHouseInstallationSpecConfigurationClustersSecretPtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersSecretPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersSecret)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersSecretPtrType) ToClickHouseInstallationSpecConfigurationClustersSecretPtrOutput() ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersSecretPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersSecretPtrType) ToClickHouseInstallationSpecConfigurationClustersSecretPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput)
}

// optional, shared secret value to secure cluster communications
type ClickHouseInstallationSpecConfigurationClustersSecretOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSecret)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretOutput) ToClickHouseInstallationSpecConfigurationClustersSecretOutput() ClickHouseInstallationSpecConfigurationClustersSecretOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretOutput) ToClickHouseInstallationSpecConfigurationClustersSecretOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretOutput) ToClickHouseInstallationSpecConfigurationClustersSecretPtrOutput() ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersSecretPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretOutput) ToClickHouseInstallationSpecConfigurationClustersSecretPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersSecret) *ClickHouseInstallationSpecConfigurationClustersSecret {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput)
}

// Auto-generate shared secret value to secure cluster communications
func (o ClickHouseInstallationSpecConfigurationClustersSecretOutput) Auto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersSecret) *string { return v.Auto }).(pulumi.StringPtrOutput)
}

// Cluster shared secret value in plain text
func (o ClickHouseInstallationSpecConfigurationClustersSecretOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersSecret) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Cluster shared secret source
func (o ClickHouseInstallationSpecConfigurationClustersSecretOutput) ValueFrom() ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersSecret) *ClickHouseInstallationSpecConfigurationClustersSecretValueFrom {
		return v.ValueFrom
	}).(ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersSecret)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput) ToClickHouseInstallationSpecConfigurationClustersSecretPtrOutput() ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput) ToClickHouseInstallationSpecConfigurationClustersSecretPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersSecretOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersSecret) ClickHouseInstallationSpecConfigurationClustersSecret {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersSecret
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersSecretOutput)
}

// Auto-generate shared secret value to secure cluster communications
func (o ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput) Auto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersSecret) *string {
		if v == nil {
			return nil
		}
		return v.Auto
	}).(pulumi.StringPtrOutput)
}

// Cluster shared secret value in plain text
func (o ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersSecret) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// Cluster shared secret source
func (o ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput) ValueFrom() ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersSecret) *ClickHouseInstallationSpecConfigurationClustersSecretValueFrom {
		if v == nil {
			return nil
		}
		return v.ValueFrom
	}).(ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput)
}

// Cluster shared secret source
type ClickHouseInstallationSpecConfigurationClustersSecretValueFrom struct {
	// Selects a key of a secret in the clickhouse installation namespace.
	// Should not be used if value is not empty.
	SecretKeyRef *ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// ClickHouseInstallationSpecConfigurationClustersSecretValueFromInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersSecretValueFromArgs and ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersSecretValueFromInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersSecretValueFromArgs{...}
type ClickHouseInstallationSpecConfigurationClustersSecretValueFromInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput
	ToClickHouseInstallationSpecConfigurationClustersSecretValueFromOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput
}

// Cluster shared secret source
type ClickHouseInstallationSpecConfigurationClustersSecretValueFromArgs struct {
	// Selects a key of a secret in the clickhouse installation namespace.
	// Should not be used if value is not empty.
	SecretKeyRef ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (ClickHouseInstallationSpecConfigurationClustersSecretValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSecretValueFrom)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersSecretValueFromArgs) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersSecretValueFromOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersSecretValueFromArgs) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersSecretValueFromArgs) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersSecretValueFromArgs) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput).ToClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersSecretValueFromArgs, ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtr and ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersSecretValueFromArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput
	ToClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput
}

type clickHouseInstallationSpecConfigurationClustersSecretValueFromPtrType ClickHouseInstallationSpecConfigurationClustersSecretValueFromArgs

func ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtr(v *ClickHouseInstallationSpecConfigurationClustersSecretValueFromArgs) ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersSecretValueFromPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersSecretValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersSecretValueFrom)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersSecretValueFromPtrType) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersSecretValueFromPtrType) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput)
}

// Cluster shared secret source
type ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSecretValueFrom)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersSecretValueFrom) *ClickHouseInstallationSpecConfigurationClustersSecretValueFrom {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput)
}

// Selects a key of a secret in the clickhouse installation namespace.
// Should not be used if value is not empty.
func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput) SecretKeyRef() ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersSecretValueFrom) *ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersSecretValueFrom)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersSecretValueFrom) ClickHouseInstallationSpecConfigurationClustersSecretValueFrom {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersSecretValueFrom
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput)
}

// Selects a key of a secret in the clickhouse installation namespace.
// Should not be used if value is not empty.
func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput) SecretKeyRef() ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersSecretValueFrom) *ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the clickhouse installation namespace.
// Should not be used if value is not empty.
type ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef struct {
	// The key of the secret to select from. Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefArgs and ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefArgs{...}
type ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput
	ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the clickhouse installation namespace.
// Should not be used if value is not empty.
type ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from. Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefArgs) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefArgs) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefArgs) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefArgs) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput).ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefArgs, ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtr and ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput
	ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput
}

type clickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrType ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefArgs

func ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtr(v *ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefArgs) ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrType) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrType) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the clickhouse installation namespace.
// Should not be used if value is not empty.
type ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef) *ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from. Must be a valid secret key.
func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// Name of the referent. More info:
// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef) string {
		return v.Name
	}).(pulumi.StringOutput)
}

// Specify whether the Secret or its key must be defined
func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef) *bool {
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput() ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput) ToClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef) ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput)
}

// The key of the secret to select from. Must be a valid secret key.
func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info:
// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
// override top-level `chi.spec.configuration.templates`
type ClickHouseInstallationSpecConfigurationClustersTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseInstallationSpecConfigurationClustersTemplatesInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersTemplatesArgs and ClickHouseInstallationSpecConfigurationClustersTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersTemplatesInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersTemplatesArgs{...}
type ClickHouseInstallationSpecConfigurationClustersTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersTemplatesOutput() ClickHouseInstallationSpecConfigurationClustersTemplatesOutput
	ToClickHouseInstallationSpecConfigurationClustersTemplatesOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
// override top-level `chi.spec.configuration.templates`
type ClickHouseInstallationSpecConfigurationClustersTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseInstallationSpecConfigurationClustersTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersTemplatesOutput() ClickHouseInstallationSpecConfigurationClustersTemplatesOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersTemplatesOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersTemplatesArgs) ToClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersTemplatesOutput).ToClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersTemplatesPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersTemplatesArgs, ClickHouseInstallationSpecConfigurationClustersTemplatesPtr and ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersTemplatesPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput
	ToClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput
}

type clickHouseInstallationSpecConfigurationClustersTemplatesPtrType ClickHouseInstallationSpecConfigurationClustersTemplatesArgs

func ClickHouseInstallationSpecConfigurationClustersTemplatesPtr(v *ClickHouseInstallationSpecConfigurationClustersTemplatesArgs) ClickHouseInstallationSpecConfigurationClustersTemplatesPtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersTemplatesPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersTemplatesPtrType) ToClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersTemplatesPtrType) ToClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
// override top-level `chi.spec.configuration.templates`
type ClickHouseInstallationSpecConfigurationClustersTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersTemplatesOutput() ClickHouseInstallationSpecConfigurationClustersTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersTemplatesOutput) ToClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersTemplates) *ClickHouseInstallationSpecConfigurationClustersTemplates {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersTemplates) *string { return v.HostTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersTemplates) *string { return v.PodTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersTemplates) *string { return v.ServiceTemplate }).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersTemplates) []string { return v.ServiceTemplates }).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersTemplates) *string { return v.VolumeClaimTemplate }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput) ToClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput() ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput) ToClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersTemplates) ClickHouseInstallationSpecConfigurationClustersTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersTemplates
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// override top-level `chi.spec.configuration.zookeeper` settings
type ClickHouseInstallationSpecConfigurationClustersZookeeper struct {
	// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
	Identity *string `pulumi:"identity"`
	// describe every available zookeeper cluster node for interaction
	Nodes []ClickHouseInstallationSpecConfigurationClustersZookeeperNodes `pulumi:"nodes"`
	// one operation timeout during Zookeeper transactions
	Operation_timeout_ms *int `pulumi:"operation_timeout_ms"`
	// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
	Root *string `pulumi:"root"`
	// session timeout during connect to Zookeeper
	Session_timeout_ms *int `pulumi:"session_timeout_ms"`
	// Enables compression in Keeper protocol if set to true
	Use_compression *string `pulumi:"use_compression"`
}

// ClickHouseInstallationSpecConfigurationClustersZookeeperInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersZookeeperArgs and ClickHouseInstallationSpecConfigurationClustersZookeeperOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersZookeeperInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersZookeeperArgs{...}
type ClickHouseInstallationSpecConfigurationClustersZookeeperInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersZookeeperOutput() ClickHouseInstallationSpecConfigurationClustersZookeeperOutput
	ToClickHouseInstallationSpecConfigurationClustersZookeeperOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersZookeeperOutput
}

// optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// override top-level `chi.spec.configuration.zookeeper` settings
type ClickHouseInstallationSpecConfigurationClustersZookeeperArgs struct {
	// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
	Identity pulumi.StringPtrInput `pulumi:"identity"`
	// describe every available zookeeper cluster node for interaction
	Nodes ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayInput `pulumi:"nodes"`
	// one operation timeout during Zookeeper transactions
	Operation_timeout_ms pulumi.IntPtrInput `pulumi:"operation_timeout_ms"`
	// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
	Root pulumi.StringPtrInput `pulumi:"root"`
	// session timeout during connect to Zookeeper
	Session_timeout_ms pulumi.IntPtrInput `pulumi:"session_timeout_ms"`
	// Enables compression in Keeper protocol if set to true
	Use_compression pulumi.StringPtrInput `pulumi:"use_compression"`
}

func (ClickHouseInstallationSpecConfigurationClustersZookeeperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersZookeeper)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersZookeeperArgs) ToClickHouseInstallationSpecConfigurationClustersZookeeperOutput() ClickHouseInstallationSpecConfigurationClustersZookeeperOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersZookeeperOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersZookeeperArgs) ToClickHouseInstallationSpecConfigurationClustersZookeeperOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersZookeeperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersZookeeperOutput)
}

func (i ClickHouseInstallationSpecConfigurationClustersZookeeperArgs) ToClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput() ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersZookeeperArgs) ToClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersZookeeperOutput).ToClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationClustersZookeeperPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersZookeeperArgs, ClickHouseInstallationSpecConfigurationClustersZookeeperPtr and ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersZookeeperPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationClustersZookeeperArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationClustersZookeeperPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput() ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput
	ToClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput
}

type clickHouseInstallationSpecConfigurationClustersZookeeperPtrType ClickHouseInstallationSpecConfigurationClustersZookeeperArgs

func ClickHouseInstallationSpecConfigurationClustersZookeeperPtr(v *ClickHouseInstallationSpecConfigurationClustersZookeeperArgs) ClickHouseInstallationSpecConfigurationClustersZookeeperPtrInput {
	return (*clickHouseInstallationSpecConfigurationClustersZookeeperPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationClustersZookeeperPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersZookeeper)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationClustersZookeeperPtrType) ToClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput() ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationClustersZookeeperPtrType) ToClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput)
}

// optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// override top-level `chi.spec.configuration.zookeeper` settings
type ClickHouseInstallationSpecConfigurationClustersZookeeperOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersZookeeperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersZookeeper)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersZookeeperOutput) ToClickHouseInstallationSpecConfigurationClustersZookeeperOutput() ClickHouseInstallationSpecConfigurationClustersZookeeperOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersZookeeperOutput) ToClickHouseInstallationSpecConfigurationClustersZookeeperOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersZookeeperOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersZookeeperOutput) ToClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput() ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationClustersZookeeperOutput) ToClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationClustersZookeeper) *ClickHouseInstallationSpecConfigurationClustersZookeeper {
		return &v
	}).(ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput)
}

// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersZookeeper) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// describe every available zookeeper cluster node for interaction
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperOutput) Nodes() ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersZookeeper) []ClickHouseInstallationSpecConfigurationClustersZookeeperNodes {
		return v.Nodes
	}).(ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput)
}

// one operation timeout during Zookeeper transactions
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperOutput) Operation_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersZookeeper) *int { return v.Operation_timeout_ms }).(pulumi.IntPtrOutput)
}

// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperOutput) Root() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersZookeeper) *string { return v.Root }).(pulumi.StringPtrOutput)
}

// session timeout during connect to Zookeeper
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperOutput) Session_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersZookeeper) *int { return v.Session_timeout_ms }).(pulumi.IntPtrOutput)
}

// Enables compression in Keeper protocol if set to true
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperOutput) Use_compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersZookeeper) *string { return v.Use_compression }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationClustersZookeeper)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput) ToClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput() ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput) ToClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput) Elem() ClickHouseInstallationSpecConfigurationClustersZookeeperOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersZookeeper) ClickHouseInstallationSpecConfigurationClustersZookeeper {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationClustersZookeeper
		return ret
	}).(ClickHouseInstallationSpecConfigurationClustersZookeeperOutput)
}

// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersZookeeper) *string {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(pulumi.StringPtrOutput)
}

// describe every available zookeeper cluster node for interaction
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput) Nodes() ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersZookeeper) []ClickHouseInstallationSpecConfigurationClustersZookeeperNodes {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput)
}

// one operation timeout during Zookeeper transactions
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput) Operation_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersZookeeper) *int {
		if v == nil {
			return nil
		}
		return v.Operation_timeout_ms
	}).(pulumi.IntPtrOutput)
}

// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput) Root() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersZookeeper) *string {
		if v == nil {
			return nil
		}
		return v.Root
	}).(pulumi.StringPtrOutput)
}

// session timeout during connect to Zookeeper
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput) Session_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersZookeeper) *int {
		if v == nil {
			return nil
		}
		return v.Session_timeout_ms
	}).(pulumi.IntPtrOutput)
}

// Enables compression in Keeper protocol if set to true
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput) Use_compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationClustersZookeeper) *string {
		if v == nil {
			return nil
		}
		return v.Use_compression
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersZookeeperNodes struct {
	// availability zone for Zookeeper node
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// dns name or ip address for Zookeeper node
	Host *string `pulumi:"host"`
	// TCP port which used to connect to Zookeeper node
	Port *int `pulumi:"port"`
	// if a secure connection to Zookeeper is required
	Secure *string `pulumi:"secure"`
}

// ClickHouseInstallationSpecConfigurationClustersZookeeperNodesInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArgs and ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersZookeeperNodesInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArgs{...}
type ClickHouseInstallationSpecConfigurationClustersZookeeperNodesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput() ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput
	ToClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput
}

type ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArgs struct {
	// availability zone for Zookeeper node
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// dns name or ip address for Zookeeper node
	Host pulumi.StringPtrInput `pulumi:"host"`
	// TCP port which used to connect to Zookeeper node
	Port pulumi.IntPtrInput `pulumi:"port"`
	// if a secure connection to Zookeeper is required
	Secure pulumi.StringPtrInput `pulumi:"secure"`
}

func (ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersZookeeperNodes)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArgs) ToClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput() ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArgs) ToClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput)
}

// ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayInput is an input type that accepts ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArray and ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayInput` via:
//
//	ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArray{ ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArgs{...} }
type ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput() ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput
	ToClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput
}

type ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArray []ClickHouseInstallationSpecConfigurationClustersZookeeperNodesInput

func (ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecConfigurationClustersZookeeperNodes)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArray) ToClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput() ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput {
	return i.ToClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArray) ToClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput)
}

type ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersZookeeperNodes)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput) ToClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput() ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput) ToClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput {
	return o
}

// availability zone for Zookeeper node
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersZookeeperNodes) *string {
		return v.AvailabilityZone
	}).(pulumi.StringPtrOutput)
}

// dns name or ip address for Zookeeper node
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersZookeeperNodes) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// TCP port which used to connect to Zookeeper node
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersZookeeperNodes) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// if a secure connection to Zookeeper is required
func (o ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput) Secure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationClustersZookeeperNodes) *string { return v.Secure }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecConfigurationClustersZookeeperNodes)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput) ToClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput() ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput) ToClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationSpecConfigurationClustersZookeeperNodes {
		return vs[0].([]ClickHouseInstallationSpecConfigurationClustersZookeeperNodes)[vs[1].(int)]
	}).(ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput)
}

// allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
// currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
// More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
type ClickHouseInstallationSpecConfigurationZookeeper struct {
	// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
	Identity *string `pulumi:"identity"`
	// describe every available zookeeper cluster node for interaction
	Nodes []ClickHouseInstallationSpecConfigurationZookeeperNodes `pulumi:"nodes"`
	// one operation timeout during Zookeeper transactions
	Operation_timeout_ms *int `pulumi:"operation_timeout_ms"`
	// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
	Root *string `pulumi:"root"`
	// session timeout during connect to Zookeeper
	Session_timeout_ms *int `pulumi:"session_timeout_ms"`
	// Enables compression in Keeper protocol if set to true
	Use_compression *string `pulumi:"use_compression"`
}

// ClickHouseInstallationSpecConfigurationZookeeperInput is an input type that accepts ClickHouseInstallationSpecConfigurationZookeeperArgs and ClickHouseInstallationSpecConfigurationZookeeperOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationZookeeperInput` via:
//
//	ClickHouseInstallationSpecConfigurationZookeeperArgs{...}
type ClickHouseInstallationSpecConfigurationZookeeperInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationZookeeperOutput() ClickHouseInstallationSpecConfigurationZookeeperOutput
	ToClickHouseInstallationSpecConfigurationZookeeperOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationZookeeperOutput
}

// allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
// currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
// More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
type ClickHouseInstallationSpecConfigurationZookeeperArgs struct {
	// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
	Identity pulumi.StringPtrInput `pulumi:"identity"`
	// describe every available zookeeper cluster node for interaction
	Nodes ClickHouseInstallationSpecConfigurationZookeeperNodesArrayInput `pulumi:"nodes"`
	// one operation timeout during Zookeeper transactions
	Operation_timeout_ms pulumi.IntPtrInput `pulumi:"operation_timeout_ms"`
	// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
	Root pulumi.StringPtrInput `pulumi:"root"`
	// session timeout during connect to Zookeeper
	Session_timeout_ms pulumi.IntPtrInput `pulumi:"session_timeout_ms"`
	// Enables compression in Keeper protocol if set to true
	Use_compression pulumi.StringPtrInput `pulumi:"use_compression"`
}

func (ClickHouseInstallationSpecConfigurationZookeeperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationZookeeper)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationZookeeperArgs) ToClickHouseInstallationSpecConfigurationZookeeperOutput() ClickHouseInstallationSpecConfigurationZookeeperOutput {
	return i.ToClickHouseInstallationSpecConfigurationZookeeperOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationZookeeperArgs) ToClickHouseInstallationSpecConfigurationZookeeperOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationZookeeperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationZookeeperOutput)
}

func (i ClickHouseInstallationSpecConfigurationZookeeperArgs) ToClickHouseInstallationSpecConfigurationZookeeperPtrOutput() ClickHouseInstallationSpecConfigurationZookeeperPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationZookeeperPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationZookeeperArgs) ToClickHouseInstallationSpecConfigurationZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationZookeeperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationZookeeperOutput).ToClickHouseInstallationSpecConfigurationZookeeperPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecConfigurationZookeeperPtrInput is an input type that accepts ClickHouseInstallationSpecConfigurationZookeeperArgs, ClickHouseInstallationSpecConfigurationZookeeperPtr and ClickHouseInstallationSpecConfigurationZookeeperPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationZookeeperPtrInput` via:
//
//	        ClickHouseInstallationSpecConfigurationZookeeperArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecConfigurationZookeeperPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationZookeeperPtrOutput() ClickHouseInstallationSpecConfigurationZookeeperPtrOutput
	ToClickHouseInstallationSpecConfigurationZookeeperPtrOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationZookeeperPtrOutput
}

type clickHouseInstallationSpecConfigurationZookeeperPtrType ClickHouseInstallationSpecConfigurationZookeeperArgs

func ClickHouseInstallationSpecConfigurationZookeeperPtr(v *ClickHouseInstallationSpecConfigurationZookeeperArgs) ClickHouseInstallationSpecConfigurationZookeeperPtrInput {
	return (*clickHouseInstallationSpecConfigurationZookeeperPtrType)(v)
}

func (*clickHouseInstallationSpecConfigurationZookeeperPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationZookeeper)(nil)).Elem()
}

func (i *clickHouseInstallationSpecConfigurationZookeeperPtrType) ToClickHouseInstallationSpecConfigurationZookeeperPtrOutput() ClickHouseInstallationSpecConfigurationZookeeperPtrOutput {
	return i.ToClickHouseInstallationSpecConfigurationZookeeperPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecConfigurationZookeeperPtrType) ToClickHouseInstallationSpecConfigurationZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationZookeeperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationZookeeperPtrOutput)
}

// allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
// currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
// More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
type ClickHouseInstallationSpecConfigurationZookeeperOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationZookeeperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationZookeeper)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationZookeeperOutput) ToClickHouseInstallationSpecConfigurationZookeeperOutput() ClickHouseInstallationSpecConfigurationZookeeperOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationZookeeperOutput) ToClickHouseInstallationSpecConfigurationZookeeperOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationZookeeperOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationZookeeperOutput) ToClickHouseInstallationSpecConfigurationZookeeperPtrOutput() ClickHouseInstallationSpecConfigurationZookeeperPtrOutput {
	return o.ToClickHouseInstallationSpecConfigurationZookeeperPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecConfigurationZookeeperOutput) ToClickHouseInstallationSpecConfigurationZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationZookeeperPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecConfigurationZookeeper) *ClickHouseInstallationSpecConfigurationZookeeper {
		return &v
	}).(ClickHouseInstallationSpecConfigurationZookeeperPtrOutput)
}

// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
func (o ClickHouseInstallationSpecConfigurationZookeeperOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationZookeeper) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// describe every available zookeeper cluster node for interaction
func (o ClickHouseInstallationSpecConfigurationZookeeperOutput) Nodes() ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationZookeeper) []ClickHouseInstallationSpecConfigurationZookeeperNodes {
		return v.Nodes
	}).(ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput)
}

// one operation timeout during Zookeeper transactions
func (o ClickHouseInstallationSpecConfigurationZookeeperOutput) Operation_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationZookeeper) *int { return v.Operation_timeout_ms }).(pulumi.IntPtrOutput)
}

// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
func (o ClickHouseInstallationSpecConfigurationZookeeperOutput) Root() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationZookeeper) *string { return v.Root }).(pulumi.StringPtrOutput)
}

// session timeout during connect to Zookeeper
func (o ClickHouseInstallationSpecConfigurationZookeeperOutput) Session_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationZookeeper) *int { return v.Session_timeout_ms }).(pulumi.IntPtrOutput)
}

// Enables compression in Keeper protocol if set to true
func (o ClickHouseInstallationSpecConfigurationZookeeperOutput) Use_compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationZookeeper) *string { return v.Use_compression }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecConfigurationZookeeperPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationZookeeperPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecConfigurationZookeeper)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationZookeeperPtrOutput) ToClickHouseInstallationSpecConfigurationZookeeperPtrOutput() ClickHouseInstallationSpecConfigurationZookeeperPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationZookeeperPtrOutput) ToClickHouseInstallationSpecConfigurationZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationZookeeperPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationZookeeperPtrOutput) Elem() ClickHouseInstallationSpecConfigurationZookeeperOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationZookeeper) ClickHouseInstallationSpecConfigurationZookeeper {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecConfigurationZookeeper
		return ret
	}).(ClickHouseInstallationSpecConfigurationZookeeperOutput)
}

// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
func (o ClickHouseInstallationSpecConfigurationZookeeperPtrOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationZookeeper) *string {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(pulumi.StringPtrOutput)
}

// describe every available zookeeper cluster node for interaction
func (o ClickHouseInstallationSpecConfigurationZookeeperPtrOutput) Nodes() ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationZookeeper) []ClickHouseInstallationSpecConfigurationZookeeperNodes {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput)
}

// one operation timeout during Zookeeper transactions
func (o ClickHouseInstallationSpecConfigurationZookeeperPtrOutput) Operation_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationZookeeper) *int {
		if v == nil {
			return nil
		}
		return v.Operation_timeout_ms
	}).(pulumi.IntPtrOutput)
}

// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
func (o ClickHouseInstallationSpecConfigurationZookeeperPtrOutput) Root() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationZookeeper) *string {
		if v == nil {
			return nil
		}
		return v.Root
	}).(pulumi.StringPtrOutput)
}

// session timeout during connect to Zookeeper
func (o ClickHouseInstallationSpecConfigurationZookeeperPtrOutput) Session_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationZookeeper) *int {
		if v == nil {
			return nil
		}
		return v.Session_timeout_ms
	}).(pulumi.IntPtrOutput)
}

// Enables compression in Keeper protocol if set to true
func (o ClickHouseInstallationSpecConfigurationZookeeperPtrOutput) Use_compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecConfigurationZookeeper) *string {
		if v == nil {
			return nil
		}
		return v.Use_compression
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecConfigurationZookeeperNodes struct {
	// availability zone for Zookeeper node
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// dns name or ip address for Zookeeper node
	Host *string `pulumi:"host"`
	// TCP port which used to connect to Zookeeper node
	Port *int `pulumi:"port"`
	// if a secure connection to Zookeeper is required
	Secure *string `pulumi:"secure"`
}

// ClickHouseInstallationSpecConfigurationZookeeperNodesInput is an input type that accepts ClickHouseInstallationSpecConfigurationZookeeperNodesArgs and ClickHouseInstallationSpecConfigurationZookeeperNodesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationZookeeperNodesInput` via:
//
//	ClickHouseInstallationSpecConfigurationZookeeperNodesArgs{...}
type ClickHouseInstallationSpecConfigurationZookeeperNodesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationZookeeperNodesOutput() ClickHouseInstallationSpecConfigurationZookeeperNodesOutput
	ToClickHouseInstallationSpecConfigurationZookeeperNodesOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationZookeeperNodesOutput
}

type ClickHouseInstallationSpecConfigurationZookeeperNodesArgs struct {
	// availability zone for Zookeeper node
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// dns name or ip address for Zookeeper node
	Host pulumi.StringPtrInput `pulumi:"host"`
	// TCP port which used to connect to Zookeeper node
	Port pulumi.IntPtrInput `pulumi:"port"`
	// if a secure connection to Zookeeper is required
	Secure pulumi.StringPtrInput `pulumi:"secure"`
}

func (ClickHouseInstallationSpecConfigurationZookeeperNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationZookeeperNodes)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationZookeeperNodesArgs) ToClickHouseInstallationSpecConfigurationZookeeperNodesOutput() ClickHouseInstallationSpecConfigurationZookeeperNodesOutput {
	return i.ToClickHouseInstallationSpecConfigurationZookeeperNodesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationZookeeperNodesArgs) ToClickHouseInstallationSpecConfigurationZookeeperNodesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationZookeeperNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationZookeeperNodesOutput)
}

// ClickHouseInstallationSpecConfigurationZookeeperNodesArrayInput is an input type that accepts ClickHouseInstallationSpecConfigurationZookeeperNodesArray and ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecConfigurationZookeeperNodesArrayInput` via:
//
//	ClickHouseInstallationSpecConfigurationZookeeperNodesArray{ ClickHouseInstallationSpecConfigurationZookeeperNodesArgs{...} }
type ClickHouseInstallationSpecConfigurationZookeeperNodesArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput() ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput
	ToClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutputWithContext(context.Context) ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput
}

type ClickHouseInstallationSpecConfigurationZookeeperNodesArray []ClickHouseInstallationSpecConfigurationZookeeperNodesInput

func (ClickHouseInstallationSpecConfigurationZookeeperNodesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecConfigurationZookeeperNodes)(nil)).Elem()
}

func (i ClickHouseInstallationSpecConfigurationZookeeperNodesArray) ToClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput() ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput {
	return i.ToClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecConfigurationZookeeperNodesArray) ToClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput)
}

type ClickHouseInstallationSpecConfigurationZookeeperNodesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationZookeeperNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecConfigurationZookeeperNodes)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationZookeeperNodesOutput) ToClickHouseInstallationSpecConfigurationZookeeperNodesOutput() ClickHouseInstallationSpecConfigurationZookeeperNodesOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationZookeeperNodesOutput) ToClickHouseInstallationSpecConfigurationZookeeperNodesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationZookeeperNodesOutput {
	return o
}

// availability zone for Zookeeper node
func (o ClickHouseInstallationSpecConfigurationZookeeperNodesOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationZookeeperNodes) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// dns name or ip address for Zookeeper node
func (o ClickHouseInstallationSpecConfigurationZookeeperNodesOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationZookeeperNodes) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// TCP port which used to connect to Zookeeper node
func (o ClickHouseInstallationSpecConfigurationZookeeperNodesOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationZookeeperNodes) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// if a secure connection to Zookeeper is required
func (o ClickHouseInstallationSpecConfigurationZookeeperNodesOutput) Secure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecConfigurationZookeeperNodes) *string { return v.Secure }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecConfigurationZookeeperNodes)(nil)).Elem()
}

func (o ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput) ToClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput() ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput) ToClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationSpecConfigurationZookeeperNodesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationSpecConfigurationZookeeperNodes {
		return vs[0].([]ClickHouseInstallationSpecConfigurationZookeeperNodes)[vs[1].(int)]
	}).(ClickHouseInstallationSpecConfigurationZookeeperNodesOutput)
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
type ClickHouseInstallationSpecDefaults struct {
	// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
	// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
	DistributedDDL *ClickHouseInstallationSpecDefaultsDistributedDdl `pulumi:"distributedDDL"`
	// define should replicas be specified by FQDN in `<host></host>`.
	// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
	// "no" by default
	ReplicasUseFQDN *string `pulumi:"replicasUseFQDN"`
	// default storage management options
	StorageManagement *ClickHouseInstallationSpecDefaultsStorageManagement `pulumi:"storageManagement"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
	Templates *ClickHouseInstallationSpecDefaultsTemplates `pulumi:"templates"`
}

// ClickHouseInstallationSpecDefaultsInput is an input type that accepts ClickHouseInstallationSpecDefaultsArgs and ClickHouseInstallationSpecDefaultsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecDefaultsInput` via:
//
//	ClickHouseInstallationSpecDefaultsArgs{...}
type ClickHouseInstallationSpecDefaultsInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecDefaultsOutput() ClickHouseInstallationSpecDefaultsOutput
	ToClickHouseInstallationSpecDefaultsOutputWithContext(context.Context) ClickHouseInstallationSpecDefaultsOutput
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
type ClickHouseInstallationSpecDefaultsArgs struct {
	// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
	// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
	DistributedDDL ClickHouseInstallationSpecDefaultsDistributedDdlPtrInput `pulumi:"distributedDDL"`
	// define should replicas be specified by FQDN in `<host></host>`.
	// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
	// "no" by default
	ReplicasUseFQDN pulumi.StringPtrInput `pulumi:"replicasUseFQDN"`
	// default storage management options
	StorageManagement ClickHouseInstallationSpecDefaultsStorageManagementPtrInput `pulumi:"storageManagement"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
	Templates ClickHouseInstallationSpecDefaultsTemplatesPtrInput `pulumi:"templates"`
}

func (ClickHouseInstallationSpecDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecDefaults)(nil)).Elem()
}

func (i ClickHouseInstallationSpecDefaultsArgs) ToClickHouseInstallationSpecDefaultsOutput() ClickHouseInstallationSpecDefaultsOutput {
	return i.ToClickHouseInstallationSpecDefaultsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecDefaultsArgs) ToClickHouseInstallationSpecDefaultsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecDefaultsOutput)
}

func (i ClickHouseInstallationSpecDefaultsArgs) ToClickHouseInstallationSpecDefaultsPtrOutput() ClickHouseInstallationSpecDefaultsPtrOutput {
	return i.ToClickHouseInstallationSpecDefaultsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecDefaultsArgs) ToClickHouseInstallationSpecDefaultsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecDefaultsOutput).ToClickHouseInstallationSpecDefaultsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecDefaultsPtrInput is an input type that accepts ClickHouseInstallationSpecDefaultsArgs, ClickHouseInstallationSpecDefaultsPtr and ClickHouseInstallationSpecDefaultsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecDefaultsPtrInput` via:
//
//	        ClickHouseInstallationSpecDefaultsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecDefaultsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecDefaultsPtrOutput() ClickHouseInstallationSpecDefaultsPtrOutput
	ToClickHouseInstallationSpecDefaultsPtrOutputWithContext(context.Context) ClickHouseInstallationSpecDefaultsPtrOutput
}

type clickHouseInstallationSpecDefaultsPtrType ClickHouseInstallationSpecDefaultsArgs

func ClickHouseInstallationSpecDefaultsPtr(v *ClickHouseInstallationSpecDefaultsArgs) ClickHouseInstallationSpecDefaultsPtrInput {
	return (*clickHouseInstallationSpecDefaultsPtrType)(v)
}

func (*clickHouseInstallationSpecDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecDefaults)(nil)).Elem()
}

func (i *clickHouseInstallationSpecDefaultsPtrType) ToClickHouseInstallationSpecDefaultsPtrOutput() ClickHouseInstallationSpecDefaultsPtrOutput {
	return i.ToClickHouseInstallationSpecDefaultsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecDefaultsPtrType) ToClickHouseInstallationSpecDefaultsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecDefaultsPtrOutput)
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
type ClickHouseInstallationSpecDefaultsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecDefaults)(nil)).Elem()
}

func (o ClickHouseInstallationSpecDefaultsOutput) ToClickHouseInstallationSpecDefaultsOutput() ClickHouseInstallationSpecDefaultsOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsOutput) ToClickHouseInstallationSpecDefaultsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsOutput) ToClickHouseInstallationSpecDefaultsPtrOutput() ClickHouseInstallationSpecDefaultsPtrOutput {
	return o.ToClickHouseInstallationSpecDefaultsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecDefaultsOutput) ToClickHouseInstallationSpecDefaultsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecDefaults) *ClickHouseInstallationSpecDefaults {
		return &v
	}).(ClickHouseInstallationSpecDefaultsPtrOutput)
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
func (o ClickHouseInstallationSpecDefaultsOutput) DistributedDDL() ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaults) *ClickHouseInstallationSpecDefaultsDistributedDdl {
		return v.DistributedDDL
	}).(ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput)
}

// define should replicas be specified by FQDN in `<host></host>`.
// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
// "no" by default
func (o ClickHouseInstallationSpecDefaultsOutput) ReplicasUseFQDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaults) *string { return v.ReplicasUseFQDN }).(pulumi.StringPtrOutput)
}

// default storage management options
func (o ClickHouseInstallationSpecDefaultsOutput) StorageManagement() ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaults) *ClickHouseInstallationSpecDefaultsStorageManagement {
		return v.StorageManagement
	}).(ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
func (o ClickHouseInstallationSpecDefaultsOutput) Templates() ClickHouseInstallationSpecDefaultsTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaults) *ClickHouseInstallationSpecDefaultsTemplates {
		return v.Templates
	}).(ClickHouseInstallationSpecDefaultsTemplatesPtrOutput)
}

type ClickHouseInstallationSpecDefaultsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecDefaults)(nil)).Elem()
}

func (o ClickHouseInstallationSpecDefaultsPtrOutput) ToClickHouseInstallationSpecDefaultsPtrOutput() ClickHouseInstallationSpecDefaultsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsPtrOutput) ToClickHouseInstallationSpecDefaultsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsPtrOutput) Elem() ClickHouseInstallationSpecDefaultsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaults) ClickHouseInstallationSpecDefaults {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecDefaults
		return ret
	}).(ClickHouseInstallationSpecDefaultsOutput)
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
func (o ClickHouseInstallationSpecDefaultsPtrOutput) DistributedDDL() ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaults) *ClickHouseInstallationSpecDefaultsDistributedDdl {
		if v == nil {
			return nil
		}
		return v.DistributedDDL
	}).(ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput)
}

// define should replicas be specified by FQDN in `<host></host>`.
// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
// "no" by default
func (o ClickHouseInstallationSpecDefaultsPtrOutput) ReplicasUseFQDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaults) *string {
		if v == nil {
			return nil
		}
		return v.ReplicasUseFQDN
	}).(pulumi.StringPtrOutput)
}

// default storage management options
func (o ClickHouseInstallationSpecDefaultsPtrOutput) StorageManagement() ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaults) *ClickHouseInstallationSpecDefaultsStorageManagement {
		if v == nil {
			return nil
		}
		return v.StorageManagement
	}).(ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
func (o ClickHouseInstallationSpecDefaultsPtrOutput) Templates() ClickHouseInstallationSpecDefaultsTemplatesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaults) *ClickHouseInstallationSpecDefaultsTemplates {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ClickHouseInstallationSpecDefaultsTemplatesPtrOutput)
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
type ClickHouseInstallationSpecDefaultsDistributedDdl struct {
	// Settings from this profile will be used to execute DDL queries
	Profile *string `pulumi:"profile"`
}

// ClickHouseInstallationSpecDefaultsDistributedDdlInput is an input type that accepts ClickHouseInstallationSpecDefaultsDistributedDdlArgs and ClickHouseInstallationSpecDefaultsDistributedDdlOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecDefaultsDistributedDdlInput` via:
//
//	ClickHouseInstallationSpecDefaultsDistributedDdlArgs{...}
type ClickHouseInstallationSpecDefaultsDistributedDdlInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecDefaultsDistributedDdlOutput() ClickHouseInstallationSpecDefaultsDistributedDdlOutput
	ToClickHouseInstallationSpecDefaultsDistributedDdlOutputWithContext(context.Context) ClickHouseInstallationSpecDefaultsDistributedDdlOutput
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
type ClickHouseInstallationSpecDefaultsDistributedDdlArgs struct {
	// Settings from this profile will be used to execute DDL queries
	Profile pulumi.StringPtrInput `pulumi:"profile"`
}

func (ClickHouseInstallationSpecDefaultsDistributedDdlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecDefaultsDistributedDdl)(nil)).Elem()
}

func (i ClickHouseInstallationSpecDefaultsDistributedDdlArgs) ToClickHouseInstallationSpecDefaultsDistributedDdlOutput() ClickHouseInstallationSpecDefaultsDistributedDdlOutput {
	return i.ToClickHouseInstallationSpecDefaultsDistributedDdlOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecDefaultsDistributedDdlArgs) ToClickHouseInstallationSpecDefaultsDistributedDdlOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsDistributedDdlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecDefaultsDistributedDdlOutput)
}

func (i ClickHouseInstallationSpecDefaultsDistributedDdlArgs) ToClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput() ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput {
	return i.ToClickHouseInstallationSpecDefaultsDistributedDdlPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecDefaultsDistributedDdlArgs) ToClickHouseInstallationSpecDefaultsDistributedDdlPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecDefaultsDistributedDdlOutput).ToClickHouseInstallationSpecDefaultsDistributedDdlPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecDefaultsDistributedDdlPtrInput is an input type that accepts ClickHouseInstallationSpecDefaultsDistributedDdlArgs, ClickHouseInstallationSpecDefaultsDistributedDdlPtr and ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecDefaultsDistributedDdlPtrInput` via:
//
//	        ClickHouseInstallationSpecDefaultsDistributedDdlArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecDefaultsDistributedDdlPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput() ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput
	ToClickHouseInstallationSpecDefaultsDistributedDdlPtrOutputWithContext(context.Context) ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput
}

type clickHouseInstallationSpecDefaultsDistributedDdlPtrType ClickHouseInstallationSpecDefaultsDistributedDdlArgs

func ClickHouseInstallationSpecDefaultsDistributedDdlPtr(v *ClickHouseInstallationSpecDefaultsDistributedDdlArgs) ClickHouseInstallationSpecDefaultsDistributedDdlPtrInput {
	return (*clickHouseInstallationSpecDefaultsDistributedDdlPtrType)(v)
}

func (*clickHouseInstallationSpecDefaultsDistributedDdlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecDefaultsDistributedDdl)(nil)).Elem()
}

func (i *clickHouseInstallationSpecDefaultsDistributedDdlPtrType) ToClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput() ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput {
	return i.ToClickHouseInstallationSpecDefaultsDistributedDdlPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecDefaultsDistributedDdlPtrType) ToClickHouseInstallationSpecDefaultsDistributedDdlPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput)
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
type ClickHouseInstallationSpecDefaultsDistributedDdlOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecDefaultsDistributedDdlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecDefaultsDistributedDdl)(nil)).Elem()
}

func (o ClickHouseInstallationSpecDefaultsDistributedDdlOutput) ToClickHouseInstallationSpecDefaultsDistributedDdlOutput() ClickHouseInstallationSpecDefaultsDistributedDdlOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsDistributedDdlOutput) ToClickHouseInstallationSpecDefaultsDistributedDdlOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsDistributedDdlOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsDistributedDdlOutput) ToClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput() ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput {
	return o.ToClickHouseInstallationSpecDefaultsDistributedDdlPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecDefaultsDistributedDdlOutput) ToClickHouseInstallationSpecDefaultsDistributedDdlPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecDefaultsDistributedDdl) *ClickHouseInstallationSpecDefaultsDistributedDdl {
		return &v
	}).(ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput)
}

// Settings from this profile will be used to execute DDL queries
func (o ClickHouseInstallationSpecDefaultsDistributedDdlOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaultsDistributedDdl) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecDefaultsDistributedDdl)(nil)).Elem()
}

func (o ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput) ToClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput() ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput) ToClickHouseInstallationSpecDefaultsDistributedDdlPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput) Elem() ClickHouseInstallationSpecDefaultsDistributedDdlOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsDistributedDdl) ClickHouseInstallationSpecDefaultsDistributedDdl {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecDefaultsDistributedDdl
		return ret
	}).(ClickHouseInstallationSpecDefaultsDistributedDdlOutput)
}

// Settings from this profile will be used to execute DDL queries
func (o ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsDistributedDdl) *string {
		if v == nil {
			return nil
		}
		return v.Profile
	}).(pulumi.StringPtrOutput)
}

// default storage management options
type ClickHouseInstallationSpecDefaultsStorageManagement struct {
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner *string `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
}

// ClickHouseInstallationSpecDefaultsStorageManagementInput is an input type that accepts ClickHouseInstallationSpecDefaultsStorageManagementArgs and ClickHouseInstallationSpecDefaultsStorageManagementOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecDefaultsStorageManagementInput` via:
//
//	ClickHouseInstallationSpecDefaultsStorageManagementArgs{...}
type ClickHouseInstallationSpecDefaultsStorageManagementInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecDefaultsStorageManagementOutput() ClickHouseInstallationSpecDefaultsStorageManagementOutput
	ToClickHouseInstallationSpecDefaultsStorageManagementOutputWithContext(context.Context) ClickHouseInstallationSpecDefaultsStorageManagementOutput
}

// default storage management options
type ClickHouseInstallationSpecDefaultsStorageManagementArgs struct {
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner pulumi.StringPtrInput `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
}

func (ClickHouseInstallationSpecDefaultsStorageManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecDefaultsStorageManagement)(nil)).Elem()
}

func (i ClickHouseInstallationSpecDefaultsStorageManagementArgs) ToClickHouseInstallationSpecDefaultsStorageManagementOutput() ClickHouseInstallationSpecDefaultsStorageManagementOutput {
	return i.ToClickHouseInstallationSpecDefaultsStorageManagementOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecDefaultsStorageManagementArgs) ToClickHouseInstallationSpecDefaultsStorageManagementOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsStorageManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecDefaultsStorageManagementOutput)
}

func (i ClickHouseInstallationSpecDefaultsStorageManagementArgs) ToClickHouseInstallationSpecDefaultsStorageManagementPtrOutput() ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput {
	return i.ToClickHouseInstallationSpecDefaultsStorageManagementPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecDefaultsStorageManagementArgs) ToClickHouseInstallationSpecDefaultsStorageManagementPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecDefaultsStorageManagementOutput).ToClickHouseInstallationSpecDefaultsStorageManagementPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecDefaultsStorageManagementPtrInput is an input type that accepts ClickHouseInstallationSpecDefaultsStorageManagementArgs, ClickHouseInstallationSpecDefaultsStorageManagementPtr and ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecDefaultsStorageManagementPtrInput` via:
//
//	        ClickHouseInstallationSpecDefaultsStorageManagementArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecDefaultsStorageManagementPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecDefaultsStorageManagementPtrOutput() ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput
	ToClickHouseInstallationSpecDefaultsStorageManagementPtrOutputWithContext(context.Context) ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput
}

type clickHouseInstallationSpecDefaultsStorageManagementPtrType ClickHouseInstallationSpecDefaultsStorageManagementArgs

func ClickHouseInstallationSpecDefaultsStorageManagementPtr(v *ClickHouseInstallationSpecDefaultsStorageManagementArgs) ClickHouseInstallationSpecDefaultsStorageManagementPtrInput {
	return (*clickHouseInstallationSpecDefaultsStorageManagementPtrType)(v)
}

func (*clickHouseInstallationSpecDefaultsStorageManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecDefaultsStorageManagement)(nil)).Elem()
}

func (i *clickHouseInstallationSpecDefaultsStorageManagementPtrType) ToClickHouseInstallationSpecDefaultsStorageManagementPtrOutput() ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput {
	return i.ToClickHouseInstallationSpecDefaultsStorageManagementPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecDefaultsStorageManagementPtrType) ToClickHouseInstallationSpecDefaultsStorageManagementPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput)
}

// default storage management options
type ClickHouseInstallationSpecDefaultsStorageManagementOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecDefaultsStorageManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecDefaultsStorageManagement)(nil)).Elem()
}

func (o ClickHouseInstallationSpecDefaultsStorageManagementOutput) ToClickHouseInstallationSpecDefaultsStorageManagementOutput() ClickHouseInstallationSpecDefaultsStorageManagementOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsStorageManagementOutput) ToClickHouseInstallationSpecDefaultsStorageManagementOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsStorageManagementOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsStorageManagementOutput) ToClickHouseInstallationSpecDefaultsStorageManagementPtrOutput() ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput {
	return o.ToClickHouseInstallationSpecDefaultsStorageManagementPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecDefaultsStorageManagementOutput) ToClickHouseInstallationSpecDefaultsStorageManagementPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecDefaultsStorageManagement) *ClickHouseInstallationSpecDefaultsStorageManagement {
		return &v
	}).(ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput)
}

// defines `PVC` provisioner - be it StatefulSet or the Operator
func (o ClickHouseInstallationSpecDefaultsStorageManagementOutput) Provisioner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaultsStorageManagement) *string { return v.Provisioner }).(pulumi.StringPtrOutput)
}

// defines behavior of `PVC` deletion.
// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
func (o ClickHouseInstallationSpecDefaultsStorageManagementOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaultsStorageManagement) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecDefaultsStorageManagement)(nil)).Elem()
}

func (o ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput) ToClickHouseInstallationSpecDefaultsStorageManagementPtrOutput() ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput) ToClickHouseInstallationSpecDefaultsStorageManagementPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput) Elem() ClickHouseInstallationSpecDefaultsStorageManagementOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsStorageManagement) ClickHouseInstallationSpecDefaultsStorageManagement {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecDefaultsStorageManagement
		return ret
	}).(ClickHouseInstallationSpecDefaultsStorageManagementOutput)
}

// defines `PVC` provisioner - be it StatefulSet or the Operator
func (o ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput) Provisioner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsStorageManagement) *string {
		if v == nil {
			return nil
		}
		return v.Provisioner
	}).(pulumi.StringPtrOutput)
}

// defines behavior of `PVC` deletion.
// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
func (o ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsStorageManagement) *string {
		if v == nil {
			return nil
		}
		return v.ReclaimPolicy
	}).(pulumi.StringPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
type ClickHouseInstallationSpecDefaultsTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseInstallationSpecDefaultsTemplatesInput is an input type that accepts ClickHouseInstallationSpecDefaultsTemplatesArgs and ClickHouseInstallationSpecDefaultsTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecDefaultsTemplatesInput` via:
//
//	ClickHouseInstallationSpecDefaultsTemplatesArgs{...}
type ClickHouseInstallationSpecDefaultsTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecDefaultsTemplatesOutput() ClickHouseInstallationSpecDefaultsTemplatesOutput
	ToClickHouseInstallationSpecDefaultsTemplatesOutputWithContext(context.Context) ClickHouseInstallationSpecDefaultsTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
type ClickHouseInstallationSpecDefaultsTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseInstallationSpecDefaultsTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecDefaultsTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecDefaultsTemplatesArgs) ToClickHouseInstallationSpecDefaultsTemplatesOutput() ClickHouseInstallationSpecDefaultsTemplatesOutput {
	return i.ToClickHouseInstallationSpecDefaultsTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecDefaultsTemplatesArgs) ToClickHouseInstallationSpecDefaultsTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecDefaultsTemplatesOutput)
}

func (i ClickHouseInstallationSpecDefaultsTemplatesArgs) ToClickHouseInstallationSpecDefaultsTemplatesPtrOutput() ClickHouseInstallationSpecDefaultsTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecDefaultsTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecDefaultsTemplatesArgs) ToClickHouseInstallationSpecDefaultsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecDefaultsTemplatesOutput).ToClickHouseInstallationSpecDefaultsTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecDefaultsTemplatesPtrInput is an input type that accepts ClickHouseInstallationSpecDefaultsTemplatesArgs, ClickHouseInstallationSpecDefaultsTemplatesPtr and ClickHouseInstallationSpecDefaultsTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecDefaultsTemplatesPtrInput` via:
//
//	        ClickHouseInstallationSpecDefaultsTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecDefaultsTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecDefaultsTemplatesPtrOutput() ClickHouseInstallationSpecDefaultsTemplatesPtrOutput
	ToClickHouseInstallationSpecDefaultsTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationSpecDefaultsTemplatesPtrOutput
}

type clickHouseInstallationSpecDefaultsTemplatesPtrType ClickHouseInstallationSpecDefaultsTemplatesArgs

func ClickHouseInstallationSpecDefaultsTemplatesPtr(v *ClickHouseInstallationSpecDefaultsTemplatesArgs) ClickHouseInstallationSpecDefaultsTemplatesPtrInput {
	return (*clickHouseInstallationSpecDefaultsTemplatesPtrType)(v)
}

func (*clickHouseInstallationSpecDefaultsTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecDefaultsTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationSpecDefaultsTemplatesPtrType) ToClickHouseInstallationSpecDefaultsTemplatesPtrOutput() ClickHouseInstallationSpecDefaultsTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecDefaultsTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecDefaultsTemplatesPtrType) ToClickHouseInstallationSpecDefaultsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecDefaultsTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
type ClickHouseInstallationSpecDefaultsTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecDefaultsTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecDefaultsTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecDefaultsTemplatesOutput) ToClickHouseInstallationSpecDefaultsTemplatesOutput() ClickHouseInstallationSpecDefaultsTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsTemplatesOutput) ToClickHouseInstallationSpecDefaultsTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsTemplatesOutput) ToClickHouseInstallationSpecDefaultsTemplatesPtrOutput() ClickHouseInstallationSpecDefaultsTemplatesPtrOutput {
	return o.ToClickHouseInstallationSpecDefaultsTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecDefaultsTemplatesOutput) ToClickHouseInstallationSpecDefaultsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecDefaultsTemplates) *ClickHouseInstallationSpecDefaultsTemplates {
		return &v
	}).(ClickHouseInstallationSpecDefaultsTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecDefaultsTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaultsTemplates) *string { return v.ClusterServiceTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecDefaultsTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaultsTemplates) *string { return v.DataVolumeClaimTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationSpecDefaultsTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaultsTemplates) *string { return v.HostTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecDefaultsTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaultsTemplates) *string { return v.LogVolumeClaimTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecDefaultsTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaultsTemplates) *string { return v.PodTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecDefaultsTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaultsTemplates) *string { return v.ReplicaServiceTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecDefaultsTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaultsTemplates) *string { return v.ServiceTemplate }).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecDefaultsTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaultsTemplates) []string { return v.ServiceTemplates }).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecDefaultsTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaultsTemplates) *string { return v.ShardServiceTemplate }).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecDefaultsTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecDefaultsTemplates) *string { return v.VolumeClaimTemplate }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecDefaultsTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecDefaultsTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecDefaultsTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecDefaultsTemplatesPtrOutput) ToClickHouseInstallationSpecDefaultsTemplatesPtrOutput() ClickHouseInstallationSpecDefaultsTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsTemplatesPtrOutput) ToClickHouseInstallationSpecDefaultsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecDefaultsTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecDefaultsTemplatesPtrOutput) Elem() ClickHouseInstallationSpecDefaultsTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsTemplates) ClickHouseInstallationSpecDefaultsTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecDefaultsTemplates
		return ret
	}).(ClickHouseInstallationSpecDefaultsTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecDefaultsTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecDefaultsTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationSpecDefaultsTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecDefaultsTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecDefaultsTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecDefaultsTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecDefaultsTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecDefaultsTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecDefaultsTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecDefaultsTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseInstallationSpecReconcile struct {
	// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
	Cleanup *ClickHouseInstallationSpecReconcileCleanup `pulumi:"cleanup"`
	// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
	// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
	ConfigMapPropagationTimeout *int `pulumi:"configMapPropagationTimeout"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host:
	//   - to be excluded from a ClickHouse cluster
	//   - to complete all running queries
	//   - to be included into a ClickHouse cluster
	//     respectfully before moving forward
	Host *ClickHouseInstallationSpecReconcileHost `pulumi:"host"`
	// macros parameters
	Macros *ClickHouseInstallationSpecReconcileMacros `pulumi:"macros"`
	// DISCUSSED TO BE DEPRECATED
	// Syntax sugar
	// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
	// Possible values:
	//  - wait - should wait to exclude host, complete queries and include host back into the cluster
	//  - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
	Policy *string `pulumi:"policy"`
	// runtime parameters for clickhouse-operator process which are used during reconcile cycle
	Runtime *ClickHouseInstallationSpecReconcileRuntime `pulumi:"runtime"`
}

// ClickHouseInstallationSpecReconcileInput is an input type that accepts ClickHouseInstallationSpecReconcileArgs and ClickHouseInstallationSpecReconcileOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileInput` via:
//
//	ClickHouseInstallationSpecReconcileArgs{...}
type ClickHouseInstallationSpecReconcileInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileOutput() ClickHouseInstallationSpecReconcileOutput
	ToClickHouseInstallationSpecReconcileOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileOutput
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseInstallationSpecReconcileArgs struct {
	// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
	Cleanup ClickHouseInstallationSpecReconcileCleanupPtrInput `pulumi:"cleanup"`
	// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
	// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
	ConfigMapPropagationTimeout pulumi.IntPtrInput `pulumi:"configMapPropagationTimeout"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host:
	//   - to be excluded from a ClickHouse cluster
	//   - to complete all running queries
	//   - to be included into a ClickHouse cluster
	//     respectfully before moving forward
	Host ClickHouseInstallationSpecReconcileHostPtrInput `pulumi:"host"`
	// macros parameters
	Macros ClickHouseInstallationSpecReconcileMacrosPtrInput `pulumi:"macros"`
	// DISCUSSED TO BE DEPRECATED
	// Syntax sugar
	// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
	// Possible values:
	//  - wait - should wait to exclude host, complete queries and include host back into the cluster
	//  - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// runtime parameters for clickhouse-operator process which are used during reconcile cycle
	Runtime ClickHouseInstallationSpecReconcileRuntimePtrInput `pulumi:"runtime"`
}

func (ClickHouseInstallationSpecReconcileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcile)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileArgs) ToClickHouseInstallationSpecReconcileOutput() ClickHouseInstallationSpecReconcileOutput {
	return i.ToClickHouseInstallationSpecReconcileOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileArgs) ToClickHouseInstallationSpecReconcileOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileOutput)
}

func (i ClickHouseInstallationSpecReconcileArgs) ToClickHouseInstallationSpecReconcilePtrOutput() ClickHouseInstallationSpecReconcilePtrOutput {
	return i.ToClickHouseInstallationSpecReconcilePtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileArgs) ToClickHouseInstallationSpecReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileOutput).ToClickHouseInstallationSpecReconcilePtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilePtrInput is an input type that accepts ClickHouseInstallationSpecReconcileArgs, ClickHouseInstallationSpecReconcilePtr and ClickHouseInstallationSpecReconcilePtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilePtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilePtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilePtrOutput() ClickHouseInstallationSpecReconcilePtrOutput
	ToClickHouseInstallationSpecReconcilePtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilePtrOutput
}

type clickHouseInstallationSpecReconcilePtrType ClickHouseInstallationSpecReconcileArgs

func ClickHouseInstallationSpecReconcilePtr(v *ClickHouseInstallationSpecReconcileArgs) ClickHouseInstallationSpecReconcilePtrInput {
	return (*clickHouseInstallationSpecReconcilePtrType)(v)
}

func (*clickHouseInstallationSpecReconcilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcile)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilePtrType) ToClickHouseInstallationSpecReconcilePtrOutput() ClickHouseInstallationSpecReconcilePtrOutput {
	return i.ToClickHouseInstallationSpecReconcilePtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilePtrType) ToClickHouseInstallationSpecReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilePtrOutput)
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseInstallationSpecReconcileOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcile)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileOutput) ToClickHouseInstallationSpecReconcileOutput() ClickHouseInstallationSpecReconcileOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileOutput) ToClickHouseInstallationSpecReconcileOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileOutput) ToClickHouseInstallationSpecReconcilePtrOutput() ClickHouseInstallationSpecReconcilePtrOutput {
	return o.ToClickHouseInstallationSpecReconcilePtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileOutput) ToClickHouseInstallationSpecReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcile) *ClickHouseInstallationSpecReconcile {
		return &v
	}).(ClickHouseInstallationSpecReconcilePtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
func (o ClickHouseInstallationSpecReconcileOutput) Cleanup() ClickHouseInstallationSpecReconcileCleanupPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcile) *ClickHouseInstallationSpecReconcileCleanup {
		return v.Cleanup
	}).(ClickHouseInstallationSpecReconcileCleanupPtrOutput)
}

// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
func (o ClickHouseInstallationSpecReconcileOutput) ConfigMapPropagationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcile) *int { return v.ConfigMapPropagationTimeout }).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
func (o ClickHouseInstallationSpecReconcileOutput) Host() ClickHouseInstallationSpecReconcileHostPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcile) *ClickHouseInstallationSpecReconcileHost { return v.Host }).(ClickHouseInstallationSpecReconcileHostPtrOutput)
}

// macros parameters
func (o ClickHouseInstallationSpecReconcileOutput) Macros() ClickHouseInstallationSpecReconcileMacrosPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcile) *ClickHouseInstallationSpecReconcileMacros {
		return v.Macros
	}).(ClickHouseInstallationSpecReconcileMacrosPtrOutput)
}

// DISCUSSED TO BE DEPRECATED
// Syntax sugar
// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
// Possible values:
//   - wait - should wait to exclude host, complete queries and include host back into the cluster
//   - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
func (o ClickHouseInstallationSpecReconcileOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcile) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
func (o ClickHouseInstallationSpecReconcileOutput) Runtime() ClickHouseInstallationSpecReconcileRuntimePtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcile) *ClickHouseInstallationSpecReconcileRuntime {
		return v.Runtime
	}).(ClickHouseInstallationSpecReconcileRuntimePtrOutput)
}

type ClickHouseInstallationSpecReconcilePtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcile)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilePtrOutput) ToClickHouseInstallationSpecReconcilePtrOutput() ClickHouseInstallationSpecReconcilePtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilePtrOutput) ToClickHouseInstallationSpecReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilePtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilePtrOutput) Elem() ClickHouseInstallationSpecReconcileOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcile) ClickHouseInstallationSpecReconcile {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcile
		return ret
	}).(ClickHouseInstallationSpecReconcileOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
func (o ClickHouseInstallationSpecReconcilePtrOutput) Cleanup() ClickHouseInstallationSpecReconcileCleanupPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcile) *ClickHouseInstallationSpecReconcileCleanup {
		if v == nil {
			return nil
		}
		return v.Cleanup
	}).(ClickHouseInstallationSpecReconcileCleanupPtrOutput)
}

// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
func (o ClickHouseInstallationSpecReconcilePtrOutput) ConfigMapPropagationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcile) *int {
		if v == nil {
			return nil
		}
		return v.ConfigMapPropagationTimeout
	}).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
func (o ClickHouseInstallationSpecReconcilePtrOutput) Host() ClickHouseInstallationSpecReconcileHostPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcile) *ClickHouseInstallationSpecReconcileHost {
		if v == nil {
			return nil
		}
		return v.Host
	}).(ClickHouseInstallationSpecReconcileHostPtrOutput)
}

// macros parameters
func (o ClickHouseInstallationSpecReconcilePtrOutput) Macros() ClickHouseInstallationSpecReconcileMacrosPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcile) *ClickHouseInstallationSpecReconcileMacros {
		if v == nil {
			return nil
		}
		return v.Macros
	}).(ClickHouseInstallationSpecReconcileMacrosPtrOutput)
}

// DISCUSSED TO BE DEPRECATED
// Syntax sugar
// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
// Possible values:
//   - wait - should wait to exclude host, complete queries and include host back into the cluster
//   - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
func (o ClickHouseInstallationSpecReconcilePtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcile) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
func (o ClickHouseInstallationSpecReconcilePtrOutput) Runtime() ClickHouseInstallationSpecReconcileRuntimePtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcile) *ClickHouseInstallationSpecReconcileRuntime {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(ClickHouseInstallationSpecReconcileRuntimePtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseInstallationSpecReconcileCleanup struct {
	// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
	// Default behavior is `Retain`"
	ReconcileFailedObjects *ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects `pulumi:"reconcileFailedObjects"`
	// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
	// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
	// Default behavior is `Delete`"
	UnknownObjects *ClickHouseInstallationSpecReconcileCleanupUnknownObjects `pulumi:"unknownObjects"`
}

// ClickHouseInstallationSpecReconcileCleanupInput is an input type that accepts ClickHouseInstallationSpecReconcileCleanupArgs and ClickHouseInstallationSpecReconcileCleanupOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileCleanupInput` via:
//
//	ClickHouseInstallationSpecReconcileCleanupArgs{...}
type ClickHouseInstallationSpecReconcileCleanupInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileCleanupOutput() ClickHouseInstallationSpecReconcileCleanupOutput
	ToClickHouseInstallationSpecReconcileCleanupOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileCleanupOutput
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseInstallationSpecReconcileCleanupArgs struct {
	// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
	// Default behavior is `Retain`"
	ReconcileFailedObjects ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrInput `pulumi:"reconcileFailedObjects"`
	// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
	// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
	// Default behavior is `Delete`"
	UnknownObjects ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrInput `pulumi:"unknownObjects"`
}

func (ClickHouseInstallationSpecReconcileCleanupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileCleanup)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileCleanupArgs) ToClickHouseInstallationSpecReconcileCleanupOutput() ClickHouseInstallationSpecReconcileCleanupOutput {
	return i.ToClickHouseInstallationSpecReconcileCleanupOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileCleanupArgs) ToClickHouseInstallationSpecReconcileCleanupOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileCleanupOutput)
}

func (i ClickHouseInstallationSpecReconcileCleanupArgs) ToClickHouseInstallationSpecReconcileCleanupPtrOutput() ClickHouseInstallationSpecReconcileCleanupPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileCleanupPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileCleanupArgs) ToClickHouseInstallationSpecReconcileCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileCleanupOutput).ToClickHouseInstallationSpecReconcileCleanupPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcileCleanupPtrInput is an input type that accepts ClickHouseInstallationSpecReconcileCleanupArgs, ClickHouseInstallationSpecReconcileCleanupPtr and ClickHouseInstallationSpecReconcileCleanupPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileCleanupPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileCleanupArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcileCleanupPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileCleanupPtrOutput() ClickHouseInstallationSpecReconcileCleanupPtrOutput
	ToClickHouseInstallationSpecReconcileCleanupPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileCleanupPtrOutput
}

type clickHouseInstallationSpecReconcileCleanupPtrType ClickHouseInstallationSpecReconcileCleanupArgs

func ClickHouseInstallationSpecReconcileCleanupPtr(v *ClickHouseInstallationSpecReconcileCleanupArgs) ClickHouseInstallationSpecReconcileCleanupPtrInput {
	return (*clickHouseInstallationSpecReconcileCleanupPtrType)(v)
}

func (*clickHouseInstallationSpecReconcileCleanupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileCleanup)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcileCleanupPtrType) ToClickHouseInstallationSpecReconcileCleanupPtrOutput() ClickHouseInstallationSpecReconcileCleanupPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileCleanupPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcileCleanupPtrType) ToClickHouseInstallationSpecReconcileCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileCleanupPtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseInstallationSpecReconcileCleanupOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileCleanupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileCleanup)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileCleanupOutput) ToClickHouseInstallationSpecReconcileCleanupOutput() ClickHouseInstallationSpecReconcileCleanupOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileCleanupOutput) ToClickHouseInstallationSpecReconcileCleanupOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileCleanupOutput) ToClickHouseInstallationSpecReconcileCleanupPtrOutput() ClickHouseInstallationSpecReconcileCleanupPtrOutput {
	return o.ToClickHouseInstallationSpecReconcileCleanupPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileCleanupOutput) ToClickHouseInstallationSpecReconcileCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcileCleanup) *ClickHouseInstallationSpecReconcileCleanup {
		return &v
	}).(ClickHouseInstallationSpecReconcileCleanupPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
func (o ClickHouseInstallationSpecReconcileCleanupOutput) ReconcileFailedObjects() ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileCleanup) *ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects {
		return v.ReconcileFailedObjects
	}).(ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
func (o ClickHouseInstallationSpecReconcileCleanupOutput) UnknownObjects() ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileCleanup) *ClickHouseInstallationSpecReconcileCleanupUnknownObjects {
		return v.UnknownObjects
	}).(ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput)
}

type ClickHouseInstallationSpecReconcileCleanupPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileCleanupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileCleanup)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileCleanupPtrOutput) ToClickHouseInstallationSpecReconcileCleanupPtrOutput() ClickHouseInstallationSpecReconcileCleanupPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileCleanupPtrOutput) ToClickHouseInstallationSpecReconcileCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileCleanupPtrOutput) Elem() ClickHouseInstallationSpecReconcileCleanupOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileCleanup) ClickHouseInstallationSpecReconcileCleanup {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcileCleanup
		return ret
	}).(ClickHouseInstallationSpecReconcileCleanupOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
func (o ClickHouseInstallationSpecReconcileCleanupPtrOutput) ReconcileFailedObjects() ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileCleanup) *ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects {
		if v == nil {
			return nil
		}
		return v.ReconcileFailedObjects
	}).(ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
func (o ClickHouseInstallationSpecReconcileCleanupPtrOutput) UnknownObjects() ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileCleanup) *ClickHouseInstallationSpecReconcileCleanupUnknownObjects {
		if v == nil {
			return nil
		}
		return v.UnknownObjects
	}).(ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects struct {
	// Behavior policy for failed ConfigMap, `Retain` by default
	ConfigMap *string `pulumi:"configMap"`
	// Behavior policy for failed PVC, `Retain` by default
	Pvc *string `pulumi:"pvc"`
	// Behavior policy for failed Service, `Retain` by default
	Service *string `pulumi:"service"`
	// Behavior policy for failed StatefulSet, `Retain` by default
	StatefulSet *string `pulumi:"statefulSet"`
}

// ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsInput is an input type that accepts ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsArgs and ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsInput` via:
//
//	ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsArgs{...}
type ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput() ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput
	ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsArgs struct {
	// Behavior policy for failed ConfigMap, `Retain` by default
	ConfigMap pulumi.StringPtrInput `pulumi:"configMap"`
	// Behavior policy for failed PVC, `Retain` by default
	Pvc pulumi.StringPtrInput `pulumi:"pvc"`
	// Behavior policy for failed Service, `Retain` by default
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Behavior policy for failed StatefulSet, `Retain` by default
	StatefulSet pulumi.StringPtrInput `pulumi:"statefulSet"`
}

func (ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput() ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput {
	return i.ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput)
}

func (i ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput).ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrInput is an input type that accepts ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsArgs, ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtr and ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput
	ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput
}

type clickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrType ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsArgs

func ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtr(v *ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsArgs) ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrInput {
	return (*clickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrType)(v)
}

func (*clickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrType) ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrType) ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput() ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return o.ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects) *ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects {
		return &v
	}).(ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput)
}

// Behavior policy for failed ConfigMap, `Retain` by default
func (o ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects) *string { return v.ConfigMap }).(pulumi.StringPtrOutput)
}

// Behavior policy for failed PVC, `Retain` by default
func (o ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects) *string { return v.Pvc }).(pulumi.StringPtrOutput)
}

// Behavior policy for failed Service, `Retain` by default
func (o ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Behavior policy for failed StatefulSet, `Retain` by default
func (o ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects) *string { return v.StatefulSet }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput) ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput) ToClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput) Elem() ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects) ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects
		return ret
	}).(ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput)
}

// Behavior policy for failed ConfigMap, `Retain` by default
func (o ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed PVC, `Retain` by default
func (o ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.Pvc
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed Service, `Retain` by default
func (o ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed StatefulSet, `Retain` by default
func (o ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseInstallationSpecReconcileCleanupUnknownObjects struct {
	// Behavior policy for unknown ConfigMap, `Delete` by default
	ConfigMap *string `pulumi:"configMap"`
	// Behavior policy for unknown PVC, `Delete` by default
	Pvc *string `pulumi:"pvc"`
	// Behavior policy for unknown Service, `Delete` by default
	Service *string `pulumi:"service"`
	// Behavior policy for unknown StatefulSet, `Delete` by default
	StatefulSet *string `pulumi:"statefulSet"`
}

// ClickHouseInstallationSpecReconcileCleanupUnknownObjectsInput is an input type that accepts ClickHouseInstallationSpecReconcileCleanupUnknownObjectsArgs and ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileCleanupUnknownObjectsInput` via:
//
//	ClickHouseInstallationSpecReconcileCleanupUnknownObjectsArgs{...}
type ClickHouseInstallationSpecReconcileCleanupUnknownObjectsInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput() ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput
	ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseInstallationSpecReconcileCleanupUnknownObjectsArgs struct {
	// Behavior policy for unknown ConfigMap, `Delete` by default
	ConfigMap pulumi.StringPtrInput `pulumi:"configMap"`
	// Behavior policy for unknown PVC, `Delete` by default
	Pvc pulumi.StringPtrInput `pulumi:"pvc"`
	// Behavior policy for unknown Service, `Delete` by default
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Behavior policy for unknown StatefulSet, `Delete` by default
	StatefulSet pulumi.StringPtrInput `pulumi:"statefulSet"`
}

func (ClickHouseInstallationSpecReconcileCleanupUnknownObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileCleanupUnknownObjects)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileCleanupUnknownObjectsArgs) ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput() ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput {
	return i.ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileCleanupUnknownObjectsArgs) ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput)
}

func (i ClickHouseInstallationSpecReconcileCleanupUnknownObjectsArgs) ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput() ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileCleanupUnknownObjectsArgs) ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput).ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrInput is an input type that accepts ClickHouseInstallationSpecReconcileCleanupUnknownObjectsArgs, ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtr and ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileCleanupUnknownObjectsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput() ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput
	ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput
}

type clickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrType ClickHouseInstallationSpecReconcileCleanupUnknownObjectsArgs

func ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtr(v *ClickHouseInstallationSpecReconcileCleanupUnknownObjectsArgs) ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrInput {
	return (*clickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrType)(v)
}

func (*clickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileCleanupUnknownObjects)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrType) ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput() ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrType) ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileCleanupUnknownObjects)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput) ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput() ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput) ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput) ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput() ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput {
	return o.ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput) ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcileCleanupUnknownObjects) *ClickHouseInstallationSpecReconcileCleanupUnknownObjects {
		return &v
	}).(ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput)
}

// Behavior policy for unknown ConfigMap, `Delete` by default
func (o ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileCleanupUnknownObjects) *string { return v.ConfigMap }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown PVC, `Delete` by default
func (o ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileCleanupUnknownObjects) *string { return v.Pvc }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown Service, `Delete` by default
func (o ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileCleanupUnknownObjects) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown StatefulSet, `Delete` by default
func (o ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileCleanupUnknownObjects) *string { return v.StatefulSet }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileCleanupUnknownObjects)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput) ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput() ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput) ToClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput) Elem() ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileCleanupUnknownObjects) ClickHouseInstallationSpecReconcileCleanupUnknownObjects {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcileCleanupUnknownObjects
		return ret
	}).(ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput)
}

// Behavior policy for unknown ConfigMap, `Delete` by default
func (o ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown PVC, `Delete` by default
func (o ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.Pvc
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown Service, `Delete` by default
func (o ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown StatefulSet, `Delete` by default
func (o ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationSpecReconcileHost struct {
	Wait *ClickHouseInstallationSpecReconcileHostWait `pulumi:"wait"`
}

// ClickHouseInstallationSpecReconcileHostInput is an input type that accepts ClickHouseInstallationSpecReconcileHostArgs and ClickHouseInstallationSpecReconcileHostOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileHostInput` via:
//
//	ClickHouseInstallationSpecReconcileHostArgs{...}
type ClickHouseInstallationSpecReconcileHostInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileHostOutput() ClickHouseInstallationSpecReconcileHostOutput
	ToClickHouseInstallationSpecReconcileHostOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileHostOutput
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationSpecReconcileHostArgs struct {
	Wait ClickHouseInstallationSpecReconcileHostWaitPtrInput `pulumi:"wait"`
}

func (ClickHouseInstallationSpecReconcileHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileHost)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileHostArgs) ToClickHouseInstallationSpecReconcileHostOutput() ClickHouseInstallationSpecReconcileHostOutput {
	return i.ToClickHouseInstallationSpecReconcileHostOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileHostArgs) ToClickHouseInstallationSpecReconcileHostOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileHostOutput)
}

func (i ClickHouseInstallationSpecReconcileHostArgs) ToClickHouseInstallationSpecReconcileHostPtrOutput() ClickHouseInstallationSpecReconcileHostPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileHostPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileHostArgs) ToClickHouseInstallationSpecReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileHostOutput).ToClickHouseInstallationSpecReconcileHostPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcileHostPtrInput is an input type that accepts ClickHouseInstallationSpecReconcileHostArgs, ClickHouseInstallationSpecReconcileHostPtr and ClickHouseInstallationSpecReconcileHostPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileHostPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileHostArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcileHostPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileHostPtrOutput() ClickHouseInstallationSpecReconcileHostPtrOutput
	ToClickHouseInstallationSpecReconcileHostPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileHostPtrOutput
}

type clickHouseInstallationSpecReconcileHostPtrType ClickHouseInstallationSpecReconcileHostArgs

func ClickHouseInstallationSpecReconcileHostPtr(v *ClickHouseInstallationSpecReconcileHostArgs) ClickHouseInstallationSpecReconcileHostPtrInput {
	return (*clickHouseInstallationSpecReconcileHostPtrType)(v)
}

func (*clickHouseInstallationSpecReconcileHostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileHost)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcileHostPtrType) ToClickHouseInstallationSpecReconcileHostPtrOutput() ClickHouseInstallationSpecReconcileHostPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileHostPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcileHostPtrType) ToClickHouseInstallationSpecReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileHostPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationSpecReconcileHostOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileHost)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileHostOutput) ToClickHouseInstallationSpecReconcileHostOutput() ClickHouseInstallationSpecReconcileHostOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostOutput) ToClickHouseInstallationSpecReconcileHostOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostOutput) ToClickHouseInstallationSpecReconcileHostPtrOutput() ClickHouseInstallationSpecReconcileHostPtrOutput {
	return o.ToClickHouseInstallationSpecReconcileHostPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileHostOutput) ToClickHouseInstallationSpecReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcileHost) *ClickHouseInstallationSpecReconcileHost {
		return &v
	}).(ClickHouseInstallationSpecReconcileHostPtrOutput)
}

func (o ClickHouseInstallationSpecReconcileHostOutput) Wait() ClickHouseInstallationSpecReconcileHostWaitPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileHost) *ClickHouseInstallationSpecReconcileHostWait {
		return v.Wait
	}).(ClickHouseInstallationSpecReconcileHostWaitPtrOutput)
}

type ClickHouseInstallationSpecReconcileHostPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileHostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileHost)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileHostPtrOutput) ToClickHouseInstallationSpecReconcileHostPtrOutput() ClickHouseInstallationSpecReconcileHostPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostPtrOutput) ToClickHouseInstallationSpecReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostPtrOutput) Elem() ClickHouseInstallationSpecReconcileHostOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileHost) ClickHouseInstallationSpecReconcileHost {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcileHost
		return ret
	}).(ClickHouseInstallationSpecReconcileHostOutput)
}

func (o ClickHouseInstallationSpecReconcileHostPtrOutput) Wait() ClickHouseInstallationSpecReconcileHostWaitPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileHost) *ClickHouseInstallationSpecReconcileHostWait {
		if v == nil {
			return nil
		}
		return v.Wait
	}).(ClickHouseInstallationSpecReconcileHostWaitPtrOutput)
}

type ClickHouseInstallationSpecReconcileHostWait struct {
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Exclude *string `pulumi:"exclude"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
	Include *string `pulumi:"include"`
	// What probes the operator should wait during host launch procedure
	Probes *ClickHouseInstallationSpecReconcileHostWaitProbes `pulumi:"probes"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
	Queries *string `pulumi:"queries"`
	// Whether the operator during reconcile procedure should wait for replicas to catch-up
	Replicas *ClickHouseInstallationSpecReconcileHostWaitReplicas `pulumi:"replicas"`
}

// ClickHouseInstallationSpecReconcileHostWaitInput is an input type that accepts ClickHouseInstallationSpecReconcileHostWaitArgs and ClickHouseInstallationSpecReconcileHostWaitOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileHostWaitInput` via:
//
//	ClickHouseInstallationSpecReconcileHostWaitArgs{...}
type ClickHouseInstallationSpecReconcileHostWaitInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileHostWaitOutput() ClickHouseInstallationSpecReconcileHostWaitOutput
	ToClickHouseInstallationSpecReconcileHostWaitOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileHostWaitOutput
}

type ClickHouseInstallationSpecReconcileHostWaitArgs struct {
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Exclude pulumi.StringPtrInput `pulumi:"exclude"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
	Include pulumi.StringPtrInput `pulumi:"include"`
	// What probes the operator should wait during host launch procedure
	Probes ClickHouseInstallationSpecReconcileHostWaitProbesPtrInput `pulumi:"probes"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
	Queries pulumi.StringPtrInput `pulumi:"queries"`
	// Whether the operator during reconcile procedure should wait for replicas to catch-up
	Replicas ClickHouseInstallationSpecReconcileHostWaitReplicasPtrInput `pulumi:"replicas"`
}

func (ClickHouseInstallationSpecReconcileHostWaitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileHostWait)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileHostWaitArgs) ToClickHouseInstallationSpecReconcileHostWaitOutput() ClickHouseInstallationSpecReconcileHostWaitOutput {
	return i.ToClickHouseInstallationSpecReconcileHostWaitOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileHostWaitArgs) ToClickHouseInstallationSpecReconcileHostWaitOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileHostWaitOutput)
}

func (i ClickHouseInstallationSpecReconcileHostWaitArgs) ToClickHouseInstallationSpecReconcileHostWaitPtrOutput() ClickHouseInstallationSpecReconcileHostWaitPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileHostWaitPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileHostWaitArgs) ToClickHouseInstallationSpecReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileHostWaitOutput).ToClickHouseInstallationSpecReconcileHostWaitPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcileHostWaitPtrInput is an input type that accepts ClickHouseInstallationSpecReconcileHostWaitArgs, ClickHouseInstallationSpecReconcileHostWaitPtr and ClickHouseInstallationSpecReconcileHostWaitPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileHostWaitPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileHostWaitArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcileHostWaitPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileHostWaitPtrOutput() ClickHouseInstallationSpecReconcileHostWaitPtrOutput
	ToClickHouseInstallationSpecReconcileHostWaitPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileHostWaitPtrOutput
}

type clickHouseInstallationSpecReconcileHostWaitPtrType ClickHouseInstallationSpecReconcileHostWaitArgs

func ClickHouseInstallationSpecReconcileHostWaitPtr(v *ClickHouseInstallationSpecReconcileHostWaitArgs) ClickHouseInstallationSpecReconcileHostWaitPtrInput {
	return (*clickHouseInstallationSpecReconcileHostWaitPtrType)(v)
}

func (*clickHouseInstallationSpecReconcileHostWaitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileHostWait)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcileHostWaitPtrType) ToClickHouseInstallationSpecReconcileHostWaitPtrOutput() ClickHouseInstallationSpecReconcileHostWaitPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileHostWaitPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcileHostWaitPtrType) ToClickHouseInstallationSpecReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileHostWaitPtrOutput)
}

type ClickHouseInstallationSpecReconcileHostWaitOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileHostWaitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileHostWait)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileHostWaitOutput) ToClickHouseInstallationSpecReconcileHostWaitOutput() ClickHouseInstallationSpecReconcileHostWaitOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostWaitOutput) ToClickHouseInstallationSpecReconcileHostWaitOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostWaitOutput) ToClickHouseInstallationSpecReconcileHostWaitPtrOutput() ClickHouseInstallationSpecReconcileHostWaitPtrOutput {
	return o.ToClickHouseInstallationSpecReconcileHostWaitPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileHostWaitOutput) ToClickHouseInstallationSpecReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcileHostWait) *ClickHouseInstallationSpecReconcileHostWait {
		return &v
	}).(ClickHouseInstallationSpecReconcileHostWaitPtrOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationSpecReconcileHostWaitOutput) Exclude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileHostWait) *string { return v.Exclude }).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
func (o ClickHouseInstallationSpecReconcileHostWaitOutput) Include() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileHostWait) *string { return v.Include }).(pulumi.StringPtrOutput)
}

// What probes the operator should wait during host launch procedure
func (o ClickHouseInstallationSpecReconcileHostWaitOutput) Probes() ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileHostWait) *ClickHouseInstallationSpecReconcileHostWaitProbes {
		return v.Probes
	}).(ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
func (o ClickHouseInstallationSpecReconcileHostWaitOutput) Queries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileHostWait) *string { return v.Queries }).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
func (o ClickHouseInstallationSpecReconcileHostWaitOutput) Replicas() ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileHostWait) *ClickHouseInstallationSpecReconcileHostWaitReplicas {
		return v.Replicas
	}).(ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput)
}

type ClickHouseInstallationSpecReconcileHostWaitPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileHostWaitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileHostWait)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileHostWaitPtrOutput) ToClickHouseInstallationSpecReconcileHostWaitPtrOutput() ClickHouseInstallationSpecReconcileHostWaitPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostWaitPtrOutput) ToClickHouseInstallationSpecReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostWaitPtrOutput) Elem() ClickHouseInstallationSpecReconcileHostWaitOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileHostWait) ClickHouseInstallationSpecReconcileHostWait {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcileHostWait
		return ret
	}).(ClickHouseInstallationSpecReconcileHostWaitOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationSpecReconcileHostWaitPtrOutput) Exclude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Exclude
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
func (o ClickHouseInstallationSpecReconcileHostWaitPtrOutput) Include() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Include
	}).(pulumi.StringPtrOutput)
}

// What probes the operator should wait during host launch procedure
func (o ClickHouseInstallationSpecReconcileHostWaitPtrOutput) Probes() ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileHostWait) *ClickHouseInstallationSpecReconcileHostWaitProbes {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
func (o ClickHouseInstallationSpecReconcileHostWaitPtrOutput) Queries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Queries
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
func (o ClickHouseInstallationSpecReconcileHostWaitPtrOutput) Replicas() ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileHostWait) *ClickHouseInstallationSpecReconcileHostWaitReplicas {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput)
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationSpecReconcileHostWaitProbes struct {
	// Whether the operator during host launch procedure should wait for ready probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to wait.
	Readiness *string `pulumi:"readiness"`
	// Whether the operator during host launch procedure should wait for startup probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to do not wait.
	Startup *string `pulumi:"startup"`
}

// ClickHouseInstallationSpecReconcileHostWaitProbesInput is an input type that accepts ClickHouseInstallationSpecReconcileHostWaitProbesArgs and ClickHouseInstallationSpecReconcileHostWaitProbesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileHostWaitProbesInput` via:
//
//	ClickHouseInstallationSpecReconcileHostWaitProbesArgs{...}
type ClickHouseInstallationSpecReconcileHostWaitProbesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileHostWaitProbesOutput() ClickHouseInstallationSpecReconcileHostWaitProbesOutput
	ToClickHouseInstallationSpecReconcileHostWaitProbesOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileHostWaitProbesOutput
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationSpecReconcileHostWaitProbesArgs struct {
	// Whether the operator during host launch procedure should wait for ready probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to wait.
	Readiness pulumi.StringPtrInput `pulumi:"readiness"`
	// Whether the operator during host launch procedure should wait for startup probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to do not wait.
	Startup pulumi.StringPtrInput `pulumi:"startup"`
}

func (ClickHouseInstallationSpecReconcileHostWaitProbesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileHostWaitProbes)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileHostWaitProbesArgs) ToClickHouseInstallationSpecReconcileHostWaitProbesOutput() ClickHouseInstallationSpecReconcileHostWaitProbesOutput {
	return i.ToClickHouseInstallationSpecReconcileHostWaitProbesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileHostWaitProbesArgs) ToClickHouseInstallationSpecReconcileHostWaitProbesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitProbesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileHostWaitProbesOutput)
}

func (i ClickHouseInstallationSpecReconcileHostWaitProbesArgs) ToClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput() ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileHostWaitProbesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileHostWaitProbesArgs) ToClickHouseInstallationSpecReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileHostWaitProbesOutput).ToClickHouseInstallationSpecReconcileHostWaitProbesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcileHostWaitProbesPtrInput is an input type that accepts ClickHouseInstallationSpecReconcileHostWaitProbesArgs, ClickHouseInstallationSpecReconcileHostWaitProbesPtr and ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileHostWaitProbesPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileHostWaitProbesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcileHostWaitProbesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput() ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput
	ToClickHouseInstallationSpecReconcileHostWaitProbesPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput
}

type clickHouseInstallationSpecReconcileHostWaitProbesPtrType ClickHouseInstallationSpecReconcileHostWaitProbesArgs

func ClickHouseInstallationSpecReconcileHostWaitProbesPtr(v *ClickHouseInstallationSpecReconcileHostWaitProbesArgs) ClickHouseInstallationSpecReconcileHostWaitProbesPtrInput {
	return (*clickHouseInstallationSpecReconcileHostWaitProbesPtrType)(v)
}

func (*clickHouseInstallationSpecReconcileHostWaitProbesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileHostWaitProbes)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcileHostWaitProbesPtrType) ToClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput() ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileHostWaitProbesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcileHostWaitProbesPtrType) ToClickHouseInstallationSpecReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput)
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationSpecReconcileHostWaitProbesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileHostWaitProbesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileHostWaitProbes)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileHostWaitProbesOutput) ToClickHouseInstallationSpecReconcileHostWaitProbesOutput() ClickHouseInstallationSpecReconcileHostWaitProbesOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostWaitProbesOutput) ToClickHouseInstallationSpecReconcileHostWaitProbesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitProbesOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostWaitProbesOutput) ToClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput() ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput {
	return o.ToClickHouseInstallationSpecReconcileHostWaitProbesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileHostWaitProbesOutput) ToClickHouseInstallationSpecReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcileHostWaitProbes) *ClickHouseInstallationSpecReconcileHostWaitProbes {
		return &v
	}).(ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput)
}

// Whether the operator during host launch procedure should wait for ready probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to wait.
func (o ClickHouseInstallationSpecReconcileHostWaitProbesOutput) Readiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileHostWaitProbes) *string { return v.Readiness }).(pulumi.StringPtrOutput)
}

// Whether the operator during host launch procedure should wait for startup probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to do not wait.
func (o ClickHouseInstallationSpecReconcileHostWaitProbesOutput) Startup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileHostWaitProbes) *string { return v.Startup }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileHostWaitProbes)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput) ToClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput() ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput) ToClickHouseInstallationSpecReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput) Elem() ClickHouseInstallationSpecReconcileHostWaitProbesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileHostWaitProbes) ClickHouseInstallationSpecReconcileHostWaitProbes {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcileHostWaitProbes
		return ret
	}).(ClickHouseInstallationSpecReconcileHostWaitProbesOutput)
}

// Whether the operator during host launch procedure should wait for ready probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to wait.
func (o ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput) Readiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileHostWaitProbes) *string {
		if v == nil {
			return nil
		}
		return v.Readiness
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during host launch procedure should wait for startup probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to do not wait.
func (o ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput) Startup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileHostWaitProbes) *string {
		if v == nil {
			return nil
		}
		return v.Startup
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationSpecReconcileHostWaitReplicas struct {
	// Whether the operator during reconcile procedure should wait for all replicas to catch-up
	All *string `pulumi:"all"`
	// replication max absolute delay to consider replica is not delayed
	Delay *int `pulumi:"delay"`
	// Whether the operator during reconcile procedure should wait for new replicas to catch-up
	New *string `pulumi:"new"`
}

// ClickHouseInstallationSpecReconcileHostWaitReplicasInput is an input type that accepts ClickHouseInstallationSpecReconcileHostWaitReplicasArgs and ClickHouseInstallationSpecReconcileHostWaitReplicasOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileHostWaitReplicasInput` via:
//
//	ClickHouseInstallationSpecReconcileHostWaitReplicasArgs{...}
type ClickHouseInstallationSpecReconcileHostWaitReplicasInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileHostWaitReplicasOutput() ClickHouseInstallationSpecReconcileHostWaitReplicasOutput
	ToClickHouseInstallationSpecReconcileHostWaitReplicasOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileHostWaitReplicasOutput
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationSpecReconcileHostWaitReplicasArgs struct {
	// Whether the operator during reconcile procedure should wait for all replicas to catch-up
	All pulumi.StringPtrInput `pulumi:"all"`
	// replication max absolute delay to consider replica is not delayed
	Delay pulumi.IntPtrInput `pulumi:"delay"`
	// Whether the operator during reconcile procedure should wait for new replicas to catch-up
	New pulumi.StringPtrInput `pulumi:"new"`
}

func (ClickHouseInstallationSpecReconcileHostWaitReplicasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileHostWaitReplicas)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileHostWaitReplicasArgs) ToClickHouseInstallationSpecReconcileHostWaitReplicasOutput() ClickHouseInstallationSpecReconcileHostWaitReplicasOutput {
	return i.ToClickHouseInstallationSpecReconcileHostWaitReplicasOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileHostWaitReplicasArgs) ToClickHouseInstallationSpecReconcileHostWaitReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitReplicasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileHostWaitReplicasOutput)
}

func (i ClickHouseInstallationSpecReconcileHostWaitReplicasArgs) ToClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileHostWaitReplicasArgs) ToClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileHostWaitReplicasOutput).ToClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcileHostWaitReplicasPtrInput is an input type that accepts ClickHouseInstallationSpecReconcileHostWaitReplicasArgs, ClickHouseInstallationSpecReconcileHostWaitReplicasPtr and ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileHostWaitReplicasPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileHostWaitReplicasArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcileHostWaitReplicasPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput
	ToClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput
}

type clickHouseInstallationSpecReconcileHostWaitReplicasPtrType ClickHouseInstallationSpecReconcileHostWaitReplicasArgs

func ClickHouseInstallationSpecReconcileHostWaitReplicasPtr(v *ClickHouseInstallationSpecReconcileHostWaitReplicasArgs) ClickHouseInstallationSpecReconcileHostWaitReplicasPtrInput {
	return (*clickHouseInstallationSpecReconcileHostWaitReplicasPtrType)(v)
}

func (*clickHouseInstallationSpecReconcileHostWaitReplicasPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileHostWaitReplicas)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcileHostWaitReplicasPtrType) ToClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcileHostWaitReplicasPtrType) ToClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationSpecReconcileHostWaitReplicasOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileHostWaitReplicasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileHostWaitReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileHostWaitReplicasOutput) ToClickHouseInstallationSpecReconcileHostWaitReplicasOutput() ClickHouseInstallationSpecReconcileHostWaitReplicasOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostWaitReplicasOutput) ToClickHouseInstallationSpecReconcileHostWaitReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitReplicasOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostWaitReplicasOutput) ToClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput {
	return o.ToClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileHostWaitReplicasOutput) ToClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcileHostWaitReplicas) *ClickHouseInstallationSpecReconcileHostWaitReplicas {
		return &v
	}).(ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput)
}

// Whether the operator during reconcile procedure should wait for all replicas to catch-up
func (o ClickHouseInstallationSpecReconcileHostWaitReplicasOutput) All() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileHostWaitReplicas) *string { return v.All }).(pulumi.StringPtrOutput)
}

// replication max absolute delay to consider replica is not delayed
func (o ClickHouseInstallationSpecReconcileHostWaitReplicasOutput) Delay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileHostWaitReplicas) *int { return v.Delay }).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for new replicas to catch-up
func (o ClickHouseInstallationSpecReconcileHostWaitReplicasOutput) New() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileHostWaitReplicas) *string { return v.New }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileHostWaitReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput) ToClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput) ToClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput) Elem() ClickHouseInstallationSpecReconcileHostWaitReplicasOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileHostWaitReplicas) ClickHouseInstallationSpecReconcileHostWaitReplicas {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcileHostWaitReplicas
		return ret
	}).(ClickHouseInstallationSpecReconcileHostWaitReplicasOutput)
}

// Whether the operator during reconcile procedure should wait for all replicas to catch-up
func (o ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput) All() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileHostWaitReplicas) *string {
		if v == nil {
			return nil
		}
		return v.All
	}).(pulumi.StringPtrOutput)
}

// replication max absolute delay to consider replica is not delayed
func (o ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput) Delay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileHostWaitReplicas) *int {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for new replicas to catch-up
func (o ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput) New() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileHostWaitReplicas) *string {
		if v == nil {
			return nil
		}
		return v.New
	}).(pulumi.StringPtrOutput)
}

// macros parameters
type ClickHouseInstallationSpecReconcileMacros struct {
	// sections behaviour for macros
	Sections *ClickHouseInstallationSpecReconcileMacrosSections `pulumi:"sections"`
}

// ClickHouseInstallationSpecReconcileMacrosInput is an input type that accepts ClickHouseInstallationSpecReconcileMacrosArgs and ClickHouseInstallationSpecReconcileMacrosOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileMacrosInput` via:
//
//	ClickHouseInstallationSpecReconcileMacrosArgs{...}
type ClickHouseInstallationSpecReconcileMacrosInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileMacrosOutput() ClickHouseInstallationSpecReconcileMacrosOutput
	ToClickHouseInstallationSpecReconcileMacrosOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileMacrosOutput
}

// macros parameters
type ClickHouseInstallationSpecReconcileMacrosArgs struct {
	// sections behaviour for macros
	Sections ClickHouseInstallationSpecReconcileMacrosSectionsPtrInput `pulumi:"sections"`
}

func (ClickHouseInstallationSpecReconcileMacrosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacros)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileMacrosArgs) ToClickHouseInstallationSpecReconcileMacrosOutput() ClickHouseInstallationSpecReconcileMacrosOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileMacrosArgs) ToClickHouseInstallationSpecReconcileMacrosOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosOutput)
}

func (i ClickHouseInstallationSpecReconcileMacrosArgs) ToClickHouseInstallationSpecReconcileMacrosPtrOutput() ClickHouseInstallationSpecReconcileMacrosPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileMacrosArgs) ToClickHouseInstallationSpecReconcileMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosOutput).ToClickHouseInstallationSpecReconcileMacrosPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcileMacrosPtrInput is an input type that accepts ClickHouseInstallationSpecReconcileMacrosArgs, ClickHouseInstallationSpecReconcileMacrosPtr and ClickHouseInstallationSpecReconcileMacrosPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileMacrosPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileMacrosArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcileMacrosPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileMacrosPtrOutput() ClickHouseInstallationSpecReconcileMacrosPtrOutput
	ToClickHouseInstallationSpecReconcileMacrosPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileMacrosPtrOutput
}

type clickHouseInstallationSpecReconcileMacrosPtrType ClickHouseInstallationSpecReconcileMacrosArgs

func ClickHouseInstallationSpecReconcileMacrosPtr(v *ClickHouseInstallationSpecReconcileMacrosArgs) ClickHouseInstallationSpecReconcileMacrosPtrInput {
	return (*clickHouseInstallationSpecReconcileMacrosPtrType)(v)
}

func (*clickHouseInstallationSpecReconcileMacrosPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileMacros)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcileMacrosPtrType) ToClickHouseInstallationSpecReconcileMacrosPtrOutput() ClickHouseInstallationSpecReconcileMacrosPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcileMacrosPtrType) ToClickHouseInstallationSpecReconcileMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosPtrOutput)
}

// macros parameters
type ClickHouseInstallationSpecReconcileMacrosOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileMacrosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacros)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileMacrosOutput) ToClickHouseInstallationSpecReconcileMacrosOutput() ClickHouseInstallationSpecReconcileMacrosOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosOutput) ToClickHouseInstallationSpecReconcileMacrosOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosOutput) ToClickHouseInstallationSpecReconcileMacrosPtrOutput() ClickHouseInstallationSpecReconcileMacrosPtrOutput {
	return o.ToClickHouseInstallationSpecReconcileMacrosPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileMacrosOutput) ToClickHouseInstallationSpecReconcileMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcileMacros) *ClickHouseInstallationSpecReconcileMacros {
		return &v
	}).(ClickHouseInstallationSpecReconcileMacrosPtrOutput)
}

// sections behaviour for macros
func (o ClickHouseInstallationSpecReconcileMacrosOutput) Sections() ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileMacros) *ClickHouseInstallationSpecReconcileMacrosSections {
		return v.Sections
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput)
}

type ClickHouseInstallationSpecReconcileMacrosPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileMacrosPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileMacros)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileMacrosPtrOutput) ToClickHouseInstallationSpecReconcileMacrosPtrOutput() ClickHouseInstallationSpecReconcileMacrosPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosPtrOutput) ToClickHouseInstallationSpecReconcileMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosPtrOutput) Elem() ClickHouseInstallationSpecReconcileMacrosOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacros) ClickHouseInstallationSpecReconcileMacros {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcileMacros
		return ret
	}).(ClickHouseInstallationSpecReconcileMacrosOutput)
}

// sections behaviour for macros
func (o ClickHouseInstallationSpecReconcileMacrosPtrOutput) Sections() ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacros) *ClickHouseInstallationSpecReconcileMacrosSections {
		if v == nil {
			return nil
		}
		return v.Sections
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput)
}

// sections behaviour for macros
type ClickHouseInstallationSpecReconcileMacrosSections struct {
	// sections behaviour for macros on files
	Files *ClickHouseInstallationSpecReconcileMacrosSectionsFiles `pulumi:"files"`
	// sections behaviour for macros on profiles
	Profiles *ClickHouseInstallationSpecReconcileMacrosSectionsProfiles `pulumi:"profiles"`
	// sections behaviour for macros on quotas
	Quotas *ClickHouseInstallationSpecReconcileMacrosSectionsQuotas `pulumi:"quotas"`
	// sections behaviour for macros on settings
	Settings *ClickHouseInstallationSpecReconcileMacrosSectionsSettings `pulumi:"settings"`
	// sections behaviour for macros on users
	Users *ClickHouseInstallationSpecReconcileMacrosSectionsUsers `pulumi:"users"`
}

// ClickHouseInstallationSpecReconcileMacrosSectionsInput is an input type that accepts ClickHouseInstallationSpecReconcileMacrosSectionsArgs and ClickHouseInstallationSpecReconcileMacrosSectionsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileMacrosSectionsInput` via:
//
//	ClickHouseInstallationSpecReconcileMacrosSectionsArgs{...}
type ClickHouseInstallationSpecReconcileMacrosSectionsInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileMacrosSectionsOutput() ClickHouseInstallationSpecReconcileMacrosSectionsOutput
	ToClickHouseInstallationSpecReconcileMacrosSectionsOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsOutput
}

// sections behaviour for macros
type ClickHouseInstallationSpecReconcileMacrosSectionsArgs struct {
	// sections behaviour for macros on files
	Files ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrInput `pulumi:"files"`
	// sections behaviour for macros on profiles
	Profiles ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrInput `pulumi:"profiles"`
	// sections behaviour for macros on quotas
	Quotas ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrInput `pulumi:"quotas"`
	// sections behaviour for macros on settings
	Settings ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrInput `pulumi:"settings"`
	// sections behaviour for macros on users
	Users ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrInput `pulumi:"users"`
}

func (ClickHouseInstallationSpecReconcileMacrosSectionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSections)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsOutput() ClickHouseInstallationSpecReconcileMacrosSectionsOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsOutput)
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsOutput).ToClickHouseInstallationSpecReconcileMacrosSectionsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcileMacrosSectionsPtrInput is an input type that accepts ClickHouseInstallationSpecReconcileMacrosSectionsArgs, ClickHouseInstallationSpecReconcileMacrosSectionsPtr and ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileMacrosSectionsPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileMacrosSectionsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcileMacrosSectionsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput
	ToClickHouseInstallationSpecReconcileMacrosSectionsPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput
}

type clickHouseInstallationSpecReconcileMacrosSectionsPtrType ClickHouseInstallationSpecReconcileMacrosSectionsArgs

func ClickHouseInstallationSpecReconcileMacrosSectionsPtr(v *ClickHouseInstallationSpecReconcileMacrosSectionsArgs) ClickHouseInstallationSpecReconcileMacrosSectionsPtrInput {
	return (*clickHouseInstallationSpecReconcileMacrosSectionsPtrType)(v)
}

func (*clickHouseInstallationSpecReconcileMacrosSectionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileMacrosSections)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcileMacrosSectionsPtrType) ToClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcileMacrosSectionsPtrType) ToClickHouseInstallationSpecReconcileMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput)
}

// sections behaviour for macros
type ClickHouseInstallationSpecReconcileMacrosSectionsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileMacrosSectionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSections)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsOutput() ClickHouseInstallationSpecReconcileMacrosSectionsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput {
	return o.ToClickHouseInstallationSpecReconcileMacrosSectionsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcileMacrosSections) *ClickHouseInstallationSpecReconcileMacrosSections {
		return &v
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput)
}

// sections behaviour for macros on files
func (o ClickHouseInstallationSpecReconcileMacrosSectionsOutput) Files() ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileMacrosSections) *ClickHouseInstallationSpecReconcileMacrosSectionsFiles {
		return v.Files
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput)
}

// sections behaviour for macros on profiles
func (o ClickHouseInstallationSpecReconcileMacrosSectionsOutput) Profiles() ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileMacrosSections) *ClickHouseInstallationSpecReconcileMacrosSectionsProfiles {
		return v.Profiles
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput)
}

// sections behaviour for macros on quotas
func (o ClickHouseInstallationSpecReconcileMacrosSectionsOutput) Quotas() ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileMacrosSections) *ClickHouseInstallationSpecReconcileMacrosSectionsQuotas {
		return v.Quotas
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput)
}

// sections behaviour for macros on settings
func (o ClickHouseInstallationSpecReconcileMacrosSectionsOutput) Settings() ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileMacrosSections) *ClickHouseInstallationSpecReconcileMacrosSectionsSettings {
		return v.Settings
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput)
}

// sections behaviour for macros on users
func (o ClickHouseInstallationSpecReconcileMacrosSectionsOutput) Users() ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileMacrosSections) *ClickHouseInstallationSpecReconcileMacrosSectionsUsers {
		return v.Users
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput)
}

type ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileMacrosSections)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput) Elem() ClickHouseInstallationSpecReconcileMacrosSectionsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSections) ClickHouseInstallationSpecReconcileMacrosSections {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcileMacrosSections
		return ret
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsOutput)
}

// sections behaviour for macros on files
func (o ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput) Files() ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSections) *ClickHouseInstallationSpecReconcileMacrosSectionsFiles {
		if v == nil {
			return nil
		}
		return v.Files
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput)
}

// sections behaviour for macros on profiles
func (o ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput) Profiles() ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSections) *ClickHouseInstallationSpecReconcileMacrosSectionsProfiles {
		if v == nil {
			return nil
		}
		return v.Profiles
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput)
}

// sections behaviour for macros on quotas
func (o ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput) Quotas() ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSections) *ClickHouseInstallationSpecReconcileMacrosSectionsQuotas {
		if v == nil {
			return nil
		}
		return v.Quotas
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput)
}

// sections behaviour for macros on settings
func (o ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput) Settings() ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSections) *ClickHouseInstallationSpecReconcileMacrosSectionsSettings {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput)
}

// sections behaviour for macros on users
func (o ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput) Users() ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSections) *ClickHouseInstallationSpecReconcileMacrosSectionsUsers {
		if v == nil {
			return nil
		}
		return v.Users
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput)
}

// sections behaviour for macros on files
type ClickHouseInstallationSpecReconcileMacrosSectionsFiles struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationSpecReconcileMacrosSectionsFilesInput is an input type that accepts ClickHouseInstallationSpecReconcileMacrosSectionsFilesArgs and ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileMacrosSectionsFilesInput` via:
//
//	ClickHouseInstallationSpecReconcileMacrosSectionsFilesArgs{...}
type ClickHouseInstallationSpecReconcileMacrosSectionsFilesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput() ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput
	ToClickHouseInstallationSpecReconcileMacrosSectionsFilesOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput
}

// sections behaviour for macros on files
type ClickHouseInstallationSpecReconcileMacrosSectionsFilesArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationSpecReconcileMacrosSectionsFilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsFiles)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsFilesArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput() ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsFilesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsFilesArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsFilesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput)
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsFilesArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsFilesArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput).ToClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrInput is an input type that accepts ClickHouseInstallationSpecReconcileMacrosSectionsFilesArgs, ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtr and ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileMacrosSectionsFilesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput
	ToClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput
}

type clickHouseInstallationSpecReconcileMacrosSectionsFilesPtrType ClickHouseInstallationSpecReconcileMacrosSectionsFilesArgs

func ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtr(v *ClickHouseInstallationSpecReconcileMacrosSectionsFilesArgs) ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrInput {
	return (*clickHouseInstallationSpecReconcileMacrosSectionsFilesPtrType)(v)
}

func (*clickHouseInstallationSpecReconcileMacrosSectionsFilesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileMacrosSectionsFiles)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcileMacrosSectionsFilesPtrType) ToClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcileMacrosSectionsFilesPtrType) ToClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput)
}

// sections behaviour for macros on files
type ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsFiles)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput() ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsFilesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput {
	return o.ToClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcileMacrosSectionsFiles) *ClickHouseInstallationSpecReconcileMacrosSectionsFiles {
		return &v
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileMacrosSectionsFiles) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileMacrosSectionsFiles)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput) Elem() ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSectionsFiles) ClickHouseInstallationSpecReconcileMacrosSectionsFiles {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcileMacrosSectionsFiles
		return ret
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSectionsFiles) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on profiles
type ClickHouseInstallationSpecReconcileMacrosSectionsProfiles struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationSpecReconcileMacrosSectionsProfilesInput is an input type that accepts ClickHouseInstallationSpecReconcileMacrosSectionsProfilesArgs and ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileMacrosSectionsProfilesInput` via:
//
//	ClickHouseInstallationSpecReconcileMacrosSectionsProfilesArgs{...}
type ClickHouseInstallationSpecReconcileMacrosSectionsProfilesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput() ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput
	ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput
}

// sections behaviour for macros on profiles
type ClickHouseInstallationSpecReconcileMacrosSectionsProfilesArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationSpecReconcileMacrosSectionsProfilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsProfiles)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsProfilesArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput() ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsProfilesArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput)
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsProfilesArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsProfilesArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput).ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrInput is an input type that accepts ClickHouseInstallationSpecReconcileMacrosSectionsProfilesArgs, ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtr and ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileMacrosSectionsProfilesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput
	ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput
}

type clickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrType ClickHouseInstallationSpecReconcileMacrosSectionsProfilesArgs

func ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtr(v *ClickHouseInstallationSpecReconcileMacrosSectionsProfilesArgs) ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrInput {
	return (*clickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrType)(v)
}

func (*clickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileMacrosSectionsProfiles)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrType) ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrType) ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput)
}

// sections behaviour for macros on profiles
type ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsProfiles)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput() ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput {
	return o.ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcileMacrosSectionsProfiles) *ClickHouseInstallationSpecReconcileMacrosSectionsProfiles {
		return &v
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileMacrosSectionsProfiles) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileMacrosSectionsProfiles)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput) Elem() ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSectionsProfiles) ClickHouseInstallationSpecReconcileMacrosSectionsProfiles {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcileMacrosSectionsProfiles
		return ret
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSectionsProfiles) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on quotas
type ClickHouseInstallationSpecReconcileMacrosSectionsQuotas struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationSpecReconcileMacrosSectionsQuotasInput is an input type that accepts ClickHouseInstallationSpecReconcileMacrosSectionsQuotasArgs and ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileMacrosSectionsQuotasInput` via:
//
//	ClickHouseInstallationSpecReconcileMacrosSectionsQuotasArgs{...}
type ClickHouseInstallationSpecReconcileMacrosSectionsQuotasInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput() ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput
	ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput
}

// sections behaviour for macros on quotas
type ClickHouseInstallationSpecReconcileMacrosSectionsQuotasArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationSpecReconcileMacrosSectionsQuotasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsQuotas)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsQuotasArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput() ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsQuotasArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput)
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsQuotasArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsQuotasArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput).ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrInput is an input type that accepts ClickHouseInstallationSpecReconcileMacrosSectionsQuotasArgs, ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtr and ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileMacrosSectionsQuotasArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput
	ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput
}

type clickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrType ClickHouseInstallationSpecReconcileMacrosSectionsQuotasArgs

func ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtr(v *ClickHouseInstallationSpecReconcileMacrosSectionsQuotasArgs) ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrInput {
	return (*clickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrType)(v)
}

func (*clickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileMacrosSectionsQuotas)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrType) ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrType) ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput)
}

// sections behaviour for macros on quotas
type ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsQuotas)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput() ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput {
	return o.ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcileMacrosSectionsQuotas) *ClickHouseInstallationSpecReconcileMacrosSectionsQuotas {
		return &v
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileMacrosSectionsQuotas) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileMacrosSectionsQuotas)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput) Elem() ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSectionsQuotas) ClickHouseInstallationSpecReconcileMacrosSectionsQuotas {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcileMacrosSectionsQuotas
		return ret
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSectionsQuotas) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on settings
type ClickHouseInstallationSpecReconcileMacrosSectionsSettings struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationSpecReconcileMacrosSectionsSettingsInput is an input type that accepts ClickHouseInstallationSpecReconcileMacrosSectionsSettingsArgs and ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileMacrosSectionsSettingsInput` via:
//
//	ClickHouseInstallationSpecReconcileMacrosSectionsSettingsArgs{...}
type ClickHouseInstallationSpecReconcileMacrosSectionsSettingsInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput() ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput
	ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput
}

// sections behaviour for macros on settings
type ClickHouseInstallationSpecReconcileMacrosSectionsSettingsArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationSpecReconcileMacrosSectionsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsSettings)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsSettingsArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput() ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsSettingsArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput)
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsSettingsArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsSettingsArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput).ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrInput is an input type that accepts ClickHouseInstallationSpecReconcileMacrosSectionsSettingsArgs, ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtr and ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileMacrosSectionsSettingsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput
	ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput
}

type clickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrType ClickHouseInstallationSpecReconcileMacrosSectionsSettingsArgs

func ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtr(v *ClickHouseInstallationSpecReconcileMacrosSectionsSettingsArgs) ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrInput {
	return (*clickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrType)(v)
}

func (*clickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileMacrosSectionsSettings)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrType) ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrType) ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput)
}

// sections behaviour for macros on settings
type ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsSettings)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput() ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput {
	return o.ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcileMacrosSectionsSettings) *ClickHouseInstallationSpecReconcileMacrosSectionsSettings {
		return &v
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileMacrosSectionsSettings) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileMacrosSectionsSettings)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput) Elem() ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSectionsSettings) ClickHouseInstallationSpecReconcileMacrosSectionsSettings {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcileMacrosSectionsSettings
		return ret
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSectionsSettings) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on users
type ClickHouseInstallationSpecReconcileMacrosSectionsUsers struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationSpecReconcileMacrosSectionsUsersInput is an input type that accepts ClickHouseInstallationSpecReconcileMacrosSectionsUsersArgs and ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileMacrosSectionsUsersInput` via:
//
//	ClickHouseInstallationSpecReconcileMacrosSectionsUsersArgs{...}
type ClickHouseInstallationSpecReconcileMacrosSectionsUsersInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput() ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput
	ToClickHouseInstallationSpecReconcileMacrosSectionsUsersOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput
}

// sections behaviour for macros on users
type ClickHouseInstallationSpecReconcileMacrosSectionsUsersArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationSpecReconcileMacrosSectionsUsersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsUsers)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsUsersArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput() ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsUsersOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsUsersArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsUsersOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput)
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsUsersArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileMacrosSectionsUsersArgs) ToClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput).ToClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrInput is an input type that accepts ClickHouseInstallationSpecReconcileMacrosSectionsUsersArgs, ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtr and ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileMacrosSectionsUsersArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput
	ToClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput
}

type clickHouseInstallationSpecReconcileMacrosSectionsUsersPtrType ClickHouseInstallationSpecReconcileMacrosSectionsUsersArgs

func ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtr(v *ClickHouseInstallationSpecReconcileMacrosSectionsUsersArgs) ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrInput {
	return (*clickHouseInstallationSpecReconcileMacrosSectionsUsersPtrType)(v)
}

func (*clickHouseInstallationSpecReconcileMacrosSectionsUsersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileMacrosSectionsUsers)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcileMacrosSectionsUsersPtrType) ToClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput {
	return i.ToClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcileMacrosSectionsUsersPtrType) ToClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput)
}

// sections behaviour for macros on users
type ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsUsers)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput() ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsUsersOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput {
	return o.ToClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcileMacrosSectionsUsers) *ClickHouseInstallationSpecReconcileMacrosSectionsUsers {
		return &v
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileMacrosSectionsUsers) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileMacrosSectionsUsers)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput() ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput) ToClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput) Elem() ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSectionsUsers) ClickHouseInstallationSpecReconcileMacrosSectionsUsers {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcileMacrosSectionsUsers
		return ret
	}).(ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileMacrosSectionsUsers) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationSpecReconcileRuntime struct {
	// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
	ReconcileShardsMaxConcurrencyPercent *int `pulumi:"reconcileShardsMaxConcurrencyPercent"`
	// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
	ReconcileShardsThreadsNumber *int `pulumi:"reconcileShardsThreadsNumber"`
}

// ClickHouseInstallationSpecReconcileRuntimeInput is an input type that accepts ClickHouseInstallationSpecReconcileRuntimeArgs and ClickHouseInstallationSpecReconcileRuntimeOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileRuntimeInput` via:
//
//	ClickHouseInstallationSpecReconcileRuntimeArgs{...}
type ClickHouseInstallationSpecReconcileRuntimeInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileRuntimeOutput() ClickHouseInstallationSpecReconcileRuntimeOutput
	ToClickHouseInstallationSpecReconcileRuntimeOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileRuntimeOutput
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationSpecReconcileRuntimeArgs struct {
	// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
	ReconcileShardsMaxConcurrencyPercent pulumi.IntPtrInput `pulumi:"reconcileShardsMaxConcurrencyPercent"`
	// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
	ReconcileShardsThreadsNumber pulumi.IntPtrInput `pulumi:"reconcileShardsThreadsNumber"`
}

func (ClickHouseInstallationSpecReconcileRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileRuntime)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcileRuntimeArgs) ToClickHouseInstallationSpecReconcileRuntimeOutput() ClickHouseInstallationSpecReconcileRuntimeOutput {
	return i.ToClickHouseInstallationSpecReconcileRuntimeOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileRuntimeArgs) ToClickHouseInstallationSpecReconcileRuntimeOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileRuntimeOutput)
}

func (i ClickHouseInstallationSpecReconcileRuntimeArgs) ToClickHouseInstallationSpecReconcileRuntimePtrOutput() ClickHouseInstallationSpecReconcileRuntimePtrOutput {
	return i.ToClickHouseInstallationSpecReconcileRuntimePtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcileRuntimeArgs) ToClickHouseInstallationSpecReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileRuntimeOutput).ToClickHouseInstallationSpecReconcileRuntimePtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcileRuntimePtrInput is an input type that accepts ClickHouseInstallationSpecReconcileRuntimeArgs, ClickHouseInstallationSpecReconcileRuntimePtr and ClickHouseInstallationSpecReconcileRuntimePtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcileRuntimePtrInput` via:
//
//	        ClickHouseInstallationSpecReconcileRuntimeArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcileRuntimePtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcileRuntimePtrOutput() ClickHouseInstallationSpecReconcileRuntimePtrOutput
	ToClickHouseInstallationSpecReconcileRuntimePtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcileRuntimePtrOutput
}

type clickHouseInstallationSpecReconcileRuntimePtrType ClickHouseInstallationSpecReconcileRuntimeArgs

func ClickHouseInstallationSpecReconcileRuntimePtr(v *ClickHouseInstallationSpecReconcileRuntimeArgs) ClickHouseInstallationSpecReconcileRuntimePtrInput {
	return (*clickHouseInstallationSpecReconcileRuntimePtrType)(v)
}

func (*clickHouseInstallationSpecReconcileRuntimePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileRuntime)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcileRuntimePtrType) ToClickHouseInstallationSpecReconcileRuntimePtrOutput() ClickHouseInstallationSpecReconcileRuntimePtrOutput {
	return i.ToClickHouseInstallationSpecReconcileRuntimePtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcileRuntimePtrType) ToClickHouseInstallationSpecReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcileRuntimePtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationSpecReconcileRuntimeOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcileRuntime)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileRuntimeOutput) ToClickHouseInstallationSpecReconcileRuntimeOutput() ClickHouseInstallationSpecReconcileRuntimeOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileRuntimeOutput) ToClickHouseInstallationSpecReconcileRuntimeOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileRuntimeOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileRuntimeOutput) ToClickHouseInstallationSpecReconcileRuntimePtrOutput() ClickHouseInstallationSpecReconcileRuntimePtrOutput {
	return o.ToClickHouseInstallationSpecReconcileRuntimePtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcileRuntimeOutput) ToClickHouseInstallationSpecReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileRuntimePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcileRuntime) *ClickHouseInstallationSpecReconcileRuntime {
		return &v
	}).(ClickHouseInstallationSpecReconcileRuntimePtrOutput)
}

// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
func (o ClickHouseInstallationSpecReconcileRuntimeOutput) ReconcileShardsMaxConcurrencyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileRuntime) *int { return v.ReconcileShardsMaxConcurrencyPercent }).(pulumi.IntPtrOutput)
}

// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
func (o ClickHouseInstallationSpecReconcileRuntimeOutput) ReconcileShardsThreadsNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcileRuntime) *int { return v.ReconcileShardsThreadsNumber }).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationSpecReconcileRuntimePtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcileRuntimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcileRuntime)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcileRuntimePtrOutput) ToClickHouseInstallationSpecReconcileRuntimePtrOutput() ClickHouseInstallationSpecReconcileRuntimePtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileRuntimePtrOutput) ToClickHouseInstallationSpecReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcileRuntimePtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcileRuntimePtrOutput) Elem() ClickHouseInstallationSpecReconcileRuntimeOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileRuntime) ClickHouseInstallationSpecReconcileRuntime {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcileRuntime
		return ret
	}).(ClickHouseInstallationSpecReconcileRuntimeOutput)
}

// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
func (o ClickHouseInstallationSpecReconcileRuntimePtrOutput) ReconcileShardsMaxConcurrencyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileRuntime) *int {
		if v == nil {
			return nil
		}
		return v.ReconcileShardsMaxConcurrencyPercent
	}).(pulumi.IntPtrOutput)
}

// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
func (o ClickHouseInstallationSpecReconcileRuntimePtrOutput) ReconcileShardsThreadsNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcileRuntime) *int {
		if v == nil {
			return nil
		}
		return v.ReconcileShardsThreadsNumber
	}).(pulumi.IntPtrOutput)
}

// [OBSOLETED] Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseInstallationSpecReconciling struct {
	// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
	Cleanup *ClickHouseInstallationSpecReconcilingCleanup `pulumi:"cleanup"`
	// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
	// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
	ConfigMapPropagationTimeout *int `pulumi:"configMapPropagationTimeout"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host:
	//   - to be excluded from a ClickHouse cluster
	//   - to complete all running queries
	//   - to be included into a ClickHouse cluster
	//     respectfully before moving forward
	Host *ClickHouseInstallationSpecReconcilingHost `pulumi:"host"`
	// macros parameters
	Macros *ClickHouseInstallationSpecReconcilingMacros `pulumi:"macros"`
	// DISCUSSED TO BE DEPRECATED
	// Syntax sugar
	// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
	// Possible values:
	//  - wait - should wait to exclude host, complete queries and include host back into the cluster
	//  - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
	Policy *string `pulumi:"policy"`
	// runtime parameters for clickhouse-operator process which are used during reconcile cycle
	Runtime *ClickHouseInstallationSpecReconcilingRuntime `pulumi:"runtime"`
}

// ClickHouseInstallationSpecReconcilingInput is an input type that accepts ClickHouseInstallationSpecReconcilingArgs and ClickHouseInstallationSpecReconcilingOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingInput` via:
//
//	ClickHouseInstallationSpecReconcilingArgs{...}
type ClickHouseInstallationSpecReconcilingInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingOutput() ClickHouseInstallationSpecReconcilingOutput
	ToClickHouseInstallationSpecReconcilingOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingOutput
}

// [OBSOLETED] Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseInstallationSpecReconcilingArgs struct {
	// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
	Cleanup ClickHouseInstallationSpecReconcilingCleanupPtrInput `pulumi:"cleanup"`
	// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
	// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
	ConfigMapPropagationTimeout pulumi.IntPtrInput `pulumi:"configMapPropagationTimeout"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host:
	//   - to be excluded from a ClickHouse cluster
	//   - to complete all running queries
	//   - to be included into a ClickHouse cluster
	//     respectfully before moving forward
	Host ClickHouseInstallationSpecReconcilingHostPtrInput `pulumi:"host"`
	// macros parameters
	Macros ClickHouseInstallationSpecReconcilingMacrosPtrInput `pulumi:"macros"`
	// DISCUSSED TO BE DEPRECATED
	// Syntax sugar
	// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
	// Possible values:
	//  - wait - should wait to exclude host, complete queries and include host back into the cluster
	//  - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// runtime parameters for clickhouse-operator process which are used during reconcile cycle
	Runtime ClickHouseInstallationSpecReconcilingRuntimePtrInput `pulumi:"runtime"`
}

func (ClickHouseInstallationSpecReconcilingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconciling)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingArgs) ToClickHouseInstallationSpecReconcilingOutput() ClickHouseInstallationSpecReconcilingOutput {
	return i.ToClickHouseInstallationSpecReconcilingOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingArgs) ToClickHouseInstallationSpecReconcilingOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingOutput)
}

func (i ClickHouseInstallationSpecReconcilingArgs) ToClickHouseInstallationSpecReconcilingPtrOutput() ClickHouseInstallationSpecReconcilingPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingArgs) ToClickHouseInstallationSpecReconcilingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingOutput).ToClickHouseInstallationSpecReconcilingPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingPtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingArgs, ClickHouseInstallationSpecReconcilingPtr and ClickHouseInstallationSpecReconcilingPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingPtrOutput() ClickHouseInstallationSpecReconcilingPtrOutput
	ToClickHouseInstallationSpecReconcilingPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingPtrOutput
}

type clickHouseInstallationSpecReconcilingPtrType ClickHouseInstallationSpecReconcilingArgs

func ClickHouseInstallationSpecReconcilingPtr(v *ClickHouseInstallationSpecReconcilingArgs) ClickHouseInstallationSpecReconcilingPtrInput {
	return (*clickHouseInstallationSpecReconcilingPtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconciling)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingPtrType) ToClickHouseInstallationSpecReconcilingPtrOutput() ClickHouseInstallationSpecReconcilingPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingPtrType) ToClickHouseInstallationSpecReconcilingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingPtrOutput)
}

// [OBSOLETED] Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseInstallationSpecReconcilingOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconciling)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingOutput) ToClickHouseInstallationSpecReconcilingOutput() ClickHouseInstallationSpecReconcilingOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingOutput) ToClickHouseInstallationSpecReconcilingOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingOutput) ToClickHouseInstallationSpecReconcilingPtrOutput() ClickHouseInstallationSpecReconcilingPtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingOutput) ToClickHouseInstallationSpecReconcilingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconciling) *ClickHouseInstallationSpecReconciling {
		return &v
	}).(ClickHouseInstallationSpecReconcilingPtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
func (o ClickHouseInstallationSpecReconcilingOutput) Cleanup() ClickHouseInstallationSpecReconcilingCleanupPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconciling) *ClickHouseInstallationSpecReconcilingCleanup {
		return v.Cleanup
	}).(ClickHouseInstallationSpecReconcilingCleanupPtrOutput)
}

// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
func (o ClickHouseInstallationSpecReconcilingOutput) ConfigMapPropagationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconciling) *int { return v.ConfigMapPropagationTimeout }).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
func (o ClickHouseInstallationSpecReconcilingOutput) Host() ClickHouseInstallationSpecReconcilingHostPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconciling) *ClickHouseInstallationSpecReconcilingHost {
		return v.Host
	}).(ClickHouseInstallationSpecReconcilingHostPtrOutput)
}

// macros parameters
func (o ClickHouseInstallationSpecReconcilingOutput) Macros() ClickHouseInstallationSpecReconcilingMacrosPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconciling) *ClickHouseInstallationSpecReconcilingMacros {
		return v.Macros
	}).(ClickHouseInstallationSpecReconcilingMacrosPtrOutput)
}

// DISCUSSED TO BE DEPRECATED
// Syntax sugar
// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
// Possible values:
//   - wait - should wait to exclude host, complete queries and include host back into the cluster
//   - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
func (o ClickHouseInstallationSpecReconcilingOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconciling) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
func (o ClickHouseInstallationSpecReconcilingOutput) Runtime() ClickHouseInstallationSpecReconcilingRuntimePtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconciling) *ClickHouseInstallationSpecReconcilingRuntime {
		return v.Runtime
	}).(ClickHouseInstallationSpecReconcilingRuntimePtrOutput)
}

type ClickHouseInstallationSpecReconcilingPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconciling)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingPtrOutput) ToClickHouseInstallationSpecReconcilingPtrOutput() ClickHouseInstallationSpecReconcilingPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingPtrOutput) ToClickHouseInstallationSpecReconcilingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingPtrOutput) Elem() ClickHouseInstallationSpecReconcilingOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconciling) ClickHouseInstallationSpecReconciling {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconciling
		return ret
	}).(ClickHouseInstallationSpecReconcilingOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
func (o ClickHouseInstallationSpecReconcilingPtrOutput) Cleanup() ClickHouseInstallationSpecReconcilingCleanupPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconciling) *ClickHouseInstallationSpecReconcilingCleanup {
		if v == nil {
			return nil
		}
		return v.Cleanup
	}).(ClickHouseInstallationSpecReconcilingCleanupPtrOutput)
}

// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
func (o ClickHouseInstallationSpecReconcilingPtrOutput) ConfigMapPropagationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconciling) *int {
		if v == nil {
			return nil
		}
		return v.ConfigMapPropagationTimeout
	}).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
func (o ClickHouseInstallationSpecReconcilingPtrOutput) Host() ClickHouseInstallationSpecReconcilingHostPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconciling) *ClickHouseInstallationSpecReconcilingHost {
		if v == nil {
			return nil
		}
		return v.Host
	}).(ClickHouseInstallationSpecReconcilingHostPtrOutput)
}

// macros parameters
func (o ClickHouseInstallationSpecReconcilingPtrOutput) Macros() ClickHouseInstallationSpecReconcilingMacrosPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconciling) *ClickHouseInstallationSpecReconcilingMacros {
		if v == nil {
			return nil
		}
		return v.Macros
	}).(ClickHouseInstallationSpecReconcilingMacrosPtrOutput)
}

// DISCUSSED TO BE DEPRECATED
// Syntax sugar
// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
// Possible values:
//   - wait - should wait to exclude host, complete queries and include host back into the cluster
//   - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
func (o ClickHouseInstallationSpecReconcilingPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconciling) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
func (o ClickHouseInstallationSpecReconcilingPtrOutput) Runtime() ClickHouseInstallationSpecReconcilingRuntimePtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconciling) *ClickHouseInstallationSpecReconcilingRuntime {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(ClickHouseInstallationSpecReconcilingRuntimePtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseInstallationSpecReconcilingCleanup struct {
	// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
	// Default behavior is `Retain`"
	ReconcileFailedObjects *ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects `pulumi:"reconcileFailedObjects"`
	// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
	// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
	// Default behavior is `Delete`"
	UnknownObjects *ClickHouseInstallationSpecReconcilingCleanupUnknownObjects `pulumi:"unknownObjects"`
}

// ClickHouseInstallationSpecReconcilingCleanupInput is an input type that accepts ClickHouseInstallationSpecReconcilingCleanupArgs and ClickHouseInstallationSpecReconcilingCleanupOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingCleanupInput` via:
//
//	ClickHouseInstallationSpecReconcilingCleanupArgs{...}
type ClickHouseInstallationSpecReconcilingCleanupInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingCleanupOutput() ClickHouseInstallationSpecReconcilingCleanupOutput
	ToClickHouseInstallationSpecReconcilingCleanupOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingCleanupOutput
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseInstallationSpecReconcilingCleanupArgs struct {
	// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
	// Default behavior is `Retain`"
	ReconcileFailedObjects ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrInput `pulumi:"reconcileFailedObjects"`
	// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
	// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
	// Default behavior is `Delete`"
	UnknownObjects ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrInput `pulumi:"unknownObjects"`
}

func (ClickHouseInstallationSpecReconcilingCleanupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingCleanup)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingCleanupArgs) ToClickHouseInstallationSpecReconcilingCleanupOutput() ClickHouseInstallationSpecReconcilingCleanupOutput {
	return i.ToClickHouseInstallationSpecReconcilingCleanupOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingCleanupArgs) ToClickHouseInstallationSpecReconcilingCleanupOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingCleanupOutput)
}

func (i ClickHouseInstallationSpecReconcilingCleanupArgs) ToClickHouseInstallationSpecReconcilingCleanupPtrOutput() ClickHouseInstallationSpecReconcilingCleanupPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingCleanupPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingCleanupArgs) ToClickHouseInstallationSpecReconcilingCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingCleanupOutput).ToClickHouseInstallationSpecReconcilingCleanupPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingCleanupPtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingCleanupArgs, ClickHouseInstallationSpecReconcilingCleanupPtr and ClickHouseInstallationSpecReconcilingCleanupPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingCleanupPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingCleanupArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingCleanupPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingCleanupPtrOutput() ClickHouseInstallationSpecReconcilingCleanupPtrOutput
	ToClickHouseInstallationSpecReconcilingCleanupPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingCleanupPtrOutput
}

type clickHouseInstallationSpecReconcilingCleanupPtrType ClickHouseInstallationSpecReconcilingCleanupArgs

func ClickHouseInstallationSpecReconcilingCleanupPtr(v *ClickHouseInstallationSpecReconcilingCleanupArgs) ClickHouseInstallationSpecReconcilingCleanupPtrInput {
	return (*clickHouseInstallationSpecReconcilingCleanupPtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingCleanupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingCleanup)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingCleanupPtrType) ToClickHouseInstallationSpecReconcilingCleanupPtrOutput() ClickHouseInstallationSpecReconcilingCleanupPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingCleanupPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingCleanupPtrType) ToClickHouseInstallationSpecReconcilingCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingCleanupPtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseInstallationSpecReconcilingCleanupOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingCleanupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingCleanup)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingCleanupOutput) ToClickHouseInstallationSpecReconcilingCleanupOutput() ClickHouseInstallationSpecReconcilingCleanupOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingCleanupOutput) ToClickHouseInstallationSpecReconcilingCleanupOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingCleanupOutput) ToClickHouseInstallationSpecReconcilingCleanupPtrOutput() ClickHouseInstallationSpecReconcilingCleanupPtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingCleanupPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingCleanupOutput) ToClickHouseInstallationSpecReconcilingCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcilingCleanup) *ClickHouseInstallationSpecReconcilingCleanup {
		return &v
	}).(ClickHouseInstallationSpecReconcilingCleanupPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
func (o ClickHouseInstallationSpecReconcilingCleanupOutput) ReconcileFailedObjects() ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingCleanup) *ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects {
		return v.ReconcileFailedObjects
	}).(ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
func (o ClickHouseInstallationSpecReconcilingCleanupOutput) UnknownObjects() ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingCleanup) *ClickHouseInstallationSpecReconcilingCleanupUnknownObjects {
		return v.UnknownObjects
	}).(ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput)
}

type ClickHouseInstallationSpecReconcilingCleanupPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingCleanupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingCleanup)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingCleanupPtrOutput) ToClickHouseInstallationSpecReconcilingCleanupPtrOutput() ClickHouseInstallationSpecReconcilingCleanupPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingCleanupPtrOutput) ToClickHouseInstallationSpecReconcilingCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingCleanupPtrOutput) Elem() ClickHouseInstallationSpecReconcilingCleanupOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingCleanup) ClickHouseInstallationSpecReconcilingCleanup {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcilingCleanup
		return ret
	}).(ClickHouseInstallationSpecReconcilingCleanupOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
func (o ClickHouseInstallationSpecReconcilingCleanupPtrOutput) ReconcileFailedObjects() ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingCleanup) *ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects {
		if v == nil {
			return nil
		}
		return v.ReconcileFailedObjects
	}).(ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
func (o ClickHouseInstallationSpecReconcilingCleanupPtrOutput) UnknownObjects() ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingCleanup) *ClickHouseInstallationSpecReconcilingCleanupUnknownObjects {
		if v == nil {
			return nil
		}
		return v.UnknownObjects
	}).(ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects struct {
	// Behavior policy for failed ConfigMap, `Retain` by default
	ConfigMap *string `pulumi:"configMap"`
	// Behavior policy for failed PVC, `Retain` by default
	Pvc *string `pulumi:"pvc"`
	// Behavior policy for failed Service, `Retain` by default
	Service *string `pulumi:"service"`
	// Behavior policy for failed StatefulSet, `Retain` by default
	StatefulSet *string `pulumi:"statefulSet"`
}

// ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsInput is an input type that accepts ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs and ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsInput` via:
//
//	ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs{...}
type ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput() ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput
	ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs struct {
	// Behavior policy for failed ConfigMap, `Retain` by default
	ConfigMap pulumi.StringPtrInput `pulumi:"configMap"`
	// Behavior policy for failed PVC, `Retain` by default
	Pvc pulumi.StringPtrInput `pulumi:"pvc"`
	// Behavior policy for failed Service, `Retain` by default
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Behavior policy for failed StatefulSet, `Retain` by default
	StatefulSet pulumi.StringPtrInput `pulumi:"statefulSet"`
}

func (ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput() ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput {
	return i.ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput)
}

func (i ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput).ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs, ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtr and ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput
	ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput
}

type clickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrType ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs

func ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtr(v *ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs) ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrInput {
	return (*clickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrType) ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrType) ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput() ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects) *ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects {
		return &v
	}).(ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput)
}

// Behavior policy for failed ConfigMap, `Retain` by default
func (o ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects) *string { return v.ConfigMap }).(pulumi.StringPtrOutput)
}

// Behavior policy for failed PVC, `Retain` by default
func (o ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects) *string { return v.Pvc }).(pulumi.StringPtrOutput)
}

// Behavior policy for failed Service, `Retain` by default
func (o ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Behavior policy for failed StatefulSet, `Retain` by default
func (o ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects) *string {
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) ToClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) Elem() ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects) ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects
		return ret
	}).(ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput)
}

// Behavior policy for failed ConfigMap, `Retain` by default
func (o ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed PVC, `Retain` by default
func (o ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.Pvc
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed Service, `Retain` by default
func (o ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed StatefulSet, `Retain` by default
func (o ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseInstallationSpecReconcilingCleanupUnknownObjects struct {
	// Behavior policy for unknown ConfigMap, `Delete` by default
	ConfigMap *string `pulumi:"configMap"`
	// Behavior policy for unknown PVC, `Delete` by default
	Pvc *string `pulumi:"pvc"`
	// Behavior policy for unknown Service, `Delete` by default
	Service *string `pulumi:"service"`
	// Behavior policy for unknown StatefulSet, `Delete` by default
	StatefulSet *string `pulumi:"statefulSet"`
}

// ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsInput is an input type that accepts ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsArgs and ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsInput` via:
//
//	ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsArgs{...}
type ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput() ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput
	ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsArgs struct {
	// Behavior policy for unknown ConfigMap, `Delete` by default
	ConfigMap pulumi.StringPtrInput `pulumi:"configMap"`
	// Behavior policy for unknown PVC, `Delete` by default
	Pvc pulumi.StringPtrInput `pulumi:"pvc"`
	// Behavior policy for unknown Service, `Delete` by default
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Behavior policy for unknown StatefulSet, `Delete` by default
	StatefulSet pulumi.StringPtrInput `pulumi:"statefulSet"`
}

func (ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingCleanupUnknownObjects)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsArgs) ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput() ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput {
	return i.ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsArgs) ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput)
}

func (i ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsArgs) ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput() ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsArgs) ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput).ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsArgs, ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtr and ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput() ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput
	ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput
}

type clickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrType ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsArgs

func ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtr(v *ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsArgs) ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrInput {
	return (*clickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingCleanupUnknownObjects)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrType) ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput() ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrType) ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingCleanupUnknownObjects)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput) ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput() ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput) ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput) ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput() ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput) ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcilingCleanupUnknownObjects) *ClickHouseInstallationSpecReconcilingCleanupUnknownObjects {
		return &v
	}).(ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput)
}

// Behavior policy for unknown ConfigMap, `Delete` by default
func (o ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingCleanupUnknownObjects) *string { return v.ConfigMap }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown PVC, `Delete` by default
func (o ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingCleanupUnknownObjects) *string { return v.Pvc }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown Service, `Delete` by default
func (o ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingCleanupUnknownObjects) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown StatefulSet, `Delete` by default
func (o ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingCleanupUnknownObjects) *string { return v.StatefulSet }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingCleanupUnknownObjects)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput() ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) ToClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) Elem() ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingCleanupUnknownObjects) ClickHouseInstallationSpecReconcilingCleanupUnknownObjects {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcilingCleanupUnknownObjects
		return ret
	}).(ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput)
}

// Behavior policy for unknown ConfigMap, `Delete` by default
func (o ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown PVC, `Delete` by default
func (o ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.Pvc
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown Service, `Delete` by default
func (o ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown StatefulSet, `Delete` by default
func (o ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationSpecReconcilingHost struct {
	Wait *ClickHouseInstallationSpecReconcilingHostWait `pulumi:"wait"`
}

// ClickHouseInstallationSpecReconcilingHostInput is an input type that accepts ClickHouseInstallationSpecReconcilingHostArgs and ClickHouseInstallationSpecReconcilingHostOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingHostInput` via:
//
//	ClickHouseInstallationSpecReconcilingHostArgs{...}
type ClickHouseInstallationSpecReconcilingHostInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingHostOutput() ClickHouseInstallationSpecReconcilingHostOutput
	ToClickHouseInstallationSpecReconcilingHostOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingHostOutput
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationSpecReconcilingHostArgs struct {
	Wait ClickHouseInstallationSpecReconcilingHostWaitPtrInput `pulumi:"wait"`
}

func (ClickHouseInstallationSpecReconcilingHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHost)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingHostArgs) ToClickHouseInstallationSpecReconcilingHostOutput() ClickHouseInstallationSpecReconcilingHostOutput {
	return i.ToClickHouseInstallationSpecReconcilingHostOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingHostArgs) ToClickHouseInstallationSpecReconcilingHostOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingHostOutput)
}

func (i ClickHouseInstallationSpecReconcilingHostArgs) ToClickHouseInstallationSpecReconcilingHostPtrOutput() ClickHouseInstallationSpecReconcilingHostPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingHostPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingHostArgs) ToClickHouseInstallationSpecReconcilingHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingHostOutput).ToClickHouseInstallationSpecReconcilingHostPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingHostPtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingHostArgs, ClickHouseInstallationSpecReconcilingHostPtr and ClickHouseInstallationSpecReconcilingHostPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingHostPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingHostArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingHostPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingHostPtrOutput() ClickHouseInstallationSpecReconcilingHostPtrOutput
	ToClickHouseInstallationSpecReconcilingHostPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingHostPtrOutput
}

type clickHouseInstallationSpecReconcilingHostPtrType ClickHouseInstallationSpecReconcilingHostArgs

func ClickHouseInstallationSpecReconcilingHostPtr(v *ClickHouseInstallationSpecReconcilingHostArgs) ClickHouseInstallationSpecReconcilingHostPtrInput {
	return (*clickHouseInstallationSpecReconcilingHostPtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingHostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingHost)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingHostPtrType) ToClickHouseInstallationSpecReconcilingHostPtrOutput() ClickHouseInstallationSpecReconcilingHostPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingHostPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingHostPtrType) ToClickHouseInstallationSpecReconcilingHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingHostPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationSpecReconcilingHostOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHost)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingHostOutput) ToClickHouseInstallationSpecReconcilingHostOutput() ClickHouseInstallationSpecReconcilingHostOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostOutput) ToClickHouseInstallationSpecReconcilingHostOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostOutput) ToClickHouseInstallationSpecReconcilingHostPtrOutput() ClickHouseInstallationSpecReconcilingHostPtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingHostPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingHostOutput) ToClickHouseInstallationSpecReconcilingHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcilingHost) *ClickHouseInstallationSpecReconcilingHost {
		return &v
	}).(ClickHouseInstallationSpecReconcilingHostPtrOutput)
}

func (o ClickHouseInstallationSpecReconcilingHostOutput) Wait() ClickHouseInstallationSpecReconcilingHostWaitPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingHost) *ClickHouseInstallationSpecReconcilingHostWait {
		return v.Wait
	}).(ClickHouseInstallationSpecReconcilingHostWaitPtrOutput)
}

type ClickHouseInstallationSpecReconcilingHostPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingHostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingHost)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingHostPtrOutput) ToClickHouseInstallationSpecReconcilingHostPtrOutput() ClickHouseInstallationSpecReconcilingHostPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostPtrOutput) ToClickHouseInstallationSpecReconcilingHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostPtrOutput) Elem() ClickHouseInstallationSpecReconcilingHostOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingHost) ClickHouseInstallationSpecReconcilingHost {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcilingHost
		return ret
	}).(ClickHouseInstallationSpecReconcilingHostOutput)
}

func (o ClickHouseInstallationSpecReconcilingHostPtrOutput) Wait() ClickHouseInstallationSpecReconcilingHostWaitPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingHost) *ClickHouseInstallationSpecReconcilingHostWait {
		if v == nil {
			return nil
		}
		return v.Wait
	}).(ClickHouseInstallationSpecReconcilingHostWaitPtrOutput)
}

type ClickHouseInstallationSpecReconcilingHostWait struct {
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Exclude *string `pulumi:"exclude"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
	Include *string `pulumi:"include"`
	// What probes the operator should wait during host launch procedure
	Probes *ClickHouseInstallationSpecReconcilingHostWaitProbes `pulumi:"probes"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
	Queries *string `pulumi:"queries"`
	// Whether the operator during reconcile procedure should wait for replicas to catch-up
	Replicas *ClickHouseInstallationSpecReconcilingHostWaitReplicas `pulumi:"replicas"`
}

// ClickHouseInstallationSpecReconcilingHostWaitInput is an input type that accepts ClickHouseInstallationSpecReconcilingHostWaitArgs and ClickHouseInstallationSpecReconcilingHostWaitOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingHostWaitInput` via:
//
//	ClickHouseInstallationSpecReconcilingHostWaitArgs{...}
type ClickHouseInstallationSpecReconcilingHostWaitInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingHostWaitOutput() ClickHouseInstallationSpecReconcilingHostWaitOutput
	ToClickHouseInstallationSpecReconcilingHostWaitOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingHostWaitOutput
}

type ClickHouseInstallationSpecReconcilingHostWaitArgs struct {
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Exclude pulumi.StringPtrInput `pulumi:"exclude"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
	Include pulumi.StringPtrInput `pulumi:"include"`
	// What probes the operator should wait during host launch procedure
	Probes ClickHouseInstallationSpecReconcilingHostWaitProbesPtrInput `pulumi:"probes"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
	Queries pulumi.StringPtrInput `pulumi:"queries"`
	// Whether the operator during reconcile procedure should wait for replicas to catch-up
	Replicas ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrInput `pulumi:"replicas"`
}

func (ClickHouseInstallationSpecReconcilingHostWaitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHostWait)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingHostWaitArgs) ToClickHouseInstallationSpecReconcilingHostWaitOutput() ClickHouseInstallationSpecReconcilingHostWaitOutput {
	return i.ToClickHouseInstallationSpecReconcilingHostWaitOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingHostWaitArgs) ToClickHouseInstallationSpecReconcilingHostWaitOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingHostWaitOutput)
}

func (i ClickHouseInstallationSpecReconcilingHostWaitArgs) ToClickHouseInstallationSpecReconcilingHostWaitPtrOutput() ClickHouseInstallationSpecReconcilingHostWaitPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingHostWaitPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingHostWaitArgs) ToClickHouseInstallationSpecReconcilingHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingHostWaitOutput).ToClickHouseInstallationSpecReconcilingHostWaitPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingHostWaitPtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingHostWaitArgs, ClickHouseInstallationSpecReconcilingHostWaitPtr and ClickHouseInstallationSpecReconcilingHostWaitPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingHostWaitPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingHostWaitArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingHostWaitPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingHostWaitPtrOutput() ClickHouseInstallationSpecReconcilingHostWaitPtrOutput
	ToClickHouseInstallationSpecReconcilingHostWaitPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingHostWaitPtrOutput
}

type clickHouseInstallationSpecReconcilingHostWaitPtrType ClickHouseInstallationSpecReconcilingHostWaitArgs

func ClickHouseInstallationSpecReconcilingHostWaitPtr(v *ClickHouseInstallationSpecReconcilingHostWaitArgs) ClickHouseInstallationSpecReconcilingHostWaitPtrInput {
	return (*clickHouseInstallationSpecReconcilingHostWaitPtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingHostWaitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingHostWait)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingHostWaitPtrType) ToClickHouseInstallationSpecReconcilingHostWaitPtrOutput() ClickHouseInstallationSpecReconcilingHostWaitPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingHostWaitPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingHostWaitPtrType) ToClickHouseInstallationSpecReconcilingHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingHostWaitPtrOutput)
}

type ClickHouseInstallationSpecReconcilingHostWaitOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingHostWaitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHostWait)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingHostWaitOutput) ToClickHouseInstallationSpecReconcilingHostWaitOutput() ClickHouseInstallationSpecReconcilingHostWaitOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostWaitOutput) ToClickHouseInstallationSpecReconcilingHostWaitOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostWaitOutput) ToClickHouseInstallationSpecReconcilingHostWaitPtrOutput() ClickHouseInstallationSpecReconcilingHostWaitPtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingHostWaitPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingHostWaitOutput) ToClickHouseInstallationSpecReconcilingHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcilingHostWait) *ClickHouseInstallationSpecReconcilingHostWait {
		return &v
	}).(ClickHouseInstallationSpecReconcilingHostWaitPtrOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationSpecReconcilingHostWaitOutput) Exclude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingHostWait) *string { return v.Exclude }).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
func (o ClickHouseInstallationSpecReconcilingHostWaitOutput) Include() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingHostWait) *string { return v.Include }).(pulumi.StringPtrOutput)
}

// What probes the operator should wait during host launch procedure
func (o ClickHouseInstallationSpecReconcilingHostWaitOutput) Probes() ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingHostWait) *ClickHouseInstallationSpecReconcilingHostWaitProbes {
		return v.Probes
	}).(ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
func (o ClickHouseInstallationSpecReconcilingHostWaitOutput) Queries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingHostWait) *string { return v.Queries }).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
func (o ClickHouseInstallationSpecReconcilingHostWaitOutput) Replicas() ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingHostWait) *ClickHouseInstallationSpecReconcilingHostWaitReplicas {
		return v.Replicas
	}).(ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput)
}

type ClickHouseInstallationSpecReconcilingHostWaitPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingHostWaitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingHostWait)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingHostWaitPtrOutput) ToClickHouseInstallationSpecReconcilingHostWaitPtrOutput() ClickHouseInstallationSpecReconcilingHostWaitPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostWaitPtrOutput) ToClickHouseInstallationSpecReconcilingHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostWaitPtrOutput) Elem() ClickHouseInstallationSpecReconcilingHostWaitOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingHostWait) ClickHouseInstallationSpecReconcilingHostWait {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcilingHostWait
		return ret
	}).(ClickHouseInstallationSpecReconcilingHostWaitOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationSpecReconcilingHostWaitPtrOutput) Exclude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Exclude
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
func (o ClickHouseInstallationSpecReconcilingHostWaitPtrOutput) Include() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Include
	}).(pulumi.StringPtrOutput)
}

// What probes the operator should wait during host launch procedure
func (o ClickHouseInstallationSpecReconcilingHostWaitPtrOutput) Probes() ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingHostWait) *ClickHouseInstallationSpecReconcilingHostWaitProbes {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
func (o ClickHouseInstallationSpecReconcilingHostWaitPtrOutput) Queries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Queries
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
func (o ClickHouseInstallationSpecReconcilingHostWaitPtrOutput) Replicas() ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingHostWait) *ClickHouseInstallationSpecReconcilingHostWaitReplicas {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput)
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationSpecReconcilingHostWaitProbes struct {
	// Whether the operator during host launch procedure should wait for ready probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to wait.
	Readiness *string `pulumi:"readiness"`
	// Whether the operator during host launch procedure should wait for startup probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to do not wait.
	Startup *string `pulumi:"startup"`
}

// ClickHouseInstallationSpecReconcilingHostWaitProbesInput is an input type that accepts ClickHouseInstallationSpecReconcilingHostWaitProbesArgs and ClickHouseInstallationSpecReconcilingHostWaitProbesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingHostWaitProbesInput` via:
//
//	ClickHouseInstallationSpecReconcilingHostWaitProbesArgs{...}
type ClickHouseInstallationSpecReconcilingHostWaitProbesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingHostWaitProbesOutput() ClickHouseInstallationSpecReconcilingHostWaitProbesOutput
	ToClickHouseInstallationSpecReconcilingHostWaitProbesOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingHostWaitProbesOutput
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationSpecReconcilingHostWaitProbesArgs struct {
	// Whether the operator during host launch procedure should wait for ready probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to wait.
	Readiness pulumi.StringPtrInput `pulumi:"readiness"`
	// Whether the operator during host launch procedure should wait for startup probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to do not wait.
	Startup pulumi.StringPtrInput `pulumi:"startup"`
}

func (ClickHouseInstallationSpecReconcilingHostWaitProbesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHostWaitProbes)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingHostWaitProbesArgs) ToClickHouseInstallationSpecReconcilingHostWaitProbesOutput() ClickHouseInstallationSpecReconcilingHostWaitProbesOutput {
	return i.ToClickHouseInstallationSpecReconcilingHostWaitProbesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingHostWaitProbesArgs) ToClickHouseInstallationSpecReconcilingHostWaitProbesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitProbesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingHostWaitProbesOutput)
}

func (i ClickHouseInstallationSpecReconcilingHostWaitProbesArgs) ToClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput() ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingHostWaitProbesArgs) ToClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingHostWaitProbesOutput).ToClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingHostWaitProbesPtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingHostWaitProbesArgs, ClickHouseInstallationSpecReconcilingHostWaitProbesPtr and ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingHostWaitProbesPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingHostWaitProbesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingHostWaitProbesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput() ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput
	ToClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput
}

type clickHouseInstallationSpecReconcilingHostWaitProbesPtrType ClickHouseInstallationSpecReconcilingHostWaitProbesArgs

func ClickHouseInstallationSpecReconcilingHostWaitProbesPtr(v *ClickHouseInstallationSpecReconcilingHostWaitProbesArgs) ClickHouseInstallationSpecReconcilingHostWaitProbesPtrInput {
	return (*clickHouseInstallationSpecReconcilingHostWaitProbesPtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingHostWaitProbesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingHostWaitProbes)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingHostWaitProbesPtrType) ToClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput() ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingHostWaitProbesPtrType) ToClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput)
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationSpecReconcilingHostWaitProbesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingHostWaitProbesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHostWaitProbes)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingHostWaitProbesOutput) ToClickHouseInstallationSpecReconcilingHostWaitProbesOutput() ClickHouseInstallationSpecReconcilingHostWaitProbesOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostWaitProbesOutput) ToClickHouseInstallationSpecReconcilingHostWaitProbesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitProbesOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostWaitProbesOutput) ToClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput() ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingHostWaitProbesOutput) ToClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcilingHostWaitProbes) *ClickHouseInstallationSpecReconcilingHostWaitProbes {
		return &v
	}).(ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput)
}

// Whether the operator during host launch procedure should wait for ready probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to wait.
func (o ClickHouseInstallationSpecReconcilingHostWaitProbesOutput) Readiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingHostWaitProbes) *string { return v.Readiness }).(pulumi.StringPtrOutput)
}

// Whether the operator during host launch procedure should wait for startup probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to do not wait.
func (o ClickHouseInstallationSpecReconcilingHostWaitProbesOutput) Startup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingHostWaitProbes) *string { return v.Startup }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingHostWaitProbes)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput) ToClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput() ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput) ToClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput) Elem() ClickHouseInstallationSpecReconcilingHostWaitProbesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingHostWaitProbes) ClickHouseInstallationSpecReconcilingHostWaitProbes {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcilingHostWaitProbes
		return ret
	}).(ClickHouseInstallationSpecReconcilingHostWaitProbesOutput)
}

// Whether the operator during host launch procedure should wait for ready probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to wait.
func (o ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput) Readiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingHostWaitProbes) *string {
		if v == nil {
			return nil
		}
		return v.Readiness
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during host launch procedure should wait for startup probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to do not wait.
func (o ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput) Startup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingHostWaitProbes) *string {
		if v == nil {
			return nil
		}
		return v.Startup
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationSpecReconcilingHostWaitReplicas struct {
	// Whether the operator during reconcile procedure should wait for all replicas to catch-up
	All *string `pulumi:"all"`
	// replication max absolute delay to consider replica is not delayed
	Delay *int `pulumi:"delay"`
	// Whether the operator during reconcile procedure should wait for new replicas to catch-up
	New *string `pulumi:"new"`
}

// ClickHouseInstallationSpecReconcilingHostWaitReplicasInput is an input type that accepts ClickHouseInstallationSpecReconcilingHostWaitReplicasArgs and ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingHostWaitReplicasInput` via:
//
//	ClickHouseInstallationSpecReconcilingHostWaitReplicasArgs{...}
type ClickHouseInstallationSpecReconcilingHostWaitReplicasInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingHostWaitReplicasOutput() ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput
	ToClickHouseInstallationSpecReconcilingHostWaitReplicasOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationSpecReconcilingHostWaitReplicasArgs struct {
	// Whether the operator during reconcile procedure should wait for all replicas to catch-up
	All pulumi.StringPtrInput `pulumi:"all"`
	// replication max absolute delay to consider replica is not delayed
	Delay pulumi.IntPtrInput `pulumi:"delay"`
	// Whether the operator during reconcile procedure should wait for new replicas to catch-up
	New pulumi.StringPtrInput `pulumi:"new"`
}

func (ClickHouseInstallationSpecReconcilingHostWaitReplicasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHostWaitReplicas)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingHostWaitReplicasArgs) ToClickHouseInstallationSpecReconcilingHostWaitReplicasOutput() ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput {
	return i.ToClickHouseInstallationSpecReconcilingHostWaitReplicasOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingHostWaitReplicasArgs) ToClickHouseInstallationSpecReconcilingHostWaitReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput)
}

func (i ClickHouseInstallationSpecReconcilingHostWaitReplicasArgs) ToClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput() ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingHostWaitReplicasArgs) ToClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput).ToClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingHostWaitReplicasArgs, ClickHouseInstallationSpecReconcilingHostWaitReplicasPtr and ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingHostWaitReplicasArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput() ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput
	ToClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput
}

type clickHouseInstallationSpecReconcilingHostWaitReplicasPtrType ClickHouseInstallationSpecReconcilingHostWaitReplicasArgs

func ClickHouseInstallationSpecReconcilingHostWaitReplicasPtr(v *ClickHouseInstallationSpecReconcilingHostWaitReplicasArgs) ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrInput {
	return (*clickHouseInstallationSpecReconcilingHostWaitReplicasPtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingHostWaitReplicasPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingHostWaitReplicas)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingHostWaitReplicasPtrType) ToClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput() ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingHostWaitReplicasPtrType) ToClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHostWaitReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput) ToClickHouseInstallationSpecReconcilingHostWaitReplicasOutput() ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput) ToClickHouseInstallationSpecReconcilingHostWaitReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput) ToClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput() ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput) ToClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcilingHostWaitReplicas) *ClickHouseInstallationSpecReconcilingHostWaitReplicas {
		return &v
	}).(ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput)
}

// Whether the operator during reconcile procedure should wait for all replicas to catch-up
func (o ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput) All() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingHostWaitReplicas) *string { return v.All }).(pulumi.StringPtrOutput)
}

// replication max absolute delay to consider replica is not delayed
func (o ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput) Delay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingHostWaitReplicas) *int { return v.Delay }).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for new replicas to catch-up
func (o ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput) New() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingHostWaitReplicas) *string { return v.New }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingHostWaitReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput) ToClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput() ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput) ToClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput) Elem() ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingHostWaitReplicas) ClickHouseInstallationSpecReconcilingHostWaitReplicas {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcilingHostWaitReplicas
		return ret
	}).(ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput)
}

// Whether the operator during reconcile procedure should wait for all replicas to catch-up
func (o ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput) All() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingHostWaitReplicas) *string {
		if v == nil {
			return nil
		}
		return v.All
	}).(pulumi.StringPtrOutput)
}

// replication max absolute delay to consider replica is not delayed
func (o ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput) Delay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingHostWaitReplicas) *int {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for new replicas to catch-up
func (o ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput) New() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingHostWaitReplicas) *string {
		if v == nil {
			return nil
		}
		return v.New
	}).(pulumi.StringPtrOutput)
}

// macros parameters
type ClickHouseInstallationSpecReconcilingMacros struct {
	// sections behaviour for macros
	Sections *ClickHouseInstallationSpecReconcilingMacrosSections `pulumi:"sections"`
}

// ClickHouseInstallationSpecReconcilingMacrosInput is an input type that accepts ClickHouseInstallationSpecReconcilingMacrosArgs and ClickHouseInstallationSpecReconcilingMacrosOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingMacrosInput` via:
//
//	ClickHouseInstallationSpecReconcilingMacrosArgs{...}
type ClickHouseInstallationSpecReconcilingMacrosInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingMacrosOutput() ClickHouseInstallationSpecReconcilingMacrosOutput
	ToClickHouseInstallationSpecReconcilingMacrosOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingMacrosOutput
}

// macros parameters
type ClickHouseInstallationSpecReconcilingMacrosArgs struct {
	// sections behaviour for macros
	Sections ClickHouseInstallationSpecReconcilingMacrosSectionsPtrInput `pulumi:"sections"`
}

func (ClickHouseInstallationSpecReconcilingMacrosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacros)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingMacrosArgs) ToClickHouseInstallationSpecReconcilingMacrosOutput() ClickHouseInstallationSpecReconcilingMacrosOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingMacrosArgs) ToClickHouseInstallationSpecReconcilingMacrosOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosOutput)
}

func (i ClickHouseInstallationSpecReconcilingMacrosArgs) ToClickHouseInstallationSpecReconcilingMacrosPtrOutput() ClickHouseInstallationSpecReconcilingMacrosPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingMacrosArgs) ToClickHouseInstallationSpecReconcilingMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosOutput).ToClickHouseInstallationSpecReconcilingMacrosPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingMacrosPtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingMacrosArgs, ClickHouseInstallationSpecReconcilingMacrosPtr and ClickHouseInstallationSpecReconcilingMacrosPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingMacrosPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingMacrosArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingMacrosPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingMacrosPtrOutput() ClickHouseInstallationSpecReconcilingMacrosPtrOutput
	ToClickHouseInstallationSpecReconcilingMacrosPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingMacrosPtrOutput
}

type clickHouseInstallationSpecReconcilingMacrosPtrType ClickHouseInstallationSpecReconcilingMacrosArgs

func ClickHouseInstallationSpecReconcilingMacrosPtr(v *ClickHouseInstallationSpecReconcilingMacrosArgs) ClickHouseInstallationSpecReconcilingMacrosPtrInput {
	return (*clickHouseInstallationSpecReconcilingMacrosPtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingMacrosPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingMacros)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingMacrosPtrType) ToClickHouseInstallationSpecReconcilingMacrosPtrOutput() ClickHouseInstallationSpecReconcilingMacrosPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingMacrosPtrType) ToClickHouseInstallationSpecReconcilingMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosPtrOutput)
}

// macros parameters
type ClickHouseInstallationSpecReconcilingMacrosOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingMacrosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacros)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingMacrosOutput) ToClickHouseInstallationSpecReconcilingMacrosOutput() ClickHouseInstallationSpecReconcilingMacrosOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosOutput) ToClickHouseInstallationSpecReconcilingMacrosOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosOutput) ToClickHouseInstallationSpecReconcilingMacrosPtrOutput() ClickHouseInstallationSpecReconcilingMacrosPtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingMacrosPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingMacrosOutput) ToClickHouseInstallationSpecReconcilingMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcilingMacros) *ClickHouseInstallationSpecReconcilingMacros {
		return &v
	}).(ClickHouseInstallationSpecReconcilingMacrosPtrOutput)
}

// sections behaviour for macros
func (o ClickHouseInstallationSpecReconcilingMacrosOutput) Sections() ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingMacros) *ClickHouseInstallationSpecReconcilingMacrosSections {
		return v.Sections
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput)
}

type ClickHouseInstallationSpecReconcilingMacrosPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingMacrosPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingMacros)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingMacrosPtrOutput) ToClickHouseInstallationSpecReconcilingMacrosPtrOutput() ClickHouseInstallationSpecReconcilingMacrosPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosPtrOutput) ToClickHouseInstallationSpecReconcilingMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosPtrOutput) Elem() ClickHouseInstallationSpecReconcilingMacrosOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacros) ClickHouseInstallationSpecReconcilingMacros {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcilingMacros
		return ret
	}).(ClickHouseInstallationSpecReconcilingMacrosOutput)
}

// sections behaviour for macros
func (o ClickHouseInstallationSpecReconcilingMacrosPtrOutput) Sections() ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacros) *ClickHouseInstallationSpecReconcilingMacrosSections {
		if v == nil {
			return nil
		}
		return v.Sections
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput)
}

// sections behaviour for macros
type ClickHouseInstallationSpecReconcilingMacrosSections struct {
	// sections behaviour for macros on files
	Files *ClickHouseInstallationSpecReconcilingMacrosSectionsFiles `pulumi:"files"`
	// sections behaviour for macros on profiles
	Profiles *ClickHouseInstallationSpecReconcilingMacrosSectionsProfiles `pulumi:"profiles"`
	// sections behaviour for macros on quotas
	Quotas *ClickHouseInstallationSpecReconcilingMacrosSectionsQuotas `pulumi:"quotas"`
	// sections behaviour for macros on settings
	Settings *ClickHouseInstallationSpecReconcilingMacrosSectionsSettings `pulumi:"settings"`
	// sections behaviour for macros on users
	Users *ClickHouseInstallationSpecReconcilingMacrosSectionsUsers `pulumi:"users"`
}

// ClickHouseInstallationSpecReconcilingMacrosSectionsInput is an input type that accepts ClickHouseInstallationSpecReconcilingMacrosSectionsArgs and ClickHouseInstallationSpecReconcilingMacrosSectionsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingMacrosSectionsInput` via:
//
//	ClickHouseInstallationSpecReconcilingMacrosSectionsArgs{...}
type ClickHouseInstallationSpecReconcilingMacrosSectionsInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingMacrosSectionsOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsOutput
	ToClickHouseInstallationSpecReconcilingMacrosSectionsOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsOutput
}

// sections behaviour for macros
type ClickHouseInstallationSpecReconcilingMacrosSectionsArgs struct {
	// sections behaviour for macros on files
	Files ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrInput `pulumi:"files"`
	// sections behaviour for macros on profiles
	Profiles ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrInput `pulumi:"profiles"`
	// sections behaviour for macros on quotas
	Quotas ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrInput `pulumi:"quotas"`
	// sections behaviour for macros on settings
	Settings ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrInput `pulumi:"settings"`
	// sections behaviour for macros on users
	Users ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrInput `pulumi:"users"`
}

func (ClickHouseInstallationSpecReconcilingMacrosSectionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSections)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsOutput)
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsOutput).ToClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingMacrosSectionsPtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingMacrosSectionsArgs, ClickHouseInstallationSpecReconcilingMacrosSectionsPtr and ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingMacrosSectionsPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingMacrosSectionsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingMacrosSectionsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput
	ToClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput
}

type clickHouseInstallationSpecReconcilingMacrosSectionsPtrType ClickHouseInstallationSpecReconcilingMacrosSectionsArgs

func ClickHouseInstallationSpecReconcilingMacrosSectionsPtr(v *ClickHouseInstallationSpecReconcilingMacrosSectionsArgs) ClickHouseInstallationSpecReconcilingMacrosSectionsPtrInput {
	return (*clickHouseInstallationSpecReconcilingMacrosSectionsPtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingMacrosSectionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingMacrosSections)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingMacrosSectionsPtrType) ToClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingMacrosSectionsPtrType) ToClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput)
}

// sections behaviour for macros
type ClickHouseInstallationSpecReconcilingMacrosSectionsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingMacrosSectionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSections)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcilingMacrosSections) *ClickHouseInstallationSpecReconcilingMacrosSections {
		return &v
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput)
}

// sections behaviour for macros on files
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsOutput) Files() ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingMacrosSections) *ClickHouseInstallationSpecReconcilingMacrosSectionsFiles {
		return v.Files
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput)
}

// sections behaviour for macros on profiles
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsOutput) Profiles() ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingMacrosSections) *ClickHouseInstallationSpecReconcilingMacrosSectionsProfiles {
		return v.Profiles
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput)
}

// sections behaviour for macros on quotas
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsOutput) Quotas() ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingMacrosSections) *ClickHouseInstallationSpecReconcilingMacrosSectionsQuotas {
		return v.Quotas
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput)
}

// sections behaviour for macros on settings
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsOutput) Settings() ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingMacrosSections) *ClickHouseInstallationSpecReconcilingMacrosSectionsSettings {
		return v.Settings
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput)
}

// sections behaviour for macros on users
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsOutput) Users() ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingMacrosSections) *ClickHouseInstallationSpecReconcilingMacrosSectionsUsers {
		return v.Users
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput)
}

type ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingMacrosSections)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput) Elem() ClickHouseInstallationSpecReconcilingMacrosSectionsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSections) ClickHouseInstallationSpecReconcilingMacrosSections {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcilingMacrosSections
		return ret
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsOutput)
}

// sections behaviour for macros on files
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput) Files() ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSections) *ClickHouseInstallationSpecReconcilingMacrosSectionsFiles {
		if v == nil {
			return nil
		}
		return v.Files
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput)
}

// sections behaviour for macros on profiles
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput) Profiles() ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSections) *ClickHouseInstallationSpecReconcilingMacrosSectionsProfiles {
		if v == nil {
			return nil
		}
		return v.Profiles
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput)
}

// sections behaviour for macros on quotas
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput) Quotas() ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSections) *ClickHouseInstallationSpecReconcilingMacrosSectionsQuotas {
		if v == nil {
			return nil
		}
		return v.Quotas
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput)
}

// sections behaviour for macros on settings
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput) Settings() ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSections) *ClickHouseInstallationSpecReconcilingMacrosSectionsSettings {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput)
}

// sections behaviour for macros on users
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput) Users() ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSections) *ClickHouseInstallationSpecReconcilingMacrosSectionsUsers {
		if v == nil {
			return nil
		}
		return v.Users
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput)
}

// sections behaviour for macros on files
type ClickHouseInstallationSpecReconcilingMacrosSectionsFiles struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationSpecReconcilingMacrosSectionsFilesInput is an input type that accepts ClickHouseInstallationSpecReconcilingMacrosSectionsFilesArgs and ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingMacrosSectionsFilesInput` via:
//
//	ClickHouseInstallationSpecReconcilingMacrosSectionsFilesArgs{...}
type ClickHouseInstallationSpecReconcilingMacrosSectionsFilesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput
	ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput
}

// sections behaviour for macros on files
type ClickHouseInstallationSpecReconcilingMacrosSectionsFilesArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationSpecReconcilingMacrosSectionsFilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsFiles)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsFilesArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsFilesArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput)
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsFilesArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsFilesArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput).ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingMacrosSectionsFilesArgs, ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtr and ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingMacrosSectionsFilesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput
	ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput
}

type clickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrType ClickHouseInstallationSpecReconcilingMacrosSectionsFilesArgs

func ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtr(v *ClickHouseInstallationSpecReconcilingMacrosSectionsFilesArgs) ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrInput {
	return (*clickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingMacrosSectionsFiles)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrType) ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrType) ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput)
}

// sections behaviour for macros on files
type ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsFiles)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcilingMacrosSectionsFiles) *ClickHouseInstallationSpecReconcilingMacrosSectionsFiles {
		return &v
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingMacrosSectionsFiles) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingMacrosSectionsFiles)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput) Elem() ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSectionsFiles) ClickHouseInstallationSpecReconcilingMacrosSectionsFiles {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcilingMacrosSectionsFiles
		return ret
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSectionsFiles) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on profiles
type ClickHouseInstallationSpecReconcilingMacrosSectionsProfiles struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesInput is an input type that accepts ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesArgs and ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesInput` via:
//
//	ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesArgs{...}
type ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput
	ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput
}

// sections behaviour for macros on profiles
type ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsProfiles)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput)
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput).ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesArgs, ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtr and ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput
	ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput
}

type clickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrType ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesArgs

func ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtr(v *ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesArgs) ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrInput {
	return (*clickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingMacrosSectionsProfiles)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrType) ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrType) ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput)
}

// sections behaviour for macros on profiles
type ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsProfiles)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcilingMacrosSectionsProfiles) *ClickHouseInstallationSpecReconcilingMacrosSectionsProfiles {
		return &v
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingMacrosSectionsProfiles) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingMacrosSectionsProfiles)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput) Elem() ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSectionsProfiles) ClickHouseInstallationSpecReconcilingMacrosSectionsProfiles {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcilingMacrosSectionsProfiles
		return ret
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSectionsProfiles) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on quotas
type ClickHouseInstallationSpecReconcilingMacrosSectionsQuotas struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasInput is an input type that accepts ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasArgs and ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasInput` via:
//
//	ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasArgs{...}
type ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput
	ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput
}

// sections behaviour for macros on quotas
type ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsQuotas)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput)
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput).ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasArgs, ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtr and ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput
	ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput
}

type clickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrType ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasArgs

func ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtr(v *ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasArgs) ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrInput {
	return (*clickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingMacrosSectionsQuotas)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrType) ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrType) ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput)
}

// sections behaviour for macros on quotas
type ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsQuotas)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcilingMacrosSectionsQuotas) *ClickHouseInstallationSpecReconcilingMacrosSectionsQuotas {
		return &v
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingMacrosSectionsQuotas) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingMacrosSectionsQuotas)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput) Elem() ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSectionsQuotas) ClickHouseInstallationSpecReconcilingMacrosSectionsQuotas {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcilingMacrosSectionsQuotas
		return ret
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSectionsQuotas) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on settings
type ClickHouseInstallationSpecReconcilingMacrosSectionsSettings struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsInput is an input type that accepts ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsArgs and ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsInput` via:
//
//	ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsArgs{...}
type ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput
	ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput
}

// sections behaviour for macros on settings
type ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsSettings)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput)
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput).ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsArgs, ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtr and ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput
	ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput
}

type clickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrType ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsArgs

func ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtr(v *ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsArgs) ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrInput {
	return (*clickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingMacrosSectionsSettings)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrType) ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrType) ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput)
}

// sections behaviour for macros on settings
type ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsSettings)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcilingMacrosSectionsSettings) *ClickHouseInstallationSpecReconcilingMacrosSectionsSettings {
		return &v
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingMacrosSectionsSettings) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingMacrosSectionsSettings)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput) Elem() ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSectionsSettings) ClickHouseInstallationSpecReconcilingMacrosSectionsSettings {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcilingMacrosSectionsSettings
		return ret
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSectionsSettings) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on users
type ClickHouseInstallationSpecReconcilingMacrosSectionsUsers struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationSpecReconcilingMacrosSectionsUsersInput is an input type that accepts ClickHouseInstallationSpecReconcilingMacrosSectionsUsersArgs and ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingMacrosSectionsUsersInput` via:
//
//	ClickHouseInstallationSpecReconcilingMacrosSectionsUsersArgs{...}
type ClickHouseInstallationSpecReconcilingMacrosSectionsUsersInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput
	ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput
}

// sections behaviour for macros on users
type ClickHouseInstallationSpecReconcilingMacrosSectionsUsersArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationSpecReconcilingMacrosSectionsUsersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsUsers)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsUsersArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsUsersArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput)
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsUsersArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingMacrosSectionsUsersArgs) ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput).ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingMacrosSectionsUsersArgs, ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtr and ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingMacrosSectionsUsersArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput
	ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput
}

type clickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrType ClickHouseInstallationSpecReconcilingMacrosSectionsUsersArgs

func ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtr(v *ClickHouseInstallationSpecReconcilingMacrosSectionsUsersArgs) ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrInput {
	return (*clickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingMacrosSectionsUsers)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrType) ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrType) ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput)
}

// sections behaviour for macros on users
type ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsUsers)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcilingMacrosSectionsUsers) *ClickHouseInstallationSpecReconcilingMacrosSectionsUsers {
		return &v
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingMacrosSectionsUsers) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingMacrosSectionsUsers)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput() ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput) ToClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput) Elem() ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSectionsUsers) ClickHouseInstallationSpecReconcilingMacrosSectionsUsers {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcilingMacrosSectionsUsers
		return ret
	}).(ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput)
}

// enabled or not
func (o ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingMacrosSectionsUsers) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationSpecReconcilingRuntime struct {
	// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
	ReconcileShardsMaxConcurrencyPercent *int `pulumi:"reconcileShardsMaxConcurrencyPercent"`
	// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
	ReconcileShardsThreadsNumber *int `pulumi:"reconcileShardsThreadsNumber"`
}

// ClickHouseInstallationSpecReconcilingRuntimeInput is an input type that accepts ClickHouseInstallationSpecReconcilingRuntimeArgs and ClickHouseInstallationSpecReconcilingRuntimeOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingRuntimeInput` via:
//
//	ClickHouseInstallationSpecReconcilingRuntimeArgs{...}
type ClickHouseInstallationSpecReconcilingRuntimeInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingRuntimeOutput() ClickHouseInstallationSpecReconcilingRuntimeOutput
	ToClickHouseInstallationSpecReconcilingRuntimeOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingRuntimeOutput
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationSpecReconcilingRuntimeArgs struct {
	// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
	ReconcileShardsMaxConcurrencyPercent pulumi.IntPtrInput `pulumi:"reconcileShardsMaxConcurrencyPercent"`
	// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
	ReconcileShardsThreadsNumber pulumi.IntPtrInput `pulumi:"reconcileShardsThreadsNumber"`
}

func (ClickHouseInstallationSpecReconcilingRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingRuntime)(nil)).Elem()
}

func (i ClickHouseInstallationSpecReconcilingRuntimeArgs) ToClickHouseInstallationSpecReconcilingRuntimeOutput() ClickHouseInstallationSpecReconcilingRuntimeOutput {
	return i.ToClickHouseInstallationSpecReconcilingRuntimeOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingRuntimeArgs) ToClickHouseInstallationSpecReconcilingRuntimeOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingRuntimeOutput)
}

func (i ClickHouseInstallationSpecReconcilingRuntimeArgs) ToClickHouseInstallationSpecReconcilingRuntimePtrOutput() ClickHouseInstallationSpecReconcilingRuntimePtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingRuntimePtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecReconcilingRuntimeArgs) ToClickHouseInstallationSpecReconcilingRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingRuntimeOutput).ToClickHouseInstallationSpecReconcilingRuntimePtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecReconcilingRuntimePtrInput is an input type that accepts ClickHouseInstallationSpecReconcilingRuntimeArgs, ClickHouseInstallationSpecReconcilingRuntimePtr and ClickHouseInstallationSpecReconcilingRuntimePtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecReconcilingRuntimePtrInput` via:
//
//	        ClickHouseInstallationSpecReconcilingRuntimeArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecReconcilingRuntimePtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecReconcilingRuntimePtrOutput() ClickHouseInstallationSpecReconcilingRuntimePtrOutput
	ToClickHouseInstallationSpecReconcilingRuntimePtrOutputWithContext(context.Context) ClickHouseInstallationSpecReconcilingRuntimePtrOutput
}

type clickHouseInstallationSpecReconcilingRuntimePtrType ClickHouseInstallationSpecReconcilingRuntimeArgs

func ClickHouseInstallationSpecReconcilingRuntimePtr(v *ClickHouseInstallationSpecReconcilingRuntimeArgs) ClickHouseInstallationSpecReconcilingRuntimePtrInput {
	return (*clickHouseInstallationSpecReconcilingRuntimePtrType)(v)
}

func (*clickHouseInstallationSpecReconcilingRuntimePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingRuntime)(nil)).Elem()
}

func (i *clickHouseInstallationSpecReconcilingRuntimePtrType) ToClickHouseInstallationSpecReconcilingRuntimePtrOutput() ClickHouseInstallationSpecReconcilingRuntimePtrOutput {
	return i.ToClickHouseInstallationSpecReconcilingRuntimePtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecReconcilingRuntimePtrType) ToClickHouseInstallationSpecReconcilingRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecReconcilingRuntimePtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationSpecReconcilingRuntimeOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecReconcilingRuntime)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingRuntimeOutput) ToClickHouseInstallationSpecReconcilingRuntimeOutput() ClickHouseInstallationSpecReconcilingRuntimeOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingRuntimeOutput) ToClickHouseInstallationSpecReconcilingRuntimeOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingRuntimeOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingRuntimeOutput) ToClickHouseInstallationSpecReconcilingRuntimePtrOutput() ClickHouseInstallationSpecReconcilingRuntimePtrOutput {
	return o.ToClickHouseInstallationSpecReconcilingRuntimePtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecReconcilingRuntimeOutput) ToClickHouseInstallationSpecReconcilingRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingRuntimePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecReconcilingRuntime) *ClickHouseInstallationSpecReconcilingRuntime {
		return &v
	}).(ClickHouseInstallationSpecReconcilingRuntimePtrOutput)
}

// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
func (o ClickHouseInstallationSpecReconcilingRuntimeOutput) ReconcileShardsMaxConcurrencyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingRuntime) *int {
		return v.ReconcileShardsMaxConcurrencyPercent
	}).(pulumi.IntPtrOutput)
}

// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
func (o ClickHouseInstallationSpecReconcilingRuntimeOutput) ReconcileShardsThreadsNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecReconcilingRuntime) *int { return v.ReconcileShardsThreadsNumber }).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationSpecReconcilingRuntimePtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecReconcilingRuntimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecReconcilingRuntime)(nil)).Elem()
}

func (o ClickHouseInstallationSpecReconcilingRuntimePtrOutput) ToClickHouseInstallationSpecReconcilingRuntimePtrOutput() ClickHouseInstallationSpecReconcilingRuntimePtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingRuntimePtrOutput) ToClickHouseInstallationSpecReconcilingRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecReconcilingRuntimePtrOutput {
	return o
}

func (o ClickHouseInstallationSpecReconcilingRuntimePtrOutput) Elem() ClickHouseInstallationSpecReconcilingRuntimeOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingRuntime) ClickHouseInstallationSpecReconcilingRuntime {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecReconcilingRuntime
		return ret
	}).(ClickHouseInstallationSpecReconcilingRuntimeOutput)
}

// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
func (o ClickHouseInstallationSpecReconcilingRuntimePtrOutput) ReconcileShardsMaxConcurrencyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingRuntime) *int {
		if v == nil {
			return nil
		}
		return v.ReconcileShardsMaxConcurrencyPercent
	}).(pulumi.IntPtrOutput)
}

// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
func (o ClickHouseInstallationSpecReconcilingRuntimePtrOutput) ReconcileShardsThreadsNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecReconcilingRuntime) *int {
		if v == nil {
			return nil
		}
		return v.ReconcileShardsThreadsNumber
	}).(pulumi.IntPtrOutput)
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
type ClickHouseInstallationSpecTemplates struct {
	// hostTemplate will use during apply to generate `clickhose-server` config files
	HostTemplates []ClickHouseInstallationSpecTemplatesHostTemplates `pulumi:"hostTemplates"`
	// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
	// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
	PodTemplates []ClickHouseInstallationSpecTemplatesPodTemplates `pulumi:"podTemplates"`
	// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
	ServiceTemplates []ClickHouseInstallationSpecTemplatesServiceTemplates `pulumi:"serviceTemplates"`
	// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
	VolumeClaimTemplates []ClickHouseInstallationSpecTemplatesVolumeClaimTemplates `pulumi:"volumeClaimTemplates"`
}

// ClickHouseInstallationSpecTemplatesInput is an input type that accepts ClickHouseInstallationSpecTemplatesArgs and ClickHouseInstallationSpecTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesInput` via:
//
//	ClickHouseInstallationSpecTemplatesArgs{...}
type ClickHouseInstallationSpecTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesOutput() ClickHouseInstallationSpecTemplatesOutput
	ToClickHouseInstallationSpecTemplatesOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesOutput
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
type ClickHouseInstallationSpecTemplatesArgs struct {
	// hostTemplate will use during apply to generate `clickhose-server` config files
	HostTemplates ClickHouseInstallationSpecTemplatesHostTemplatesArrayInput `pulumi:"hostTemplates"`
	// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
	// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
	PodTemplates ClickHouseInstallationSpecTemplatesPodTemplatesArrayInput `pulumi:"podTemplates"`
	// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
	ServiceTemplates ClickHouseInstallationSpecTemplatesServiceTemplatesArrayInput `pulumi:"serviceTemplates"`
	// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
	VolumeClaimTemplates ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayInput `pulumi:"volumeClaimTemplates"`
}

func (ClickHouseInstallationSpecTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesArgs) ToClickHouseInstallationSpecTemplatesOutput() ClickHouseInstallationSpecTemplatesOutput {
	return i.ToClickHouseInstallationSpecTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesArgs) ToClickHouseInstallationSpecTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesOutput)
}

func (i ClickHouseInstallationSpecTemplatesArgs) ToClickHouseInstallationSpecTemplatesPtrOutput() ClickHouseInstallationSpecTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesArgs) ToClickHouseInstallationSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesOutput).ToClickHouseInstallationSpecTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecTemplatesPtrInput is an input type that accepts ClickHouseInstallationSpecTemplatesArgs, ClickHouseInstallationSpecTemplatesPtr and ClickHouseInstallationSpecTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesPtrInput` via:
//
//	        ClickHouseInstallationSpecTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesPtrOutput() ClickHouseInstallationSpecTemplatesPtrOutput
	ToClickHouseInstallationSpecTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesPtrOutput
}

type clickHouseInstallationSpecTemplatesPtrType ClickHouseInstallationSpecTemplatesArgs

func ClickHouseInstallationSpecTemplatesPtr(v *ClickHouseInstallationSpecTemplatesArgs) ClickHouseInstallationSpecTemplatesPtrInput {
	return (*clickHouseInstallationSpecTemplatesPtrType)(v)
}

func (*clickHouseInstallationSpecTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationSpecTemplatesPtrType) ToClickHouseInstallationSpecTemplatesPtrOutput() ClickHouseInstallationSpecTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecTemplatesPtrType) ToClickHouseInstallationSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesPtrOutput)
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
type ClickHouseInstallationSpecTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesOutput) ToClickHouseInstallationSpecTemplatesOutput() ClickHouseInstallationSpecTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesOutput) ToClickHouseInstallationSpecTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesOutput) ToClickHouseInstallationSpecTemplatesPtrOutput() ClickHouseInstallationSpecTemplatesPtrOutput {
	return o.ToClickHouseInstallationSpecTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecTemplatesOutput) ToClickHouseInstallationSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecTemplates) *ClickHouseInstallationSpecTemplates {
		return &v
	}).(ClickHouseInstallationSpecTemplatesPtrOutput)
}

// hostTemplate will use during apply to generate `clickhose-server` config files
func (o ClickHouseInstallationSpecTemplatesOutput) HostTemplates() ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplates) []ClickHouseInstallationSpecTemplatesHostTemplates {
		return v.HostTemplates
	}).(ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput)
}

// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
func (o ClickHouseInstallationSpecTemplatesOutput) PodTemplates() ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplates) []ClickHouseInstallationSpecTemplatesPodTemplates {
		return v.PodTemplates
	}).(ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput)
}

// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
func (o ClickHouseInstallationSpecTemplatesOutput) ServiceTemplates() ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplates) []ClickHouseInstallationSpecTemplatesServiceTemplates {
		return v.ServiceTemplates
	}).(ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput)
}

// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
func (o ClickHouseInstallationSpecTemplatesOutput) VolumeClaimTemplates() ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplates) []ClickHouseInstallationSpecTemplatesVolumeClaimTemplates {
		return v.VolumeClaimTemplates
	}).(ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput)
}

type ClickHouseInstallationSpecTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesPtrOutput) ToClickHouseInstallationSpecTemplatesPtrOutput() ClickHouseInstallationSpecTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesPtrOutput) ToClickHouseInstallationSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesPtrOutput) Elem() ClickHouseInstallationSpecTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplates) ClickHouseInstallationSpecTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecTemplates
		return ret
	}).(ClickHouseInstallationSpecTemplatesOutput)
}

// hostTemplate will use during apply to generate `clickhose-server` config files
func (o ClickHouseInstallationSpecTemplatesPtrOutput) HostTemplates() ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplates) []ClickHouseInstallationSpecTemplatesHostTemplates {
		if v == nil {
			return nil
		}
		return v.HostTemplates
	}).(ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput)
}

// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
func (o ClickHouseInstallationSpecTemplatesPtrOutput) PodTemplates() ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplates) []ClickHouseInstallationSpecTemplatesPodTemplates {
		if v == nil {
			return nil
		}
		return v.PodTemplates
	}).(ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput)
}

// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
func (o ClickHouseInstallationSpecTemplatesPtrOutput) ServiceTemplates() ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplates) []ClickHouseInstallationSpecTemplatesServiceTemplates {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput)
}

// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
func (o ClickHouseInstallationSpecTemplatesPtrOutput) VolumeClaimTemplates() ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplates) []ClickHouseInstallationSpecTemplatesVolumeClaimTemplates {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplates
	}).(ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput)
}

type ClickHouseInstallationSpecTemplatesHostTemplates struct {
	// template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`
	Name *string `pulumi:"name"`
	// define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs
	PortDistribution []ClickHouseInstallationSpecTemplatesHostTemplatesPortDistribution `pulumi:"portDistribution"`
	Spec             *ClickHouseInstallationSpecTemplatesHostTemplatesSpec              `pulumi:"spec"`
}

// ClickHouseInstallationSpecTemplatesHostTemplatesInput is an input type that accepts ClickHouseInstallationSpecTemplatesHostTemplatesArgs and ClickHouseInstallationSpecTemplatesHostTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesHostTemplatesInput` via:
//
//	ClickHouseInstallationSpecTemplatesHostTemplatesArgs{...}
type ClickHouseInstallationSpecTemplatesHostTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesHostTemplatesOutput() ClickHouseInstallationSpecTemplatesHostTemplatesOutput
	ToClickHouseInstallationSpecTemplatesHostTemplatesOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesOutput
}

type ClickHouseInstallationSpecTemplatesHostTemplatesArgs struct {
	// template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs
	PortDistribution ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayInput `pulumi:"portDistribution"`
	Spec             ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrInput               `pulumi:"spec"`
}

func (ClickHouseInstallationSpecTemplatesHostTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesArgs) ToClickHouseInstallationSpecTemplatesHostTemplatesOutput() ClickHouseInstallationSpecTemplatesHostTemplatesOutput {
	return i.ToClickHouseInstallationSpecTemplatesHostTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesArgs) ToClickHouseInstallationSpecTemplatesHostTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesHostTemplatesOutput)
}

// ClickHouseInstallationSpecTemplatesHostTemplatesArrayInput is an input type that accepts ClickHouseInstallationSpecTemplatesHostTemplatesArray and ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesHostTemplatesArrayInput` via:
//
//	ClickHouseInstallationSpecTemplatesHostTemplatesArray{ ClickHouseInstallationSpecTemplatesHostTemplatesArgs{...} }
type ClickHouseInstallationSpecTemplatesHostTemplatesArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput() ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput
	ToClickHouseInstallationSpecTemplatesHostTemplatesArrayOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput
}

type ClickHouseInstallationSpecTemplatesHostTemplatesArray []ClickHouseInstallationSpecTemplatesHostTemplatesInput

func (ClickHouseInstallationSpecTemplatesHostTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecTemplatesHostTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesArray) ToClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput() ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput {
	return i.ToClickHouseInstallationSpecTemplatesHostTemplatesArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesArray) ToClickHouseInstallationSpecTemplatesHostTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput)
}

type ClickHouseInstallationSpecTemplatesHostTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesHostTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesOutput() ClickHouseInstallationSpecTemplatesHostTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesOutput {
	return o
}

// template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplates) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs
func (o ClickHouseInstallationSpecTemplatesHostTemplatesOutput) PortDistribution() ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplates) []ClickHouseInstallationSpecTemplatesHostTemplatesPortDistribution {
		return v.PortDistribution
	}).(ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput)
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesOutput) Spec() ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplates) *ClickHouseInstallationSpecTemplatesHostTemplatesSpec {
		return v.Spec
	}).(ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput)
}

type ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecTemplatesHostTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput() ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationSpecTemplatesHostTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationSpecTemplatesHostTemplates {
		return vs[0].([]ClickHouseInstallationSpecTemplatesHostTemplates)[vs[1].(int)]
	}).(ClickHouseInstallationSpecTemplatesHostTemplatesOutput)
}

type ClickHouseInstallationSpecTemplatesHostTemplatesPortDistribution struct {
	// type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network
	Type *string `pulumi:"type"`
}

// ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionInput is an input type that accepts ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArgs and ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionInput` via:
//
//	ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArgs{...}
type ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput() ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput
	ToClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput
}

type ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArgs struct {
	// type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplatesPortDistribution)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArgs) ToClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput() ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput {
	return i.ToClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArgs) ToClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput)
}

// ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayInput is an input type that accepts ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArray and ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayInput` via:
//
//	ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArray{ ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArgs{...} }
type ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput() ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput
	ToClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput
}

type ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArray []ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionInput

func (ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecTemplatesHostTemplatesPortDistribution)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArray) ToClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput() ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput {
	return i.ToClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArray) ToClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput)
}

type ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplatesPortDistribution)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput() ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput {
	return o
}

// type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network
func (o ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesPortDistribution) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecTemplatesHostTemplatesPortDistribution)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput() ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationSpecTemplatesHostTemplatesPortDistribution {
		return vs[0].([]ClickHouseInstallationSpecTemplatesHostTemplatesPortDistribution)[vs[1].(int)]
	}).(ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput)
}

type ClickHouseInstallationSpecTemplatesHostTemplatesSpec struct {
	// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	Files map[string]interface{} `pulumi:"files"`
	// optional, setup `http_port` inside `clickhouse-server` settings for each Pod where current template will apply
	// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=http]`
	// More info: https://clickhouse.tech/docs/en/interfaces/http/
	HttpPort  *int `pulumi:"httpPort"`
	HttpsPort *int `pulumi:"httpsPort"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure *string `pulumi:"insecure"`
	// optional, setup `interserver_http_port` inside `clickhouse-server` settings for each Pod where current template will apply
	// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=interserver]`
	// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#interserver-http-port
	InterserverHTTPPort *int `pulumi:"interserverHTTPPort"`
	// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
	Name *string `pulumi:"name"`
	// optional, open secure ports
	Secure *string `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings map[string]interface{} `pulumi:"settings"`
	// optional, setup `tcp_port` inside `clickhouse-server` settings for each Pod where current template will apply
	// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=tcp]`
	// More info: https://clickhouse.tech/docs/en/interfaces/tcp/
	TcpPort *int `pulumi:"tcpPort"`
	// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
	Templates *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates `pulumi:"templates"`
	TlsPort   *int                                                           `pulumi:"tlsPort"`
}

// ClickHouseInstallationSpecTemplatesHostTemplatesSpecInput is an input type that accepts ClickHouseInstallationSpecTemplatesHostTemplatesSpecArgs and ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesHostTemplatesSpecInput` via:
//
//	ClickHouseInstallationSpecTemplatesHostTemplatesSpecArgs{...}
type ClickHouseInstallationSpecTemplatesHostTemplatesSpecInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput
	ToClickHouseInstallationSpecTemplatesHostTemplatesSpecOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput
}

type ClickHouseInstallationSpecTemplatesHostTemplatesSpecArgs struct {
	// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	Files pulumi.MapInput `pulumi:"files"`
	// optional, setup `http_port` inside `clickhouse-server` settings for each Pod where current template will apply
	// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=http]`
	// More info: https://clickhouse.tech/docs/en/interfaces/http/
	HttpPort  pulumi.IntPtrInput `pulumi:"httpPort"`
	HttpsPort pulumi.IntPtrInput `pulumi:"httpsPort"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure pulumi.StringPtrInput `pulumi:"insecure"`
	// optional, setup `interserver_http_port` inside `clickhouse-server` settings for each Pod where current template will apply
	// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=interserver]`
	// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#interserver-http-port
	InterserverHTTPPort pulumi.IntPtrInput `pulumi:"interserverHTTPPort"`
	// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional, open secure ports
	Secure pulumi.StringPtrInput `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings pulumi.MapInput `pulumi:"settings"`
	// optional, setup `tcp_port` inside `clickhouse-server` settings for each Pod where current template will apply
	// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=tcp]`
	// More info: https://clickhouse.tech/docs/en/interfaces/tcp/
	TcpPort pulumi.IntPtrInput `pulumi:"tcpPort"`
	// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
	Templates ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrInput `pulumi:"templates"`
	TlsPort   pulumi.IntPtrInput                                                    `pulumi:"tlsPort"`
}

func (ClickHouseInstallationSpecTemplatesHostTemplatesSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplatesSpec)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesSpecArgs) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput {
	return i.ToClickHouseInstallationSpecTemplatesHostTemplatesSpecOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesSpecArgs) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput)
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesSpecArgs) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return i.ToClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesSpecArgs) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput).ToClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrInput is an input type that accepts ClickHouseInstallationSpecTemplatesHostTemplatesSpecArgs, ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtr and ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrInput` via:
//
//	        ClickHouseInstallationSpecTemplatesHostTemplatesSpecArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput
	ToClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput
}

type clickHouseInstallationSpecTemplatesHostTemplatesSpecPtrType ClickHouseInstallationSpecTemplatesHostTemplatesSpecArgs

func ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtr(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpecArgs) ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrInput {
	return (*clickHouseInstallationSpecTemplatesHostTemplatesSpecPtrType)(v)
}

func (*clickHouseInstallationSpecTemplatesHostTemplatesSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecTemplatesHostTemplatesSpec)(nil)).Elem()
}

func (i *clickHouseInstallationSpecTemplatesHostTemplatesSpecPtrType) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return i.ToClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecTemplatesHostTemplatesSpecPtrType) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput)
}

type ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplatesSpec)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return o.ToClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *ClickHouseInstallationSpecTemplatesHostTemplatesSpec {
		return &v
	}).(ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput)
}

// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpec) map[string]interface{} { return v.Files }).(pulumi.MapOutput)
}

// optional, setup `http_port` inside `clickhouse-server` settings for each Pod where current template will apply
// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=http]`
// More info: https://clickhouse.tech/docs/en/interfaces/http/
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *int { return v.HttpsPort }).(pulumi.IntPtrOutput)
}

// optional, open insecure ports for cluster, defaults to "yes"
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) Insecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *string { return v.Insecure }).(pulumi.StringPtrOutput)
}

// optional, setup `interserver_http_port` inside `clickhouse-server` settings for each Pod where current template will apply
// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=interserver]`
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#interserver-http-port
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) InterserverHTTPPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *int { return v.InterserverHTTPPort }).(pulumi.IntPtrOutput)
}

// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional, open secure ports
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) Secure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *string { return v.Secure }).(pulumi.StringPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpec) map[string]interface{} { return v.Settings }).(pulumi.MapOutput)
}

// optional, setup `tcp_port` inside `clickhouse-server` settings for each Pod where current template will apply
// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=tcp]`
// More info: https://clickhouse.tech/docs/en/interfaces/tcp/
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) TcpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *int { return v.TcpPort }).(pulumi.IntPtrOutput)
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) Templates() ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates {
		return v.Templates
	}).(ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput)
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput) TlsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *int { return v.TlsPort }).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecTemplatesHostTemplatesSpec)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput) Elem() ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpec) ClickHouseInstallationSpecTemplatesHostTemplatesSpec {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecTemplatesHostTemplatesSpec
		return ret
	}).(ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput)
}

// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.MapOutput)
}

// optional, setup `http_port` inside `clickhouse-server` settings for each Pod where current template will apply
// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=http]`
// More info: https://clickhouse.tech/docs/en/interfaces/http/
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *int {
		if v == nil {
			return nil
		}
		return v.HttpPort
	}).(pulumi.IntPtrOutput)
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *int {
		if v == nil {
			return nil
		}
		return v.HttpsPort
	}).(pulumi.IntPtrOutput)
}

// optional, open insecure ports for cluster, defaults to "yes"
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput) Insecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *string {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.StringPtrOutput)
}

// optional, setup `interserver_http_port` inside `clickhouse-server` settings for each Pod where current template will apply
// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=interserver]`
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#interserver-http-port
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput) InterserverHTTPPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *int {
		if v == nil {
			return nil
		}
		return v.InterserverHTTPPort
	}).(pulumi.IntPtrOutput)
}

// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional, open secure ports
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput) Secure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *string {
		if v == nil {
			return nil
		}
		return v.Secure
	}).(pulumi.StringPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.MapOutput)
}

// optional, setup `tcp_port` inside `clickhouse-server` settings for each Pod where current template will apply
// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=tcp]`
// More info: https://clickhouse.tech/docs/en/interfaces/tcp/
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput) TcpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *int {
		if v == nil {
			return nil
		}
		return v.TcpPort
	}).(pulumi.IntPtrOutput)
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput) Templates() ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput)
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput) TlsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpec) *int {
		if v == nil {
			return nil
		}
		return v.TlsPort
	}).(pulumi.IntPtrOutput)
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
type ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesInput is an input type that accepts ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs and ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesInput` via:
//
//	ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs{...}
type ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput
	ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
type ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput {
	return i.ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput)
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput).ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrInput is an input type that accepts ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs, ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtr and ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrInput` via:
//
//	        ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput
	ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput
}

type clickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrType ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs

func ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtr(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs) ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrInput {
	return (*clickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrType)(v)
}

func (*clickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrType) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return i.ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrType) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput)
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
type ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o.ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates {
		return &v
	}).(ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string { return v.HostTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string { return v.PodTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput() ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ToClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) Elem() ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates
		return ret
	}).(ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecTemplatesPodTemplates struct {
	// DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
	Distribution *string `pulumi:"distribution"`
	// allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about available template variables
	GenerateName *string `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Pod
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata map[string]interface{} `pulumi:"metadata"`
	// template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`
	Name *string `pulumi:"name"`
	// define ClickHouse Pod distribution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster
	PodDistribution []ClickHouseInstallationSpecTemplatesPodTemplatesPodDistribution `pulumi:"podDistribution"`
	// allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details
	Spec map[string]interface{} `pulumi:"spec"`
	// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
	Zone *ClickHouseInstallationSpecTemplatesPodTemplatesZone `pulumi:"zone"`
}

// ClickHouseInstallationSpecTemplatesPodTemplatesInput is an input type that accepts ClickHouseInstallationSpecTemplatesPodTemplatesArgs and ClickHouseInstallationSpecTemplatesPodTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesPodTemplatesInput` via:
//
//	ClickHouseInstallationSpecTemplatesPodTemplatesArgs{...}
type ClickHouseInstallationSpecTemplatesPodTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesPodTemplatesOutput() ClickHouseInstallationSpecTemplatesPodTemplatesOutput
	ToClickHouseInstallationSpecTemplatesPodTemplatesOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesOutput
}

type ClickHouseInstallationSpecTemplatesPodTemplatesArgs struct {
	// DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
	Distribution pulumi.StringPtrInput `pulumi:"distribution"`
	// allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about available template variables
	GenerateName pulumi.StringPtrInput `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Pod
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// define ClickHouse Pod distribution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster
	PodDistribution ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayInput `pulumi:"podDistribution"`
	// allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details
	Spec pulumi.MapInput `pulumi:"spec"`
	// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
	Zone ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrInput `pulumi:"zone"`
}

func (ClickHouseInstallationSpecTemplatesPodTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesPodTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesPodTemplatesArgs) ToClickHouseInstallationSpecTemplatesPodTemplatesOutput() ClickHouseInstallationSpecTemplatesPodTemplatesOutput {
	return i.ToClickHouseInstallationSpecTemplatesPodTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesPodTemplatesArgs) ToClickHouseInstallationSpecTemplatesPodTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesPodTemplatesOutput)
}

// ClickHouseInstallationSpecTemplatesPodTemplatesArrayInput is an input type that accepts ClickHouseInstallationSpecTemplatesPodTemplatesArray and ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesPodTemplatesArrayInput` via:
//
//	ClickHouseInstallationSpecTemplatesPodTemplatesArray{ ClickHouseInstallationSpecTemplatesPodTemplatesArgs{...} }
type ClickHouseInstallationSpecTemplatesPodTemplatesArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput() ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput
	ToClickHouseInstallationSpecTemplatesPodTemplatesArrayOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput
}

type ClickHouseInstallationSpecTemplatesPodTemplatesArray []ClickHouseInstallationSpecTemplatesPodTemplatesInput

func (ClickHouseInstallationSpecTemplatesPodTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecTemplatesPodTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesPodTemplatesArray) ToClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput() ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput {
	return i.ToClickHouseInstallationSpecTemplatesPodTemplatesArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesPodTemplatesArray) ToClickHouseInstallationSpecTemplatesPodTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput)
}

type ClickHouseInstallationSpecTemplatesPodTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesPodTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesPodTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesOutput) ToClickHouseInstallationSpecTemplatesPodTemplatesOutput() ClickHouseInstallationSpecTemplatesPodTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesOutput) ToClickHouseInstallationSpecTemplatesPodTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesOutput {
	return o
}

// DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
func (o ClickHouseInstallationSpecTemplatesPodTemplatesOutput) Distribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesPodTemplates) *string { return v.Distribution }).(pulumi.StringPtrOutput)
}

// allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about available template variables
func (o ClickHouseInstallationSpecTemplatesPodTemplatesOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesPodTemplates) *string { return v.GenerateName }).(pulumi.StringPtrOutput)
}

// allows pass standard object's metadata from template to Pod
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseInstallationSpecTemplatesPodTemplatesOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesPodTemplates) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`
func (o ClickHouseInstallationSpecTemplatesPodTemplatesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesPodTemplates) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// define ClickHouse Pod distribution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster
func (o ClickHouseInstallationSpecTemplatesPodTemplatesOutput) PodDistribution() ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesPodTemplates) []ClickHouseInstallationSpecTemplatesPodTemplatesPodDistribution {
		return v.PodDistribution
	}).(ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput)
}

// allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details
func (o ClickHouseInstallationSpecTemplatesPodTemplatesOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesPodTemplates) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
func (o ClickHouseInstallationSpecTemplatesPodTemplatesOutput) Zone() ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesPodTemplates) *ClickHouseInstallationSpecTemplatesPodTemplatesZone {
		return v.Zone
	}).(ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput)
}

type ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecTemplatesPodTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput) ToClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput() ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput) ToClickHouseInstallationSpecTemplatesPodTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationSpecTemplatesPodTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationSpecTemplatesPodTemplates {
		return vs[0].([]ClickHouseInstallationSpecTemplatesPodTemplates)[vs[1].(int)]
	}).(ClickHouseInstallationSpecTemplatesPodTemplatesOutput)
}

type ClickHouseInstallationSpecTemplatesPodTemplatesPodDistribution struct {
	// define, how much ClickHouse Pods could be inside selected scope with selected distribution type
	Number *int `pulumi:"number"`
	// scope for apply each podDistribution
	Scope *string `pulumi:"scope"`
	// use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`,
	// more info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity"
	TopologyKey *string `pulumi:"topologyKey"`
	// you can define multiple affinity policy types
	Type *string `pulumi:"type"`
}

// ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionInput is an input type that accepts ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArgs and ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionInput` via:
//
//	ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArgs{...}
type ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput() ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput
	ToClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput
}

type ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArgs struct {
	// define, how much ClickHouse Pods could be inside selected scope with selected distribution type
	Number pulumi.IntPtrInput `pulumi:"number"`
	// scope for apply each podDistribution
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`,
	// more info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity"
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
	// you can define multiple affinity policy types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesPodTemplatesPodDistribution)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArgs) ToClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput() ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput {
	return i.ToClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArgs) ToClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput)
}

// ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayInput is an input type that accepts ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArray and ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayInput` via:
//
//	ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArray{ ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArgs{...} }
type ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput() ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput
	ToClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput
}

type ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArray []ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionInput

func (ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecTemplatesPodTemplatesPodDistribution)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArray) ToClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput() ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput {
	return i.ToClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArray) ToClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput)
}

type ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesPodTemplatesPodDistribution)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput) ToClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput() ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput) ToClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput {
	return o
}

// define, how much ClickHouse Pods could be inside selected scope with selected distribution type
func (o ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesPodTemplatesPodDistribution) *int { return v.Number }).(pulumi.IntPtrOutput)
}

// scope for apply each podDistribution
func (o ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesPodTemplatesPodDistribution) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`,
// more info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity"
func (o ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesPodTemplatesPodDistribution) *string { return v.TopologyKey }).(pulumi.StringPtrOutput)
}

// you can define multiple affinity policy types
func (o ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesPodTemplatesPodDistribution) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecTemplatesPodTemplatesPodDistribution)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput) ToClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput() ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput) ToClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationSpecTemplatesPodTemplatesPodDistribution {
		return vs[0].([]ClickHouseInstallationSpecTemplatesPodTemplatesPodDistribution)[vs[1].(int)]
	}).(ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput)
}

// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
type ClickHouseInstallationSpecTemplatesPodTemplatesZone struct {
	// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
	Key *string `pulumi:"key"`
	// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
	Values []string `pulumi:"values"`
}

// ClickHouseInstallationSpecTemplatesPodTemplatesZoneInput is an input type that accepts ClickHouseInstallationSpecTemplatesPodTemplatesZoneArgs and ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesPodTemplatesZoneInput` via:
//
//	ClickHouseInstallationSpecTemplatesPodTemplatesZoneArgs{...}
type ClickHouseInstallationSpecTemplatesPodTemplatesZoneInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput() ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput
	ToClickHouseInstallationSpecTemplatesPodTemplatesZoneOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput
}

// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
type ClickHouseInstallationSpecTemplatesPodTemplatesZoneArgs struct {
	// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
	Key pulumi.StringPtrInput `pulumi:"key"`
	// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ClickHouseInstallationSpecTemplatesPodTemplatesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesPodTemplatesZone)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesPodTemplatesZoneArgs) ToClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput() ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput {
	return i.ToClickHouseInstallationSpecTemplatesPodTemplatesZoneOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesPodTemplatesZoneArgs) ToClickHouseInstallationSpecTemplatesPodTemplatesZoneOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput)
}

func (i ClickHouseInstallationSpecTemplatesPodTemplatesZoneArgs) ToClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput() ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return i.ToClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesPodTemplatesZoneArgs) ToClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput).ToClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrInput is an input type that accepts ClickHouseInstallationSpecTemplatesPodTemplatesZoneArgs, ClickHouseInstallationSpecTemplatesPodTemplatesZonePtr and ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrInput` via:
//
//	        ClickHouseInstallationSpecTemplatesPodTemplatesZoneArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput() ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput
	ToClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput
}

type clickHouseInstallationSpecTemplatesPodTemplatesZonePtrType ClickHouseInstallationSpecTemplatesPodTemplatesZoneArgs

func ClickHouseInstallationSpecTemplatesPodTemplatesZonePtr(v *ClickHouseInstallationSpecTemplatesPodTemplatesZoneArgs) ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrInput {
	return (*clickHouseInstallationSpecTemplatesPodTemplatesZonePtrType)(v)
}

func (*clickHouseInstallationSpecTemplatesPodTemplatesZonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecTemplatesPodTemplatesZone)(nil)).Elem()
}

func (i *clickHouseInstallationSpecTemplatesPodTemplatesZonePtrType) ToClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput() ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return i.ToClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecTemplatesPodTemplatesZonePtrType) ToClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput)
}

// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
type ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesPodTemplatesZone)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput) ToClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput() ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput) ToClickHouseInstallationSpecTemplatesPodTemplatesZoneOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput) ToClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput() ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return o.ToClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput) ToClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecTemplatesPodTemplatesZone) *ClickHouseInstallationSpecTemplatesPodTemplatesZone {
		return &v
	}).(ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
func (o ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesPodTemplatesZone) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
func (o ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesPodTemplatesZone) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecTemplatesPodTemplatesZone)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput) ToClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput() ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput) ToClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput) Elem() ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesPodTemplatesZone) ClickHouseInstallationSpecTemplatesPodTemplatesZone {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecTemplatesPodTemplatesZone
		return ret
	}).(ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
func (o ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesPodTemplatesZone) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
func (o ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplatesPodTemplatesZone) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ClickHouseInstallationSpecTemplatesServiceTemplates struct {
	// allows define format for generated `Service` name,
	// look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates
	// for details about available template variables"
	GenerateName *string `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Service
	// Could be use for define specificly for Cloud Provider metadata which impact to behavior of service
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata map[string]interface{} `pulumi:"metadata"`
	// template name, could use to link inside
	// chi-level `chi.spec.defaults.templates.serviceTemplate`
	// cluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`
	Name *string `pulumi:"name"`
	// describe behavior of generated Service
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Spec map[string]interface{} `pulumi:"spec"`
}

// ClickHouseInstallationSpecTemplatesServiceTemplatesInput is an input type that accepts ClickHouseInstallationSpecTemplatesServiceTemplatesArgs and ClickHouseInstallationSpecTemplatesServiceTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesServiceTemplatesInput` via:
//
//	ClickHouseInstallationSpecTemplatesServiceTemplatesArgs{...}
type ClickHouseInstallationSpecTemplatesServiceTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesServiceTemplatesOutput() ClickHouseInstallationSpecTemplatesServiceTemplatesOutput
	ToClickHouseInstallationSpecTemplatesServiceTemplatesOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesServiceTemplatesOutput
}

type ClickHouseInstallationSpecTemplatesServiceTemplatesArgs struct {
	// allows define format for generated `Service` name,
	// look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates
	// for details about available template variables"
	GenerateName pulumi.StringPtrInput `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Service
	// Could be use for define specificly for Cloud Provider metadata which impact to behavior of service
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// template name, could use to link inside
	// chi-level `chi.spec.defaults.templates.serviceTemplate`
	// cluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// describe behavior of generated Service
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Spec pulumi.MapInput `pulumi:"spec"`
}

func (ClickHouseInstallationSpecTemplatesServiceTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesServiceTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesServiceTemplatesArgs) ToClickHouseInstallationSpecTemplatesServiceTemplatesOutput() ClickHouseInstallationSpecTemplatesServiceTemplatesOutput {
	return i.ToClickHouseInstallationSpecTemplatesServiceTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesServiceTemplatesArgs) ToClickHouseInstallationSpecTemplatesServiceTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesServiceTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesServiceTemplatesOutput)
}

// ClickHouseInstallationSpecTemplatesServiceTemplatesArrayInput is an input type that accepts ClickHouseInstallationSpecTemplatesServiceTemplatesArray and ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesServiceTemplatesArrayInput` via:
//
//	ClickHouseInstallationSpecTemplatesServiceTemplatesArray{ ClickHouseInstallationSpecTemplatesServiceTemplatesArgs{...} }
type ClickHouseInstallationSpecTemplatesServiceTemplatesArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput() ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput
	ToClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput
}

type ClickHouseInstallationSpecTemplatesServiceTemplatesArray []ClickHouseInstallationSpecTemplatesServiceTemplatesInput

func (ClickHouseInstallationSpecTemplatesServiceTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecTemplatesServiceTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesServiceTemplatesArray) ToClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput() ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput {
	return i.ToClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesServiceTemplatesArray) ToClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput)
}

type ClickHouseInstallationSpecTemplatesServiceTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesServiceTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesServiceTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesServiceTemplatesOutput) ToClickHouseInstallationSpecTemplatesServiceTemplatesOutput() ClickHouseInstallationSpecTemplatesServiceTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesServiceTemplatesOutput) ToClickHouseInstallationSpecTemplatesServiceTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesServiceTemplatesOutput {
	return o
}

// allows define format for generated `Service` name,
// look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates
// for details about available template variables"
func (o ClickHouseInstallationSpecTemplatesServiceTemplatesOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesServiceTemplates) *string { return v.GenerateName }).(pulumi.StringPtrOutput)
}

// allows pass standard object's metadata from template to Service
// Could be use for define specificly for Cloud Provider metadata which impact to behavior of service
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseInstallationSpecTemplatesServiceTemplatesOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesServiceTemplates) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// template name, could use to link inside
// chi-level `chi.spec.defaults.templates.serviceTemplate`
// cluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`
// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`
// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`
func (o ClickHouseInstallationSpecTemplatesServiceTemplatesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesServiceTemplates) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// describe behavior of generated Service
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ClickHouseInstallationSpecTemplatesServiceTemplatesOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesServiceTemplates) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

type ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecTemplatesServiceTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput) ToClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput() ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput) ToClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationSpecTemplatesServiceTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationSpecTemplatesServiceTemplates {
		return vs[0].([]ClickHouseInstallationSpecTemplatesServiceTemplates)[vs[1].(int)]
	}).(ClickHouseInstallationSpecTemplatesServiceTemplatesOutput)
}

type ClickHouseInstallationSpecTemplatesVolumeClaimTemplates struct {
	// allows to pass standard object's metadata from template to PVC
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata map[string]interface{} `pulumi:"metadata"`
	// template name, could use to link inside
	// top-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,
	// cluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`
	Name *string `pulumi:"name"`
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner *string `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
	// allows define all aspects of `PVC` resource
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
	Spec map[string]interface{} `pulumi:"spec"`
}

// ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesInput is an input type that accepts ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArgs and ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesInput` via:
//
//	ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArgs{...}
type ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput() ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput
	ToClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput
}

type ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArgs struct {
	// allows to pass standard object's metadata from template to PVC
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// template name, could use to link inside
	// top-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,
	// cluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner pulumi.StringPtrInput `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
	// allows define all aspects of `PVC` resource
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
	Spec pulumi.MapInput `pulumi:"spec"`
}

func (ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesVolumeClaimTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArgs) ToClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput() ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput {
	return i.ToClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArgs) ToClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput)
}

// ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayInput is an input type that accepts ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArray and ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayInput` via:
//
//	ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArray{ ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArgs{...} }
type ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput() ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput
	ToClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput
}

type ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArray []ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesInput

func (ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecTemplatesVolumeClaimTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArray) ToClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput() ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return i.ToClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArray) ToClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput)
}

type ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplatesVolumeClaimTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput) ToClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput() ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput) ToClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput {
	return o
}

// allows to pass standard object's metadata from template to PVC
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesVolumeClaimTemplates) map[string]interface{} {
		return v.Metadata
	}).(pulumi.MapOutput)
}

// template name, could use to link inside
// top-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,
// cluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,
// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`
// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`
func (o ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesVolumeClaimTemplates) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// defines `PVC` provisioner - be it StatefulSet or the Operator
func (o ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput) Provisioner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesVolumeClaimTemplates) *string { return v.Provisioner }).(pulumi.StringPtrOutput)
}

// defines behavior of `PVC` deletion.
// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
func (o ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesVolumeClaimTemplates) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

// allows define all aspects of `PVC` resource
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
func (o ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplatesVolumeClaimTemplates) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

type ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecTemplatesVolumeClaimTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput) ToClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput() ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput) ToClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationSpecTemplatesVolumeClaimTemplates {
		return vs[0].([]ClickHouseInstallationSpecTemplatesVolumeClaimTemplates)[vs[1].(int)]
	}).(ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput)
}

// Optional, applicable inside ClickHouseInstallationTemplate only.
// Defines current ClickHouseInstallationTemplate application options to target ClickHouseInstallation(s)."
type ClickHouseInstallationSpecTemplating struct {
	// Optional, defines selector for ClickHouseInstallation(s) to be templated with ClickhouseInstallationTemplate
	ChiSelector map[string]interface{} `pulumi:"chiSelector"`
	// When defined as `auto` inside ClickhouseInstallationTemplate, this ClickhouseInstallationTemplate
	// will be auto-added into ClickHouseInstallation, selectable by `chiSelector`.
	// Default value is `manual`, meaning ClickHouseInstallation should request this ClickhouseInstallationTemplate explicitly.
	Policy *string `pulumi:"policy"`
}

// ClickHouseInstallationSpecTemplatingInput is an input type that accepts ClickHouseInstallationSpecTemplatingArgs and ClickHouseInstallationSpecTemplatingOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatingInput` via:
//
//	ClickHouseInstallationSpecTemplatingArgs{...}
type ClickHouseInstallationSpecTemplatingInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatingOutput() ClickHouseInstallationSpecTemplatingOutput
	ToClickHouseInstallationSpecTemplatingOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatingOutput
}

// Optional, applicable inside ClickHouseInstallationTemplate only.
// Defines current ClickHouseInstallationTemplate application options to target ClickHouseInstallation(s)."
type ClickHouseInstallationSpecTemplatingArgs struct {
	// Optional, defines selector for ClickHouseInstallation(s) to be templated with ClickhouseInstallationTemplate
	ChiSelector pulumi.MapInput `pulumi:"chiSelector"`
	// When defined as `auto` inside ClickhouseInstallationTemplate, this ClickhouseInstallationTemplate
	// will be auto-added into ClickHouseInstallation, selectable by `chiSelector`.
	// Default value is `manual`, meaning ClickHouseInstallation should request this ClickhouseInstallationTemplate explicitly.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
}

func (ClickHouseInstallationSpecTemplatingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplating)(nil)).Elem()
}

func (i ClickHouseInstallationSpecTemplatingArgs) ToClickHouseInstallationSpecTemplatingOutput() ClickHouseInstallationSpecTemplatingOutput {
	return i.ToClickHouseInstallationSpecTemplatingOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatingArgs) ToClickHouseInstallationSpecTemplatingOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatingOutput)
}

func (i ClickHouseInstallationSpecTemplatingArgs) ToClickHouseInstallationSpecTemplatingPtrOutput() ClickHouseInstallationSpecTemplatingPtrOutput {
	return i.ToClickHouseInstallationSpecTemplatingPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecTemplatingArgs) ToClickHouseInstallationSpecTemplatingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatingOutput).ToClickHouseInstallationSpecTemplatingPtrOutputWithContext(ctx)
}

// ClickHouseInstallationSpecTemplatingPtrInput is an input type that accepts ClickHouseInstallationSpecTemplatingArgs, ClickHouseInstallationSpecTemplatingPtr and ClickHouseInstallationSpecTemplatingPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecTemplatingPtrInput` via:
//
//	        ClickHouseInstallationSpecTemplatingArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationSpecTemplatingPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecTemplatingPtrOutput() ClickHouseInstallationSpecTemplatingPtrOutput
	ToClickHouseInstallationSpecTemplatingPtrOutputWithContext(context.Context) ClickHouseInstallationSpecTemplatingPtrOutput
}

type clickHouseInstallationSpecTemplatingPtrType ClickHouseInstallationSpecTemplatingArgs

func ClickHouseInstallationSpecTemplatingPtr(v *ClickHouseInstallationSpecTemplatingArgs) ClickHouseInstallationSpecTemplatingPtrInput {
	return (*clickHouseInstallationSpecTemplatingPtrType)(v)
}

func (*clickHouseInstallationSpecTemplatingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecTemplating)(nil)).Elem()
}

func (i *clickHouseInstallationSpecTemplatingPtrType) ToClickHouseInstallationSpecTemplatingPtrOutput() ClickHouseInstallationSpecTemplatingPtrOutput {
	return i.ToClickHouseInstallationSpecTemplatingPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationSpecTemplatingPtrType) ToClickHouseInstallationSpecTemplatingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecTemplatingPtrOutput)
}

// Optional, applicable inside ClickHouseInstallationTemplate only.
// Defines current ClickHouseInstallationTemplate application options to target ClickHouseInstallation(s)."
type ClickHouseInstallationSpecTemplatingOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecTemplating)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatingOutput) ToClickHouseInstallationSpecTemplatingOutput() ClickHouseInstallationSpecTemplatingOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatingOutput) ToClickHouseInstallationSpecTemplatingOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatingOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatingOutput) ToClickHouseInstallationSpecTemplatingPtrOutput() ClickHouseInstallationSpecTemplatingPtrOutput {
	return o.ToClickHouseInstallationSpecTemplatingPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationSpecTemplatingOutput) ToClickHouseInstallationSpecTemplatingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationSpecTemplating) *ClickHouseInstallationSpecTemplating {
		return &v
	}).(ClickHouseInstallationSpecTemplatingPtrOutput)
}

// Optional, defines selector for ClickHouseInstallation(s) to be templated with ClickhouseInstallationTemplate
func (o ClickHouseInstallationSpecTemplatingOutput) ChiSelector() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplating) map[string]interface{} { return v.ChiSelector }).(pulumi.MapOutput)
}

// When defined as `auto` inside ClickhouseInstallationTemplate, this ClickhouseInstallationTemplate
// will be auto-added into ClickHouseInstallation, selectable by `chiSelector`.
// Default value is `manual`, meaning ClickHouseInstallation should request this ClickhouseInstallationTemplate explicitly.
func (o ClickHouseInstallationSpecTemplatingOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecTemplating) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecTemplatingPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecTemplatingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationSpecTemplating)(nil)).Elem()
}

func (o ClickHouseInstallationSpecTemplatingPtrOutput) ToClickHouseInstallationSpecTemplatingPtrOutput() ClickHouseInstallationSpecTemplatingPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatingPtrOutput) ToClickHouseInstallationSpecTemplatingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationSpecTemplatingPtrOutput {
	return o
}

func (o ClickHouseInstallationSpecTemplatingPtrOutput) Elem() ClickHouseInstallationSpecTemplatingOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplating) ClickHouseInstallationSpecTemplating {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationSpecTemplating
		return ret
	}).(ClickHouseInstallationSpecTemplatingOutput)
}

// Optional, defines selector for ClickHouseInstallation(s) to be templated with ClickhouseInstallationTemplate
func (o ClickHouseInstallationSpecTemplatingPtrOutput) ChiSelector() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplating) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.ChiSelector
	}).(pulumi.MapOutput)
}

// When defined as `auto` inside ClickhouseInstallationTemplate, this ClickhouseInstallationTemplate
// will be auto-added into ClickHouseInstallation, selectable by `chiSelector`.
// Default value is `manual`, meaning ClickHouseInstallation should request this ClickhouseInstallationTemplate explicitly.
func (o ClickHouseInstallationSpecTemplatingPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationSpecTemplating) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecUseTemplates struct {
	// name of `ClickHouseInstallationTemplate` (chit) resource
	Name *string `pulumi:"name"`
	// Kubernetes namespace where need search `chit` resource, depending on `watchNamespaces` settings in `clickhouse-operator`
	Namespace *string `pulumi:"namespace"`
	// optional, current strategy is only merge, and current `chi` settings have more priority than merged template `chit`
	UseType *string `pulumi:"useType"`
}

// ClickHouseInstallationSpecUseTemplatesInput is an input type that accepts ClickHouseInstallationSpecUseTemplatesArgs and ClickHouseInstallationSpecUseTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecUseTemplatesInput` via:
//
//	ClickHouseInstallationSpecUseTemplatesArgs{...}
type ClickHouseInstallationSpecUseTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecUseTemplatesOutput() ClickHouseInstallationSpecUseTemplatesOutput
	ToClickHouseInstallationSpecUseTemplatesOutputWithContext(context.Context) ClickHouseInstallationSpecUseTemplatesOutput
}

type ClickHouseInstallationSpecUseTemplatesArgs struct {
	// name of `ClickHouseInstallationTemplate` (chit) resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Kubernetes namespace where need search `chit` resource, depending on `watchNamespaces` settings in `clickhouse-operator`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// optional, current strategy is only merge, and current `chi` settings have more priority than merged template `chit`
	UseType pulumi.StringPtrInput `pulumi:"useType"`
}

func (ClickHouseInstallationSpecUseTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecUseTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecUseTemplatesArgs) ToClickHouseInstallationSpecUseTemplatesOutput() ClickHouseInstallationSpecUseTemplatesOutput {
	return i.ToClickHouseInstallationSpecUseTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecUseTemplatesArgs) ToClickHouseInstallationSpecUseTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecUseTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecUseTemplatesOutput)
}

// ClickHouseInstallationSpecUseTemplatesArrayInput is an input type that accepts ClickHouseInstallationSpecUseTemplatesArray and ClickHouseInstallationSpecUseTemplatesArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationSpecUseTemplatesArrayInput` via:
//
//	ClickHouseInstallationSpecUseTemplatesArray{ ClickHouseInstallationSpecUseTemplatesArgs{...} }
type ClickHouseInstallationSpecUseTemplatesArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationSpecUseTemplatesArrayOutput() ClickHouseInstallationSpecUseTemplatesArrayOutput
	ToClickHouseInstallationSpecUseTemplatesArrayOutputWithContext(context.Context) ClickHouseInstallationSpecUseTemplatesArrayOutput
}

type ClickHouseInstallationSpecUseTemplatesArray []ClickHouseInstallationSpecUseTemplatesInput

func (ClickHouseInstallationSpecUseTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecUseTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationSpecUseTemplatesArray) ToClickHouseInstallationSpecUseTemplatesArrayOutput() ClickHouseInstallationSpecUseTemplatesArrayOutput {
	return i.ToClickHouseInstallationSpecUseTemplatesArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationSpecUseTemplatesArray) ToClickHouseInstallationSpecUseTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecUseTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationSpecUseTemplatesArrayOutput)
}

type ClickHouseInstallationSpecUseTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecUseTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationSpecUseTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecUseTemplatesOutput) ToClickHouseInstallationSpecUseTemplatesOutput() ClickHouseInstallationSpecUseTemplatesOutput {
	return o
}

func (o ClickHouseInstallationSpecUseTemplatesOutput) ToClickHouseInstallationSpecUseTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationSpecUseTemplatesOutput {
	return o
}

// name of `ClickHouseInstallationTemplate` (chit) resource
func (o ClickHouseInstallationSpecUseTemplatesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecUseTemplates) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Kubernetes namespace where need search `chit` resource, depending on `watchNamespaces` settings in `clickhouse-operator`
func (o ClickHouseInstallationSpecUseTemplatesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecUseTemplates) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// optional, current strategy is only merge, and current `chi` settings have more priority than merged template `chit`
func (o ClickHouseInstallationSpecUseTemplatesOutput) UseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationSpecUseTemplates) *string { return v.UseType }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationSpecUseTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationSpecUseTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationSpecUseTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationSpecUseTemplatesArrayOutput) ToClickHouseInstallationSpecUseTemplatesArrayOutput() ClickHouseInstallationSpecUseTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecUseTemplatesArrayOutput) ToClickHouseInstallationSpecUseTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationSpecUseTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationSpecUseTemplatesArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationSpecUseTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationSpecUseTemplates {
		return vs[0].([]ClickHouseInstallationSpecUseTemplates)[vs[1].(int)]
	}).(ClickHouseInstallationSpecUseTemplatesOutput)
}

// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
type ClickHouseInstallationStatus struct {
	// Action
	Action *string `pulumi:"action"`
	// Actions
	Actions []string `pulumi:"actions"`
	// Operator git commit SHA
	ChopCommit *string `pulumi:"chop-commit"`
	// Operator build date
	ChopDate *string `pulumi:"chop-date"`
	// IP address of the operator's pod which managed this resource
	ChopIp *string `pulumi:"chop-ip"`
	// Operator version
	ChopVersion *string `pulumi:"chop-version"`
	// Clusters count
	Clusters *int `pulumi:"clusters"`
	// Endpoint
	Endpoint *string `pulumi:"endpoint"`
	// All endpoints
	Endpoints []string `pulumi:"endpoints"`
	// Last error
	Error *string `pulumi:"error"`
	// Errors
	Errors []string `pulumi:"errors"`
	// Pods FQDNs
	Fqdns []string `pulumi:"fqdns"`
	// Generation
	Generation *int `pulumi:"generation"`
	// Hosts count
	Hosts *int `pulumi:"hosts"`
	// Added Hosts count
	HostsAdded *int `pulumi:"hostsAdded"`
	// Completed Hosts count
	HostsCompleted *int `pulumi:"hostsCompleted"`
	// About to delete Hosts count
	HostsDelete *int `pulumi:"hostsDelete"`
	// Deleted Hosts count
	HostsDeleted *int `pulumi:"hostsDeleted"`
	// Unchanged Hosts count
	HostsUnchanged *int `pulumi:"hostsUnchanged"`
	// Updated Hosts count
	HostsUpdated *int `pulumi:"hostsUpdated"`
	// List of hosts with replica caught up
	HostsWithReplicaCaughtUp []string `pulumi:"hostsWithReplicaCaughtUp"`
	// List of hosts with tables created by the operator
	HostsWithTablesCreated []string `pulumi:"hostsWithTablesCreated"`
	// Normalized resource requested
	Normalized map[string]interface{} `pulumi:"normalized"`
	// Normalized resource completed
	NormalizedCompleted map[string]interface{} `pulumi:"normalizedCompleted"`
	// Pod IPs
	PodIps []string `pulumi:"pod-ips"`
	// Pods
	Pods []string `pulumi:"pods"`
	// Replicas count
	Replicas *int `pulumi:"replicas"`
	// Shards count
	Shards *int `pulumi:"shards"`
	// Status
	Status *string `pulumi:"status"`
	// Current task id
	TaskID *string `pulumi:"taskID"`
	// Completed task ids
	TaskIDsCompleted []string `pulumi:"taskIDsCompleted"`
	// Started task ids
	TaskIDsStarted []string `pulumi:"taskIDsStarted"`
	// List of templates used to build this CHI
	UsedTemplates map[string]interface{} `pulumi:"usedTemplates"`
}

// ClickHouseInstallationStatusInput is an input type that accepts ClickHouseInstallationStatusArgs and ClickHouseInstallationStatusOutput values.
// You can construct a concrete instance of `ClickHouseInstallationStatusInput` via:
//
//	ClickHouseInstallationStatusArgs{...}
type ClickHouseInstallationStatusInput interface {
	pulumi.Input

	ToClickHouseInstallationStatusOutput() ClickHouseInstallationStatusOutput
	ToClickHouseInstallationStatusOutputWithContext(context.Context) ClickHouseInstallationStatusOutput
}

// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
type ClickHouseInstallationStatusArgs struct {
	// Action
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Actions
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Operator git commit SHA
	ChopCommit pulumi.StringPtrInput `pulumi:"chop-commit"`
	// Operator build date
	ChopDate pulumi.StringPtrInput `pulumi:"chop-date"`
	// IP address of the operator's pod which managed this resource
	ChopIp pulumi.StringPtrInput `pulumi:"chop-ip"`
	// Operator version
	ChopVersion pulumi.StringPtrInput `pulumi:"chop-version"`
	// Clusters count
	Clusters pulumi.IntPtrInput `pulumi:"clusters"`
	// Endpoint
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// All endpoints
	Endpoints pulumi.StringArrayInput `pulumi:"endpoints"`
	// Last error
	Error pulumi.StringPtrInput `pulumi:"error"`
	// Errors
	Errors pulumi.StringArrayInput `pulumi:"errors"`
	// Pods FQDNs
	Fqdns pulumi.StringArrayInput `pulumi:"fqdns"`
	// Generation
	Generation pulumi.IntPtrInput `pulumi:"generation"`
	// Hosts count
	Hosts pulumi.IntPtrInput `pulumi:"hosts"`
	// Added Hosts count
	HostsAdded pulumi.IntPtrInput `pulumi:"hostsAdded"`
	// Completed Hosts count
	HostsCompleted pulumi.IntPtrInput `pulumi:"hostsCompleted"`
	// About to delete Hosts count
	HostsDelete pulumi.IntPtrInput `pulumi:"hostsDelete"`
	// Deleted Hosts count
	HostsDeleted pulumi.IntPtrInput `pulumi:"hostsDeleted"`
	// Unchanged Hosts count
	HostsUnchanged pulumi.IntPtrInput `pulumi:"hostsUnchanged"`
	// Updated Hosts count
	HostsUpdated pulumi.IntPtrInput `pulumi:"hostsUpdated"`
	// List of hosts with replica caught up
	HostsWithReplicaCaughtUp pulumi.StringArrayInput `pulumi:"hostsWithReplicaCaughtUp"`
	// List of hosts with tables created by the operator
	HostsWithTablesCreated pulumi.StringArrayInput `pulumi:"hostsWithTablesCreated"`
	// Normalized resource requested
	Normalized pulumi.MapInput `pulumi:"normalized"`
	// Normalized resource completed
	NormalizedCompleted pulumi.MapInput `pulumi:"normalizedCompleted"`
	// Pod IPs
	PodIps pulumi.StringArrayInput `pulumi:"pod-ips"`
	// Pods
	Pods pulumi.StringArrayInput `pulumi:"pods"`
	// Replicas count
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Shards count
	Shards pulumi.IntPtrInput `pulumi:"shards"`
	// Status
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Current task id
	TaskID pulumi.StringPtrInput `pulumi:"taskID"`
	// Completed task ids
	TaskIDsCompleted pulumi.StringArrayInput `pulumi:"taskIDsCompleted"`
	// Started task ids
	TaskIDsStarted pulumi.StringArrayInput `pulumi:"taskIDsStarted"`
	// List of templates used to build this CHI
	UsedTemplates pulumi.MapInput `pulumi:"usedTemplates"`
}

func (ClickHouseInstallationStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationStatus)(nil)).Elem()
}

func (i ClickHouseInstallationStatusArgs) ToClickHouseInstallationStatusOutput() ClickHouseInstallationStatusOutput {
	return i.ToClickHouseInstallationStatusOutputWithContext(context.Background())
}

func (i ClickHouseInstallationStatusArgs) ToClickHouseInstallationStatusOutputWithContext(ctx context.Context) ClickHouseInstallationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationStatusOutput)
}

func (i ClickHouseInstallationStatusArgs) ToClickHouseInstallationStatusPtrOutput() ClickHouseInstallationStatusPtrOutput {
	return i.ToClickHouseInstallationStatusPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationStatusArgs) ToClickHouseInstallationStatusPtrOutputWithContext(ctx context.Context) ClickHouseInstallationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationStatusOutput).ToClickHouseInstallationStatusPtrOutputWithContext(ctx)
}

// ClickHouseInstallationStatusPtrInput is an input type that accepts ClickHouseInstallationStatusArgs, ClickHouseInstallationStatusPtr and ClickHouseInstallationStatusPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationStatusPtrInput` via:
//
//	        ClickHouseInstallationStatusArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationStatusPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationStatusPtrOutput() ClickHouseInstallationStatusPtrOutput
	ToClickHouseInstallationStatusPtrOutputWithContext(context.Context) ClickHouseInstallationStatusPtrOutput
}

type clickHouseInstallationStatusPtrType ClickHouseInstallationStatusArgs

func ClickHouseInstallationStatusPtr(v *ClickHouseInstallationStatusArgs) ClickHouseInstallationStatusPtrInput {
	return (*clickHouseInstallationStatusPtrType)(v)
}

func (*clickHouseInstallationStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationStatus)(nil)).Elem()
}

func (i *clickHouseInstallationStatusPtrType) ToClickHouseInstallationStatusPtrOutput() ClickHouseInstallationStatusPtrOutput {
	return i.ToClickHouseInstallationStatusPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationStatusPtrType) ToClickHouseInstallationStatusPtrOutputWithContext(ctx context.Context) ClickHouseInstallationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationStatusPtrOutput)
}

// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
type ClickHouseInstallationStatusOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationStatus)(nil)).Elem()
}

func (o ClickHouseInstallationStatusOutput) ToClickHouseInstallationStatusOutput() ClickHouseInstallationStatusOutput {
	return o
}

func (o ClickHouseInstallationStatusOutput) ToClickHouseInstallationStatusOutputWithContext(ctx context.Context) ClickHouseInstallationStatusOutput {
	return o
}

func (o ClickHouseInstallationStatusOutput) ToClickHouseInstallationStatusPtrOutput() ClickHouseInstallationStatusPtrOutput {
	return o.ToClickHouseInstallationStatusPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationStatusOutput) ToClickHouseInstallationStatusPtrOutputWithContext(ctx context.Context) ClickHouseInstallationStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationStatus) *ClickHouseInstallationStatus {
		return &v
	}).(ClickHouseInstallationStatusPtrOutput)
}

// Action
func (o ClickHouseInstallationStatusOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Actions
func (o ClickHouseInstallationStatusOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Operator git commit SHA
func (o ClickHouseInstallationStatusOutput) ChopCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *string { return v.ChopCommit }).(pulumi.StringPtrOutput)
}

// Operator build date
func (o ClickHouseInstallationStatusOutput) ChopDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *string { return v.ChopDate }).(pulumi.StringPtrOutput)
}

// IP address of the operator's pod which managed this resource
func (o ClickHouseInstallationStatusOutput) ChopIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *string { return v.ChopIp }).(pulumi.StringPtrOutput)
}

// Operator version
func (o ClickHouseInstallationStatusOutput) ChopVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *string { return v.ChopVersion }).(pulumi.StringPtrOutput)
}

// Clusters count
func (o ClickHouseInstallationStatusOutput) Clusters() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *int { return v.Clusters }).(pulumi.IntPtrOutput)
}

// Endpoint
func (o ClickHouseInstallationStatusOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// All endpoints
func (o ClickHouseInstallationStatusOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) []string { return v.Endpoints }).(pulumi.StringArrayOutput)
}

// Last error
func (o ClickHouseInstallationStatusOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// Errors
func (o ClickHouseInstallationStatusOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) []string { return v.Errors }).(pulumi.StringArrayOutput)
}

// Pods FQDNs
func (o ClickHouseInstallationStatusOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// Generation
func (o ClickHouseInstallationStatusOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *int { return v.Generation }).(pulumi.IntPtrOutput)
}

// Hosts count
func (o ClickHouseInstallationStatusOutput) Hosts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *int { return v.Hosts }).(pulumi.IntPtrOutput)
}

// Added Hosts count
func (o ClickHouseInstallationStatusOutput) HostsAdded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *int { return v.HostsAdded }).(pulumi.IntPtrOutput)
}

// Completed Hosts count
func (o ClickHouseInstallationStatusOutput) HostsCompleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *int { return v.HostsCompleted }).(pulumi.IntPtrOutput)
}

// About to delete Hosts count
func (o ClickHouseInstallationStatusOutput) HostsDelete() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *int { return v.HostsDelete }).(pulumi.IntPtrOutput)
}

// Deleted Hosts count
func (o ClickHouseInstallationStatusOutput) HostsDeleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *int { return v.HostsDeleted }).(pulumi.IntPtrOutput)
}

// Unchanged Hosts count
func (o ClickHouseInstallationStatusOutput) HostsUnchanged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *int { return v.HostsUnchanged }).(pulumi.IntPtrOutput)
}

// Updated Hosts count
func (o ClickHouseInstallationStatusOutput) HostsUpdated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *int { return v.HostsUpdated }).(pulumi.IntPtrOutput)
}

// List of hosts with replica caught up
func (o ClickHouseInstallationStatusOutput) HostsWithReplicaCaughtUp() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) []string { return v.HostsWithReplicaCaughtUp }).(pulumi.StringArrayOutput)
}

// List of hosts with tables created by the operator
func (o ClickHouseInstallationStatusOutput) HostsWithTablesCreated() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) []string { return v.HostsWithTablesCreated }).(pulumi.StringArrayOutput)
}

// Normalized resource requested
func (o ClickHouseInstallationStatusOutput) Normalized() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) map[string]interface{} { return v.Normalized }).(pulumi.MapOutput)
}

// Normalized resource completed
func (o ClickHouseInstallationStatusOutput) NormalizedCompleted() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) map[string]interface{} { return v.NormalizedCompleted }).(pulumi.MapOutput)
}

// Pod IPs
func (o ClickHouseInstallationStatusOutput) PodIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) []string { return v.PodIps }).(pulumi.StringArrayOutput)
}

// Pods
func (o ClickHouseInstallationStatusOutput) Pods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) []string { return v.Pods }).(pulumi.StringArrayOutput)
}

// Replicas count
func (o ClickHouseInstallationStatusOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Shards count
func (o ClickHouseInstallationStatusOutput) Shards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *int { return v.Shards }).(pulumi.IntPtrOutput)
}

// Status
func (o ClickHouseInstallationStatusOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Current task id
func (o ClickHouseInstallationStatusOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) *string { return v.TaskID }).(pulumi.StringPtrOutput)
}

// Completed task ids
func (o ClickHouseInstallationStatusOutput) TaskIDsCompleted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) []string { return v.TaskIDsCompleted }).(pulumi.StringArrayOutput)
}

// Started task ids
func (o ClickHouseInstallationStatusOutput) TaskIDsStarted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) []string { return v.TaskIDsStarted }).(pulumi.StringArrayOutput)
}

// List of templates used to build this CHI
func (o ClickHouseInstallationStatusOutput) UsedTemplates() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationStatus) map[string]interface{} { return v.UsedTemplates }).(pulumi.MapOutput)
}

type ClickHouseInstallationStatusPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationStatus)(nil)).Elem()
}

func (o ClickHouseInstallationStatusPtrOutput) ToClickHouseInstallationStatusPtrOutput() ClickHouseInstallationStatusPtrOutput {
	return o
}

func (o ClickHouseInstallationStatusPtrOutput) ToClickHouseInstallationStatusPtrOutputWithContext(ctx context.Context) ClickHouseInstallationStatusPtrOutput {
	return o
}

func (o ClickHouseInstallationStatusPtrOutput) Elem() ClickHouseInstallationStatusOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) ClickHouseInstallationStatus {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationStatus
		return ret
	}).(ClickHouseInstallationStatusOutput)
}

// Action
func (o ClickHouseInstallationStatusPtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

// Actions
func (o ClickHouseInstallationStatusPtrOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(pulumi.StringArrayOutput)
}

// Operator git commit SHA
func (o ClickHouseInstallationStatusPtrOutput) ChopCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.ChopCommit
	}).(pulumi.StringPtrOutput)
}

// Operator build date
func (o ClickHouseInstallationStatusPtrOutput) ChopDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.ChopDate
	}).(pulumi.StringPtrOutput)
}

// IP address of the operator's pod which managed this resource
func (o ClickHouseInstallationStatusPtrOutput) ChopIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.ChopIp
	}).(pulumi.StringPtrOutput)
}

// Operator version
func (o ClickHouseInstallationStatusPtrOutput) ChopVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.ChopVersion
	}).(pulumi.StringPtrOutput)
}

// Clusters count
func (o ClickHouseInstallationStatusPtrOutput) Clusters() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.Clusters
	}).(pulumi.IntPtrOutput)
}

// Endpoint
func (o ClickHouseInstallationStatusPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// All endpoints
func (o ClickHouseInstallationStatusPtrOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(pulumi.StringArrayOutput)
}

// Last error
func (o ClickHouseInstallationStatusPtrOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringPtrOutput)
}

// Errors
func (o ClickHouseInstallationStatusPtrOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(pulumi.StringArrayOutput)
}

// Pods FQDNs
func (o ClickHouseInstallationStatusPtrOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.Fqdns
	}).(pulumi.StringArrayOutput)
}

// Generation
func (o ClickHouseInstallationStatusPtrOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.IntPtrOutput)
}

// Hosts count
func (o ClickHouseInstallationStatusPtrOutput) Hosts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.IntPtrOutput)
}

// Added Hosts count
func (o ClickHouseInstallationStatusPtrOutput) HostsAdded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsAdded
	}).(pulumi.IntPtrOutput)
}

// Completed Hosts count
func (o ClickHouseInstallationStatusPtrOutput) HostsCompleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsCompleted
	}).(pulumi.IntPtrOutput)
}

// About to delete Hosts count
func (o ClickHouseInstallationStatusPtrOutput) HostsDelete() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsDelete
	}).(pulumi.IntPtrOutput)
}

// Deleted Hosts count
func (o ClickHouseInstallationStatusPtrOutput) HostsDeleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsDeleted
	}).(pulumi.IntPtrOutput)
}

// Unchanged Hosts count
func (o ClickHouseInstallationStatusPtrOutput) HostsUnchanged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsUnchanged
	}).(pulumi.IntPtrOutput)
}

// Updated Hosts count
func (o ClickHouseInstallationStatusPtrOutput) HostsUpdated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsUpdated
	}).(pulumi.IntPtrOutput)
}

// List of hosts with replica caught up
func (o ClickHouseInstallationStatusPtrOutput) HostsWithReplicaCaughtUp() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.HostsWithReplicaCaughtUp
	}).(pulumi.StringArrayOutput)
}

// List of hosts with tables created by the operator
func (o ClickHouseInstallationStatusPtrOutput) HostsWithTablesCreated() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.HostsWithTablesCreated
	}).(pulumi.StringArrayOutput)
}

// Normalized resource requested
func (o ClickHouseInstallationStatusPtrOutput) Normalized() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Normalized
	}).(pulumi.MapOutput)
}

// Normalized resource completed
func (o ClickHouseInstallationStatusPtrOutput) NormalizedCompleted() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.NormalizedCompleted
	}).(pulumi.MapOutput)
}

// Pod IPs
func (o ClickHouseInstallationStatusPtrOutput) PodIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.PodIps
	}).(pulumi.StringArrayOutput)
}

// Pods
func (o ClickHouseInstallationStatusPtrOutput) Pods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.Pods
	}).(pulumi.StringArrayOutput)
}

// Replicas count
func (o ClickHouseInstallationStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Shards count
func (o ClickHouseInstallationStatusPtrOutput) Shards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.Shards
	}).(pulumi.IntPtrOutput)
}

// Status
func (o ClickHouseInstallationStatusPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Current task id
func (o ClickHouseInstallationStatusPtrOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.TaskID
	}).(pulumi.StringPtrOutput)
}

// Completed task ids
func (o ClickHouseInstallationStatusPtrOutput) TaskIDsCompleted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.TaskIDsCompleted
	}).(pulumi.StringArrayOutput)
}

// Started task ids
func (o ClickHouseInstallationStatusPtrOutput) TaskIDsStarted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.TaskIDsStarted
	}).(pulumi.StringArrayOutput)
}

// List of templates used to build this CHI
func (o ClickHouseInstallationStatusPtrOutput) UsedTemplates() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationStatus) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.UsedTemplates
	}).(pulumi.MapOutput)
}

// define a set of Kubernetes resources (StatefulSet, PVC, Service, ConfigMap) which describe behavior one or more clusters
type ClickHouseInstallationTemplateType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of one or more ClickHouse clusters
	// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
	Spec ClickHouseInstallationTemplateSpec `pulumi:"spec"`
	// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
	Status *ClickHouseInstallationTemplateStatus `pulumi:"status"`
}

type ClickHouseInstallationTemplateMetadata struct {
}

// Specification of the desired behavior of one or more ClickHouse clusters
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
type ClickHouseInstallationTemplateSpec struct {
	// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
	Configuration *ClickHouseInstallationTemplateSpecConfiguration `pulumi:"configuration"`
	// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
	// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
	Defaults *ClickHouseInstallationTemplateSpecDefaults `pulumi:"defaults"`
	// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
	// Typical use scenario - custom cluster domain in Kubernetes cluster
	// Example: %s.svc.my.test
	NamespaceDomainPattern *string `pulumi:"namespaceDomainPattern"`
	// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
	Reconcile *ClickHouseInstallationTemplateSpecReconcile `pulumi:"reconcile"`
	// [OBSOLETED] Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
	Reconciling *ClickHouseInstallationTemplateSpecReconciling `pulumi:"reconciling"`
	// In case 'RollingUpdate' specified, the operator will always restart ClickHouse pods during reconcile.
	// This options is used in rare cases when force restart is required and is typically removed after the use in order to avoid unneeded restarts.
	Restart *string `pulumi:"restart"`
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Stop *string `pulumi:"stop"`
	// Suspend reconciliation of resources managed by a ClickHouse Installation.
	// Works as the following:
	//  - When `suspend` is `true` operator stops reconciling all resources.
	//  - When `suspend` is `false` or not set, operator reconciles all resources.
	Suspend *string `pulumi:"suspend"`
	// Allows to define custom taskID for CHI update and watch status of this update execution.
	// Displayed in all .status.taskID* fields.
	// By default (if not filled) every update of CHI manifest will generate random taskID
	TaskID *string `pulumi:"taskID"`
	// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
	Templates *ClickHouseInstallationTemplateSpecTemplates `pulumi:"templates"`
	// Optional, applicable inside ClickHouseInstallationTemplate only.
	// Defines current ClickHouseInstallationTemplate application options to target ClickHouseInstallation(s)."
	Templating *ClickHouseInstallationTemplateSpecTemplating `pulumi:"templating"`
	// Allows to troubleshoot Pods during CrashLoopBack state.
	// This may happen when wrong configuration applied, in this case `clickhouse-server` wouldn't start.
	// Command within ClickHouse container is modified with `sleep` in order to avoid quick restarts
	// and give time to troubleshoot via CLI.
	// Liveness and Readiness probes are disabled as well.
	Troubleshoot *string `pulumi:"troubleshoot"`
	// list of `ClickHouseInstallationTemplate` (chit) resource names which will merge with current `CHI`
	// manifest during render Kubernetes resources to create related ClickHouse clusters"
	UseTemplates []ClickHouseInstallationTemplateSpecUseTemplates `pulumi:"useTemplates"`
}

// ClickHouseInstallationTemplateSpecInput is an input type that accepts ClickHouseInstallationTemplateSpecArgs and ClickHouseInstallationTemplateSpecOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecInput` via:
//
//	ClickHouseInstallationTemplateSpecArgs{...}
type ClickHouseInstallationTemplateSpecInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecOutput() ClickHouseInstallationTemplateSpecOutput
	ToClickHouseInstallationTemplateSpecOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecOutput
}

// Specification of the desired behavior of one or more ClickHouse clusters
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
type ClickHouseInstallationTemplateSpecArgs struct {
	// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
	Configuration ClickHouseInstallationTemplateSpecConfigurationPtrInput `pulumi:"configuration"`
	// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
	// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
	Defaults ClickHouseInstallationTemplateSpecDefaultsPtrInput `pulumi:"defaults"`
	// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
	// Typical use scenario - custom cluster domain in Kubernetes cluster
	// Example: %s.svc.my.test
	NamespaceDomainPattern pulumi.StringPtrInput `pulumi:"namespaceDomainPattern"`
	// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
	Reconcile ClickHouseInstallationTemplateSpecReconcilePtrInput `pulumi:"reconcile"`
	// [OBSOLETED] Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
	Reconciling ClickHouseInstallationTemplateSpecReconcilingPtrInput `pulumi:"reconciling"`
	// In case 'RollingUpdate' specified, the operator will always restart ClickHouse pods during reconcile.
	// This options is used in rare cases when force restart is required and is typically removed after the use in order to avoid unneeded restarts.
	Restart pulumi.StringPtrInput `pulumi:"restart"`
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Stop pulumi.StringPtrInput `pulumi:"stop"`
	// Suspend reconciliation of resources managed by a ClickHouse Installation.
	// Works as the following:
	//  - When `suspend` is `true` operator stops reconciling all resources.
	//  - When `suspend` is `false` or not set, operator reconciles all resources.
	Suspend pulumi.StringPtrInput `pulumi:"suspend"`
	// Allows to define custom taskID for CHI update and watch status of this update execution.
	// Displayed in all .status.taskID* fields.
	// By default (if not filled) every update of CHI manifest will generate random taskID
	TaskID pulumi.StringPtrInput `pulumi:"taskID"`
	// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
	Templates ClickHouseInstallationTemplateSpecTemplatesPtrInput `pulumi:"templates"`
	// Optional, applicable inside ClickHouseInstallationTemplate only.
	// Defines current ClickHouseInstallationTemplate application options to target ClickHouseInstallation(s)."
	Templating ClickHouseInstallationTemplateSpecTemplatingPtrInput `pulumi:"templating"`
	// Allows to troubleshoot Pods during CrashLoopBack state.
	// This may happen when wrong configuration applied, in this case `clickhouse-server` wouldn't start.
	// Command within ClickHouse container is modified with `sleep` in order to avoid quick restarts
	// and give time to troubleshoot via CLI.
	// Liveness and Readiness probes are disabled as well.
	Troubleshoot pulumi.StringPtrInput `pulumi:"troubleshoot"`
	// list of `ClickHouseInstallationTemplate` (chit) resource names which will merge with current `CHI`
	// manifest during render Kubernetes resources to create related ClickHouse clusters"
	UseTemplates ClickHouseInstallationTemplateSpecUseTemplatesArrayInput `pulumi:"useTemplates"`
}

func (ClickHouseInstallationTemplateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpec)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecArgs) ToClickHouseInstallationTemplateSpecOutput() ClickHouseInstallationTemplateSpecOutput {
	return i.ToClickHouseInstallationTemplateSpecOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecArgs) ToClickHouseInstallationTemplateSpecOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecOutput)
}

func (i ClickHouseInstallationTemplateSpecArgs) ToClickHouseInstallationTemplateSpecPtrOutput() ClickHouseInstallationTemplateSpecPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecArgs) ToClickHouseInstallationTemplateSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecOutput).ToClickHouseInstallationTemplateSpecPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecArgs, ClickHouseInstallationTemplateSpecPtr and ClickHouseInstallationTemplateSpecPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecPtrOutput() ClickHouseInstallationTemplateSpecPtrOutput
	ToClickHouseInstallationTemplateSpecPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecPtrOutput
}

type clickHouseInstallationTemplateSpecPtrType ClickHouseInstallationTemplateSpecArgs

func ClickHouseInstallationTemplateSpecPtr(v *ClickHouseInstallationTemplateSpecArgs) ClickHouseInstallationTemplateSpecPtrInput {
	return (*clickHouseInstallationTemplateSpecPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpec)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecPtrType) ToClickHouseInstallationTemplateSpecPtrOutput() ClickHouseInstallationTemplateSpecPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecPtrType) ToClickHouseInstallationTemplateSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecPtrOutput)
}

// Specification of the desired behavior of one or more ClickHouse clusters
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
type ClickHouseInstallationTemplateSpecOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpec)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecOutput) ToClickHouseInstallationTemplateSpecOutput() ClickHouseInstallationTemplateSpecOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecOutput) ToClickHouseInstallationTemplateSpecOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecOutput) ToClickHouseInstallationTemplateSpecPtrOutput() ClickHouseInstallationTemplateSpecPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecOutput) ToClickHouseInstallationTemplateSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpec) *ClickHouseInstallationTemplateSpec {
		return &v
	}).(ClickHouseInstallationTemplateSpecPtrOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
func (o ClickHouseInstallationTemplateSpecOutput) Configuration() ClickHouseInstallationTemplateSpecConfigurationPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpec) *ClickHouseInstallationTemplateSpecConfiguration {
		return v.Configuration
	}).(ClickHouseInstallationTemplateSpecConfigurationPtrOutput)
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
func (o ClickHouseInstallationTemplateSpecOutput) Defaults() ClickHouseInstallationTemplateSpecDefaultsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpec) *ClickHouseInstallationTemplateSpecDefaults {
		return v.Defaults
	}).(ClickHouseInstallationTemplateSpecDefaultsPtrOutput)
}

// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
// Typical use scenario - custom cluster domain in Kubernetes cluster
// Example: %s.svc.my.test
func (o ClickHouseInstallationTemplateSpecOutput) NamespaceDomainPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpec) *string { return v.NamespaceDomainPattern }).(pulumi.StringPtrOutput)
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
func (o ClickHouseInstallationTemplateSpecOutput) Reconcile() ClickHouseInstallationTemplateSpecReconcilePtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpec) *ClickHouseInstallationTemplateSpecReconcile {
		return v.Reconcile
	}).(ClickHouseInstallationTemplateSpecReconcilePtrOutput)
}

// [OBSOLETED] Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
func (o ClickHouseInstallationTemplateSpecOutput) Reconciling() ClickHouseInstallationTemplateSpecReconcilingPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpec) *ClickHouseInstallationTemplateSpecReconciling {
		return v.Reconciling
	}).(ClickHouseInstallationTemplateSpecReconcilingPtrOutput)
}

// In case 'RollingUpdate' specified, the operator will always restart ClickHouse pods during reconcile.
// This options is used in rare cases when force restart is required and is typically removed after the use in order to avoid unneeded restarts.
func (o ClickHouseInstallationTemplateSpecOutput) Restart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpec) *string { return v.Restart }).(pulumi.StringPtrOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationTemplateSpecOutput) Stop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpec) *string { return v.Stop }).(pulumi.StringPtrOutput)
}

// Suspend reconciliation of resources managed by a ClickHouse Installation.
// Works as the following:
//   - When `suspend` is `true` operator stops reconciling all resources.
//   - When `suspend` is `false` or not set, operator reconciles all resources.
func (o ClickHouseInstallationTemplateSpecOutput) Suspend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpec) *string { return v.Suspend }).(pulumi.StringPtrOutput)
}

// Allows to define custom taskID for CHI update and watch status of this update execution.
// Displayed in all .status.taskID* fields.
// By default (if not filled) every update of CHI manifest will generate random taskID
func (o ClickHouseInstallationTemplateSpecOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpec) *string { return v.TaskID }).(pulumi.StringPtrOutput)
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
func (o ClickHouseInstallationTemplateSpecOutput) Templates() ClickHouseInstallationTemplateSpecTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpec) *ClickHouseInstallationTemplateSpecTemplates {
		return v.Templates
	}).(ClickHouseInstallationTemplateSpecTemplatesPtrOutput)
}

// Optional, applicable inside ClickHouseInstallationTemplate only.
// Defines current ClickHouseInstallationTemplate application options to target ClickHouseInstallation(s)."
func (o ClickHouseInstallationTemplateSpecOutput) Templating() ClickHouseInstallationTemplateSpecTemplatingPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpec) *ClickHouseInstallationTemplateSpecTemplating {
		return v.Templating
	}).(ClickHouseInstallationTemplateSpecTemplatingPtrOutput)
}

// Allows to troubleshoot Pods during CrashLoopBack state.
// This may happen when wrong configuration applied, in this case `clickhouse-server` wouldn't start.
// Command within ClickHouse container is modified with `sleep` in order to avoid quick restarts
// and give time to troubleshoot via CLI.
// Liveness and Readiness probes are disabled as well.
func (o ClickHouseInstallationTemplateSpecOutput) Troubleshoot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpec) *string { return v.Troubleshoot }).(pulumi.StringPtrOutput)
}

// list of `ClickHouseInstallationTemplate` (chit) resource names which will merge with current `CHI`
// manifest during render Kubernetes resources to create related ClickHouse clusters"
func (o ClickHouseInstallationTemplateSpecOutput) UseTemplates() ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpec) []ClickHouseInstallationTemplateSpecUseTemplates {
		return v.UseTemplates
	}).(ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput)
}

type ClickHouseInstallationTemplateSpecPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpec)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecPtrOutput) ToClickHouseInstallationTemplateSpecPtrOutput() ClickHouseInstallationTemplateSpecPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecPtrOutput) ToClickHouseInstallationTemplateSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecPtrOutput) Elem() ClickHouseInstallationTemplateSpecOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpec) ClickHouseInstallationTemplateSpec {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpec
		return ret
	}).(ClickHouseInstallationTemplateSpecOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
func (o ClickHouseInstallationTemplateSpecPtrOutput) Configuration() ClickHouseInstallationTemplateSpecConfigurationPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpec) *ClickHouseInstallationTemplateSpecConfiguration {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ClickHouseInstallationTemplateSpecConfigurationPtrOutput)
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
func (o ClickHouseInstallationTemplateSpecPtrOutput) Defaults() ClickHouseInstallationTemplateSpecDefaultsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpec) *ClickHouseInstallationTemplateSpecDefaults {
		if v == nil {
			return nil
		}
		return v.Defaults
	}).(ClickHouseInstallationTemplateSpecDefaultsPtrOutput)
}

// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
// Typical use scenario - custom cluster domain in Kubernetes cluster
// Example: %s.svc.my.test
func (o ClickHouseInstallationTemplateSpecPtrOutput) NamespaceDomainPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceDomainPattern
	}).(pulumi.StringPtrOutput)
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
func (o ClickHouseInstallationTemplateSpecPtrOutput) Reconcile() ClickHouseInstallationTemplateSpecReconcilePtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpec) *ClickHouseInstallationTemplateSpecReconcile {
		if v == nil {
			return nil
		}
		return v.Reconcile
	}).(ClickHouseInstallationTemplateSpecReconcilePtrOutput)
}

// [OBSOLETED] Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
func (o ClickHouseInstallationTemplateSpecPtrOutput) Reconciling() ClickHouseInstallationTemplateSpecReconcilingPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpec) *ClickHouseInstallationTemplateSpecReconciling {
		if v == nil {
			return nil
		}
		return v.Reconciling
	}).(ClickHouseInstallationTemplateSpecReconcilingPtrOutput)
}

// In case 'RollingUpdate' specified, the operator will always restart ClickHouse pods during reconcile.
// This options is used in rare cases when force restart is required and is typically removed after the use in order to avoid unneeded restarts.
func (o ClickHouseInstallationTemplateSpecPtrOutput) Restart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.Restart
	}).(pulumi.StringPtrOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationTemplateSpecPtrOutput) Stop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.Stop
	}).(pulumi.StringPtrOutput)
}

// Suspend reconciliation of resources managed by a ClickHouse Installation.
// Works as the following:
//   - When `suspend` is `true` operator stops reconciling all resources.
//   - When `suspend` is `false` or not set, operator reconciles all resources.
func (o ClickHouseInstallationTemplateSpecPtrOutput) Suspend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.StringPtrOutput)
}

// Allows to define custom taskID for CHI update and watch status of this update execution.
// Displayed in all .status.taskID* fields.
// By default (if not filled) every update of CHI manifest will generate random taskID
func (o ClickHouseInstallationTemplateSpecPtrOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.TaskID
	}).(pulumi.StringPtrOutput)
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
func (o ClickHouseInstallationTemplateSpecPtrOutput) Templates() ClickHouseInstallationTemplateSpecTemplatesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpec) *ClickHouseInstallationTemplateSpecTemplates {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ClickHouseInstallationTemplateSpecTemplatesPtrOutput)
}

// Optional, applicable inside ClickHouseInstallationTemplate only.
// Defines current ClickHouseInstallationTemplate application options to target ClickHouseInstallation(s)."
func (o ClickHouseInstallationTemplateSpecPtrOutput) Templating() ClickHouseInstallationTemplateSpecTemplatingPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpec) *ClickHouseInstallationTemplateSpecTemplating {
		if v == nil {
			return nil
		}
		return v.Templating
	}).(ClickHouseInstallationTemplateSpecTemplatingPtrOutput)
}

// Allows to troubleshoot Pods during CrashLoopBack state.
// This may happen when wrong configuration applied, in this case `clickhouse-server` wouldn't start.
// Command within ClickHouse container is modified with `sleep` in order to avoid quick restarts
// and give time to troubleshoot via CLI.
// Liveness and Readiness probes are disabled as well.
func (o ClickHouseInstallationTemplateSpecPtrOutput) Troubleshoot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.Troubleshoot
	}).(pulumi.StringPtrOutput)
}

// list of `ClickHouseInstallationTemplate` (chit) resource names which will merge with current `CHI`
// manifest during render Kubernetes resources to create related ClickHouse clusters"
func (o ClickHouseInstallationTemplateSpecPtrOutput) UseTemplates() ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpec) []ClickHouseInstallationTemplateSpecUseTemplates {
		if v == nil {
			return nil
		}
		return v.UseTemplates
	}).(ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
type ClickHouseInstallationTemplateSpecConfiguration struct {
	// describes clusters layout and allows change settings on cluster-level, shard-level and replica-level
	// every cluster is a set of StatefulSet, one StatefulSet contains only one Pod with `clickhouse-server`
	// all Pods will rendered in <remote_server> part of ClickHouse configs, mounted from ConfigMap as `/etc/clickhouse-server/config.d/chop-generated-remote_servers.xml`
	// Clusters will use for Distributed table engine, more details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
	// If `cluster` contains zookeeper settings (could be inherited from top `chi` level), when you can create *ReplicatedMergeTree tables
	Clusters []ClickHouseInstallationTemplateSpecConfigurationClusters `pulumi:"clusters"`
	// allows define content of any setting file inside each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// every key in this object is the file name
	// every value in this object is the file content
	// you can use `!!binary |` and base64 for binary files, see details here https://yaml.org/type/binary.html
	// each key could contains prefix like {common}, {users}, {hosts} or config.d, users.d, conf.d, wrong prefixes will be ignored, subfolders also will be ignored
	// More details: https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-05-files-nested.yaml
	//
	// any key could contains `valueFrom` with `secretKeyRef` which allow pass values from kubernetes secrets
	// secrets will mounted into pod as separate volume in /etc/clickhouse-server/secrets.d/
	// and will automatically update when update secret
	// it useful for pass SSL certificates from cert-manager or similar tool
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	Files map[string]interface{} `pulumi:"files"`
	// allows configure <yandex><profiles>..</profiles></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
	// you can configure any aspect of settings profile
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings-profiles/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationprofiles
	Profiles map[string]interface{} `pulumi:"profiles"`
	// allows configure <yandex><quotas>..</quotas></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
	// you can configure any aspect of resource quotas
	// More details: https://clickhouse.tech/docs/en/operations/quotas/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationquotas
	Quotas map[string]interface{} `pulumi:"quotas"`
	// allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationsettings
	//
	// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	//
	// secret value will pass in `pod.spec.env`, and generate with from_env=XXX in XML in /etc/clickhouse-server/config.d/chop-generated-settings.xml
	// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
	Settings map[string]interface{} `pulumi:"settings"`
	// allows configure <yandex><users>..</users></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
	// you can configure password hashed, authorization restrictions, database level security row filters etc.
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings-users/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationusers
	//
	// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
	// secret value will pass in `pod.spec.containers.evn`, and generate with from_env=XXX in XML in /etc/clickhouse-server/users.d/chop-generated-users.xml
	// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
	//
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	//
	// any key with prefix `k8s_secret_` shall has value with format namespace/secret/key or secret/key
	// in this case value from secret will write directly into XML tag during render *-usersd ConfigMap
	//
	// any key with prefix `k8s_secret_env` shall has value with format namespace/secret/key or secret/key
	// in this case value from secret will write into environment variable and write to XML tag via from_env=XXX
	//
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	Users map[string]interface{} `pulumi:"users"`
	// allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
	// `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
	// currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
	// More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
	Zookeeper *ClickHouseInstallationTemplateSpecConfigurationZookeeper `pulumi:"zookeeper"`
}

// ClickHouseInstallationTemplateSpecConfigurationInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationArgs and ClickHouseInstallationTemplateSpecConfigurationOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationOutput() ClickHouseInstallationTemplateSpecConfigurationOutput
	ToClickHouseInstallationTemplateSpecConfigurationOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationOutput
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
type ClickHouseInstallationTemplateSpecConfigurationArgs struct {
	// describes clusters layout and allows change settings on cluster-level, shard-level and replica-level
	// every cluster is a set of StatefulSet, one StatefulSet contains only one Pod with `clickhouse-server`
	// all Pods will rendered in <remote_server> part of ClickHouse configs, mounted from ConfigMap as `/etc/clickhouse-server/config.d/chop-generated-remote_servers.xml`
	// Clusters will use for Distributed table engine, more details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
	// If `cluster` contains zookeeper settings (could be inherited from top `chi` level), when you can create *ReplicatedMergeTree tables
	Clusters ClickHouseInstallationTemplateSpecConfigurationClustersArrayInput `pulumi:"clusters"`
	// allows define content of any setting file inside each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// every key in this object is the file name
	// every value in this object is the file content
	// you can use `!!binary |` and base64 for binary files, see details here https://yaml.org/type/binary.html
	// each key could contains prefix like {common}, {users}, {hosts} or config.d, users.d, conf.d, wrong prefixes will be ignored, subfolders also will be ignored
	// More details: https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-05-files-nested.yaml
	//
	// any key could contains `valueFrom` with `secretKeyRef` which allow pass values from kubernetes secrets
	// secrets will mounted into pod as separate volume in /etc/clickhouse-server/secrets.d/
	// and will automatically update when update secret
	// it useful for pass SSL certificates from cert-manager or similar tool
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	Files pulumi.MapInput `pulumi:"files"`
	// allows configure <yandex><profiles>..</profiles></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
	// you can configure any aspect of settings profile
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings-profiles/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationprofiles
	Profiles pulumi.MapInput `pulumi:"profiles"`
	// allows configure <yandex><quotas>..</quotas></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
	// you can configure any aspect of resource quotas
	// More details: https://clickhouse.tech/docs/en/operations/quotas/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationquotas
	Quotas pulumi.MapInput `pulumi:"quotas"`
	// allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationsettings
	//
	// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	//
	// secret value will pass in `pod.spec.env`, and generate with from_env=XXX in XML in /etc/clickhouse-server/config.d/chop-generated-settings.xml
	// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
	Settings pulumi.MapInput `pulumi:"settings"`
	// allows configure <yandex><users>..</users></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
	// you can configure password hashed, authorization restrictions, database level security row filters etc.
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings-users/
	// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationusers
	//
	// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
	// secret value will pass in `pod.spec.containers.evn`, and generate with from_env=XXX in XML in /etc/clickhouse-server/users.d/chop-generated-users.xml
	// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
	//
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	//
	// any key with prefix `k8s_secret_` shall has value with format namespace/secret/key or secret/key
	// in this case value from secret will write directly into XML tag during render *-usersd ConfigMap
	//
	// any key with prefix `k8s_secret_env` shall has value with format namespace/secret/key or secret/key
	// in this case value from secret will write into environment variable and write to XML tag via from_env=XXX
	//
	// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
	Users pulumi.MapInput `pulumi:"users"`
	// allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
	// `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
	// currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
	// More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
	Zookeeper ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrInput `pulumi:"zookeeper"`
}

func (ClickHouseInstallationTemplateSpecConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfiguration)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationArgs) ToClickHouseInstallationTemplateSpecConfigurationOutput() ClickHouseInstallationTemplateSpecConfigurationOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationArgs) ToClickHouseInstallationTemplateSpecConfigurationOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationArgs) ToClickHouseInstallationTemplateSpecConfigurationPtrOutput() ClickHouseInstallationTemplateSpecConfigurationPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationArgs) ToClickHouseInstallationTemplateSpecConfigurationPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationOutput).ToClickHouseInstallationTemplateSpecConfigurationPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationArgs, ClickHouseInstallationTemplateSpecConfigurationPtr and ClickHouseInstallationTemplateSpecConfigurationPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationPtrOutput() ClickHouseInstallationTemplateSpecConfigurationPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationPtrType ClickHouseInstallationTemplateSpecConfigurationArgs

func ClickHouseInstallationTemplateSpecConfigurationPtr(v *ClickHouseInstallationTemplateSpecConfigurationArgs) ClickHouseInstallationTemplateSpecConfigurationPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfiguration)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationPtrType) ToClickHouseInstallationTemplateSpecConfigurationPtrOutput() ClickHouseInstallationTemplateSpecConfigurationPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationPtrType) ToClickHouseInstallationTemplateSpecConfigurationPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationPtrOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
type ClickHouseInstallationTemplateSpecConfigurationOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfiguration)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationOutput) ToClickHouseInstallationTemplateSpecConfigurationOutput() ClickHouseInstallationTemplateSpecConfigurationOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationOutput) ToClickHouseInstallationTemplateSpecConfigurationOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationOutput) ToClickHouseInstallationTemplateSpecConfigurationPtrOutput() ClickHouseInstallationTemplateSpecConfigurationPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationOutput) ToClickHouseInstallationTemplateSpecConfigurationPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfiguration) *ClickHouseInstallationTemplateSpecConfiguration {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationPtrOutput)
}

// describes clusters layout and allows change settings on cluster-level, shard-level and replica-level
// every cluster is a set of StatefulSet, one StatefulSet contains only one Pod with `clickhouse-server`
// all Pods will rendered in <remote_server> part of ClickHouse configs, mounted from ConfigMap as `/etc/clickhouse-server/config.d/chop-generated-remote_servers.xml`
// Clusters will use for Distributed table engine, more details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
// If `cluster` contains zookeeper settings (could be inherited from top `chi` level), when you can create *ReplicatedMergeTree tables
func (o ClickHouseInstallationTemplateSpecConfigurationOutput) Clusters() ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfiguration) []ClickHouseInstallationTemplateSpecConfigurationClusters {
		return v.Clusters
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput)
}

// allows define content of any setting file inside each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// every key in this object is the file name
// every value in this object is the file content
// you can use `!!binary |` and base64 for binary files, see details here https://yaml.org/type/binary.html
// each key could contains prefix like {common}, {users}, {hosts} or config.d, users.d, conf.d, wrong prefixes will be ignored, subfolders also will be ignored
// More details: https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-05-files-nested.yaml
//
// any key could contains `valueFrom` with `secretKeyRef` which allow pass values from kubernetes secrets
// secrets will mounted into pod as separate volume in /etc/clickhouse-server/secrets.d/
// and will automatically update when update secret
// it useful for pass SSL certificates from cert-manager or similar tool
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
func (o ClickHouseInstallationTemplateSpecConfigurationOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfiguration) map[string]interface{} { return v.Files }).(pulumi.MapOutput)
}

// allows configure <yandex><profiles>..</profiles></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
// you can configure any aspect of settings profile
// More details: https://clickhouse.tech/docs/en/operations/settings/settings-profiles/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationprofiles
func (o ClickHouseInstallationTemplateSpecConfigurationOutput) Profiles() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfiguration) map[string]interface{} { return v.Profiles }).(pulumi.MapOutput)
}

// allows configure <yandex><quotas>..</quotas></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
// you can configure any aspect of resource quotas
// More details: https://clickhouse.tech/docs/en/operations/quotas/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationquotas
func (o ClickHouseInstallationTemplateSpecConfigurationOutput) Quotas() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfiguration) map[string]interface{} { return v.Quotas }).(pulumi.MapOutput)
}

// allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationsettings
//
// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
//
// secret value will pass in `pod.spec.env`, and generate with from_env=XXX in XML in /etc/clickhouse-server/config.d/chop-generated-settings.xml
// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
func (o ClickHouseInstallationTemplateSpecConfigurationOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfiguration) map[string]interface{} { return v.Settings }).(pulumi.MapOutput)
}

// allows configure <yandex><users>..</users></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
// you can configure password hashed, authorization restrictions, database level security row filters etc.
// More details: https://clickhouse.tech/docs/en/operations/settings/settings-users/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationusers
//
// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
// secret value will pass in `pod.spec.containers.evn`, and generate with from_env=XXX in XML in /etc/clickhouse-server/users.d/chop-generated-users.xml
// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
//
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
//
// any key with prefix `k8s_secret_` shall has value with format namespace/secret/key or secret/key
// in this case value from secret will write directly into XML tag during render *-usersd ConfigMap
//
// any key with prefix `k8s_secret_env` shall has value with format namespace/secret/key or secret/key
// in this case value from secret will write into environment variable and write to XML tag via from_env=XXX
//
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
func (o ClickHouseInstallationTemplateSpecConfigurationOutput) Users() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfiguration) map[string]interface{} { return v.Users }).(pulumi.MapOutput)
}

// allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
// currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
// More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
func (o ClickHouseInstallationTemplateSpecConfigurationOutput) Zookeeper() ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfiguration) *ClickHouseInstallationTemplateSpecConfigurationZookeeper {
		return v.Zookeeper
	}).(ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfiguration)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationPtrOutput() ClickHouseInstallationTemplateSpecConfigurationPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfiguration) ClickHouseInstallationTemplateSpecConfiguration {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfiguration
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationOutput)
}

// describes clusters layout and allows change settings on cluster-level, shard-level and replica-level
// every cluster is a set of StatefulSet, one StatefulSet contains only one Pod with `clickhouse-server`
// all Pods will rendered in <remote_server> part of ClickHouse configs, mounted from ConfigMap as `/etc/clickhouse-server/config.d/chop-generated-remote_servers.xml`
// Clusters will use for Distributed table engine, more details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
// If `cluster` contains zookeeper settings (could be inherited from top `chi` level), when you can create *ReplicatedMergeTree tables
func (o ClickHouseInstallationTemplateSpecConfigurationPtrOutput) Clusters() ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfiguration) []ClickHouseInstallationTemplateSpecConfigurationClusters {
		if v == nil {
			return nil
		}
		return v.Clusters
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput)
}

// allows define content of any setting file inside each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// every key in this object is the file name
// every value in this object is the file content
// you can use `!!binary |` and base64 for binary files, see details here https://yaml.org/type/binary.html
// each key could contains prefix like {common}, {users}, {hosts} or config.d, users.d, conf.d, wrong prefixes will be ignored, subfolders also will be ignored
// More details: https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-05-files-nested.yaml
//
// any key could contains `valueFrom` with `secretKeyRef` which allow pass values from kubernetes secrets
// secrets will mounted into pod as separate volume in /etc/clickhouse-server/secrets.d/
// and will automatically update when update secret
// it useful for pass SSL certificates from cert-manager or similar tool
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
func (o ClickHouseInstallationTemplateSpecConfigurationPtrOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.MapOutput)
}

// allows configure <yandex><profiles>..</profiles></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
// you can configure any aspect of settings profile
// More details: https://clickhouse.tech/docs/en/operations/settings/settings-profiles/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationprofiles
func (o ClickHouseInstallationTemplateSpecConfigurationPtrOutput) Profiles() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Profiles
	}).(pulumi.MapOutput)
}

// allows configure <yandex><quotas>..</quotas></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
// you can configure any aspect of resource quotas
// More details: https://clickhouse.tech/docs/en/operations/quotas/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationquotas
func (o ClickHouseInstallationTemplateSpecConfigurationPtrOutput) Quotas() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Quotas
	}).(pulumi.MapOutput)
}

// allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationsettings
//
// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
//
// secret value will pass in `pod.spec.env`, and generate with from_env=XXX in XML in /etc/clickhouse-server/config.d/chop-generated-settings.xml
// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
func (o ClickHouseInstallationTemplateSpecConfigurationPtrOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.MapOutput)
}

// allows configure <yandex><users>..</users></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
// you can configure password hashed, authorization restrictions, database level security row filters etc.
// More details: https://clickhouse.tech/docs/en/operations/settings/settings-users/
// Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationusers
//
// any key could contains `valueFrom` with `secretKeyRef` which allow pass password from kubernetes secrets
// secret value will pass in `pod.spec.containers.evn`, and generate with from_env=XXX in XML in /etc/clickhouse-server/users.d/chop-generated-users.xml
// it not allow automatically updates when updates `secret`, change spec.taskID for manually trigger reconcile cycle
//
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
//
// any key with prefix `k8s_secret_` shall has value with format namespace/secret/key or secret/key
// in this case value from secret will write directly into XML tag during render *-usersd ConfigMap
//
// any key with prefix `k8s_secret_env` shall has value with format namespace/secret/key or secret/key
// in this case value from secret will write into environment variable and write to XML tag via from_env=XXX
//
// look into https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-01-overview.yaml for examples
func (o ClickHouseInstallationTemplateSpecConfigurationPtrOutput) Users() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Users
	}).(pulumi.MapOutput)
}

// allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
// currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
// More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
func (o ClickHouseInstallationTemplateSpecConfigurationPtrOutput) Zookeeper() ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfiguration) *ClickHouseInstallationTemplateSpecConfigurationZookeeper {
		if v == nil {
			return nil
		}
		return v.Zookeeper
	}).(ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClusters struct {
	// optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files`
	Files map[string]interface{} `pulumi:"files"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure *string `pulumi:"insecure"`
	// describe current cluster layout, how much shards in cluster, how much replica in shard
	// allows override settings on each shard and replica separatelly
	Layout *ClickHouseInstallationTemplateSpecConfigurationClustersLayout `pulumi:"layout"`
	// cluster name, used to identify set of servers and wide used during generate names of related Kubernetes resources
	Name *string `pulumi:"name"`
	// Specifies whether the Pod Disruption Budget (PDB) should be managed.
	// During the next installation, if PDB management is enabled, the operator will
	// attempt to retrieve any existing PDB. If none is found, it will create a new one
	// and initiate a reconciliation loop. If PDB management is disabled, the existing PDB
	// will remain intact, and the reconciliation loop will not be executed. By default,
	// PDB management is enabled.
	PdbManaged *string `pulumi:"pdbManaged"`
	// Pod eviction is allowed if at most "pdbMaxUnavailable" pods are unavailable after the eviction,
	// i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	PdbMaxUnavailable *int `pulumi:"pdbMaxUnavailable"`
	// allow tuning reconciling process
	Reconcile *ClickHouseInstallationTemplateSpecConfigurationClustersReconcile `pulumi:"reconcile"`
	// describes how schema is propagated within replicas and shards
	SchemaPolicy *ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy `pulumi:"schemaPolicy"`
	// optional, shared secret value to secure cluster communications
	Secret *ClickHouseInstallationTemplateSpecConfigurationClustersSecret `pulumi:"secret"`
	// optional, open secure ports for cluster
	Secure *string `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings map[string]interface{} `pulumi:"settings"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
	// override top-level `chi.spec.configuration.templates`
	Templates *ClickHouseInstallationTemplateSpecConfigurationClustersTemplates `pulumi:"templates"`
	// optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.zookeeper` settings
	Zookeeper *ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper `pulumi:"zookeeper"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersArgs and ClickHouseInstallationTemplateSpecConfigurationClustersOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersOutput() ClickHouseInstallationTemplateSpecConfigurationClustersOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersOutput
}

type ClickHouseInstallationTemplateSpecConfigurationClustersArgs struct {
	// optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files`
	Files pulumi.MapInput `pulumi:"files"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure pulumi.StringPtrInput `pulumi:"insecure"`
	// describe current cluster layout, how much shards in cluster, how much replica in shard
	// allows override settings on each shard and replica separatelly
	Layout ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrInput `pulumi:"layout"`
	// cluster name, used to identify set of servers and wide used during generate names of related Kubernetes resources
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies whether the Pod Disruption Budget (PDB) should be managed.
	// During the next installation, if PDB management is enabled, the operator will
	// attempt to retrieve any existing PDB. If none is found, it will create a new one
	// and initiate a reconciliation loop. If PDB management is disabled, the existing PDB
	// will remain intact, and the reconciliation loop will not be executed. By default,
	// PDB management is enabled.
	PdbManaged pulumi.StringPtrInput `pulumi:"pdbManaged"`
	// Pod eviction is allowed if at most "pdbMaxUnavailable" pods are unavailable after the eviction,
	// i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	PdbMaxUnavailable pulumi.IntPtrInput `pulumi:"pdbMaxUnavailable"`
	// allow tuning reconciling process
	Reconcile ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrInput `pulumi:"reconcile"`
	// describes how schema is propagated within replicas and shards
	SchemaPolicy ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrInput `pulumi:"schemaPolicy"`
	// optional, shared secret value to secure cluster communications
	Secret ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrInput `pulumi:"secret"`
	// optional, open secure ports for cluster
	Secure pulumi.StringPtrInput `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings pulumi.MapInput `pulumi:"settings"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
	// override top-level `chi.spec.configuration.templates`
	Templates ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrInput `pulumi:"templates"`
	// optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.zookeeper` settings
	Zookeeper ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrInput `pulumi:"zookeeper"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClusters)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersOutput() ClickHouseInstallationTemplateSpecConfigurationClustersOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersOutput)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersArrayInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersArray and ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersArrayInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersArray{ ClickHouseInstallationTemplateSpecConfigurationClustersArgs{...} }
type ClickHouseInstallationTemplateSpecConfigurationClustersArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersArrayOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput
}

type ClickHouseInstallationTemplateSpecConfigurationClustersArray []ClickHouseInstallationTemplateSpecConfigurationClustersInput

func (ClickHouseInstallationTemplateSpecConfigurationClustersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecConfigurationClusters)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersArray) ToClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersArray) ToClickHouseInstallationTemplateSpecConfigurationClustersArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClusters)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersOutput() ClickHouseInstallationTemplateSpecConfigurationClustersOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersOutput {
	return o
}

// optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClusters) map[string]interface{} { return v.Files }).(pulumi.MapOutput)
}

// optional, open insecure ports for cluster, defaults to "yes"
func (o ClickHouseInstallationTemplateSpecConfigurationClustersOutput) Insecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClusters) *string { return v.Insecure }).(pulumi.StringPtrOutput)
}

// describe current cluster layout, how much shards in cluster, how much replica in shard
// allows override settings on each shard and replica separatelly
func (o ClickHouseInstallationTemplateSpecConfigurationClustersOutput) Layout() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClusters) *ClickHouseInstallationTemplateSpecConfigurationClustersLayout {
		return v.Layout
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput)
}

// cluster name, used to identify set of servers and wide used during generate names of related Kubernetes resources
func (o ClickHouseInstallationTemplateSpecConfigurationClustersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClusters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies whether the Pod Disruption Budget (PDB) should be managed.
// During the next installation, if PDB management is enabled, the operator will
// attempt to retrieve any existing PDB. If none is found, it will create a new one
// and initiate a reconciliation loop. If PDB management is disabled, the existing PDB
// will remain intact, and the reconciliation loop will not be executed. By default,
// PDB management is enabled.
func (o ClickHouseInstallationTemplateSpecConfigurationClustersOutput) PdbManaged() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClusters) *string { return v.PdbManaged }).(pulumi.StringPtrOutput)
}

// Pod eviction is allowed if at most "pdbMaxUnavailable" pods are unavailable after the eviction,
// i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions
// by specifying 0. This is a mutually exclusive setting with "minAvailable".
func (o ClickHouseInstallationTemplateSpecConfigurationClustersOutput) PdbMaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClusters) *int { return v.PdbMaxUnavailable }).(pulumi.IntPtrOutput)
}

// allow tuning reconciling process
func (o ClickHouseInstallationTemplateSpecConfigurationClustersOutput) Reconcile() ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClusters) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcile {
		return v.Reconcile
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput)
}

// describes how schema is propagated within replicas and shards
func (o ClickHouseInstallationTemplateSpecConfigurationClustersOutput) SchemaPolicy() ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClusters) *ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy {
		return v.SchemaPolicy
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput)
}

// optional, shared secret value to secure cluster communications
func (o ClickHouseInstallationTemplateSpecConfigurationClustersOutput) Secret() ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClusters) *ClickHouseInstallationTemplateSpecConfigurationClustersSecret {
		return v.Secret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput)
}

// optional, open secure ports for cluster
func (o ClickHouseInstallationTemplateSpecConfigurationClustersOutput) Secure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClusters) *string { return v.Secure }).(pulumi.StringPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
// override top-level `chi.spec.configuration.settings`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseInstallationTemplateSpecConfigurationClustersOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClusters) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
// override top-level `chi.spec.configuration.templates`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersOutput) Templates() ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClusters) *ClickHouseInstallationTemplateSpecConfigurationClustersTemplates {
		return v.Templates
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput)
}

// optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// override top-level `chi.spec.configuration.zookeeper` settings
func (o ClickHouseInstallationTemplateSpecConfigurationClustersOutput) Zookeeper() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClusters) *ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper {
		return v.Zookeeper
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecConfigurationClusters)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplateSpecConfigurationClustersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationTemplateSpecConfigurationClusters {
		return vs[0].([]ClickHouseInstallationTemplateSpecConfigurationClusters)[vs[1].(int)]
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersOutput)
}

// describe current cluster layout, how much shards in cluster, how much replica in shard
// allows override settings on each shard and replica separatelly
type ClickHouseInstallationTemplateSpecConfigurationClustersLayout struct {
	// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
	Replicas []ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas `pulumi:"replicas"`
	// how much replicas in each shards for current cluster will run in Kubernetes,
	// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
	// every shard contains 1 replica by default"
	ReplicasCount *int `pulumi:"replicasCount"`
	// optional, allows override top-level `chi.spec.configuration`, cluster-level
	// `chi.spec.configuration.clusters` settings for each shard separately,
	// use it only if you fully understand what you do"
	Shards []ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards `pulumi:"shards"`
	// how much shards for current ClickHouse cluster will run in Kubernetes,
	// each shard contains shared-nothing part of data and contains set of replicas,
	// cluster contains 1 shard by default"
	ShardsCount *int `pulumi:"shardsCount"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput
}

// describe current cluster layout, how much shards in cluster, how much replica in shard
// allows override settings on each shard and replica separatelly
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs struct {
	// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
	Replicas ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayInput `pulumi:"replicas"`
	// how much replicas in each shards for current cluster will run in Kubernetes,
	// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
	// every shard contains 1 replica by default"
	ReplicasCount pulumi.IntPtrInput `pulumi:"replicasCount"`
	// optional, allows override top-level `chi.spec.configuration`, cluster-level
	// `chi.spec.configuration.clusters` settings for each shard separately,
	// use it only if you fully understand what you do"
	Shards ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayInput `pulumi:"shards"`
	// how much shards for current ClickHouse cluster will run in Kubernetes,
	// each shard contains shared-nothing part of data and contains set of replicas,
	// cluster contains 1 shard by default"
	ShardsCount pulumi.IntPtrInput `pulumi:"shardsCount"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayout)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs, ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtr and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrType ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersLayout)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput)
}

// describe current cluster layout, how much shards in cluster, how much replica in shard
// allows override settings on each shard and replica separatelly
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayout)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersLayout) *ClickHouseInstallationTemplateSpecConfigurationClustersLayout {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput)
}

// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput) Replicas() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayout) []ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas {
		return v.Replicas
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput)
}

// how much replicas in each shards for current cluster will run in Kubernetes,
// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
// every shard contains 1 replica by default"
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput) ReplicasCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayout) *int { return v.ReplicasCount }).(pulumi.IntPtrOutput)
}

// optional, allows override top-level `chi.spec.configuration`, cluster-level
// `chi.spec.configuration.clusters` settings for each shard separately,
// use it only if you fully understand what you do"
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput) Shards() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayout) []ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards {
		return v.Shards
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput)
}

// how much shards for current ClickHouse cluster will run in Kubernetes,
// each shard contains shared-nothing part of data and contains set of replicas,
// cluster contains 1 shard by default"
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput) ShardsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayout) *int { return v.ShardsCount }).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersLayout)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayout) ClickHouseInstallationTemplateSpecConfigurationClustersLayout {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersLayout
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput)
}

// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput) Replicas() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayout) []ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput)
}

// how much replicas in each shards for current cluster will run in Kubernetes,
// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
// every shard contains 1 replica by default"
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput) ReplicasCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayout) *int {
		if v == nil {
			return nil
		}
		return v.ReplicasCount
	}).(pulumi.IntPtrOutput)
}

// optional, allows override top-level `chi.spec.configuration`, cluster-level
// `chi.spec.configuration.clusters` settings for each shard separately,
// use it only if you fully understand what you do"
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput) Shards() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayout) []ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards {
		if v == nil {
			return nil
		}
		return v.Shards
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput)
}

// how much shards for current ClickHouse cluster will run in Kubernetes,
// each shard contains shared-nothing part of data and contains set of replicas,
// cluster contains 1 shard by default"
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput) ShardsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayout) *int {
		if v == nil {
			return nil
		}
		return v.ShardsCount
	}).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas struct {
	// optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files map[string]interface{} `pulumi:"files"`
	// optional, by default replica name is generated, but you can override it and setup custom name
	Name *string `pulumi:"name"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings map[string]interface{} `pulumi:"settings"`
	// optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Shards []ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards `pulumi:"shards"`
	// optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`
	ShardsCount *int `pulumi:"shardsCount"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
	// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
	Templates *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates `pulumi:"templates"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArgs and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArgs struct {
	// optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files pulumi.MapInput `pulumi:"files"`
	// optional, by default replica name is generated, but you can override it and setup custom name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings pulumi.MapInput `pulumi:"settings"`
	// optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Shards ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayInput `pulumi:"shards"`
	// optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`
	ShardsCount pulumi.IntPtrInput `pulumi:"shardsCount"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
	// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
	Templates ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrInput `pulumi:"templates"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArray and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArray{ ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArgs{...} }
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArray []ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasInput

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArray) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArray) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput {
	return o
}

// optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

// optional, by default replica name is generated, but you can override it and setup custom name
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

// optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput) Shards() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas) []ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards {
		return v.Shards
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput)
}

// optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput) ShardsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas) *int {
		return v.ShardsCount
	}).(pulumi.IntPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput) Templates() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas) *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates {
		return v.Templates
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas {
		return vs[0].([]ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicas)[vs[1].(int)]
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards struct {
	// optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files map[string]interface{} `pulumi:"files"`
	// optional, setup `Pod.spec.containers.ports` with name `http` for selected shard, override `chi.spec.templates.hostTemplates.spec.httpPort`
	// allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
	HttpPort  *int `pulumi:"httpPort"`
	HttpsPort *int `pulumi:"httpsPort"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure *string `pulumi:"insecure"`
	// optional, setup `Pod.spec.containers.ports` with name `interserver` for selected shard, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
	// allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
	InterserverHTTPPort *int `pulumi:"interserverHTTPPort"`
	// optional, by default shard name is generated, but you can override it and setup custom name
	Name *string `pulumi:"name"`
	// optional, open secure ports
	Secure *string `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings map[string]interface{} `pulumi:"settings"`
	// optional, setup `Pod.spec.containers.ports` with name `tcp` for selected shard, override `chi.spec.templates.hostTemplates.spec.tcpPort`
	// allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
	TcpPort *int `pulumi:"tcpPort"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
	// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
	Templates *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates `pulumi:"templates"`
	TlsPort   *int                                                                                  `pulumi:"tlsPort"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArgs and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArgs struct {
	// optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files pulumi.MapInput `pulumi:"files"`
	// optional, setup `Pod.spec.containers.ports` with name `http` for selected shard, override `chi.spec.templates.hostTemplates.spec.httpPort`
	// allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
	HttpPort  pulumi.IntPtrInput `pulumi:"httpPort"`
	HttpsPort pulumi.IntPtrInput `pulumi:"httpsPort"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure pulumi.StringPtrInput `pulumi:"insecure"`
	// optional, setup `Pod.spec.containers.ports` with name `interserver` for selected shard, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
	// allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
	InterserverHTTPPort pulumi.IntPtrInput `pulumi:"interserverHTTPPort"`
	// optional, by default shard name is generated, but you can override it and setup custom name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional, open secure ports
	Secure pulumi.StringPtrInput `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings pulumi.MapInput `pulumi:"settings"`
	// optional, setup `Pod.spec.containers.ports` with name `tcp` for selected shard, override `chi.spec.templates.hostTemplates.spec.tcpPort`
	// allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
	TcpPort pulumi.IntPtrInput `pulumi:"tcpPort"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
	// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
	Templates ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput `pulumi:"templates"`
	TlsPort   pulumi.IntPtrInput                                                                           `pulumi:"tlsPort"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArray and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArray{ ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArgs{...} }
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArray []ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsInput

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArray) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArray) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput {
	return o
}

// optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

// optional, setup `Pod.spec.containers.ports` with name `http` for selected shard, override `chi.spec.templates.hostTemplates.spec.httpPort`
// allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards) *int {
		return v.HttpPort
	}).(pulumi.IntPtrOutput)
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards) *int {
		return v.HttpsPort
	}).(pulumi.IntPtrOutput)
}

// optional, open insecure ports for cluster, defaults to "yes"
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput) Insecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards) *string {
		return v.Insecure
	}).(pulumi.StringPtrOutput)
}

// optional, setup `Pod.spec.containers.ports` with name `interserver` for selected shard, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
// allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput) InterserverHTTPPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards) *int {
		return v.InterserverHTTPPort
	}).(pulumi.IntPtrOutput)
}

// optional, by default shard name is generated, but you can override it and setup custom name
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional, open secure ports
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput) Secure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards) *string {
		return v.Secure
	}).(pulumi.StringPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

// optional, setup `Pod.spec.containers.ports` with name `tcp` for selected shard, override `chi.spec.templates.hostTemplates.spec.tcpPort`
// allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput) TcpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards) *int {
		return v.TcpPort
	}).(pulumi.IntPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput) Templates() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards) *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates {
		return v.Templates
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput)
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput) TlsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards) *int {
		return v.TlsPort
	}).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards {
		return vs[0].([]ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShards)[vs[1].(int)]
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs, ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtr and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrType ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs, ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtr and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrType ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards struct {
	// DEPRECATED - to be removed soon
	DefinitionType *string `pulumi:"definitionType"`
	// optional, allows define content of any setting file inside each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`
	Files map[string]interface{} `pulumi:"files"`
	// optional, `true` by default when `chi.spec.configuration.clusters[].layout.ReplicaCount` > 1 and 0 otherwise
	// allows setup <internal_replication> setting which will use during insert into tables with `Distributed` engine for insert only in one live replica and other replicas will download inserted data during replication,
	// will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
	// More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
	InternalReplication *string `pulumi:"internalReplication"`
	// optional, by default shard name is generated, but you can override it and setup custom name
	Name *string `pulumi:"name"`
	// optional, allows override behavior for selected replicas from cluster-level `chi.spec.configuration.clusters` and shard-level `chi.spec.configuration.clusters.layout.shards`
	Replicas []ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas `pulumi:"replicas"`
	// optional, how much replicas in selected shard for selected ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
	// shard contains 1 replica by default
	// override cluster-level `chi.spec.configuration.clusters.layout.replicasCount`
	ReplicasCount *int `pulumi:"replicasCount"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.settings` and cluster-level `chi.spec.configuration.clusters.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings map[string]interface{} `pulumi:"settings"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
	// override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
	Templates *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates `pulumi:"templates"`
	// optional, 1 by default, allows setup shard <weight> setting which will use during insert into tables with `Distributed` engine,
	// will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
	// More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
	Weight *int `pulumi:"weight"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArgs and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArgs struct {
	// DEPRECATED - to be removed soon
	DefinitionType pulumi.StringPtrInput `pulumi:"definitionType"`
	// optional, allows define content of any setting file inside each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`
	Files pulumi.MapInput `pulumi:"files"`
	// optional, `true` by default when `chi.spec.configuration.clusters[].layout.ReplicaCount` > 1 and 0 otherwise
	// allows setup <internal_replication> setting which will use during insert into tables with `Distributed` engine for insert only in one live replica and other replicas will download inserted data during replication,
	// will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
	// More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
	InternalReplication pulumi.StringPtrInput `pulumi:"internalReplication"`
	// optional, by default shard name is generated, but you can override it and setup custom name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional, allows override behavior for selected replicas from cluster-level `chi.spec.configuration.clusters` and shard-level `chi.spec.configuration.clusters.layout.shards`
	Replicas ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayInput `pulumi:"replicas"`
	// optional, how much replicas in selected shard for selected ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
	// shard contains 1 replica by default
	// override cluster-level `chi.spec.configuration.clusters.layout.replicasCount`
	ReplicasCount pulumi.IntPtrInput `pulumi:"replicasCount"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.settings` and cluster-level `chi.spec.configuration.clusters.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings pulumi.MapInput `pulumi:"settings"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
	// override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
	Templates ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrInput `pulumi:"templates"`
	// optional, 1 by default, allows setup shard <weight> setting which will use during insert into tables with `Distributed` engine,
	// will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
	// More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArray and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArray{ ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArgs{...} }
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArray []ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsInput

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArray) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArray) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput {
	return o
}

// DEPRECATED - to be removed soon
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput) DefinitionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards) *string {
		return v.DefinitionType
	}).(pulumi.StringPtrOutput)
}

// optional, allows define content of any setting file inside each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

// optional, `true` by default when `chi.spec.configuration.clusters[].layout.ReplicaCount` > 1 and 0 otherwise
// allows setup <internal_replication> setting which will use during insert into tables with `Distributed` engine for insert only in one live replica and other replicas will download inserted data during replication,
// will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
// More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput) InternalReplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards) *string {
		return v.InternalReplication
	}).(pulumi.StringPtrOutput)
}

// optional, by default shard name is generated, but you can override it and setup custom name
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional, allows override behavior for selected replicas from cluster-level `chi.spec.configuration.clusters` and shard-level `chi.spec.configuration.clusters.layout.shards`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput) Replicas() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards) []ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas {
		return v.Replicas
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput)
}

// optional, how much replicas in selected shard for selected ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
// shard contains 1 replica by default
// override cluster-level `chi.spec.configuration.clusters.layout.replicasCount`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput) ReplicasCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards) *int {
		return v.ReplicasCount
	}).(pulumi.IntPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
// override top-level `chi.spec.configuration.settings` and cluster-level `chi.spec.configuration.clusters.settings`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
// override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput) Templates() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards) *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates {
		return v.Templates
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput)
}

// optional, 1 by default, allows setup shard <weight> setting which will use during insert into tables with `Distributed` engine,
// will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
// More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards {
		return vs[0].([]ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShards)[vs[1].(int)]
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas struct {
	// optional, allows define content of any setting file inside `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files`, cluster-level `chi.spec.configuration.clusters.files` and shard-level `chi.spec.configuration.clusters.layout.shards.files`
	Files map[string]interface{} `pulumi:"files"`
	// optional, setup `Pod.spec.containers.ports` with name `http` for selected replica, override `chi.spec.templates.hostTemplates.spec.httpPort`
	// allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
	HttpPort  *int `pulumi:"httpPort"`
	HttpsPort *int `pulumi:"httpsPort"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure *string `pulumi:"insecure"`
	// optional, setup `Pod.spec.containers.ports` with name `interserver` for selected replica, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
	// allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
	InterserverHTTPPort *int `pulumi:"interserverHTTPPort"`
	// optional, by default replica name is generated, but you can override it and setup custom name
	Name *string `pulumi:"name"`
	// optional, open secure ports
	Secure *string `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and shard-level `chi.spec.configuration.clusters.layout.shards.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings map[string]interface{} `pulumi:"settings"`
	// optional, setup `Pod.spec.containers.ports` with name `tcp` for selected replica, override `chi.spec.templates.hostTemplates.spec.tcpPort`
	// allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
	TcpPort *int `pulumi:"tcpPort"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
	// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
	Templates *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates `pulumi:"templates"`
	TlsPort   *int                                                                                  `pulumi:"tlsPort"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArgs and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArgs struct {
	// optional, allows define content of any setting file inside `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files`, cluster-level `chi.spec.configuration.clusters.files` and shard-level `chi.spec.configuration.clusters.layout.shards.files`
	Files pulumi.MapInput `pulumi:"files"`
	// optional, setup `Pod.spec.containers.ports` with name `http` for selected replica, override `chi.spec.templates.hostTemplates.spec.httpPort`
	// allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
	HttpPort  pulumi.IntPtrInput `pulumi:"httpPort"`
	HttpsPort pulumi.IntPtrInput `pulumi:"httpsPort"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure pulumi.StringPtrInput `pulumi:"insecure"`
	// optional, setup `Pod.spec.containers.ports` with name `interserver` for selected replica, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
	// allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
	InterserverHTTPPort pulumi.IntPtrInput `pulumi:"interserverHTTPPort"`
	// optional, by default replica name is generated, but you can override it and setup custom name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional, open secure ports
	Secure pulumi.StringPtrInput `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and shard-level `chi.spec.configuration.clusters.layout.shards.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings pulumi.MapInput `pulumi:"settings"`
	// optional, setup `Pod.spec.containers.ports` with name `tcp` for selected replica, override `chi.spec.templates.hostTemplates.spec.tcpPort`
	// allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
	TcpPort pulumi.IntPtrInput `pulumi:"tcpPort"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
	// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
	Templates ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrInput `pulumi:"templates"`
	TlsPort   pulumi.IntPtrInput                                                                           `pulumi:"tlsPort"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArray and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArray{ ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArgs{...} }
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArray []ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasInput

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArray) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArray) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput {
	return o
}

// optional, allows define content of any setting file inside `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files`, cluster-level `chi.spec.configuration.clusters.files` and shard-level `chi.spec.configuration.clusters.layout.shards.files`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

// optional, setup `Pod.spec.containers.ports` with name `http` for selected replica, override `chi.spec.templates.hostTemplates.spec.httpPort`
// allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas) *int {
		return v.HttpPort
	}).(pulumi.IntPtrOutput)
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas) *int {
		return v.HttpsPort
	}).(pulumi.IntPtrOutput)
}

// optional, open insecure ports for cluster, defaults to "yes"
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput) Insecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas) *string {
		return v.Insecure
	}).(pulumi.StringPtrOutput)
}

// optional, setup `Pod.spec.containers.ports` with name `interserver` for selected replica, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
// allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput) InterserverHTTPPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas) *int {
		return v.InterserverHTTPPort
	}).(pulumi.IntPtrOutput)
}

// optional, by default replica name is generated, but you can override it and setup custom name
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional, open secure ports
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput) Secure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas) *string {
		return v.Secure
	}).(pulumi.StringPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and shard-level `chi.spec.configuration.clusters.layout.shards.settings`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

// optional, setup `Pod.spec.containers.ports` with name `tcp` for selected replica, override `chi.spec.templates.hostTemplates.spec.tcpPort`
// allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput) TcpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas) *int {
		return v.TcpPort
	}).(pulumi.IntPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput) Templates() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas) *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates {
		return v.Templates
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput)
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput) TlsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas) *int {
		return v.TlsPort
	}).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas {
		return vs[0].([]ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicas)[vs[1].(int)]
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs, ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtr and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrType ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
// override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
// override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs, ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtr and ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrType ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
// override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// allow tuning reconciling process
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcile struct {
	// Whether the operator during reconcile procedure should wait for a ClickHouse host:
	//   - to be excluded from a ClickHouse cluster
	//   - to complete all running queries
	//   - to be included into a ClickHouse cluster
	//     respectfully before moving forward
	Host *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHost `pulumi:"host"`
	// runtime parameters for clickhouse-operator process which are used during reconcile cycle
	Runtime *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime `pulumi:"runtime"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersReconcileInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersReconcileArgs and ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersReconcileInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersReconcileArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput
}

// allow tuning reconciling process
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileArgs struct {
	// Whether the operator during reconcile procedure should wait for a ClickHouse host:
	//   - to be excluded from a ClickHouse cluster
	//   - to complete all running queries
	//   - to be included into a ClickHouse cluster
	//     respectfully before moving forward
	Host ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrInput `pulumi:"host"`
	// runtime parameters for clickhouse-operator process which are used during reconcile cycle
	Runtime ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrInput `pulumi:"runtime"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcile)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersReconcileArgs, ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtr and ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersReconcileArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrType ClickHouseInstallationTemplateSpecConfigurationClustersReconcileArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileArgs) ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersReconcile)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput)
}

// allow tuning reconciling process
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcile)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersReconcile) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcile {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput) Host() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersReconcile) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHost {
		return v.Host
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput) Runtime() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersReconcile) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime {
		return v.Runtime
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersReconcile)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcile) ClickHouseInstallationTemplateSpecConfigurationClustersReconcile {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersReconcile
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput) Host() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcile) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHost {
		if v == nil {
			return nil
		}
		return v.Host
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput) Runtime() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcile) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHost struct {
	Wait *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait `pulumi:"wait"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostArgs and ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostArgs struct {
	Wait ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrInput `pulumi:"wait"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHost)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostArgs, ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtr and ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrType ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostArgs) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHost)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHost)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHost) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHost {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput)
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput) Wait() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHost) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait {
		return v.Wait
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHost)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHost) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHost {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHost
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput)
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput) Wait() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHost) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait {
		if v == nil {
			return nil
		}
		return v.Wait
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait struct {
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Exclude *string `pulumi:"exclude"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
	Include *string `pulumi:"include"`
	// What probes the operator should wait during host launch procedure
	Probes *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes `pulumi:"probes"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
	Queries *string `pulumi:"queries"`
	// Whether the operator during reconcile procedure should wait for replicas to catch-up
	Replicas *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas `pulumi:"replicas"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitArgs and ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput
}

type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitArgs struct {
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Exclude pulumi.StringPtrInput `pulumi:"exclude"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
	Include pulumi.StringPtrInput `pulumi:"include"`
	// What probes the operator should wait during host launch procedure
	Probes ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrInput `pulumi:"probes"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
	Queries pulumi.StringPtrInput `pulumi:"queries"`
	// Whether the operator during reconcile procedure should wait for replicas to catch-up
	Replicas ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrInput `pulumi:"replicas"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitArgs, ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtr and ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrType ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitArgs) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput) Exclude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait) *string {
		return v.Exclude
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput) Include() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait) *string {
		return v.Include
	}).(pulumi.StringPtrOutput)
}

// What probes the operator should wait during host launch procedure
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput) Probes() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes {
		return v.Probes
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput) Queries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait) *string {
		return v.Queries
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput) Replicas() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas {
		return v.Replicas
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput) Exclude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Exclude
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput) Include() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Include
	}).(pulumi.StringPtrOutput)
}

// What probes the operator should wait during host launch procedure
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput) Probes() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput) Queries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Queries
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput) Replicas() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWait) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput)
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes struct {
	// Whether the operator during host launch procedure should wait for ready probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to wait.
	Readiness *string `pulumi:"readiness"`
	// Whether the operator during host launch procedure should wait for startup probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to do not wait.
	Startup *string `pulumi:"startup"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesArgs and ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesArgs struct {
	// Whether the operator during host launch procedure should wait for ready probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to wait.
	Readiness pulumi.StringPtrInput `pulumi:"readiness"`
	// Whether the operator during host launch procedure should wait for startup probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to do not wait.
	Startup pulumi.StringPtrInput `pulumi:"startup"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesArgs, ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtr and ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrType ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesArgs) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput)
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput)
}

// Whether the operator during host launch procedure should wait for ready probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to wait.
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput) Readiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes) *string {
		return v.Readiness
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during host launch procedure should wait for startup probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to do not wait.
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput) Startup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes) *string {
		return v.Startup
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput)
}

// Whether the operator during host launch procedure should wait for ready probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to wait.
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput) Readiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes) *string {
		if v == nil {
			return nil
		}
		return v.Readiness
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during host launch procedure should wait for startup probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to do not wait.
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput) Startup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbes) *string {
		if v == nil {
			return nil
		}
		return v.Startup
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas struct {
	// Whether the operator during reconcile procedure should wait for all replicas to catch-up
	All *string `pulumi:"all"`
	// replication max absolute delay to consider replica is not delayed
	Delay *int `pulumi:"delay"`
	// Whether the operator during reconcile procedure should wait for new replicas to catch-up
	New *string `pulumi:"new"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasArgs and ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasArgs struct {
	// Whether the operator during reconcile procedure should wait for all replicas to catch-up
	All pulumi.StringPtrInput `pulumi:"all"`
	// replication max absolute delay to consider replica is not delayed
	Delay pulumi.IntPtrInput `pulumi:"delay"`
	// Whether the operator during reconcile procedure should wait for new replicas to catch-up
	New pulumi.StringPtrInput `pulumi:"new"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasArgs, ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtr and ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrType ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasArgs) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput)
}

// Whether the operator during reconcile procedure should wait for all replicas to catch-up
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput) All() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas) *string {
		return v.All
	}).(pulumi.StringPtrOutput)
}

// replication max absolute delay to consider replica is not delayed
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput) Delay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas) *int {
		return v.Delay
	}).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for new replicas to catch-up
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput) New() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas) *string {
		return v.New
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput)
}

// Whether the operator during reconcile procedure should wait for all replicas to catch-up
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput) All() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas) *string {
		if v == nil {
			return nil
		}
		return v.All
	}).(pulumi.StringPtrOutput)
}

// replication max absolute delay to consider replica is not delayed
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput) Delay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas) *int {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for new replicas to catch-up
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput) New() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicas) *string {
		if v == nil {
			return nil
		}
		return v.New
	}).(pulumi.StringPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime struct {
	// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
	ReconcileShardsMaxConcurrencyPercent *int `pulumi:"reconcileShardsMaxConcurrencyPercent"`
	// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
	ReconcileShardsThreadsNumber *int `pulumi:"reconcileShardsThreadsNumber"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeArgs and ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeArgs struct {
	// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
	ReconcileShardsMaxConcurrencyPercent pulumi.IntPtrInput `pulumi:"reconcileShardsMaxConcurrencyPercent"`
	// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
	ReconcileShardsThreadsNumber pulumi.IntPtrInput `pulumi:"reconcileShardsThreadsNumber"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeArgs, ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtr and ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrType ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeArgs) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime) *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput)
}

// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput) ReconcileShardsMaxConcurrencyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime) *int {
		return v.ReconcileShardsMaxConcurrencyPercent
	}).(pulumi.IntPtrOutput)
}

// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput) ReconcileShardsThreadsNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime) *int {
		return v.ReconcileShardsThreadsNumber
	}).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime) ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput)
}

// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput) ReconcileShardsMaxConcurrencyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime) *int {
		if v == nil {
			return nil
		}
		return v.ReconcileShardsMaxConcurrencyPercent
	}).(pulumi.IntPtrOutput)
}

// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
func (o ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput) ReconcileShardsThreadsNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntime) *int {
		if v == nil {
			return nil
		}
		return v.ReconcileShardsThreadsNumber
	}).(pulumi.IntPtrOutput)
}

// describes how schema is propagated within replicas and shards
type ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy struct {
	// how schema is propagated within a replica
	Replica *string `pulumi:"replica"`
	// how schema is propagated between shards
	Shard *string `pulumi:"shard"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyArgs and ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput
}

// describes how schema is propagated within replicas and shards
type ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyArgs struct {
	// how schema is propagated within a replica
	Replica pulumi.StringPtrInput `pulumi:"replica"`
	// how schema is propagated between shards
	Shard pulumi.StringPtrInput `pulumi:"shard"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyArgs, ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtr and ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrType ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyArgs) ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput)
}

// describes how schema is propagated within replicas and shards
type ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy) *ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput)
}

// how schema is propagated within a replica
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput) Replica() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy) *string { return v.Replica }).(pulumi.StringPtrOutput)
}

// how schema is propagated between shards
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput) Shard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy) *string { return v.Shard }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy) ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput)
}

// how schema is propagated within a replica
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput) Replica() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Replica
	}).(pulumi.StringPtrOutput)
}

// how schema is propagated between shards
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput) Shard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Shard
	}).(pulumi.StringPtrOutput)
}

// optional, shared secret value to secure cluster communications
type ClickHouseInstallationTemplateSpecConfigurationClustersSecret struct {
	// Auto-generate shared secret value to secure cluster communications
	Auto *string `pulumi:"auto"`
	// Cluster shared secret value in plain text
	Value *string `pulumi:"value"`
	// Cluster shared secret source
	ValueFrom *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFrom `pulumi:"valueFrom"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersSecretInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs and ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersSecretInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersSecretInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersSecretOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput
}

// optional, shared secret value to secure cluster communications
type ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs struct {
	// Auto-generate shared secret value to secure cluster communications
	Auto pulumi.StringPtrInput `pulumi:"auto"`
	// Cluster shared secret value in plain text
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Cluster shared secret source
	ValueFrom ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrInput `pulumi:"valueFrom"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSecret)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersSecretOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs, ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtr and ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersSecretPtrType ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs) ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersSecretPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersSecret)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersSecretPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersSecretPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput)
}

// optional, shared secret value to secure cluster communications
type ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSecret)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersSecret) *ClickHouseInstallationTemplateSpecConfigurationClustersSecret {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput)
}

// Auto-generate shared secret value to secure cluster communications
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput) Auto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersSecret) *string { return v.Auto }).(pulumi.StringPtrOutput)
}

// Cluster shared secret value in plain text
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersSecret) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Cluster shared secret source
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput) ValueFrom() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersSecret) *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFrom {
		return v.ValueFrom
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersSecret)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersSecret) ClickHouseInstallationTemplateSpecConfigurationClustersSecret {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersSecret
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput)
}

// Auto-generate shared secret value to secure cluster communications
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput) Auto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersSecret) *string {
		if v == nil {
			return nil
		}
		return v.Auto
	}).(pulumi.StringPtrOutput)
}

// Cluster shared secret value in plain text
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersSecret) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// Cluster shared secret source
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput) ValueFrom() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersSecret) *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFrom {
		if v == nil {
			return nil
		}
		return v.ValueFrom
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput)
}

// Cluster shared secret source
type ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFrom struct {
	// Selects a key of a secret in the clickhouse installation namespace.
	// Should not be used if value is not empty.
	SecretKeyRef *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromArgs and ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput
}

// Cluster shared secret source
type ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromArgs struct {
	// Selects a key of a secret in the clickhouse installation namespace.
	// Should not be used if value is not empty.
	SecretKeyRef ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFrom)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromArgs, ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtr and ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrType ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromArgs) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFrom)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput)
}

// Cluster shared secret source
type ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFrom)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFrom) *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFrom {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput)
}

// Selects a key of a secret in the clickhouse installation namespace.
// Should not be used if value is not empty.
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput) SecretKeyRef() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFrom) *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFrom)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFrom) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFrom {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFrom
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput)
}

// Selects a key of a secret in the clickhouse installation namespace.
// Should not be used if value is not empty.
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput) SecretKeyRef() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFrom) *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the clickhouse installation namespace.
// Should not be used if value is not empty.
type ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef struct {
	// The key of the secret to select from. Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefArgs and ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the clickhouse installation namespace.
// Should not be used if value is not empty.
type ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from. Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefArgs, ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtr and ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrType ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefArgs) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the clickhouse installation namespace.
// Should not be used if value is not empty.
type ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef) *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from. Must be a valid secret key.
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// Name of the referent. More info:
// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef) string {
		return v.Name
	}).(pulumi.StringOutput)
}

// Specify whether the Secret or its key must be defined
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef) *bool {
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef) ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput)
}

// The key of the secret to select from. Must be a valid secret key.
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info:
// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
// override top-level `chi.spec.configuration.templates`
type ClickHouseInstallationTemplateSpecConfigurationClustersTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs and ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
// override top-level `chi.spec.configuration.templates`
type ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs, ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtr and ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrType ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs) ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
// override top-level `chi.spec.configuration.templates`
type ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *ClickHouseInstallationTemplateSpecConfigurationClustersTemplates {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string { return v.PodTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) ClickHouseInstallationTemplateSpecConfigurationClustersTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersTemplates
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// override top-level `chi.spec.configuration.zookeeper` settings
type ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper struct {
	// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
	Identity *string `pulumi:"identity"`
	// describe every available zookeeper cluster node for interaction
	Nodes []ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodes `pulumi:"nodes"`
	// one operation timeout during Zookeeper transactions
	Operation_timeout_ms *int `pulumi:"operation_timeout_ms"`
	// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
	Root *string `pulumi:"root"`
	// session timeout during connect to Zookeeper
	Session_timeout_ms *int `pulumi:"session_timeout_ms"`
	// Enables compression in Keeper protocol if set to true
	Use_compression *string `pulumi:"use_compression"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs and ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput
}

// optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// override top-level `chi.spec.configuration.zookeeper` settings
type ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs struct {
	// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
	Identity pulumi.StringPtrInput `pulumi:"identity"`
	// describe every available zookeeper cluster node for interaction
	Nodes ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayInput `pulumi:"nodes"`
	// one operation timeout during Zookeeper transactions
	Operation_timeout_ms pulumi.IntPtrInput `pulumi:"operation_timeout_ms"`
	// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
	Root pulumi.StringPtrInput `pulumi:"root"`
	// session timeout during connect to Zookeeper
	Session_timeout_ms pulumi.IntPtrInput `pulumi:"session_timeout_ms"`
	// Enables compression in Keeper protocol if set to true
	Use_compression pulumi.StringPtrInput `pulumi:"use_compression"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput).ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs, ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtr and ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrType ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs

func ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtr(v *ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrType) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput)
}

// optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// override top-level `chi.spec.configuration.zookeeper` settings
type ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper) *ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput)
}

// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// describe every available zookeeper cluster node for interaction
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput) Nodes() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper) []ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodes {
		return v.Nodes
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput)
}

// one operation timeout during Zookeeper transactions
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput) Operation_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper) *int {
		return v.Operation_timeout_ms
	}).(pulumi.IntPtrOutput)
}

// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput) Root() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper) *string { return v.Root }).(pulumi.StringPtrOutput)
}

// session timeout during connect to Zookeeper
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput) Session_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper) *int {
		return v.Session_timeout_ms
	}).(pulumi.IntPtrOutput)
}

// Enables compression in Keeper protocol if set to true
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput) Use_compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper) *string {
		return v.Use_compression
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput)
}

// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper) *string {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(pulumi.StringPtrOutput)
}

// describe every available zookeeper cluster node for interaction
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput) Nodes() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper) []ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodes {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput)
}

// one operation timeout during Zookeeper transactions
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput) Operation_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper) *int {
		if v == nil {
			return nil
		}
		return v.Operation_timeout_ms
	}).(pulumi.IntPtrOutput)
}

// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput) Root() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper) *string {
		if v == nil {
			return nil
		}
		return v.Root
	}).(pulumi.StringPtrOutput)
}

// session timeout during connect to Zookeeper
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput) Session_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper) *int {
		if v == nil {
			return nil
		}
		return v.Session_timeout_ms
	}).(pulumi.IntPtrOutput)
}

// Enables compression in Keeper protocol if set to true
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput) Use_compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationClustersZookeeper) *string {
		if v == nil {
			return nil
		}
		return v.Use_compression
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodes struct {
	// availability zone for Zookeeper node
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// dns name or ip address for Zookeeper node
	Host *string `pulumi:"host"`
	// TCP port which used to connect to Zookeeper node
	Port *int `pulumi:"port"`
	// if a secure connection to Zookeeper is required
	Secure *string `pulumi:"secure"`
}

// ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArgs and ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput
}

type ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArgs struct {
	// availability zone for Zookeeper node
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// dns name or ip address for Zookeeper node
	Host pulumi.StringPtrInput `pulumi:"host"`
	// TCP port which used to connect to Zookeeper node
	Port pulumi.IntPtrInput `pulumi:"port"`
	// if a secure connection to Zookeeper is required
	Secure pulumi.StringPtrInput `pulumi:"secure"`
}

func (ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodes)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArgs) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput)
}

// ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArray and ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArray{ ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArgs{...} }
type ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput
	ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput
}

type ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArray []ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesInput

func (ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodes)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArray) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArray) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodes)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput {
	return o
}

// availability zone for Zookeeper node
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodes) *string {
		return v.AvailabilityZone
	}).(pulumi.StringPtrOutput)
}

// dns name or ip address for Zookeeper node
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodes) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// TCP port which used to connect to Zookeeper node
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodes) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// if a secure connection to Zookeeper is required
func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput) Secure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodes) *string { return v.Secure }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodes)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput() ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput) ToClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodes {
		return vs[0].([]ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodes)[vs[1].(int)]
	}).(ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput)
}

// allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
// currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
// More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
type ClickHouseInstallationTemplateSpecConfigurationZookeeper struct {
	// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
	Identity *string `pulumi:"identity"`
	// describe every available zookeeper cluster node for interaction
	Nodes []ClickHouseInstallationTemplateSpecConfigurationZookeeperNodes `pulumi:"nodes"`
	// one operation timeout during Zookeeper transactions
	Operation_timeout_ms *int `pulumi:"operation_timeout_ms"`
	// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
	Root *string `pulumi:"root"`
	// session timeout during connect to Zookeeper
	Session_timeout_ms *int `pulumi:"session_timeout_ms"`
	// Enables compression in Keeper protocol if set to true
	Use_compression *string `pulumi:"use_compression"`
}

// ClickHouseInstallationTemplateSpecConfigurationZookeeperInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs and ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationZookeeperInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationZookeeperInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationZookeeperOutput() ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput
	ToClickHouseInstallationTemplateSpecConfigurationZookeeperOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput
}

// allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
// currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
// More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
type ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs struct {
	// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
	Identity pulumi.StringPtrInput `pulumi:"identity"`
	// describe every available zookeeper cluster node for interaction
	Nodes ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayInput `pulumi:"nodes"`
	// one operation timeout during Zookeeper transactions
	Operation_timeout_ms pulumi.IntPtrInput `pulumi:"operation_timeout_ms"`
	// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
	Root pulumi.StringPtrInput `pulumi:"root"`
	// session timeout during connect to Zookeeper
	Session_timeout_ms pulumi.IntPtrInput `pulumi:"session_timeout_ms"`
	// Enables compression in Keeper protocol if set to true
	Use_compression pulumi.StringPtrInput `pulumi:"use_compression"`
}

func (ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationZookeeper)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs) ToClickHouseInstallationTemplateSpecConfigurationZookeeperOutput() ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationZookeeperOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs) ToClickHouseInstallationTemplateSpecConfigurationZookeeperOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput)
}

func (i ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs) ToClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput() ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs) ToClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput).ToClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs, ClickHouseInstallationTemplateSpecConfigurationZookeeperPtr and ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput() ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput
	ToClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput
}

type clickHouseInstallationTemplateSpecConfigurationZookeeperPtrType ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs

func ClickHouseInstallationTemplateSpecConfigurationZookeeperPtr(v *ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs) ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrInput {
	return (*clickHouseInstallationTemplateSpecConfigurationZookeeperPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecConfigurationZookeeperPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationZookeeper)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecConfigurationZookeeperPtrType) ToClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput() ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecConfigurationZookeeperPtrType) ToClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput)
}

// allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
// `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
// currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
// More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
type ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationZookeeper)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput) ToClickHouseInstallationTemplateSpecConfigurationZookeeperOutput() ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput) ToClickHouseInstallationTemplateSpecConfigurationZookeeperOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput) ToClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput() ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput) ToClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecConfigurationZookeeper) *ClickHouseInstallationTemplateSpecConfigurationZookeeper {
		return &v
	}).(ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput)
}

// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationZookeeper) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// describe every available zookeeper cluster node for interaction
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput) Nodes() ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationZookeeper) []ClickHouseInstallationTemplateSpecConfigurationZookeeperNodes {
		return v.Nodes
	}).(ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput)
}

// one operation timeout during Zookeeper transactions
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput) Operation_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationZookeeper) *int { return v.Operation_timeout_ms }).(pulumi.IntPtrOutput)
}

// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput) Root() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationZookeeper) *string { return v.Root }).(pulumi.StringPtrOutput)
}

// session timeout during connect to Zookeeper
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput) Session_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationZookeeper) *int { return v.Session_timeout_ms }).(pulumi.IntPtrOutput)
}

// Enables compression in Keeper protocol if set to true
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput) Use_compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationZookeeper) *string { return v.Use_compression }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecConfigurationZookeeper)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput() ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput) ToClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput) Elem() ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationZookeeper) ClickHouseInstallationTemplateSpecConfigurationZookeeper {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecConfigurationZookeeper
		return ret
	}).(ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput)
}

// optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationZookeeper) *string {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(pulumi.StringPtrOutput)
}

// describe every available zookeeper cluster node for interaction
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput) Nodes() ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationZookeeper) []ClickHouseInstallationTemplateSpecConfigurationZookeeperNodes {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput)
}

// one operation timeout during Zookeeper transactions
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput) Operation_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationZookeeper) *int {
		if v == nil {
			return nil
		}
		return v.Operation_timeout_ms
	}).(pulumi.IntPtrOutput)
}

// optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput) Root() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationZookeeper) *string {
		if v == nil {
			return nil
		}
		return v.Root
	}).(pulumi.StringPtrOutput)
}

// session timeout during connect to Zookeeper
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput) Session_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationZookeeper) *int {
		if v == nil {
			return nil
		}
		return v.Session_timeout_ms
	}).(pulumi.IntPtrOutput)
}

// Enables compression in Keeper protocol if set to true
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput) Use_compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecConfigurationZookeeper) *string {
		if v == nil {
			return nil
		}
		return v.Use_compression
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationZookeeperNodes struct {
	// availability zone for Zookeeper node
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// dns name or ip address for Zookeeper node
	Host *string `pulumi:"host"`
	// TCP port which used to connect to Zookeeper node
	Port *int `pulumi:"port"`
	// if a secure connection to Zookeeper is required
	Secure *string `pulumi:"secure"`
}

// ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArgs and ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArgs{...}
type ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput() ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput
	ToClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput
}

type ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArgs struct {
	// availability zone for Zookeeper node
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// dns name or ip address for Zookeeper node
	Host pulumi.StringPtrInput `pulumi:"host"`
	// TCP port which used to connect to Zookeeper node
	Port pulumi.IntPtrInput `pulumi:"port"`
	// if a secure connection to Zookeeper is required
	Secure pulumi.StringPtrInput `pulumi:"secure"`
}

func (ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationZookeeperNodes)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArgs) ToClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput() ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArgs) ToClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput)
}

// ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayInput is an input type that accepts ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArray and ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayInput` via:
//
//	ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArray{ ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArgs{...} }
type ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput() ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput
	ToClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput
}

type ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArray []ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesInput

func (ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecConfigurationZookeeperNodes)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArray) ToClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput() ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput {
	return i.ToClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArray) ToClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationZookeeperNodes)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput) ToClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput() ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput) ToClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput {
	return o
}

// availability zone for Zookeeper node
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationZookeeperNodes) *string {
		return v.AvailabilityZone
	}).(pulumi.StringPtrOutput)
}

// dns name or ip address for Zookeeper node
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationZookeeperNodes) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// TCP port which used to connect to Zookeeper node
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationZookeeperNodes) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// if a secure connection to Zookeeper is required
func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput) Secure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecConfigurationZookeeperNodes) *string { return v.Secure }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecConfigurationZookeeperNodes)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput) ToClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput() ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput) ToClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationTemplateSpecConfigurationZookeeperNodes {
		return vs[0].([]ClickHouseInstallationTemplateSpecConfigurationZookeeperNodes)[vs[1].(int)]
	}).(ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput)
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
type ClickHouseInstallationTemplateSpecDefaults struct {
	// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
	// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
	DistributedDDL *ClickHouseInstallationTemplateSpecDefaultsDistributedDdl `pulumi:"distributedDDL"`
	// define should replicas be specified by FQDN in `<host></host>`.
	// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
	// "no" by default
	ReplicasUseFQDN *string `pulumi:"replicasUseFQDN"`
	// default storage management options
	StorageManagement *ClickHouseInstallationTemplateSpecDefaultsStorageManagement `pulumi:"storageManagement"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
	Templates *ClickHouseInstallationTemplateSpecDefaultsTemplates `pulumi:"templates"`
}

// ClickHouseInstallationTemplateSpecDefaultsInput is an input type that accepts ClickHouseInstallationTemplateSpecDefaultsArgs and ClickHouseInstallationTemplateSpecDefaultsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecDefaultsInput` via:
//
//	ClickHouseInstallationTemplateSpecDefaultsArgs{...}
type ClickHouseInstallationTemplateSpecDefaultsInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecDefaultsOutput() ClickHouseInstallationTemplateSpecDefaultsOutput
	ToClickHouseInstallationTemplateSpecDefaultsOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecDefaultsOutput
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
type ClickHouseInstallationTemplateSpecDefaultsArgs struct {
	// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
	// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
	DistributedDDL ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrInput `pulumi:"distributedDDL"`
	// define should replicas be specified by FQDN in `<host></host>`.
	// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
	// "no" by default
	ReplicasUseFQDN pulumi.StringPtrInput `pulumi:"replicasUseFQDN"`
	// default storage management options
	StorageManagement ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrInput `pulumi:"storageManagement"`
	// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
	Templates ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrInput `pulumi:"templates"`
}

func (ClickHouseInstallationTemplateSpecDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaults)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecDefaultsArgs) ToClickHouseInstallationTemplateSpecDefaultsOutput() ClickHouseInstallationTemplateSpecDefaultsOutput {
	return i.ToClickHouseInstallationTemplateSpecDefaultsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecDefaultsArgs) ToClickHouseInstallationTemplateSpecDefaultsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecDefaultsOutput)
}

func (i ClickHouseInstallationTemplateSpecDefaultsArgs) ToClickHouseInstallationTemplateSpecDefaultsPtrOutput() ClickHouseInstallationTemplateSpecDefaultsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecDefaultsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecDefaultsArgs) ToClickHouseInstallationTemplateSpecDefaultsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecDefaultsOutput).ToClickHouseInstallationTemplateSpecDefaultsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecDefaultsPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecDefaultsArgs, ClickHouseInstallationTemplateSpecDefaultsPtr and ClickHouseInstallationTemplateSpecDefaultsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecDefaultsPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecDefaultsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecDefaultsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecDefaultsPtrOutput() ClickHouseInstallationTemplateSpecDefaultsPtrOutput
	ToClickHouseInstallationTemplateSpecDefaultsPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecDefaultsPtrOutput
}

type clickHouseInstallationTemplateSpecDefaultsPtrType ClickHouseInstallationTemplateSpecDefaultsArgs

func ClickHouseInstallationTemplateSpecDefaultsPtr(v *ClickHouseInstallationTemplateSpecDefaultsArgs) ClickHouseInstallationTemplateSpecDefaultsPtrInput {
	return (*clickHouseInstallationTemplateSpecDefaultsPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecDefaults)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecDefaultsPtrType) ToClickHouseInstallationTemplateSpecDefaultsPtrOutput() ClickHouseInstallationTemplateSpecDefaultsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecDefaultsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecDefaultsPtrType) ToClickHouseInstallationTemplateSpecDefaultsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecDefaultsPtrOutput)
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
type ClickHouseInstallationTemplateSpecDefaultsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaults)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecDefaultsOutput) ToClickHouseInstallationTemplateSpecDefaultsOutput() ClickHouseInstallationTemplateSpecDefaultsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsOutput) ToClickHouseInstallationTemplateSpecDefaultsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsOutput) ToClickHouseInstallationTemplateSpecDefaultsPtrOutput() ClickHouseInstallationTemplateSpecDefaultsPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecDefaultsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecDefaultsOutput) ToClickHouseInstallationTemplateSpecDefaultsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecDefaults) *ClickHouseInstallationTemplateSpecDefaults {
		return &v
	}).(ClickHouseInstallationTemplateSpecDefaultsPtrOutput)
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
func (o ClickHouseInstallationTemplateSpecDefaultsOutput) DistributedDDL() ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaults) *ClickHouseInstallationTemplateSpecDefaultsDistributedDdl {
		return v.DistributedDDL
	}).(ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput)
}

// define should replicas be specified by FQDN in `<host></host>`.
// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
// "no" by default
func (o ClickHouseInstallationTemplateSpecDefaultsOutput) ReplicasUseFQDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaults) *string { return v.ReplicasUseFQDN }).(pulumi.StringPtrOutput)
}

// default storage management options
func (o ClickHouseInstallationTemplateSpecDefaultsOutput) StorageManagement() ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaults) *ClickHouseInstallationTemplateSpecDefaultsStorageManagement {
		return v.StorageManagement
	}).(ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
func (o ClickHouseInstallationTemplateSpecDefaultsOutput) Templates() ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaults) *ClickHouseInstallationTemplateSpecDefaultsTemplates {
		return v.Templates
	}).(ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput)
}

type ClickHouseInstallationTemplateSpecDefaultsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecDefaults)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecDefaultsPtrOutput) ToClickHouseInstallationTemplateSpecDefaultsPtrOutput() ClickHouseInstallationTemplateSpecDefaultsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsPtrOutput) ToClickHouseInstallationTemplateSpecDefaultsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsPtrOutput) Elem() ClickHouseInstallationTemplateSpecDefaultsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaults) ClickHouseInstallationTemplateSpecDefaults {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecDefaults
		return ret
	}).(ClickHouseInstallationTemplateSpecDefaultsOutput)
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
func (o ClickHouseInstallationTemplateSpecDefaultsPtrOutput) DistributedDDL() ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaults) *ClickHouseInstallationTemplateSpecDefaultsDistributedDdl {
		if v == nil {
			return nil
		}
		return v.DistributedDDL
	}).(ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput)
}

// define should replicas be specified by FQDN in `<host></host>`.
// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
// "no" by default
func (o ClickHouseInstallationTemplateSpecDefaultsPtrOutput) ReplicasUseFQDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaults) *string {
		if v == nil {
			return nil
		}
		return v.ReplicasUseFQDN
	}).(pulumi.StringPtrOutput)
}

// default storage management options
func (o ClickHouseInstallationTemplateSpecDefaultsPtrOutput) StorageManagement() ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaults) *ClickHouseInstallationTemplateSpecDefaultsStorageManagement {
		if v == nil {
			return nil
		}
		return v.StorageManagement
	}).(ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
func (o ClickHouseInstallationTemplateSpecDefaultsPtrOutput) Templates() ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaults) *ClickHouseInstallationTemplateSpecDefaultsTemplates {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput)
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
type ClickHouseInstallationTemplateSpecDefaultsDistributedDdl struct {
	// Settings from this profile will be used to execute DDL queries
	Profile *string `pulumi:"profile"`
}

// ClickHouseInstallationTemplateSpecDefaultsDistributedDdlInput is an input type that accepts ClickHouseInstallationTemplateSpecDefaultsDistributedDdlArgs and ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecDefaultsDistributedDdlInput` via:
//
//	ClickHouseInstallationTemplateSpecDefaultsDistributedDdlArgs{...}
type ClickHouseInstallationTemplateSpecDefaultsDistributedDdlInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput() ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput
	ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
type ClickHouseInstallationTemplateSpecDefaultsDistributedDdlArgs struct {
	// Settings from this profile will be used to execute DDL queries
	Profile pulumi.StringPtrInput `pulumi:"profile"`
}

func (ClickHouseInstallationTemplateSpecDefaultsDistributedDdlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaultsDistributedDdl)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecDefaultsDistributedDdlArgs) ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput() ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput {
	return i.ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecDefaultsDistributedDdlArgs) ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput)
}

func (i ClickHouseInstallationTemplateSpecDefaultsDistributedDdlArgs) ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput() ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecDefaultsDistributedDdlArgs) ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput).ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecDefaultsDistributedDdlArgs, ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtr and ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecDefaultsDistributedDdlArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput() ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput
	ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput
}

type clickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrType ClickHouseInstallationTemplateSpecDefaultsDistributedDdlArgs

func ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtr(v *ClickHouseInstallationTemplateSpecDefaultsDistributedDdlArgs) ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrInput {
	return (*clickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecDefaultsDistributedDdl)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrType) ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput() ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrType) ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput)
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
type ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaultsDistributedDdl)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput) ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput() ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput) ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput) ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput() ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput) ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecDefaultsDistributedDdl) *ClickHouseInstallationTemplateSpecDefaultsDistributedDdl {
		return &v
	}).(ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput)
}

// Settings from this profile will be used to execute DDL queries
func (o ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaultsDistributedDdl) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecDefaultsDistributedDdl)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput) ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput() ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput) ToClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput) Elem() ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsDistributedDdl) ClickHouseInstallationTemplateSpecDefaultsDistributedDdl {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecDefaultsDistributedDdl
		return ret
	}).(ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput)
}

// Settings from this profile will be used to execute DDL queries
func (o ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsDistributedDdl) *string {
		if v == nil {
			return nil
		}
		return v.Profile
	}).(pulumi.StringPtrOutput)
}

// default storage management options
type ClickHouseInstallationTemplateSpecDefaultsStorageManagement struct {
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner *string `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
}

// ClickHouseInstallationTemplateSpecDefaultsStorageManagementInput is an input type that accepts ClickHouseInstallationTemplateSpecDefaultsStorageManagementArgs and ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecDefaultsStorageManagementInput` via:
//
//	ClickHouseInstallationTemplateSpecDefaultsStorageManagementArgs{...}
type ClickHouseInstallationTemplateSpecDefaultsStorageManagementInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput() ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput
	ToClickHouseInstallationTemplateSpecDefaultsStorageManagementOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput
}

// default storage management options
type ClickHouseInstallationTemplateSpecDefaultsStorageManagementArgs struct {
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner pulumi.StringPtrInput `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
}

func (ClickHouseInstallationTemplateSpecDefaultsStorageManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaultsStorageManagement)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecDefaultsStorageManagementArgs) ToClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput() ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput {
	return i.ToClickHouseInstallationTemplateSpecDefaultsStorageManagementOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecDefaultsStorageManagementArgs) ToClickHouseInstallationTemplateSpecDefaultsStorageManagementOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput)
}

func (i ClickHouseInstallationTemplateSpecDefaultsStorageManagementArgs) ToClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput() ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecDefaultsStorageManagementArgs) ToClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput).ToClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecDefaultsStorageManagementArgs, ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtr and ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecDefaultsStorageManagementArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput() ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput
	ToClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput
}

type clickHouseInstallationTemplateSpecDefaultsStorageManagementPtrType ClickHouseInstallationTemplateSpecDefaultsStorageManagementArgs

func ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtr(v *ClickHouseInstallationTemplateSpecDefaultsStorageManagementArgs) ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrInput {
	return (*clickHouseInstallationTemplateSpecDefaultsStorageManagementPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecDefaultsStorageManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecDefaultsStorageManagement)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecDefaultsStorageManagementPtrType) ToClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput() ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecDefaultsStorageManagementPtrType) ToClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput)
}

// default storage management options
type ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaultsStorageManagement)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput) ToClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput() ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput) ToClickHouseInstallationTemplateSpecDefaultsStorageManagementOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput) ToClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput() ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput) ToClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecDefaultsStorageManagement) *ClickHouseInstallationTemplateSpecDefaultsStorageManagement {
		return &v
	}).(ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput)
}

// defines `PVC` provisioner - be it StatefulSet or the Operator
func (o ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput) Provisioner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaultsStorageManagement) *string { return v.Provisioner }).(pulumi.StringPtrOutput)
}

// defines behavior of `PVC` deletion.
// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
func (o ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaultsStorageManagement) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecDefaultsStorageManagement)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput) ToClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput() ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput) ToClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput) Elem() ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsStorageManagement) ClickHouseInstallationTemplateSpecDefaultsStorageManagement {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecDefaultsStorageManagement
		return ret
	}).(ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput)
}

// defines `PVC` provisioner - be it StatefulSet or the Operator
func (o ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput) Provisioner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsStorageManagement) *string {
		if v == nil {
			return nil
		}
		return v.Provisioner
	}).(pulumi.StringPtrOutput)
}

// defines behavior of `PVC` deletion.
// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
func (o ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsStorageManagement) *string {
		if v == nil {
			return nil
		}
		return v.ReclaimPolicy
	}).(pulumi.StringPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
type ClickHouseInstallationTemplateSpecDefaultsTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseInstallationTemplateSpecDefaultsTemplatesInput is an input type that accepts ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs and ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecDefaultsTemplatesInput` via:
//
//	ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs{...}
type ClickHouseInstallationTemplateSpecDefaultsTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecDefaultsTemplatesOutput() ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput
	ToClickHouseInstallationTemplateSpecDefaultsTemplatesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
type ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaultsTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs) ToClickHouseInstallationTemplateSpecDefaultsTemplatesOutput() ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput {
	return i.ToClickHouseInstallationTemplateSpecDefaultsTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs) ToClickHouseInstallationTemplateSpecDefaultsTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput)
}

func (i ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs) ToClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput() ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs) ToClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput).ToClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs, ClickHouseInstallationTemplateSpecDefaultsTemplatesPtr and ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput() ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput
	ToClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput
}

type clickHouseInstallationTemplateSpecDefaultsTemplatesPtrType ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs

func ClickHouseInstallationTemplateSpecDefaultsTemplatesPtr(v *ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs) ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrInput {
	return (*clickHouseInstallationTemplateSpecDefaultsTemplatesPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecDefaultsTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecDefaultsTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecDefaultsTemplatesPtrType) ToClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput() ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecDefaultsTemplatesPtrType) ToClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
type ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaultsTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput) ToClickHouseInstallationTemplateSpecDefaultsTemplatesOutput() ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput) ToClickHouseInstallationTemplateSpecDefaultsTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput) ToClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput() ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput) ToClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecDefaultsTemplates) *ClickHouseInstallationTemplateSpecDefaultsTemplates {
		return &v
	}).(ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaultsTemplates) *string { return v.ClusterServiceTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaultsTemplates) *string { return v.DataVolumeClaimTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaultsTemplates) *string { return v.HostTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaultsTemplates) *string { return v.LogVolumeClaimTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaultsTemplates) *string { return v.PodTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaultsTemplates) *string { return v.ReplicaServiceTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaultsTemplates) *string { return v.ServiceTemplate }).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaultsTemplates) []string { return v.ServiceTemplates }).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaultsTemplates) *string { return v.ShardServiceTemplate }).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecDefaultsTemplates) *string { return v.VolumeClaimTemplate }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecDefaultsTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput() ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput) Elem() ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsTemplates) ClickHouseInstallationTemplateSpecDefaultsTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecDefaultsTemplates
		return ret
	}).(ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseInstallationTemplateSpecReconcile struct {
	// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
	Cleanup *ClickHouseInstallationTemplateSpecReconcileCleanup `pulumi:"cleanup"`
	// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
	// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
	ConfigMapPropagationTimeout *int `pulumi:"configMapPropagationTimeout"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host:
	//   - to be excluded from a ClickHouse cluster
	//   - to complete all running queries
	//   - to be included into a ClickHouse cluster
	//     respectfully before moving forward
	Host *ClickHouseInstallationTemplateSpecReconcileHost `pulumi:"host"`
	// macros parameters
	Macros *ClickHouseInstallationTemplateSpecReconcileMacros `pulumi:"macros"`
	// DISCUSSED TO BE DEPRECATED
	// Syntax sugar
	// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
	// Possible values:
	//  - wait - should wait to exclude host, complete queries and include host back into the cluster
	//  - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
	Policy *string `pulumi:"policy"`
	// runtime parameters for clickhouse-operator process which are used during reconcile cycle
	Runtime *ClickHouseInstallationTemplateSpecReconcileRuntime `pulumi:"runtime"`
}

// ClickHouseInstallationTemplateSpecReconcileInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileArgs and ClickHouseInstallationTemplateSpecReconcileOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileArgs{...}
type ClickHouseInstallationTemplateSpecReconcileInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileOutput() ClickHouseInstallationTemplateSpecReconcileOutput
	ToClickHouseInstallationTemplateSpecReconcileOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileOutput
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseInstallationTemplateSpecReconcileArgs struct {
	// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
	Cleanup ClickHouseInstallationTemplateSpecReconcileCleanupPtrInput `pulumi:"cleanup"`
	// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
	// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
	ConfigMapPropagationTimeout pulumi.IntPtrInput `pulumi:"configMapPropagationTimeout"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host:
	//   - to be excluded from a ClickHouse cluster
	//   - to complete all running queries
	//   - to be included into a ClickHouse cluster
	//     respectfully before moving forward
	Host ClickHouseInstallationTemplateSpecReconcileHostPtrInput `pulumi:"host"`
	// macros parameters
	Macros ClickHouseInstallationTemplateSpecReconcileMacrosPtrInput `pulumi:"macros"`
	// DISCUSSED TO BE DEPRECATED
	// Syntax sugar
	// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
	// Possible values:
	//  - wait - should wait to exclude host, complete queries and include host back into the cluster
	//  - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// runtime parameters for clickhouse-operator process which are used during reconcile cycle
	Runtime ClickHouseInstallationTemplateSpecReconcileRuntimePtrInput `pulumi:"runtime"`
}

func (ClickHouseInstallationTemplateSpecReconcileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcile)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileArgs) ToClickHouseInstallationTemplateSpecReconcileOutput() ClickHouseInstallationTemplateSpecReconcileOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileArgs) ToClickHouseInstallationTemplateSpecReconcileOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileArgs) ToClickHouseInstallationTemplateSpecReconcilePtrOutput() ClickHouseInstallationTemplateSpecReconcilePtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilePtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileArgs) ToClickHouseInstallationTemplateSpecReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileOutput).ToClickHouseInstallationTemplateSpecReconcilePtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilePtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileArgs, ClickHouseInstallationTemplateSpecReconcilePtr and ClickHouseInstallationTemplateSpecReconcilePtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilePtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilePtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilePtrOutput() ClickHouseInstallationTemplateSpecReconcilePtrOutput
	ToClickHouseInstallationTemplateSpecReconcilePtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilePtrOutput
}

type clickHouseInstallationTemplateSpecReconcilePtrType ClickHouseInstallationTemplateSpecReconcileArgs

func ClickHouseInstallationTemplateSpecReconcilePtr(v *ClickHouseInstallationTemplateSpecReconcileArgs) ClickHouseInstallationTemplateSpecReconcilePtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilePtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcile)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilePtrType) ToClickHouseInstallationTemplateSpecReconcilePtrOutput() ClickHouseInstallationTemplateSpecReconcilePtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilePtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilePtrType) ToClickHouseInstallationTemplateSpecReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilePtrOutput)
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseInstallationTemplateSpecReconcileOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcile)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileOutput) ToClickHouseInstallationTemplateSpecReconcileOutput() ClickHouseInstallationTemplateSpecReconcileOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileOutput) ToClickHouseInstallationTemplateSpecReconcileOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileOutput) ToClickHouseInstallationTemplateSpecReconcilePtrOutput() ClickHouseInstallationTemplateSpecReconcilePtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilePtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileOutput) ToClickHouseInstallationTemplateSpecReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcile) *ClickHouseInstallationTemplateSpecReconcile {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilePtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
func (o ClickHouseInstallationTemplateSpecReconcileOutput) Cleanup() ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcile) *ClickHouseInstallationTemplateSpecReconcileCleanup {
		return v.Cleanup
	}).(ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput)
}

// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
func (o ClickHouseInstallationTemplateSpecReconcileOutput) ConfigMapPropagationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcile) *int { return v.ConfigMapPropagationTimeout }).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
func (o ClickHouseInstallationTemplateSpecReconcileOutput) Host() ClickHouseInstallationTemplateSpecReconcileHostPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcile) *ClickHouseInstallationTemplateSpecReconcileHost {
		return v.Host
	}).(ClickHouseInstallationTemplateSpecReconcileHostPtrOutput)
}

// macros parameters
func (o ClickHouseInstallationTemplateSpecReconcileOutput) Macros() ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcile) *ClickHouseInstallationTemplateSpecReconcileMacros {
		return v.Macros
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput)
}

// DISCUSSED TO BE DEPRECATED
// Syntax sugar
// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
// Possible values:
//   - wait - should wait to exclude host, complete queries and include host back into the cluster
//   - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
func (o ClickHouseInstallationTemplateSpecReconcileOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcile) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
func (o ClickHouseInstallationTemplateSpecReconcileOutput) Runtime() ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcile) *ClickHouseInstallationTemplateSpecReconcileRuntime {
		return v.Runtime
	}).(ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilePtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcile)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilePtrOutput) ToClickHouseInstallationTemplateSpecReconcilePtrOutput() ClickHouseInstallationTemplateSpecReconcilePtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilePtrOutput) ToClickHouseInstallationTemplateSpecReconcilePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilePtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilePtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcile) ClickHouseInstallationTemplateSpecReconcile {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcile
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
func (o ClickHouseInstallationTemplateSpecReconcilePtrOutput) Cleanup() ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcile) *ClickHouseInstallationTemplateSpecReconcileCleanup {
		if v == nil {
			return nil
		}
		return v.Cleanup
	}).(ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput)
}

// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
func (o ClickHouseInstallationTemplateSpecReconcilePtrOutput) ConfigMapPropagationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcile) *int {
		if v == nil {
			return nil
		}
		return v.ConfigMapPropagationTimeout
	}).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
func (o ClickHouseInstallationTemplateSpecReconcilePtrOutput) Host() ClickHouseInstallationTemplateSpecReconcileHostPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcile) *ClickHouseInstallationTemplateSpecReconcileHost {
		if v == nil {
			return nil
		}
		return v.Host
	}).(ClickHouseInstallationTemplateSpecReconcileHostPtrOutput)
}

// macros parameters
func (o ClickHouseInstallationTemplateSpecReconcilePtrOutput) Macros() ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcile) *ClickHouseInstallationTemplateSpecReconcileMacros {
		if v == nil {
			return nil
		}
		return v.Macros
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput)
}

// DISCUSSED TO BE DEPRECATED
// Syntax sugar
// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
// Possible values:
//   - wait - should wait to exclude host, complete queries and include host back into the cluster
//   - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
func (o ClickHouseInstallationTemplateSpecReconcilePtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcile) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
func (o ClickHouseInstallationTemplateSpecReconcilePtrOutput) Runtime() ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcile) *ClickHouseInstallationTemplateSpecReconcileRuntime {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseInstallationTemplateSpecReconcileCleanup struct {
	// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
	// Default behavior is `Retain`"
	ReconcileFailedObjects *ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects `pulumi:"reconcileFailedObjects"`
	// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
	// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
	// Default behavior is `Delete`"
	UnknownObjects *ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects `pulumi:"unknownObjects"`
}

// ClickHouseInstallationTemplateSpecReconcileCleanupInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileCleanupArgs and ClickHouseInstallationTemplateSpecReconcileCleanupOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileCleanupInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileCleanupArgs{...}
type ClickHouseInstallationTemplateSpecReconcileCleanupInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileCleanupOutput() ClickHouseInstallationTemplateSpecReconcileCleanupOutput
	ToClickHouseInstallationTemplateSpecReconcileCleanupOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupOutput
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseInstallationTemplateSpecReconcileCleanupArgs struct {
	// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
	// Default behavior is `Retain`"
	ReconcileFailedObjects ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrInput `pulumi:"reconcileFailedObjects"`
	// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
	// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
	// Default behavior is `Delete`"
	UnknownObjects ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrInput `pulumi:"unknownObjects"`
}

func (ClickHouseInstallationTemplateSpecReconcileCleanupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileCleanup)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileCleanupArgs) ToClickHouseInstallationTemplateSpecReconcileCleanupOutput() ClickHouseInstallationTemplateSpecReconcileCleanupOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileCleanupOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileCleanupArgs) ToClickHouseInstallationTemplateSpecReconcileCleanupOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileCleanupOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileCleanupArgs) ToClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput() ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileCleanupPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileCleanupArgs) ToClickHouseInstallationTemplateSpecReconcileCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileCleanupOutput).ToClickHouseInstallationTemplateSpecReconcileCleanupPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcileCleanupPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileCleanupArgs, ClickHouseInstallationTemplateSpecReconcileCleanupPtr and ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileCleanupPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileCleanupArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcileCleanupPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput() ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput
	ToClickHouseInstallationTemplateSpecReconcileCleanupPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput
}

type clickHouseInstallationTemplateSpecReconcileCleanupPtrType ClickHouseInstallationTemplateSpecReconcileCleanupArgs

func ClickHouseInstallationTemplateSpecReconcileCleanupPtr(v *ClickHouseInstallationTemplateSpecReconcileCleanupArgs) ClickHouseInstallationTemplateSpecReconcileCleanupPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcileCleanupPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcileCleanupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileCleanup)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcileCleanupPtrType) ToClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput() ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileCleanupPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcileCleanupPtrType) ToClickHouseInstallationTemplateSpecReconcileCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseInstallationTemplateSpecReconcileCleanupOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileCleanupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileCleanup)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupOutput() ClickHouseInstallationTemplateSpecReconcileCleanupOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput() ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcileCleanupPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcileCleanup) *ClickHouseInstallationTemplateSpecReconcileCleanup {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
func (o ClickHouseInstallationTemplateSpecReconcileCleanupOutput) ReconcileFailedObjects() ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileCleanup) *ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects {
		return v.ReconcileFailedObjects
	}).(ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
func (o ClickHouseInstallationTemplateSpecReconcileCleanupOutput) UnknownObjects() ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileCleanup) *ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects {
		return v.UnknownObjects
	}).(ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileCleanup)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput() ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileCleanupOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileCleanup) ClickHouseInstallationTemplateSpecReconcileCleanup {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcileCleanup
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileCleanupOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
func (o ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput) ReconcileFailedObjects() ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileCleanup) *ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects {
		if v == nil {
			return nil
		}
		return v.ReconcileFailedObjects
	}).(ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
func (o ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput) UnknownObjects() ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileCleanup) *ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects {
		if v == nil {
			return nil
		}
		return v.UnknownObjects
	}).(ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects struct {
	// Behavior policy for failed ConfigMap, `Retain` by default
	ConfigMap *string `pulumi:"configMap"`
	// Behavior policy for failed PVC, `Retain` by default
	Pvc *string `pulumi:"pvc"`
	// Behavior policy for failed Service, `Retain` by default
	Service *string `pulumi:"service"`
	// Behavior policy for failed StatefulSet, `Retain` by default
	StatefulSet *string `pulumi:"statefulSet"`
}

// ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsArgs and ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsArgs{...}
type ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput() ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput
	ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsArgs struct {
	// Behavior policy for failed ConfigMap, `Retain` by default
	ConfigMap pulumi.StringPtrInput `pulumi:"configMap"`
	// Behavior policy for failed PVC, `Retain` by default
	Pvc pulumi.StringPtrInput `pulumi:"pvc"`
	// Behavior policy for failed Service, `Retain` by default
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Behavior policy for failed StatefulSet, `Retain` by default
	StatefulSet pulumi.StringPtrInput `pulumi:"statefulSet"`
}

func (ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput() ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput).ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsArgs, ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtr and ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput
	ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput
}

type clickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrType ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsArgs

func ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtr(v *ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsArgs) ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrType) ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrType) ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput() ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects) *ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput)
}

// Behavior policy for failed ConfigMap, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects) *string {
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed PVC, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects) *string { return v.Pvc }).(pulumi.StringPtrOutput)
}

// Behavior policy for failed Service, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects) *string {
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed StatefulSet, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects) *string {
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects) ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput)
}

// Behavior policy for failed ConfigMap, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed PVC, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.Pvc
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed Service, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed StatefulSet, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects struct {
	// Behavior policy for unknown ConfigMap, `Delete` by default
	ConfigMap *string `pulumi:"configMap"`
	// Behavior policy for unknown PVC, `Delete` by default
	Pvc *string `pulumi:"pvc"`
	// Behavior policy for unknown Service, `Delete` by default
	Service *string `pulumi:"service"`
	// Behavior policy for unknown StatefulSet, `Delete` by default
	StatefulSet *string `pulumi:"statefulSet"`
}

// ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsArgs and ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsArgs{...}
type ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput() ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput
	ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsArgs struct {
	// Behavior policy for unknown ConfigMap, `Delete` by default
	ConfigMap pulumi.StringPtrInput `pulumi:"configMap"`
	// Behavior policy for unknown PVC, `Delete` by default
	Pvc pulumi.StringPtrInput `pulumi:"pvc"`
	// Behavior policy for unknown Service, `Delete` by default
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Behavior policy for unknown StatefulSet, `Delete` by default
	StatefulSet pulumi.StringPtrInput `pulumi:"statefulSet"`
}

func (ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsArgs) ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput() ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsArgs) ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsArgs) ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsArgs) ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput).ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsArgs, ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtr and ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput
	ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput
}

type clickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrType ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsArgs

func ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtr(v *ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsArgs) ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrType) ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrType) ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput() ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects) *ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput)
}

// Behavior policy for unknown ConfigMap, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects) *string { return v.ConfigMap }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown PVC, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects) *string { return v.Pvc }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown Service, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown StatefulSet, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects) *string { return v.StatefulSet }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput) ToClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects) ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput)
}

// Behavior policy for unknown ConfigMap, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown PVC, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.Pvc
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown Service, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown StatefulSet, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationTemplateSpecReconcileHost struct {
	Wait *ClickHouseInstallationTemplateSpecReconcileHostWait `pulumi:"wait"`
}

// ClickHouseInstallationTemplateSpecReconcileHostInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileHostArgs and ClickHouseInstallationTemplateSpecReconcileHostOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileHostInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileHostArgs{...}
type ClickHouseInstallationTemplateSpecReconcileHostInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileHostOutput() ClickHouseInstallationTemplateSpecReconcileHostOutput
	ToClickHouseInstallationTemplateSpecReconcileHostOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileHostOutput
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationTemplateSpecReconcileHostArgs struct {
	Wait ClickHouseInstallationTemplateSpecReconcileHostWaitPtrInput `pulumi:"wait"`
}

func (ClickHouseInstallationTemplateSpecReconcileHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHost)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileHostArgs) ToClickHouseInstallationTemplateSpecReconcileHostOutput() ClickHouseInstallationTemplateSpecReconcileHostOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileHostOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileHostArgs) ToClickHouseInstallationTemplateSpecReconcileHostOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileHostOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileHostArgs) ToClickHouseInstallationTemplateSpecReconcileHostPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileHostPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileHostArgs) ToClickHouseInstallationTemplateSpecReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileHostOutput).ToClickHouseInstallationTemplateSpecReconcileHostPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcileHostPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileHostArgs, ClickHouseInstallationTemplateSpecReconcileHostPtr and ClickHouseInstallationTemplateSpecReconcileHostPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileHostPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileHostArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcileHostPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileHostPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostPtrOutput
	ToClickHouseInstallationTemplateSpecReconcileHostPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileHostPtrOutput
}

type clickHouseInstallationTemplateSpecReconcileHostPtrType ClickHouseInstallationTemplateSpecReconcileHostArgs

func ClickHouseInstallationTemplateSpecReconcileHostPtr(v *ClickHouseInstallationTemplateSpecReconcileHostArgs) ClickHouseInstallationTemplateSpecReconcileHostPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcileHostPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcileHostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileHost)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcileHostPtrType) ToClickHouseInstallationTemplateSpecReconcileHostPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileHostPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcileHostPtrType) ToClickHouseInstallationTemplateSpecReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileHostPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationTemplateSpecReconcileHostOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHost)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileHostOutput) ToClickHouseInstallationTemplateSpecReconcileHostOutput() ClickHouseInstallationTemplateSpecReconcileHostOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostOutput) ToClickHouseInstallationTemplateSpecReconcileHostOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostOutput) ToClickHouseInstallationTemplateSpecReconcileHostPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcileHostPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileHostOutput) ToClickHouseInstallationTemplateSpecReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcileHost) *ClickHouseInstallationTemplateSpecReconcileHost {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcileHostPtrOutput)
}

func (o ClickHouseInstallationTemplateSpecReconcileHostOutput) Wait() ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileHost) *ClickHouseInstallationTemplateSpecReconcileHostWait {
		return v.Wait
	}).(ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileHostPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileHostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileHost)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileHostPtrOutput) ToClickHouseInstallationTemplateSpecReconcileHostPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostPtrOutput) ToClickHouseInstallationTemplateSpecReconcileHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileHostOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileHost) ClickHouseInstallationTemplateSpecReconcileHost {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcileHost
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileHostOutput)
}

func (o ClickHouseInstallationTemplateSpecReconcileHostPtrOutput) Wait() ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileHost) *ClickHouseInstallationTemplateSpecReconcileHostWait {
		if v == nil {
			return nil
		}
		return v.Wait
	}).(ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileHostWait struct {
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Exclude *string `pulumi:"exclude"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
	Include *string `pulumi:"include"`
	// What probes the operator should wait during host launch procedure
	Probes *ClickHouseInstallationTemplateSpecReconcileHostWaitProbes `pulumi:"probes"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
	Queries *string `pulumi:"queries"`
	// Whether the operator during reconcile procedure should wait for replicas to catch-up
	Replicas *ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas `pulumi:"replicas"`
}

// ClickHouseInstallationTemplateSpecReconcileHostWaitInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileHostWaitArgs and ClickHouseInstallationTemplateSpecReconcileHostWaitOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileHostWaitInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileHostWaitArgs{...}
type ClickHouseInstallationTemplateSpecReconcileHostWaitInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileHostWaitOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitOutput
	ToClickHouseInstallationTemplateSpecReconcileHostWaitOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitOutput
}

type ClickHouseInstallationTemplateSpecReconcileHostWaitArgs struct {
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Exclude pulumi.StringPtrInput `pulumi:"exclude"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
	Include pulumi.StringPtrInput `pulumi:"include"`
	// What probes the operator should wait during host launch procedure
	Probes ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrInput `pulumi:"probes"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
	Queries pulumi.StringPtrInput `pulumi:"queries"`
	// Whether the operator during reconcile procedure should wait for replicas to catch-up
	Replicas ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrInput `pulumi:"replicas"`
}

func (ClickHouseInstallationTemplateSpecReconcileHostWaitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHostWait)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileHostWaitArgs) ToClickHouseInstallationTemplateSpecReconcileHostWaitOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileHostWaitOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileHostWaitArgs) ToClickHouseInstallationTemplateSpecReconcileHostWaitOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileHostWaitOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileHostWaitArgs) ToClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileHostWaitArgs) ToClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileHostWaitOutput).ToClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcileHostWaitPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileHostWaitArgs, ClickHouseInstallationTemplateSpecReconcileHostWaitPtr and ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileHostWaitPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileHostWaitArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcileHostWaitPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput
	ToClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput
}

type clickHouseInstallationTemplateSpecReconcileHostWaitPtrType ClickHouseInstallationTemplateSpecReconcileHostWaitArgs

func ClickHouseInstallationTemplateSpecReconcileHostWaitPtr(v *ClickHouseInstallationTemplateSpecReconcileHostWaitArgs) ClickHouseInstallationTemplateSpecReconcileHostWaitPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcileHostWaitPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcileHostWaitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileHostWait)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcileHostWaitPtrType) ToClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcileHostWaitPtrType) ToClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileHostWaitOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileHostWaitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHostWait)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcileHostWait) *ClickHouseInstallationTemplateSpecReconcileHostWait {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitOutput) Exclude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileHostWait) *string { return v.Exclude }).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitOutput) Include() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileHostWait) *string { return v.Include }).(pulumi.StringPtrOutput)
}

// What probes the operator should wait during host launch procedure
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitOutput) Probes() ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileHostWait) *ClickHouseInstallationTemplateSpecReconcileHostWaitProbes {
		return v.Probes
	}).(ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitOutput) Queries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileHostWait) *string { return v.Queries }).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitOutput) Replicas() ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileHostWait) *ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas {
		return v.Replicas
	}).(ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileHostWait)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileHostWaitOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileHostWait) ClickHouseInstallationTemplateSpecReconcileHostWait {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcileHostWait
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileHostWaitOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput) Exclude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Exclude
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput) Include() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Include
	}).(pulumi.StringPtrOutput)
}

// What probes the operator should wait during host launch procedure
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput) Probes() ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileHostWait) *ClickHouseInstallationTemplateSpecReconcileHostWaitProbes {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput) Queries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Queries
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput) Replicas() ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileHostWait) *ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput)
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationTemplateSpecReconcileHostWaitProbes struct {
	// Whether the operator during host launch procedure should wait for ready probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to wait.
	Readiness *string `pulumi:"readiness"`
	// Whether the operator during host launch procedure should wait for startup probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to do not wait.
	Startup *string `pulumi:"startup"`
}

// ClickHouseInstallationTemplateSpecReconcileHostWaitProbesInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileHostWaitProbesArgs and ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileHostWaitProbesInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileHostWaitProbesArgs{...}
type ClickHouseInstallationTemplateSpecReconcileHostWaitProbesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput
	ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationTemplateSpecReconcileHostWaitProbesArgs struct {
	// Whether the operator during host launch procedure should wait for ready probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to wait.
	Readiness pulumi.StringPtrInput `pulumi:"readiness"`
	// Whether the operator during host launch procedure should wait for startup probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to do not wait.
	Startup pulumi.StringPtrInput `pulumi:"startup"`
}

func (ClickHouseInstallationTemplateSpecReconcileHostWaitProbesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHostWaitProbes)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileHostWaitProbesArgs) ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileHostWaitProbesArgs) ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileHostWaitProbesArgs) ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileHostWaitProbesArgs) ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput).ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileHostWaitProbesArgs, ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtr and ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileHostWaitProbesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput
	ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput
}

type clickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrType ClickHouseInstallationTemplateSpecReconcileHostWaitProbesArgs

func ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtr(v *ClickHouseInstallationTemplateSpecReconcileHostWaitProbesArgs) ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileHostWaitProbes)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrType) ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrType) ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput)
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHostWaitProbes)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcileHostWaitProbes) *ClickHouseInstallationTemplateSpecReconcileHostWaitProbes {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput)
}

// Whether the operator during host launch procedure should wait for ready probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to wait.
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput) Readiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileHostWaitProbes) *string { return v.Readiness }).(pulumi.StringPtrOutput)
}

// Whether the operator during host launch procedure should wait for startup probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to do not wait.
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput) Startup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileHostWaitProbes) *string { return v.Startup }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileHostWaitProbes)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileHostWaitProbes) ClickHouseInstallationTemplateSpecReconcileHostWaitProbes {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcileHostWaitProbes
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput)
}

// Whether the operator during host launch procedure should wait for ready probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to wait.
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput) Readiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileHostWaitProbes) *string {
		if v == nil {
			return nil
		}
		return v.Readiness
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during host launch procedure should wait for startup probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to do not wait.
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput) Startup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileHostWaitProbes) *string {
		if v == nil {
			return nil
		}
		return v.Startup
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas struct {
	// Whether the operator during reconcile procedure should wait for all replicas to catch-up
	All *string `pulumi:"all"`
	// replication max absolute delay to consider replica is not delayed
	Delay *int `pulumi:"delay"`
	// Whether the operator during reconcile procedure should wait for new replicas to catch-up
	New *string `pulumi:"new"`
}

// ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasArgs and ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasArgs{...}
type ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput
	ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasArgs struct {
	// Whether the operator during reconcile procedure should wait for all replicas to catch-up
	All pulumi.StringPtrInput `pulumi:"all"`
	// replication max absolute delay to consider replica is not delayed
	Delay pulumi.IntPtrInput `pulumi:"delay"`
	// Whether the operator during reconcile procedure should wait for new replicas to catch-up
	New pulumi.StringPtrInput `pulumi:"new"`
}

func (ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasArgs) ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasArgs) ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasArgs) ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasArgs) ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput).ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasArgs, ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtr and ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput
	ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput
}

type clickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrType ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasArgs

func ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtr(v *ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasArgs) ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrType) ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrType) ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas) *ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput)
}

// Whether the operator during reconcile procedure should wait for all replicas to catch-up
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput) All() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas) *string { return v.All }).(pulumi.StringPtrOutput)
}

// replication max absolute delay to consider replica is not delayed
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput) Delay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas) *int { return v.Delay }).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for new replicas to catch-up
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput) New() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas) *string { return v.New }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput() ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput) ToClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas) ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput)
}

// Whether the operator during reconcile procedure should wait for all replicas to catch-up
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput) All() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas) *string {
		if v == nil {
			return nil
		}
		return v.All
	}).(pulumi.StringPtrOutput)
}

// replication max absolute delay to consider replica is not delayed
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput) Delay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas) *int {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for new replicas to catch-up
func (o ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput) New() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileHostWaitReplicas) *string {
		if v == nil {
			return nil
		}
		return v.New
	}).(pulumi.StringPtrOutput)
}

// macros parameters
type ClickHouseInstallationTemplateSpecReconcileMacros struct {
	// sections behaviour for macros
	Sections *ClickHouseInstallationTemplateSpecReconcileMacrosSections `pulumi:"sections"`
}

// ClickHouseInstallationTemplateSpecReconcileMacrosInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileMacrosArgs and ClickHouseInstallationTemplateSpecReconcileMacrosOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileMacrosInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileMacrosArgs{...}
type ClickHouseInstallationTemplateSpecReconcileMacrosInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileMacrosOutput() ClickHouseInstallationTemplateSpecReconcileMacrosOutput
	ToClickHouseInstallationTemplateSpecReconcileMacrosOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosOutput
}

// macros parameters
type ClickHouseInstallationTemplateSpecReconcileMacrosArgs struct {
	// sections behaviour for macros
	Sections ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrInput `pulumi:"sections"`
}

func (ClickHouseInstallationTemplateSpecReconcileMacrosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacros)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosOutput() ClickHouseInstallationTemplateSpecReconcileMacrosOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosOutput).ToClickHouseInstallationTemplateSpecReconcileMacrosPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcileMacrosPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileMacrosArgs, ClickHouseInstallationTemplateSpecReconcileMacrosPtr and ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileMacrosPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileMacrosArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcileMacrosPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput
	ToClickHouseInstallationTemplateSpecReconcileMacrosPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput
}

type clickHouseInstallationTemplateSpecReconcileMacrosPtrType ClickHouseInstallationTemplateSpecReconcileMacrosArgs

func ClickHouseInstallationTemplateSpecReconcileMacrosPtr(v *ClickHouseInstallationTemplateSpecReconcileMacrosArgs) ClickHouseInstallationTemplateSpecReconcileMacrosPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcileMacrosPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcileMacrosPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileMacros)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcileMacrosPtrType) ToClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcileMacrosPtrType) ToClickHouseInstallationTemplateSpecReconcileMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput)
}

// macros parameters
type ClickHouseInstallationTemplateSpecReconcileMacrosOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileMacrosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacros)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosOutput() ClickHouseInstallationTemplateSpecReconcileMacrosOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcileMacrosPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcileMacros) *ClickHouseInstallationTemplateSpecReconcileMacros {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput)
}

// sections behaviour for macros
func (o ClickHouseInstallationTemplateSpecReconcileMacrosOutput) Sections() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileMacros) *ClickHouseInstallationTemplateSpecReconcileMacrosSections {
		return v.Sections
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileMacros)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileMacrosOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacros) ClickHouseInstallationTemplateSpecReconcileMacros {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcileMacros
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosOutput)
}

// sections behaviour for macros
func (o ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput) Sections() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacros) *ClickHouseInstallationTemplateSpecReconcileMacrosSections {
		if v == nil {
			return nil
		}
		return v.Sections
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput)
}

// sections behaviour for macros
type ClickHouseInstallationTemplateSpecReconcileMacrosSections struct {
	// sections behaviour for macros on files
	Files *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFiles `pulumi:"files"`
	// sections behaviour for macros on profiles
	Profiles *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfiles `pulumi:"profiles"`
	// sections behaviour for macros on quotas
	Quotas *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotas `pulumi:"quotas"`
	// sections behaviour for macros on settings
	Settings *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettings `pulumi:"settings"`
	// sections behaviour for macros on users
	Users *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsers `pulumi:"users"`
}

// ClickHouseInstallationTemplateSpecReconcileMacrosSectionsInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileMacrosSectionsArgs and ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileMacrosSectionsInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileMacrosSectionsArgs{...}
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput
	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput
}

// sections behaviour for macros
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsArgs struct {
	// sections behaviour for macros on files
	Files ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrInput `pulumi:"files"`
	// sections behaviour for macros on profiles
	Profiles ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrInput `pulumi:"profiles"`
	// sections behaviour for macros on quotas
	Quotas ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrInput `pulumi:"quotas"`
	// sections behaviour for macros on settings
	Settings ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrInput `pulumi:"settings"`
	// sections behaviour for macros on users
	Users ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrInput `pulumi:"users"`
}

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSections)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput).ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileMacrosSectionsArgs, ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtr and ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileMacrosSectionsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput
	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput
}

type clickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrType ClickHouseInstallationTemplateSpecReconcileMacrosSectionsArgs

func ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtr(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsArgs) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileMacrosSections)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrType) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrType) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput)
}

// sections behaviour for macros
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSections)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcileMacrosSections) *ClickHouseInstallationTemplateSpecReconcileMacrosSections {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput)
}

// sections behaviour for macros on files
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput) Files() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileMacrosSections) *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFiles {
		return v.Files
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput)
}

// sections behaviour for macros on profiles
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput) Profiles() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileMacrosSections) *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfiles {
		return v.Profiles
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput)
}

// sections behaviour for macros on quotas
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput) Quotas() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileMacrosSections) *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotas {
		return v.Quotas
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput)
}

// sections behaviour for macros on settings
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput) Settings() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileMacrosSections) *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettings {
		return v.Settings
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput)
}

// sections behaviour for macros on users
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput) Users() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileMacrosSections) *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsers {
		return v.Users
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileMacrosSections)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSections) ClickHouseInstallationTemplateSpecReconcileMacrosSections {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcileMacrosSections
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput)
}

// sections behaviour for macros on files
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput) Files() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSections) *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFiles {
		if v == nil {
			return nil
		}
		return v.Files
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput)
}

// sections behaviour for macros on profiles
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput) Profiles() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSections) *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfiles {
		if v == nil {
			return nil
		}
		return v.Profiles
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput)
}

// sections behaviour for macros on quotas
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput) Quotas() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSections) *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotas {
		if v == nil {
			return nil
		}
		return v.Quotas
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput)
}

// sections behaviour for macros on settings
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput) Settings() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSections) *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettings {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput)
}

// sections behaviour for macros on users
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput) Users() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSections) *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsers {
		if v == nil {
			return nil
		}
		return v.Users
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput)
}

// sections behaviour for macros on files
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFiles struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesArgs and ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesArgs{...}
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput
	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput
}

// sections behaviour for macros on files
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFiles)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput).ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesArgs, ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtr and ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput
	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput
}

type clickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrType ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesArgs

func ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtr(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesArgs) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFiles)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrType) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrType) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput)
}

// sections behaviour for macros on files
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFiles)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFiles) *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFiles {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFiles) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFiles)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFiles) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFiles {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFiles
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFiles) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on profiles
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfiles struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesArgs and ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesArgs{...}
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput
	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput
}

// sections behaviour for macros on profiles
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfiles)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput).ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesArgs, ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtr and ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput
	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput
}

type clickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrType ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesArgs

func ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtr(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesArgs) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfiles)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrType) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrType) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput)
}

// sections behaviour for macros on profiles
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfiles)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfiles) *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfiles {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfiles) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfiles)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfiles) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfiles {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfiles
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfiles) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on quotas
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotas struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasArgs and ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasArgs{...}
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput
	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput
}

// sections behaviour for macros on quotas
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotas)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput).ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasArgs, ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtr and ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput
	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput
}

type clickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrType ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasArgs

func ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtr(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasArgs) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotas)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrType) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrType) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput)
}

// sections behaviour for macros on quotas
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotas)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotas) *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotas {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotas) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotas)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotas) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotas {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotas
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotas) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on settings
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettings struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsArgs and ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsArgs{...}
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput
	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput
}

// sections behaviour for macros on settings
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettings)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput).ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsArgs, ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtr and ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput
	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput
}

type clickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrType ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsArgs

func ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtr(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsArgs) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettings)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrType) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrType) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput)
}

// sections behaviour for macros on settings
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettings)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettings) *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettings {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettings) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettings)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettings) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettings {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettings
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettings) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on users
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsers struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersArgs and ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersArgs{...}
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput
	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput
}

// sections behaviour for macros on users
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsers)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersArgs) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput).ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersArgs, ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtr and ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput
	ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput
}

type clickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrType ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersArgs

func ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtr(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersArgs) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsers)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrType) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrType) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput)
}

// sections behaviour for macros on users
type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsers)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsers) *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsers {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsers) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsers)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput) ToClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsers) ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsers {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsers
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsers) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationTemplateSpecReconcileRuntime struct {
	// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
	ReconcileShardsMaxConcurrencyPercent *int `pulumi:"reconcileShardsMaxConcurrencyPercent"`
	// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
	ReconcileShardsThreadsNumber *int `pulumi:"reconcileShardsThreadsNumber"`
}

// ClickHouseInstallationTemplateSpecReconcileRuntimeInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileRuntimeArgs and ClickHouseInstallationTemplateSpecReconcileRuntimeOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileRuntimeInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcileRuntimeArgs{...}
type ClickHouseInstallationTemplateSpecReconcileRuntimeInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileRuntimeOutput() ClickHouseInstallationTemplateSpecReconcileRuntimeOutput
	ToClickHouseInstallationTemplateSpecReconcileRuntimeOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileRuntimeOutput
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationTemplateSpecReconcileRuntimeArgs struct {
	// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
	ReconcileShardsMaxConcurrencyPercent pulumi.IntPtrInput `pulumi:"reconcileShardsMaxConcurrencyPercent"`
	// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
	ReconcileShardsThreadsNumber pulumi.IntPtrInput `pulumi:"reconcileShardsThreadsNumber"`
}

func (ClickHouseInstallationTemplateSpecReconcileRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileRuntime)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcileRuntimeArgs) ToClickHouseInstallationTemplateSpecReconcileRuntimeOutput() ClickHouseInstallationTemplateSpecReconcileRuntimeOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileRuntimeOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileRuntimeArgs) ToClickHouseInstallationTemplateSpecReconcileRuntimeOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileRuntimeOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcileRuntimeArgs) ToClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput() ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileRuntimePtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcileRuntimeArgs) ToClickHouseInstallationTemplateSpecReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileRuntimeOutput).ToClickHouseInstallationTemplateSpecReconcileRuntimePtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcileRuntimePtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcileRuntimeArgs, ClickHouseInstallationTemplateSpecReconcileRuntimePtr and ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcileRuntimePtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcileRuntimeArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcileRuntimePtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput() ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput
	ToClickHouseInstallationTemplateSpecReconcileRuntimePtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput
}

type clickHouseInstallationTemplateSpecReconcileRuntimePtrType ClickHouseInstallationTemplateSpecReconcileRuntimeArgs

func ClickHouseInstallationTemplateSpecReconcileRuntimePtr(v *ClickHouseInstallationTemplateSpecReconcileRuntimeArgs) ClickHouseInstallationTemplateSpecReconcileRuntimePtrInput {
	return (*clickHouseInstallationTemplateSpecReconcileRuntimePtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcileRuntimePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileRuntime)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcileRuntimePtrType) ToClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput() ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcileRuntimePtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcileRuntimePtrType) ToClickHouseInstallationTemplateSpecReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationTemplateSpecReconcileRuntimeOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileRuntime)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileRuntimeOutput) ToClickHouseInstallationTemplateSpecReconcileRuntimeOutput() ClickHouseInstallationTemplateSpecReconcileRuntimeOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileRuntimeOutput) ToClickHouseInstallationTemplateSpecReconcileRuntimeOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileRuntimeOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileRuntimeOutput) ToClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput() ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcileRuntimePtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcileRuntimeOutput) ToClickHouseInstallationTemplateSpecReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcileRuntime) *ClickHouseInstallationTemplateSpecReconcileRuntime {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput)
}

// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
func (o ClickHouseInstallationTemplateSpecReconcileRuntimeOutput) ReconcileShardsMaxConcurrencyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileRuntime) *int {
		return v.ReconcileShardsMaxConcurrencyPercent
	}).(pulumi.IntPtrOutput)
}

// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
func (o ClickHouseInstallationTemplateSpecReconcileRuntimeOutput) ReconcileShardsThreadsNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcileRuntime) *int { return v.ReconcileShardsThreadsNumber }).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcileRuntime)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput) ToClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput() ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput) ToClickHouseInstallationTemplateSpecReconcileRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcileRuntimeOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileRuntime) ClickHouseInstallationTemplateSpecReconcileRuntime {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcileRuntime
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcileRuntimeOutput)
}

// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
func (o ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput) ReconcileShardsMaxConcurrencyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileRuntime) *int {
		if v == nil {
			return nil
		}
		return v.ReconcileShardsMaxConcurrencyPercent
	}).(pulumi.IntPtrOutput)
}

// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
func (o ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput) ReconcileShardsThreadsNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcileRuntime) *int {
		if v == nil {
			return nil
		}
		return v.ReconcileShardsThreadsNumber
	}).(pulumi.IntPtrOutput)
}

// [OBSOLETED] Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseInstallationTemplateSpecReconciling struct {
	// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
	Cleanup *ClickHouseInstallationTemplateSpecReconcilingCleanup `pulumi:"cleanup"`
	// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
	// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
	ConfigMapPropagationTimeout *int `pulumi:"configMapPropagationTimeout"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host:
	//   - to be excluded from a ClickHouse cluster
	//   - to complete all running queries
	//   - to be included into a ClickHouse cluster
	//     respectfully before moving forward
	Host *ClickHouseInstallationTemplateSpecReconcilingHost `pulumi:"host"`
	// macros parameters
	Macros *ClickHouseInstallationTemplateSpecReconcilingMacros `pulumi:"macros"`
	// DISCUSSED TO BE DEPRECATED
	// Syntax sugar
	// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
	// Possible values:
	//  - wait - should wait to exclude host, complete queries and include host back into the cluster
	//  - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
	Policy *string `pulumi:"policy"`
	// runtime parameters for clickhouse-operator process which are used during reconcile cycle
	Runtime *ClickHouseInstallationTemplateSpecReconcilingRuntime `pulumi:"runtime"`
}

// ClickHouseInstallationTemplateSpecReconcilingInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingArgs and ClickHouseInstallationTemplateSpecReconcilingOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingOutput() ClickHouseInstallationTemplateSpecReconcilingOutput
	ToClickHouseInstallationTemplateSpecReconcilingOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingOutput
}

// [OBSOLETED] Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseInstallationTemplateSpecReconcilingArgs struct {
	// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
	Cleanup ClickHouseInstallationTemplateSpecReconcilingCleanupPtrInput `pulumi:"cleanup"`
	// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
	// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
	ConfigMapPropagationTimeout pulumi.IntPtrInput `pulumi:"configMapPropagationTimeout"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host:
	//   - to be excluded from a ClickHouse cluster
	//   - to complete all running queries
	//   - to be included into a ClickHouse cluster
	//     respectfully before moving forward
	Host ClickHouseInstallationTemplateSpecReconcilingHostPtrInput `pulumi:"host"`
	// macros parameters
	Macros ClickHouseInstallationTemplateSpecReconcilingMacrosPtrInput `pulumi:"macros"`
	// DISCUSSED TO BE DEPRECATED
	// Syntax sugar
	// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
	// Possible values:
	//  - wait - should wait to exclude host, complete queries and include host back into the cluster
	//  - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// runtime parameters for clickhouse-operator process which are used during reconcile cycle
	Runtime ClickHouseInstallationTemplateSpecReconcilingRuntimePtrInput `pulumi:"runtime"`
}

func (ClickHouseInstallationTemplateSpecReconcilingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconciling)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingArgs) ToClickHouseInstallationTemplateSpecReconcilingOutput() ClickHouseInstallationTemplateSpecReconcilingOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingArgs) ToClickHouseInstallationTemplateSpecReconcilingOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingArgs) ToClickHouseInstallationTemplateSpecReconcilingPtrOutput() ClickHouseInstallationTemplateSpecReconcilingPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingArgs) ToClickHouseInstallationTemplateSpecReconcilingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingOutput).ToClickHouseInstallationTemplateSpecReconcilingPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingArgs, ClickHouseInstallationTemplateSpecReconcilingPtr and ClickHouseInstallationTemplateSpecReconcilingPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingPtrOutput() ClickHouseInstallationTemplateSpecReconcilingPtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingPtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingPtrType ClickHouseInstallationTemplateSpecReconcilingArgs

func ClickHouseInstallationTemplateSpecReconcilingPtr(v *ClickHouseInstallationTemplateSpecReconcilingArgs) ClickHouseInstallationTemplateSpecReconcilingPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconciling)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingPtrType) ToClickHouseInstallationTemplateSpecReconcilingPtrOutput() ClickHouseInstallationTemplateSpecReconcilingPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingPtrType) ToClickHouseInstallationTemplateSpecReconcilingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingPtrOutput)
}

// [OBSOLETED] Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseInstallationTemplateSpecReconcilingOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconciling)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingOutput) ToClickHouseInstallationTemplateSpecReconcilingOutput() ClickHouseInstallationTemplateSpecReconcilingOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingOutput) ToClickHouseInstallationTemplateSpecReconcilingOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingOutput) ToClickHouseInstallationTemplateSpecReconcilingPtrOutput() ClickHouseInstallationTemplateSpecReconcilingPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingOutput) ToClickHouseInstallationTemplateSpecReconcilingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconciling) *ClickHouseInstallationTemplateSpecReconciling {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingPtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
func (o ClickHouseInstallationTemplateSpecReconcilingOutput) Cleanup() ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconciling) *ClickHouseInstallationTemplateSpecReconcilingCleanup {
		return v.Cleanup
	}).(ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput)
}

// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
func (o ClickHouseInstallationTemplateSpecReconcilingOutput) ConfigMapPropagationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconciling) *int { return v.ConfigMapPropagationTimeout }).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
func (o ClickHouseInstallationTemplateSpecReconcilingOutput) Host() ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconciling) *ClickHouseInstallationTemplateSpecReconcilingHost {
		return v.Host
	}).(ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput)
}

// macros parameters
func (o ClickHouseInstallationTemplateSpecReconcilingOutput) Macros() ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconciling) *ClickHouseInstallationTemplateSpecReconcilingMacros {
		return v.Macros
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput)
}

// DISCUSSED TO BE DEPRECATED
// Syntax sugar
// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
// Possible values:
//   - wait - should wait to exclude host, complete queries and include host back into the cluster
//   - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
func (o ClickHouseInstallationTemplateSpecReconcilingOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconciling) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
func (o ClickHouseInstallationTemplateSpecReconcilingOutput) Runtime() ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconciling) *ClickHouseInstallationTemplateSpecReconcilingRuntime {
		return v.Runtime
	}).(ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconciling)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingPtrOutput() ClickHouseInstallationTemplateSpecReconcilingPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconciling) ClickHouseInstallationTemplateSpecReconciling {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconciling
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
func (o ClickHouseInstallationTemplateSpecReconcilingPtrOutput) Cleanup() ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconciling) *ClickHouseInstallationTemplateSpecReconcilingCleanup {
		if v == nil {
			return nil
		}
		return v.Cleanup
	}).(ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput)
}

// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
func (o ClickHouseInstallationTemplateSpecReconcilingPtrOutput) ConfigMapPropagationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconciling) *int {
		if v == nil {
			return nil
		}
		return v.ConfigMapPropagationTimeout
	}).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
func (o ClickHouseInstallationTemplateSpecReconcilingPtrOutput) Host() ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconciling) *ClickHouseInstallationTemplateSpecReconcilingHost {
		if v == nil {
			return nil
		}
		return v.Host
	}).(ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput)
}

// macros parameters
func (o ClickHouseInstallationTemplateSpecReconcilingPtrOutput) Macros() ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconciling) *ClickHouseInstallationTemplateSpecReconcilingMacros {
		if v == nil {
			return nil
		}
		return v.Macros
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput)
}

// DISCUSSED TO BE DEPRECATED
// Syntax sugar
// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
// Possible values:
//   - wait - should wait to exclude host, complete queries and include host back into the cluster
//   - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
func (o ClickHouseInstallationTemplateSpecReconcilingPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconciling) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
func (o ClickHouseInstallationTemplateSpecReconcilingPtrOutput) Runtime() ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconciling) *ClickHouseInstallationTemplateSpecReconcilingRuntime {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseInstallationTemplateSpecReconcilingCleanup struct {
	// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
	// Default behavior is `Retain`"
	ReconcileFailedObjects *ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects `pulumi:"reconcileFailedObjects"`
	// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
	// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
	// Default behavior is `Delete`"
	UnknownObjects *ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects `pulumi:"unknownObjects"`
}

// ClickHouseInstallationTemplateSpecReconcilingCleanupInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingCleanupArgs and ClickHouseInstallationTemplateSpecReconcilingCleanupOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingCleanupInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingCleanupArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingCleanupInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingCleanupOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupOutput
	ToClickHouseInstallationTemplateSpecReconcilingCleanupOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupOutput
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseInstallationTemplateSpecReconcilingCleanupArgs struct {
	// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
	// Default behavior is `Retain`"
	ReconcileFailedObjects ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrInput `pulumi:"reconcileFailedObjects"`
	// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
	// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
	// Default behavior is `Delete`"
	UnknownObjects ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrInput `pulumi:"unknownObjects"`
}

func (ClickHouseInstallationTemplateSpecReconcilingCleanupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingCleanup)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingCleanupArgs) ToClickHouseInstallationTemplateSpecReconcilingCleanupOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingCleanupOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingCleanupArgs) ToClickHouseInstallationTemplateSpecReconcilingCleanupOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingCleanupOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingCleanupArgs) ToClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingCleanupArgs) ToClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingCleanupOutput).ToClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingCleanupPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingCleanupArgs, ClickHouseInstallationTemplateSpecReconcilingCleanupPtr and ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingCleanupPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingCleanupArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingCleanupPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingCleanupPtrType ClickHouseInstallationTemplateSpecReconcilingCleanupArgs

func ClickHouseInstallationTemplateSpecReconcilingCleanupPtr(v *ClickHouseInstallationTemplateSpecReconcilingCleanupArgs) ClickHouseInstallationTemplateSpecReconcilingCleanupPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingCleanupPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingCleanupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingCleanup)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingCleanupPtrType) ToClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingCleanupPtrType) ToClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseInstallationTemplateSpecReconcilingCleanupOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingCleanupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingCleanup)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcilingCleanup) *ClickHouseInstallationTemplateSpecReconcilingCleanup {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupOutput) ReconcileFailedObjects() ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingCleanup) *ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects {
		return v.ReconcileFailedObjects
	}).(ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupOutput) UnknownObjects() ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingCleanup) *ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects {
		return v.UnknownObjects
	}).(ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingCleanup)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingCleanupOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingCleanup) ClickHouseInstallationTemplateSpecReconcilingCleanup {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcilingCleanup
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingCleanupOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput) ReconcileFailedObjects() ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingCleanup) *ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects {
		if v == nil {
			return nil
		}
		return v.ReconcileFailedObjects
	}).(ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput) UnknownObjects() ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingCleanup) *ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects {
		if v == nil {
			return nil
		}
		return v.UnknownObjects
	}).(ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects struct {
	// Behavior policy for failed ConfigMap, `Retain` by default
	ConfigMap *string `pulumi:"configMap"`
	// Behavior policy for failed PVC, `Retain` by default
	Pvc *string `pulumi:"pvc"`
	// Behavior policy for failed Service, `Retain` by default
	Service *string `pulumi:"service"`
	// Behavior policy for failed StatefulSet, `Retain` by default
	StatefulSet *string `pulumi:"statefulSet"`
}

// ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsArgs and ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput
	ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsArgs struct {
	// Behavior policy for failed ConfigMap, `Retain` by default
	ConfigMap pulumi.StringPtrInput `pulumi:"configMap"`
	// Behavior policy for failed PVC, `Retain` by default
	Pvc pulumi.StringPtrInput `pulumi:"pvc"`
	// Behavior policy for failed Service, `Retain` by default
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Behavior policy for failed StatefulSet, `Retain` by default
	StatefulSet pulumi.StringPtrInput `pulumi:"statefulSet"`
}

func (ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsArgs) ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput).ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsArgs, ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtr and ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrType ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsArgs

func ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtr(v *ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsArgs) ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrType) ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrType) ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects) *ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput)
}

// Behavior policy for failed ConfigMap, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects) *string {
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed PVC, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects) *string {
		return v.Pvc
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed Service, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects) *string {
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed StatefulSet, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects) *string {
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects) ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput)
}

// Behavior policy for failed ConfigMap, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed PVC, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.Pvc
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed Service, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed StatefulSet, `Retain` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects struct {
	// Behavior policy for unknown ConfigMap, `Delete` by default
	ConfigMap *string `pulumi:"configMap"`
	// Behavior policy for unknown PVC, `Delete` by default
	Pvc *string `pulumi:"pvc"`
	// Behavior policy for unknown Service, `Delete` by default
	Service *string `pulumi:"service"`
	// Behavior policy for unknown StatefulSet, `Delete` by default
	StatefulSet *string `pulumi:"statefulSet"`
}

// ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsArgs and ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput
	ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsArgs struct {
	// Behavior policy for unknown ConfigMap, `Delete` by default
	ConfigMap pulumi.StringPtrInput `pulumi:"configMap"`
	// Behavior policy for unknown PVC, `Delete` by default
	Pvc pulumi.StringPtrInput `pulumi:"pvc"`
	// Behavior policy for unknown Service, `Delete` by default
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Behavior policy for unknown StatefulSet, `Delete` by default
	StatefulSet pulumi.StringPtrInput `pulumi:"statefulSet"`
}

func (ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsArgs) ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsArgs) ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsArgs) ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsArgs) ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput).ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsArgs, ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtr and ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrType ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsArgs

func ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtr(v *ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsArgs) ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrType) ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrType) ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects) *ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput)
}

// Behavior policy for unknown ConfigMap, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects) *string { return v.ConfigMap }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown PVC, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects) *string { return v.Pvc }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown Service, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown StatefulSet, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects) *string {
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects) ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput)
}

// Behavior policy for unknown ConfigMap, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown PVC, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.Pvc
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown Service, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown StatefulSet, `Delete` by default
func (o ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationTemplateSpecReconcilingHost struct {
	Wait *ClickHouseInstallationTemplateSpecReconcilingHostWait `pulumi:"wait"`
}

// ClickHouseInstallationTemplateSpecReconcilingHostInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingHostArgs and ClickHouseInstallationTemplateSpecReconcilingHostOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingHostInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingHostArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingHostInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingHostOutput() ClickHouseInstallationTemplateSpecReconcilingHostOutput
	ToClickHouseInstallationTemplateSpecReconcilingHostOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingHostOutput
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationTemplateSpecReconcilingHostArgs struct {
	Wait ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrInput `pulumi:"wait"`
}

func (ClickHouseInstallationTemplateSpecReconcilingHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHost)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostArgs) ToClickHouseInstallationTemplateSpecReconcilingHostOutput() ClickHouseInstallationTemplateSpecReconcilingHostOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingHostOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostArgs) ToClickHouseInstallationTemplateSpecReconcilingHostOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingHostOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostArgs) ToClickHouseInstallationTemplateSpecReconcilingHostPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingHostPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostArgs) ToClickHouseInstallationTemplateSpecReconcilingHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingHostOutput).ToClickHouseInstallationTemplateSpecReconcilingHostPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingHostPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingHostArgs, ClickHouseInstallationTemplateSpecReconcilingHostPtr and ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingHostPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingHostArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingHostPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingHostPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingHostPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingHostPtrType ClickHouseInstallationTemplateSpecReconcilingHostArgs

func ClickHouseInstallationTemplateSpecReconcilingHostPtr(v *ClickHouseInstallationTemplateSpecReconcilingHostArgs) ClickHouseInstallationTemplateSpecReconcilingHostPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingHostPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingHostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingHost)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingHostPtrType) ToClickHouseInstallationTemplateSpecReconcilingHostPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingHostPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingHostPtrType) ToClickHouseInstallationTemplateSpecReconcilingHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host:
//   - to be excluded from a ClickHouse cluster
//   - to complete all running queries
//   - to be included into a ClickHouse cluster
//     respectfully before moving forward
type ClickHouseInstallationTemplateSpecReconcilingHostOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHost)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostOutput) ToClickHouseInstallationTemplateSpecReconcilingHostOutput() ClickHouseInstallationTemplateSpecReconcilingHostOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostOutput) ToClickHouseInstallationTemplateSpecReconcilingHostOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostOutput) ToClickHouseInstallationTemplateSpecReconcilingHostPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingHostPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostOutput) ToClickHouseInstallationTemplateSpecReconcilingHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcilingHost) *ClickHouseInstallationTemplateSpecReconcilingHost {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput)
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostOutput) Wait() ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingHost) *ClickHouseInstallationTemplateSpecReconcilingHostWait {
		return v.Wait
	}).(ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingHost)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingHostPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingHostPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingHostOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingHost) ClickHouseInstallationTemplateSpecReconcilingHost {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcilingHost
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingHostOutput)
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput) Wait() ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingHost) *ClickHouseInstallationTemplateSpecReconcilingHostWait {
		if v == nil {
			return nil
		}
		return v.Wait
	}).(ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingHostWait struct {
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Exclude *string `pulumi:"exclude"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
	Include *string `pulumi:"include"`
	// What probes the operator should wait during host launch procedure
	Probes *ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes `pulumi:"probes"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
	Queries *string `pulumi:"queries"`
	// Whether the operator during reconcile procedure should wait for replicas to catch-up
	Replicas *ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas `pulumi:"replicas"`
}

// ClickHouseInstallationTemplateSpecReconcilingHostWaitInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingHostWaitArgs and ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingHostWaitInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingHostWaitArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingHostWaitInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingHostWaitOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput
	ToClickHouseInstallationTemplateSpecReconcilingHostWaitOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput
}

type ClickHouseInstallationTemplateSpecReconcilingHostWaitArgs struct {
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Exclude pulumi.StringPtrInput `pulumi:"exclude"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
	Include pulumi.StringPtrInput `pulumi:"include"`
	// What probes the operator should wait during host launch procedure
	Probes ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrInput `pulumi:"probes"`
	// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
	Queries pulumi.StringPtrInput `pulumi:"queries"`
	// Whether the operator during reconcile procedure should wait for replicas to catch-up
	Replicas ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrInput `pulumi:"replicas"`
}

func (ClickHouseInstallationTemplateSpecReconcilingHostWaitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHostWait)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostWaitArgs) ToClickHouseInstallationTemplateSpecReconcilingHostWaitOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingHostWaitOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostWaitArgs) ToClickHouseInstallationTemplateSpecReconcilingHostWaitOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostWaitArgs) ToClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostWaitArgs) ToClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput).ToClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingHostWaitArgs, ClickHouseInstallationTemplateSpecReconcilingHostWaitPtr and ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingHostWaitArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingHostWaitPtrType ClickHouseInstallationTemplateSpecReconcilingHostWaitArgs

func ClickHouseInstallationTemplateSpecReconcilingHostWaitPtr(v *ClickHouseInstallationTemplateSpecReconcilingHostWaitArgs) ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingHostWaitPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingHostWaitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingHostWait)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingHostWaitPtrType) ToClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingHostWaitPtrType) ToClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHostWait)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcilingHostWait) *ClickHouseInstallationTemplateSpecReconcilingHostWait {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput) Exclude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingHostWait) *string { return v.Exclude }).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput) Include() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingHostWait) *string { return v.Include }).(pulumi.StringPtrOutput)
}

// What probes the operator should wait during host launch procedure
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput) Probes() ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingHostWait) *ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes {
		return v.Probes
	}).(ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput) Queries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingHostWait) *string { return v.Queries }).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput) Replicas() ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingHostWait) *ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas {
		return v.Replicas
	}).(ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingHostWait)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingHostWait) ClickHouseInstallationTemplateSpecReconcilingHostWait {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcilingHostWait
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput) Exclude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Exclude
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput) Include() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Include
	}).(pulumi.StringPtrOutput)
}

// What probes the operator should wait during host launch procedure
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput) Probes() ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingHostWait) *ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput)
}

// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput) Queries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingHostWait) *string {
		if v == nil {
			return nil
		}
		return v.Queries
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput) Replicas() ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingHostWait) *ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput)
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes struct {
	// Whether the operator during host launch procedure should wait for ready probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to wait.
	Readiness *string `pulumi:"readiness"`
	// Whether the operator during host launch procedure should wait for startup probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to do not wait.
	Startup *string `pulumi:"startup"`
}

// ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesArgs and ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput
	ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesArgs struct {
	// Whether the operator during host launch procedure should wait for ready probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to wait.
	Readiness pulumi.StringPtrInput `pulumi:"readiness"`
	// Whether the operator during host launch procedure should wait for startup probe to succeed.
	// In case probe is unspecified wait is assumed to be completed successfully.
	// Default option value is to do not wait.
	Startup pulumi.StringPtrInput `pulumi:"startup"`
}

func (ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesArgs) ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesArgs) ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesArgs) ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesArgs) ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput).ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesArgs, ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtr and ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrType ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesArgs

func ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtr(v *ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesArgs) ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrType) ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrType) ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput)
}

// What probes the operator should wait during host launch procedure
type ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes) *ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput)
}

// Whether the operator during host launch procedure should wait for ready probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to wait.
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput) Readiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes) *string { return v.Readiness }).(pulumi.StringPtrOutput)
}

// Whether the operator during host launch procedure should wait for startup probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to do not wait.
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput) Startup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes) *string { return v.Startup }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes) ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput)
}

// Whether the operator during host launch procedure should wait for ready probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to wait.
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput) Readiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes) *string {
		if v == nil {
			return nil
		}
		return v.Readiness
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during host launch procedure should wait for startup probe to succeed.
// In case probe is unspecified wait is assumed to be completed successfully.
// Default option value is to do not wait.
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput) Startup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingHostWaitProbes) *string {
		if v == nil {
			return nil
		}
		return v.Startup
	}).(pulumi.StringPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas struct {
	// Whether the operator during reconcile procedure should wait for all replicas to catch-up
	All *string `pulumi:"all"`
	// replication max absolute delay to consider replica is not delayed
	Delay *int `pulumi:"delay"`
	// Whether the operator during reconcile procedure should wait for new replicas to catch-up
	New *string `pulumi:"new"`
}

// ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasArgs and ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput
	ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasArgs struct {
	// Whether the operator during reconcile procedure should wait for all replicas to catch-up
	All pulumi.StringPtrInput `pulumi:"all"`
	// replication max absolute delay to consider replica is not delayed
	Delay pulumi.IntPtrInput `pulumi:"delay"`
	// Whether the operator during reconcile procedure should wait for new replicas to catch-up
	New pulumi.StringPtrInput `pulumi:"new"`
}

func (ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasArgs) ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasArgs) ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasArgs) ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasArgs) ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput).ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasArgs, ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtr and ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrType ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasArgs

func ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtr(v *ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasArgs) ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrType) ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrType) ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput)
}

// Whether the operator during reconcile procedure should wait for replicas to catch-up
type ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas) *ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput)
}

// Whether the operator during reconcile procedure should wait for all replicas to catch-up
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput) All() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas) *string { return v.All }).(pulumi.StringPtrOutput)
}

// replication max absolute delay to consider replica is not delayed
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput) Delay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas) *int { return v.Delay }).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for new replicas to catch-up
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput) New() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas) *string { return v.New }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput() ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas) ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput)
}

// Whether the operator during reconcile procedure should wait for all replicas to catch-up
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput) All() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas) *string {
		if v == nil {
			return nil
		}
		return v.All
	}).(pulumi.StringPtrOutput)
}

// replication max absolute delay to consider replica is not delayed
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput) Delay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas) *int {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(pulumi.IntPtrOutput)
}

// Whether the operator during reconcile procedure should wait for new replicas to catch-up
func (o ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput) New() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicas) *string {
		if v == nil {
			return nil
		}
		return v.New
	}).(pulumi.StringPtrOutput)
}

// macros parameters
type ClickHouseInstallationTemplateSpecReconcilingMacros struct {
	// sections behaviour for macros
	Sections *ClickHouseInstallationTemplateSpecReconcilingMacrosSections `pulumi:"sections"`
}

// ClickHouseInstallationTemplateSpecReconcilingMacrosInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingMacrosArgs and ClickHouseInstallationTemplateSpecReconcilingMacrosOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingMacrosInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingMacrosArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingMacrosInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingMacrosOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosOutput
	ToClickHouseInstallationTemplateSpecReconcilingMacrosOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosOutput
}

// macros parameters
type ClickHouseInstallationTemplateSpecReconcilingMacrosArgs struct {
	// sections behaviour for macros
	Sections ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrInput `pulumi:"sections"`
}

func (ClickHouseInstallationTemplateSpecReconcilingMacrosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacros)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosOutput).ToClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingMacrosPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingMacrosArgs, ClickHouseInstallationTemplateSpecReconcilingMacrosPtr and ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingMacrosPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingMacrosArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingMacrosPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingMacrosPtrType ClickHouseInstallationTemplateSpecReconcilingMacrosArgs

func ClickHouseInstallationTemplateSpecReconcilingMacrosPtr(v *ClickHouseInstallationTemplateSpecReconcilingMacrosArgs) ClickHouseInstallationTemplateSpecReconcilingMacrosPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingMacrosPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingMacrosPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingMacros)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingMacrosPtrType) ToClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingMacrosPtrType) ToClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput)
}

// macros parameters
type ClickHouseInstallationTemplateSpecReconcilingMacrosOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingMacrosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacros)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcilingMacros) *ClickHouseInstallationTemplateSpecReconcilingMacros {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput)
}

// sections behaviour for macros
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosOutput) Sections() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingMacros) *ClickHouseInstallationTemplateSpecReconcilingMacrosSections {
		return v.Sections
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingMacros)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingMacrosOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacros) ClickHouseInstallationTemplateSpecReconcilingMacros {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcilingMacros
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosOutput)
}

// sections behaviour for macros
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput) Sections() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacros) *ClickHouseInstallationTemplateSpecReconcilingMacrosSections {
		if v == nil {
			return nil
		}
		return v.Sections
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput)
}

// sections behaviour for macros
type ClickHouseInstallationTemplateSpecReconcilingMacrosSections struct {
	// sections behaviour for macros on files
	Files *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFiles `pulumi:"files"`
	// sections behaviour for macros on profiles
	Profiles *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfiles `pulumi:"profiles"`
	// sections behaviour for macros on quotas
	Quotas *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotas `pulumi:"quotas"`
	// sections behaviour for macros on settings
	Settings *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettings `pulumi:"settings"`
	// sections behaviour for macros on users
	Users *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsers `pulumi:"users"`
}

// ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsArgs and ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput
	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput
}

// sections behaviour for macros
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsArgs struct {
	// sections behaviour for macros on files
	Files ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrInput `pulumi:"files"`
	// sections behaviour for macros on profiles
	Profiles ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrInput `pulumi:"profiles"`
	// sections behaviour for macros on quotas
	Quotas ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrInput `pulumi:"quotas"`
	// sections behaviour for macros on settings
	Settings ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrInput `pulumi:"settings"`
	// sections behaviour for macros on users
	Users ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrInput `pulumi:"users"`
}

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSections)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput).ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsArgs, ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtr and ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrType ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsArgs

func ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtr(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsArgs) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingMacrosSections)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrType) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrType) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput)
}

// sections behaviour for macros
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSections)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcilingMacrosSections) *ClickHouseInstallationTemplateSpecReconcilingMacrosSections {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput)
}

// sections behaviour for macros on files
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput) Files() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingMacrosSections) *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFiles {
		return v.Files
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput)
}

// sections behaviour for macros on profiles
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput) Profiles() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingMacrosSections) *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfiles {
		return v.Profiles
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput)
}

// sections behaviour for macros on quotas
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput) Quotas() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingMacrosSections) *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotas {
		return v.Quotas
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput)
}

// sections behaviour for macros on settings
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput) Settings() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingMacrosSections) *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettings {
		return v.Settings
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput)
}

// sections behaviour for macros on users
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput) Users() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingMacrosSections) *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsers {
		return v.Users
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingMacrosSections)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSections) ClickHouseInstallationTemplateSpecReconcilingMacrosSections {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcilingMacrosSections
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput)
}

// sections behaviour for macros on files
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput) Files() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSections) *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFiles {
		if v == nil {
			return nil
		}
		return v.Files
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput)
}

// sections behaviour for macros on profiles
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput) Profiles() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSections) *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfiles {
		if v == nil {
			return nil
		}
		return v.Profiles
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput)
}

// sections behaviour for macros on quotas
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput) Quotas() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSections) *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotas {
		if v == nil {
			return nil
		}
		return v.Quotas
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput)
}

// sections behaviour for macros on settings
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput) Settings() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSections) *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettings {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput)
}

// sections behaviour for macros on users
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput) Users() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSections) *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsers {
		if v == nil {
			return nil
		}
		return v.Users
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput)
}

// sections behaviour for macros on files
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFiles struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesArgs and ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput
	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput
}

// sections behaviour for macros on files
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFiles)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput).ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesArgs, ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtr and ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrType ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesArgs

func ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtr(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesArgs) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFiles)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrType) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrType) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput)
}

// sections behaviour for macros on files
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFiles)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFiles) *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFiles {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFiles) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFiles)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFiles) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFiles {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFiles
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFiles) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on profiles
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfiles struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesArgs and ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput
	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput
}

// sections behaviour for macros on profiles
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfiles)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput).ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesArgs, ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtr and ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrType ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesArgs

func ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtr(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesArgs) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfiles)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrType) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrType) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput)
}

// sections behaviour for macros on profiles
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfiles)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfiles) *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfiles {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfiles) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfiles)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfiles) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfiles {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfiles
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfiles) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on quotas
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotas struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasArgs and ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput
	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput
}

// sections behaviour for macros on quotas
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotas)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput).ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasArgs, ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtr and ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrType ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasArgs

func ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtr(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasArgs) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotas)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrType) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrType) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput)
}

// sections behaviour for macros on quotas
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotas)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotas) *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotas {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotas) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotas)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotas) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotas {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotas
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotas) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on settings
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettings struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsArgs and ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput
	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput
}

// sections behaviour for macros on settings
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettings)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput).ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsArgs, ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtr and ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrType ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsArgs

func ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtr(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsArgs) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettings)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrType) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrType) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput)
}

// sections behaviour for macros on settings
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettings)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettings) *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettings {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettings) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettings)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettings) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettings {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettings
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettings) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// sections behaviour for macros on users
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsers struct {
	// enabled or not
	Enabled *string `pulumi:"enabled"`
}

// ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersArgs and ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput
	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput
}

// sections behaviour for macros on users
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersArgs struct {
	// enabled or not
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
}

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsers)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersArgs) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput).ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersArgs, ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtr and ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrType ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersArgs

func ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtr(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersArgs) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsers)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrType) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrType) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput)
}

// sections behaviour for macros on users
type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsers)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsers) *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsers {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsers) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsers)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput) ToClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsers) ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsers {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsers
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput)
}

// enabled or not
func (o ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsers) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationTemplateSpecReconcilingRuntime struct {
	// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
	ReconcileShardsMaxConcurrencyPercent *int `pulumi:"reconcileShardsMaxConcurrencyPercent"`
	// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
	ReconcileShardsThreadsNumber *int `pulumi:"reconcileShardsThreadsNumber"`
}

// ClickHouseInstallationTemplateSpecReconcilingRuntimeInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingRuntimeArgs and ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingRuntimeInput` via:
//
//	ClickHouseInstallationTemplateSpecReconcilingRuntimeArgs{...}
type ClickHouseInstallationTemplateSpecReconcilingRuntimeInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingRuntimeOutput() ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput
	ToClickHouseInstallationTemplateSpecReconcilingRuntimeOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationTemplateSpecReconcilingRuntimeArgs struct {
	// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
	ReconcileShardsMaxConcurrencyPercent pulumi.IntPtrInput `pulumi:"reconcileShardsMaxConcurrencyPercent"`
	// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
	ReconcileShardsThreadsNumber pulumi.IntPtrInput `pulumi:"reconcileShardsThreadsNumber"`
}

func (ClickHouseInstallationTemplateSpecReconcilingRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingRuntime)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecReconcilingRuntimeArgs) ToClickHouseInstallationTemplateSpecReconcilingRuntimeOutput() ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingRuntimeOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingRuntimeArgs) ToClickHouseInstallationTemplateSpecReconcilingRuntimeOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput)
}

func (i ClickHouseInstallationTemplateSpecReconcilingRuntimeArgs) ToClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput() ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecReconcilingRuntimeArgs) ToClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput).ToClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecReconcilingRuntimePtrInput is an input type that accepts ClickHouseInstallationTemplateSpecReconcilingRuntimeArgs, ClickHouseInstallationTemplateSpecReconcilingRuntimePtr and ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecReconcilingRuntimePtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecReconcilingRuntimeArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecReconcilingRuntimePtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput() ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput
	ToClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput
}

type clickHouseInstallationTemplateSpecReconcilingRuntimePtrType ClickHouseInstallationTemplateSpecReconcilingRuntimeArgs

func ClickHouseInstallationTemplateSpecReconcilingRuntimePtr(v *ClickHouseInstallationTemplateSpecReconcilingRuntimeArgs) ClickHouseInstallationTemplateSpecReconcilingRuntimePtrInput {
	return (*clickHouseInstallationTemplateSpecReconcilingRuntimePtrType)(v)
}

func (*clickHouseInstallationTemplateSpecReconcilingRuntimePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingRuntime)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecReconcilingRuntimePtrType) ToClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput() ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput {
	return i.ToClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecReconcilingRuntimePtrType) ToClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput)
}

// runtime parameters for clickhouse-operator process which are used during reconcile cycle
type ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingRuntime)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput) ToClickHouseInstallationTemplateSpecReconcilingRuntimeOutput() ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput) ToClickHouseInstallationTemplateSpecReconcilingRuntimeOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput) ToClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput() ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput {
	return o.ToClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput) ToClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecReconcilingRuntime) *ClickHouseInstallationTemplateSpecReconcilingRuntime {
		return &v
	}).(ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput)
}

// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
func (o ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput) ReconcileShardsMaxConcurrencyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingRuntime) *int {
		return v.ReconcileShardsMaxConcurrencyPercent
	}).(pulumi.IntPtrOutput)
}

// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
func (o ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput) ReconcileShardsThreadsNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecReconcilingRuntime) *int {
		return v.ReconcileShardsThreadsNumber
	}).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecReconcilingRuntime)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput) ToClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput() ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput) ToClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput) Elem() ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingRuntime) ClickHouseInstallationTemplateSpecReconcilingRuntime {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecReconcilingRuntime
		return ret
	}).(ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput)
}

// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
func (o ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput) ReconcileShardsMaxConcurrencyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingRuntime) *int {
		if v == nil {
			return nil
		}
		return v.ReconcileShardsMaxConcurrencyPercent
	}).(pulumi.IntPtrOutput)
}

// The maximum number of cluster shards that may be reconciled in parallel, 1 by default
func (o ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput) ReconcileShardsThreadsNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecReconcilingRuntime) *int {
		if v == nil {
			return nil
		}
		return v.ReconcileShardsThreadsNumber
	}).(pulumi.IntPtrOutput)
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
type ClickHouseInstallationTemplateSpecTemplates struct {
	// hostTemplate will use during apply to generate `clickhose-server` config files
	HostTemplates []ClickHouseInstallationTemplateSpecTemplatesHostTemplates `pulumi:"hostTemplates"`
	// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
	// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
	PodTemplates []ClickHouseInstallationTemplateSpecTemplatesPodTemplates `pulumi:"podTemplates"`
	// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
	ServiceTemplates []ClickHouseInstallationTemplateSpecTemplatesServiceTemplates `pulumi:"serviceTemplates"`
	// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
	VolumeClaimTemplates []ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplates `pulumi:"volumeClaimTemplates"`
}

// ClickHouseInstallationTemplateSpecTemplatesInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesArgs and ClickHouseInstallationTemplateSpecTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesArgs{...}
type ClickHouseInstallationTemplateSpecTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesOutput
	ToClickHouseInstallationTemplateSpecTemplatesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesOutput
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
type ClickHouseInstallationTemplateSpecTemplatesArgs struct {
	// hostTemplate will use during apply to generate `clickhose-server` config files
	HostTemplates ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayInput `pulumi:"hostTemplates"`
	// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
	// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
	PodTemplates ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayInput `pulumi:"podTemplates"`
	// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
	ServiceTemplates ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayInput `pulumi:"serviceTemplates"`
	// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
	VolumeClaimTemplates ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayInput `pulumi:"volumeClaimTemplates"`
}

func (ClickHouseInstallationTemplateSpecTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesOutput)
}

func (i ClickHouseInstallationTemplateSpecTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesPtrOutput() ClickHouseInstallationTemplateSpecTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesOutput).ToClickHouseInstallationTemplateSpecTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecTemplatesPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesArgs, ClickHouseInstallationTemplateSpecTemplatesPtr and ClickHouseInstallationTemplateSpecTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesPtrOutput() ClickHouseInstallationTemplateSpecTemplatesPtrOutput
	ToClickHouseInstallationTemplateSpecTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesPtrOutput
}

type clickHouseInstallationTemplateSpecTemplatesPtrType ClickHouseInstallationTemplateSpecTemplatesArgs

func ClickHouseInstallationTemplateSpecTemplatesPtr(v *ClickHouseInstallationTemplateSpecTemplatesArgs) ClickHouseInstallationTemplateSpecTemplatesPtrInput {
	return (*clickHouseInstallationTemplateSpecTemplatesPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecTemplatesPtrType) ToClickHouseInstallationTemplateSpecTemplatesPtrOutput() ClickHouseInstallationTemplateSpecTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecTemplatesPtrType) ToClickHouseInstallationTemplateSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesPtrOutput)
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
type ClickHouseInstallationTemplateSpecTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesPtrOutput() ClickHouseInstallationTemplateSpecTemplatesPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecTemplates) *ClickHouseInstallationTemplateSpecTemplates {
		return &v
	}).(ClickHouseInstallationTemplateSpecTemplatesPtrOutput)
}

// hostTemplate will use during apply to generate `clickhose-server` config files
func (o ClickHouseInstallationTemplateSpecTemplatesOutput) HostTemplates() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplates) []ClickHouseInstallationTemplateSpecTemplatesHostTemplates {
		return v.HostTemplates
	}).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput)
}

// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
func (o ClickHouseInstallationTemplateSpecTemplatesOutput) PodTemplates() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplates) []ClickHouseInstallationTemplateSpecTemplatesPodTemplates {
		return v.PodTemplates
	}).(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput)
}

// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
func (o ClickHouseInstallationTemplateSpecTemplatesOutput) ServiceTemplates() ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplates) []ClickHouseInstallationTemplateSpecTemplatesServiceTemplates {
		return v.ServiceTemplates
	}).(ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput)
}

// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
func (o ClickHouseInstallationTemplateSpecTemplatesOutput) VolumeClaimTemplates() ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplates) []ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplates {
		return v.VolumeClaimTemplates
	}).(ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecTemplatesPtrOutput() ClickHouseInstallationTemplateSpecTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesPtrOutput) Elem() ClickHouseInstallationTemplateSpecTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplates) ClickHouseInstallationTemplateSpecTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecTemplates
		return ret
	}).(ClickHouseInstallationTemplateSpecTemplatesOutput)
}

// hostTemplate will use during apply to generate `clickhose-server` config files
func (o ClickHouseInstallationTemplateSpecTemplatesPtrOutput) HostTemplates() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplates) []ClickHouseInstallationTemplateSpecTemplatesHostTemplates {
		if v == nil {
			return nil
		}
		return v.HostTemplates
	}).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput)
}

// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
func (o ClickHouseInstallationTemplateSpecTemplatesPtrOutput) PodTemplates() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplates) []ClickHouseInstallationTemplateSpecTemplatesPodTemplates {
		if v == nil {
			return nil
		}
		return v.PodTemplates
	}).(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput)
}

// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
func (o ClickHouseInstallationTemplateSpecTemplatesPtrOutput) ServiceTemplates() ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplates) []ClickHouseInstallationTemplateSpecTemplatesServiceTemplates {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput)
}

// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
func (o ClickHouseInstallationTemplateSpecTemplatesPtrOutput) VolumeClaimTemplates() ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplates) []ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplates {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplates
	}).(ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesHostTemplates struct {
	// template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`
	Name *string `pulumi:"name"`
	// define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs
	PortDistribution []ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistribution `pulumi:"portDistribution"`
	Spec             *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec              `pulumi:"spec"`
}

// ClickHouseInstallationTemplateSpecTemplatesHostTemplatesInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArgs and ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesHostTemplatesInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArgs{...}
type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput
	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput
}

type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArgs struct {
	// template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs
	PortDistribution ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayInput `pulumi:"portDistribution"`
	Spec             ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrInput               `pulumi:"spec"`
}

func (ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput)
}

// ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArray and ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArray{ ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArgs{...} }
type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput
	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput
}

type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArray []ClickHouseInstallationTemplateSpecTemplatesHostTemplatesInput

func (ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecTemplatesHostTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArray) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArray) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput {
	return o
}

// template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplates) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput) PortDistribution() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplates) []ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistribution {
		return v.PortDistribution
	}).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput)
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput) Spec() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplates) *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec {
		return v.Spec
	}).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecTemplatesHostTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationTemplateSpecTemplatesHostTemplates {
		return vs[0].([]ClickHouseInstallationTemplateSpecTemplatesHostTemplates)[vs[1].(int)]
	}).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistribution struct {
	// type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network
	Type *string `pulumi:"type"`
}

// ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArgs and ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArgs{...}
type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput
	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput
}

type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArgs struct {
	// type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistribution)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArgs) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArgs) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput)
}

// ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArray and ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArray{ ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArgs{...} }
type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput
	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput
}

type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArray []ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionInput

func (ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistribution)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArray) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArray) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistribution)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput {
	return o
}

// type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistribution) *string {
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistribution)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistribution {
		return vs[0].([]ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistribution)[vs[1].(int)]
	}).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec struct {
	// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	Files map[string]interface{} `pulumi:"files"`
	// optional, setup `http_port` inside `clickhouse-server` settings for each Pod where current template will apply
	// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=http]`
	// More info: https://clickhouse.tech/docs/en/interfaces/http/
	HttpPort  *int `pulumi:"httpPort"`
	HttpsPort *int `pulumi:"httpsPort"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure *string `pulumi:"insecure"`
	// optional, setup `interserver_http_port` inside `clickhouse-server` settings for each Pod where current template will apply
	// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=interserver]`
	// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#interserver-http-port
	InterserverHTTPPort *int `pulumi:"interserverHTTPPort"`
	// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
	Name *string `pulumi:"name"`
	// optional, open secure ports
	Secure *string `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings map[string]interface{} `pulumi:"settings"`
	// optional, setup `tcp_port` inside `clickhouse-server` settings for each Pod where current template will apply
	// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=tcp]`
	// More info: https://clickhouse.tech/docs/en/interfaces/tcp/
	TcpPort *int `pulumi:"tcpPort"`
	// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
	Templates *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates `pulumi:"templates"`
	TlsPort   *int                                                                   `pulumi:"tlsPort"`
}

// ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecArgs and ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecArgs{...}
type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput
	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput
}

type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecArgs struct {
	// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	Files pulumi.MapInput `pulumi:"files"`
	// optional, setup `http_port` inside `clickhouse-server` settings for each Pod where current template will apply
	// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=http]`
	// More info: https://clickhouse.tech/docs/en/interfaces/http/
	HttpPort  pulumi.IntPtrInput `pulumi:"httpPort"`
	HttpsPort pulumi.IntPtrInput `pulumi:"httpsPort"`
	// optional, open insecure ports for cluster, defaults to "yes"
	Insecure pulumi.StringPtrInput `pulumi:"insecure"`
	// optional, setup `interserver_http_port` inside `clickhouse-server` settings for each Pod where current template will apply
	// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=interserver]`
	// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#interserver-http-port
	InterserverHTTPPort pulumi.IntPtrInput `pulumi:"interserverHTTPPort"`
	// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional, open secure ports
	Secure pulumi.StringPtrInput `pulumi:"secure"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings pulumi.MapInput `pulumi:"settings"`
	// optional, setup `tcp_port` inside `clickhouse-server` settings for each Pod where current template will apply
	// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=tcp]`
	// More info: https://clickhouse.tech/docs/en/interfaces/tcp/
	TcpPort pulumi.IntPtrInput `pulumi:"tcpPort"`
	// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
	Templates ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrInput `pulumi:"templates"`
	TlsPort   pulumi.IntPtrInput                                                            `pulumi:"tlsPort"`
}

func (ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecArgs) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecArgs) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput)
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecArgs) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecArgs) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput).ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecArgs, ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtr and ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput
	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput
}

type clickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrType ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecArgs

func ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtr(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecArgs) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrInput {
	return (*clickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrType) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrType) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec {
		return &v
	}).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput)
}

// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

// optional, setup `http_port` inside `clickhouse-server` settings for each Pod where current template will apply
// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=http]`
// More info: https://clickhouse.tech/docs/en/interfaces/http/
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *int { return v.HttpsPort }).(pulumi.IntPtrOutput)
}

// optional, open insecure ports for cluster, defaults to "yes"
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) Insecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *string { return v.Insecure }).(pulumi.StringPtrOutput)
}

// optional, setup `interserver_http_port` inside `clickhouse-server` settings for each Pod where current template will apply
// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=interserver]`
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#interserver-http-port
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) InterserverHTTPPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *int {
		return v.InterserverHTTPPort
	}).(pulumi.IntPtrOutput)
}

// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional, open secure ports
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) Secure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *string { return v.Secure }).(pulumi.StringPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

// optional, setup `tcp_port` inside `clickhouse-server` settings for each Pod where current template will apply
// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=tcp]`
// More info: https://clickhouse.tech/docs/en/interfaces/tcp/
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) TcpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *int { return v.TcpPort }).(pulumi.IntPtrOutput)
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) Templates() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates {
		return v.Templates
	}).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput)
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput) TlsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *int { return v.TlsPort }).(pulumi.IntPtrOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput) Elem() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec
		return ret
	}).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput)
}

// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.MapOutput)
}

// optional, setup `http_port` inside `clickhouse-server` settings for each Pod where current template will apply
// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=http]`
// More info: https://clickhouse.tech/docs/en/interfaces/http/
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *int {
		if v == nil {
			return nil
		}
		return v.HttpPort
	}).(pulumi.IntPtrOutput)
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *int {
		if v == nil {
			return nil
		}
		return v.HttpsPort
	}).(pulumi.IntPtrOutput)
}

// optional, open insecure ports for cluster, defaults to "yes"
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput) Insecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *string {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.StringPtrOutput)
}

// optional, setup `interserver_http_port` inside `clickhouse-server` settings for each Pod where current template will apply
// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=interserver]`
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#interserver-http-port
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput) InterserverHTTPPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *int {
		if v == nil {
			return nil
		}
		return v.InterserverHTTPPort
	}).(pulumi.IntPtrOutput)
}

// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional, open secure ports
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput) Secure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *string {
		if v == nil {
			return nil
		}
		return v.Secure
	}).(pulumi.StringPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.MapOutput)
}

// optional, setup `tcp_port` inside `clickhouse-server` settings for each Pod where current template will apply
// if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=tcp]`
// More info: https://clickhouse.tech/docs/en/interfaces/tcp/
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput) TcpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *int {
		if v == nil {
			return nil
		}
		return v.TcpPort
	}).(pulumi.IntPtrOutput)
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput) Templates() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput)
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput) TlsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpec) *int {
		if v == nil {
			return nil
		}
		return v.TlsPort
	}).(pulumi.IntPtrOutput)
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesArgs and ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesArgs{...}
type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput
	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput)
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput).ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesArgs, ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtr and ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput
	ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput
}

type clickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrType ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesArgs

func ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtr(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesArgs) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrInput {
	return (*clickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrType) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrType) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput)
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates {
		return &v
	}).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ToClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) Elem() ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates
		return ret
	}).(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesPodTemplates struct {
	// DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
	Distribution *string `pulumi:"distribution"`
	// allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about available template variables
	GenerateName *string `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Pod
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata map[string]interface{} `pulumi:"metadata"`
	// template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`
	Name *string `pulumi:"name"`
	// define ClickHouse Pod distribution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster
	PodDistribution []ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistribution `pulumi:"podDistribution"`
	// allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details
	Spec map[string]interface{} `pulumi:"spec"`
	// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
	Zone *ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone `pulumi:"zone"`
}

// ClickHouseInstallationTemplateSpecTemplatesPodTemplatesInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArgs and ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesPodTemplatesInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArgs{...}
type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput
	ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput
}

type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArgs struct {
	// DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
	Distribution pulumi.StringPtrInput `pulumi:"distribution"`
	// allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about available template variables
	GenerateName pulumi.StringPtrInput `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Pod
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// define ClickHouse Pod distribution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster
	PodDistribution ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayInput `pulumi:"podDistribution"`
	// allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details
	Spec pulumi.MapInput `pulumi:"spec"`
	// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
	Zone ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrInput `pulumi:"zone"`
}

func (ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesPodTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput)
}

// ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArray and ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArray{ ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArgs{...} }
type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput
	ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput
}

type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArray []ClickHouseInstallationTemplateSpecTemplatesPodTemplatesInput

func (ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecTemplatesPodTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArray) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArray) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesPodTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput {
	return o
}

// DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput) Distribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesPodTemplates) *string { return v.Distribution }).(pulumi.StringPtrOutput)
}

// allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about available template variables
func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesPodTemplates) *string { return v.GenerateName }).(pulumi.StringPtrOutput)
}

// allows pass standard object's metadata from template to Pod
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesPodTemplates) map[string]interface{} {
		return v.Metadata
	}).(pulumi.MapOutput)
}

// template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`
func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesPodTemplates) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// define ClickHouse Pod distribution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster
func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput) PodDistribution() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesPodTemplates) []ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistribution {
		return v.PodDistribution
	}).(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput)
}

// allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details
func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesPodTemplates) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput) Zone() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesPodTemplates) *ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone {
		return v.Zone
	}).(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecTemplatesPodTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationTemplateSpecTemplatesPodTemplates {
		return vs[0].([]ClickHouseInstallationTemplateSpecTemplatesPodTemplates)[vs[1].(int)]
	}).(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistribution struct {
	// define, how much ClickHouse Pods could be inside selected scope with selected distribution type
	Number *int `pulumi:"number"`
	// scope for apply each podDistribution
	Scope *string `pulumi:"scope"`
	// use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`,
	// more info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity"
	TopologyKey *string `pulumi:"topologyKey"`
	// you can define multiple affinity policy types
	Type *string `pulumi:"type"`
}

// ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArgs and ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArgs{...}
type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput
	ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput
}

type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArgs struct {
	// define, how much ClickHouse Pods could be inside selected scope with selected distribution type
	Number pulumi.IntPtrInput `pulumi:"number"`
	// scope for apply each podDistribution
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`,
	// more info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity"
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
	// you can define multiple affinity policy types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistribution)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArgs) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArgs) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput)
}

// ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArray and ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArray{ ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArgs{...} }
type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput
	ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput
}

type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArray []ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionInput

func (ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistribution)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArray) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArray) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistribution)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput {
	return o
}

// define, how much ClickHouse Pods could be inside selected scope with selected distribution type
func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistribution) *int { return v.Number }).(pulumi.IntPtrOutput)
}

// scope for apply each podDistribution
func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistribution) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`,
// more info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity"
func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistribution) *string {
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

// you can define multiple affinity policy types
func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistribution) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistribution)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistribution {
		return vs[0].([]ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistribution)[vs[1].(int)]
	}).(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput)
}

// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone struct {
	// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
	Key *string `pulumi:"key"`
	// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
	Values []string `pulumi:"values"`
}

// ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneArgs and ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneArgs{...}
type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput
	ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput
}

// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneArgs struct {
	// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
	Key pulumi.StringPtrInput `pulumi:"key"`
	// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneArgs) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneArgs) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput)
}

func (i ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneArgs) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneArgs) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput).ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneArgs, ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtr and ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput
	ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput
}

type clickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrType ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneArgs

func ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtr(v *ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneArgs) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrInput {
	return (*clickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrType)(v)
}

func (*clickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrType) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrType) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput)
}

// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput {
	return o.ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone) *ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone {
		return &v
	}).(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput) ToClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput) Elem() ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone) ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone
		return ret
	}).(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
func (o ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZone) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesServiceTemplates struct {
	// allows define format for generated `Service` name,
	// look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates
	// for details about available template variables"
	GenerateName *string `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Service
	// Could be use for define specificly for Cloud Provider metadata which impact to behavior of service
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata map[string]interface{} `pulumi:"metadata"`
	// template name, could use to link inside
	// chi-level `chi.spec.defaults.templates.serviceTemplate`
	// cluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`
	Name *string `pulumi:"name"`
	// describe behavior of generated Service
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Spec map[string]interface{} `pulumi:"spec"`
}

// ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArgs and ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArgs{...}
type ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput
	ToClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput
}

type ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArgs struct {
	// allows define format for generated `Service` name,
	// look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates
	// for details about available template variables"
	GenerateName pulumi.StringPtrInput `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Service
	// Could be use for define specificly for Cloud Provider metadata which impact to behavior of service
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// template name, could use to link inside
	// chi-level `chi.spec.defaults.templates.serviceTemplate`
	// cluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// describe behavior of generated Service
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Spec pulumi.MapInput `pulumi:"spec"`
}

func (ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesServiceTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput)
}

// ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArray and ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArray{ ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArgs{...} }
type ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput() ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput
	ToClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput
}

type ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArray []ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesInput

func (ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecTemplatesServiceTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArray) ToClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput() ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArray) ToClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesServiceTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput {
	return o
}

// allows define format for generated `Service` name,
// look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates
// for details about available template variables"
func (o ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesServiceTemplates) *string { return v.GenerateName }).(pulumi.StringPtrOutput)
}

// allows pass standard object's metadata from template to Service
// Could be use for define specificly for Cloud Provider metadata which impact to behavior of service
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesServiceTemplates) map[string]interface{} {
		return v.Metadata
	}).(pulumi.MapOutput)
}

// template name, could use to link inside
// chi-level `chi.spec.defaults.templates.serviceTemplate`
// cluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`
// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`
// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`
func (o ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesServiceTemplates) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// describe behavior of generated Service
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesServiceTemplates) map[string]interface{} {
		return v.Spec
	}).(pulumi.MapOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecTemplatesServiceTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput) ToClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput() ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput) ToClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationTemplateSpecTemplatesServiceTemplates {
		return vs[0].([]ClickHouseInstallationTemplateSpecTemplatesServiceTemplates)[vs[1].(int)]
	}).(ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplates struct {
	// allows to pass standard object's metadata from template to PVC
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata map[string]interface{} `pulumi:"metadata"`
	// template name, could use to link inside
	// top-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,
	// cluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`
	Name *string `pulumi:"name"`
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner *string `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
	// allows define all aspects of `PVC` resource
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
	Spec map[string]interface{} `pulumi:"spec"`
}

// ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArgs and ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArgs{...}
type ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput
	ToClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput
}

type ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArgs struct {
	// allows to pass standard object's metadata from template to PVC
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// template name, could use to link inside
	// top-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,
	// cluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner pulumi.StringPtrInput `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
	// allows define all aspects of `PVC` resource
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
	Spec pulumi.MapInput `pulumi:"spec"`
}

func (ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArgs) ToClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput)
}

// ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArray and ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArray{ ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArgs{...} }
type ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput() ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput
	ToClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput
}

type ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArray []ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesInput

func (ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArray) ToClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput() ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArray) ToClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput() ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput) ToClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput {
	return o
}

// allows to pass standard object's metadata from template to PVC
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplates) map[string]interface{} {
		return v.Metadata
	}).(pulumi.MapOutput)
}

// template name, could use to link inside
// top-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,
// cluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,
// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`
// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`
func (o ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplates) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// defines `PVC` provisioner - be it StatefulSet or the Operator
func (o ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput) Provisioner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplates) *string { return v.Provisioner }).(pulumi.StringPtrOutput)
}

// defines behavior of `PVC` deletion.
// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
func (o ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplates) *string {
		return v.ReclaimPolicy
	}).(pulumi.StringPtrOutput)
}

// allows define all aspects of `PVC` resource
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
func (o ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplates) map[string]interface{} {
		return v.Spec
	}).(pulumi.MapOutput)
}

type ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput) ToClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput() ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput) ToClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplates {
		return vs[0].([]ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplates)[vs[1].(int)]
	}).(ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput)
}

// Optional, applicable inside ClickHouseInstallationTemplate only.
// Defines current ClickHouseInstallationTemplate application options to target ClickHouseInstallation(s)."
type ClickHouseInstallationTemplateSpecTemplating struct {
	// Optional, defines selector for ClickHouseInstallation(s) to be templated with ClickhouseInstallationTemplate
	ChiSelector map[string]interface{} `pulumi:"chiSelector"`
	// When defined as `auto` inside ClickhouseInstallationTemplate, this ClickhouseInstallationTemplate
	// will be auto-added into ClickHouseInstallation, selectable by `chiSelector`.
	// Default value is `manual`, meaning ClickHouseInstallation should request this ClickhouseInstallationTemplate explicitly.
	Policy *string `pulumi:"policy"`
}

// ClickHouseInstallationTemplateSpecTemplatingInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatingArgs and ClickHouseInstallationTemplateSpecTemplatingOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatingInput` via:
//
//	ClickHouseInstallationTemplateSpecTemplatingArgs{...}
type ClickHouseInstallationTemplateSpecTemplatingInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatingOutput() ClickHouseInstallationTemplateSpecTemplatingOutput
	ToClickHouseInstallationTemplateSpecTemplatingOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatingOutput
}

// Optional, applicable inside ClickHouseInstallationTemplate only.
// Defines current ClickHouseInstallationTemplate application options to target ClickHouseInstallation(s)."
type ClickHouseInstallationTemplateSpecTemplatingArgs struct {
	// Optional, defines selector for ClickHouseInstallation(s) to be templated with ClickhouseInstallationTemplate
	ChiSelector pulumi.MapInput `pulumi:"chiSelector"`
	// When defined as `auto` inside ClickhouseInstallationTemplate, this ClickhouseInstallationTemplate
	// will be auto-added into ClickHouseInstallation, selectable by `chiSelector`.
	// Default value is `manual`, meaning ClickHouseInstallation should request this ClickhouseInstallationTemplate explicitly.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
}

func (ClickHouseInstallationTemplateSpecTemplatingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplating)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecTemplatingArgs) ToClickHouseInstallationTemplateSpecTemplatingOutput() ClickHouseInstallationTemplateSpecTemplatingOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatingOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatingArgs) ToClickHouseInstallationTemplateSpecTemplatingOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatingOutput)
}

func (i ClickHouseInstallationTemplateSpecTemplatingArgs) ToClickHouseInstallationTemplateSpecTemplatingPtrOutput() ClickHouseInstallationTemplateSpecTemplatingPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatingPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecTemplatingArgs) ToClickHouseInstallationTemplateSpecTemplatingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatingOutput).ToClickHouseInstallationTemplateSpecTemplatingPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateSpecTemplatingPtrInput is an input type that accepts ClickHouseInstallationTemplateSpecTemplatingArgs, ClickHouseInstallationTemplateSpecTemplatingPtr and ClickHouseInstallationTemplateSpecTemplatingPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecTemplatingPtrInput` via:
//
//	        ClickHouseInstallationTemplateSpecTemplatingArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateSpecTemplatingPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecTemplatingPtrOutput() ClickHouseInstallationTemplateSpecTemplatingPtrOutput
	ToClickHouseInstallationTemplateSpecTemplatingPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecTemplatingPtrOutput
}

type clickHouseInstallationTemplateSpecTemplatingPtrType ClickHouseInstallationTemplateSpecTemplatingArgs

func ClickHouseInstallationTemplateSpecTemplatingPtr(v *ClickHouseInstallationTemplateSpecTemplatingArgs) ClickHouseInstallationTemplateSpecTemplatingPtrInput {
	return (*clickHouseInstallationTemplateSpecTemplatingPtrType)(v)
}

func (*clickHouseInstallationTemplateSpecTemplatingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecTemplating)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateSpecTemplatingPtrType) ToClickHouseInstallationTemplateSpecTemplatingPtrOutput() ClickHouseInstallationTemplateSpecTemplatingPtrOutput {
	return i.ToClickHouseInstallationTemplateSpecTemplatingPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateSpecTemplatingPtrType) ToClickHouseInstallationTemplateSpecTemplatingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecTemplatingPtrOutput)
}

// Optional, applicable inside ClickHouseInstallationTemplate only.
// Defines current ClickHouseInstallationTemplate application options to target ClickHouseInstallation(s)."
type ClickHouseInstallationTemplateSpecTemplatingOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplating)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatingOutput) ToClickHouseInstallationTemplateSpecTemplatingOutput() ClickHouseInstallationTemplateSpecTemplatingOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatingOutput) ToClickHouseInstallationTemplateSpecTemplatingOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatingOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatingOutput) ToClickHouseInstallationTemplateSpecTemplatingPtrOutput() ClickHouseInstallationTemplateSpecTemplatingPtrOutput {
	return o.ToClickHouseInstallationTemplateSpecTemplatingPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateSpecTemplatingOutput) ToClickHouseInstallationTemplateSpecTemplatingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateSpecTemplating) *ClickHouseInstallationTemplateSpecTemplating {
		return &v
	}).(ClickHouseInstallationTemplateSpecTemplatingPtrOutput)
}

// Optional, defines selector for ClickHouseInstallation(s) to be templated with ClickhouseInstallationTemplate
func (o ClickHouseInstallationTemplateSpecTemplatingOutput) ChiSelector() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplating) map[string]interface{} { return v.ChiSelector }).(pulumi.MapOutput)
}

// When defined as `auto` inside ClickhouseInstallationTemplate, this ClickhouseInstallationTemplate
// will be auto-added into ClickHouseInstallation, selectable by `chiSelector`.
// Default value is `manual`, meaning ClickHouseInstallation should request this ClickhouseInstallationTemplate explicitly.
func (o ClickHouseInstallationTemplateSpecTemplatingOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecTemplating) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecTemplatingPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecTemplatingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateSpecTemplating)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecTemplatingPtrOutput) ToClickHouseInstallationTemplateSpecTemplatingPtrOutput() ClickHouseInstallationTemplateSpecTemplatingPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatingPtrOutput) ToClickHouseInstallationTemplateSpecTemplatingPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecTemplatingPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecTemplatingPtrOutput) Elem() ClickHouseInstallationTemplateSpecTemplatingOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplating) ClickHouseInstallationTemplateSpecTemplating {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateSpecTemplating
		return ret
	}).(ClickHouseInstallationTemplateSpecTemplatingOutput)
}

// Optional, defines selector for ClickHouseInstallation(s) to be templated with ClickhouseInstallationTemplate
func (o ClickHouseInstallationTemplateSpecTemplatingPtrOutput) ChiSelector() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplating) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.ChiSelector
	}).(pulumi.MapOutput)
}

// When defined as `auto` inside ClickhouseInstallationTemplate, this ClickhouseInstallationTemplate
// will be auto-added into ClickHouseInstallation, selectable by `chiSelector`.
// Default value is `manual`, meaning ClickHouseInstallation should request this ClickhouseInstallationTemplate explicitly.
func (o ClickHouseInstallationTemplateSpecTemplatingPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateSpecTemplating) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecUseTemplates struct {
	// name of `ClickHouseInstallationTemplate` (chit) resource
	Name *string `pulumi:"name"`
	// Kubernetes namespace where need search `chit` resource, depending on `watchNamespaces` settings in `clickhouse-operator`
	Namespace *string `pulumi:"namespace"`
	// optional, current strategy is only merge, and current `chi` settings have more priority than merged template `chit`
	UseType *string `pulumi:"useType"`
}

// ClickHouseInstallationTemplateSpecUseTemplatesInput is an input type that accepts ClickHouseInstallationTemplateSpecUseTemplatesArgs and ClickHouseInstallationTemplateSpecUseTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecUseTemplatesInput` via:
//
//	ClickHouseInstallationTemplateSpecUseTemplatesArgs{...}
type ClickHouseInstallationTemplateSpecUseTemplatesInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecUseTemplatesOutput() ClickHouseInstallationTemplateSpecUseTemplatesOutput
	ToClickHouseInstallationTemplateSpecUseTemplatesOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecUseTemplatesOutput
}

type ClickHouseInstallationTemplateSpecUseTemplatesArgs struct {
	// name of `ClickHouseInstallationTemplate` (chit) resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Kubernetes namespace where need search `chit` resource, depending on `watchNamespaces` settings in `clickhouse-operator`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// optional, current strategy is only merge, and current `chi` settings have more priority than merged template `chit`
	UseType pulumi.StringPtrInput `pulumi:"useType"`
}

func (ClickHouseInstallationTemplateSpecUseTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecUseTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecUseTemplatesArgs) ToClickHouseInstallationTemplateSpecUseTemplatesOutput() ClickHouseInstallationTemplateSpecUseTemplatesOutput {
	return i.ToClickHouseInstallationTemplateSpecUseTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecUseTemplatesArgs) ToClickHouseInstallationTemplateSpecUseTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecUseTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecUseTemplatesOutput)
}

// ClickHouseInstallationTemplateSpecUseTemplatesArrayInput is an input type that accepts ClickHouseInstallationTemplateSpecUseTemplatesArray and ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateSpecUseTemplatesArrayInput` via:
//
//	ClickHouseInstallationTemplateSpecUseTemplatesArray{ ClickHouseInstallationTemplateSpecUseTemplatesArgs{...} }
type ClickHouseInstallationTemplateSpecUseTemplatesArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateSpecUseTemplatesArrayOutput() ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput
	ToClickHouseInstallationTemplateSpecUseTemplatesArrayOutputWithContext(context.Context) ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput
}

type ClickHouseInstallationTemplateSpecUseTemplatesArray []ClickHouseInstallationTemplateSpecUseTemplatesInput

func (ClickHouseInstallationTemplateSpecUseTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecUseTemplates)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateSpecUseTemplatesArray) ToClickHouseInstallationTemplateSpecUseTemplatesArrayOutput() ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput {
	return i.ToClickHouseInstallationTemplateSpecUseTemplatesArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateSpecUseTemplatesArray) ToClickHouseInstallationTemplateSpecUseTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput)
}

type ClickHouseInstallationTemplateSpecUseTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecUseTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateSpecUseTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecUseTemplatesOutput) ToClickHouseInstallationTemplateSpecUseTemplatesOutput() ClickHouseInstallationTemplateSpecUseTemplatesOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecUseTemplatesOutput) ToClickHouseInstallationTemplateSpecUseTemplatesOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecUseTemplatesOutput {
	return o
}

// name of `ClickHouseInstallationTemplate` (chit) resource
func (o ClickHouseInstallationTemplateSpecUseTemplatesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecUseTemplates) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Kubernetes namespace where need search `chit` resource, depending on `watchNamespaces` settings in `clickhouse-operator`
func (o ClickHouseInstallationTemplateSpecUseTemplatesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecUseTemplates) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// optional, current strategy is only merge, and current `chi` settings have more priority than merged template `chit`
func (o ClickHouseInstallationTemplateSpecUseTemplatesOutput) UseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateSpecUseTemplates) *string { return v.UseType }).(pulumi.StringPtrOutput)
}

type ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseInstallationTemplateSpecUseTemplates)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput) ToClickHouseInstallationTemplateSpecUseTemplatesArrayOutput() ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput) ToClickHouseInstallationTemplateSpecUseTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplateSpecUseTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseInstallationTemplateSpecUseTemplates {
		return vs[0].([]ClickHouseInstallationTemplateSpecUseTemplates)[vs[1].(int)]
	}).(ClickHouseInstallationTemplateSpecUseTemplatesOutput)
}

// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
type ClickHouseInstallationTemplateStatus struct {
	// Action
	Action *string `pulumi:"action"`
	// Actions
	Actions []string `pulumi:"actions"`
	// Operator git commit SHA
	ChopCommit *string `pulumi:"chop-commit"`
	// Operator build date
	ChopDate *string `pulumi:"chop-date"`
	// IP address of the operator's pod which managed this resource
	ChopIp *string `pulumi:"chop-ip"`
	// Operator version
	ChopVersion *string `pulumi:"chop-version"`
	// Clusters count
	Clusters *int `pulumi:"clusters"`
	// Endpoint
	Endpoint *string `pulumi:"endpoint"`
	// All endpoints
	Endpoints []string `pulumi:"endpoints"`
	// Last error
	Error *string `pulumi:"error"`
	// Errors
	Errors []string `pulumi:"errors"`
	// Pods FQDNs
	Fqdns []string `pulumi:"fqdns"`
	// Generation
	Generation *int `pulumi:"generation"`
	// Hosts count
	Hosts *int `pulumi:"hosts"`
	// Added Hosts count
	HostsAdded *int `pulumi:"hostsAdded"`
	// Completed Hosts count
	HostsCompleted *int `pulumi:"hostsCompleted"`
	// About to delete Hosts count
	HostsDelete *int `pulumi:"hostsDelete"`
	// Deleted Hosts count
	HostsDeleted *int `pulumi:"hostsDeleted"`
	// Unchanged Hosts count
	HostsUnchanged *int `pulumi:"hostsUnchanged"`
	// Updated Hosts count
	HostsUpdated *int `pulumi:"hostsUpdated"`
	// List of hosts with replica caught up
	HostsWithReplicaCaughtUp []string `pulumi:"hostsWithReplicaCaughtUp"`
	// List of hosts with tables created by the operator
	HostsWithTablesCreated []string `pulumi:"hostsWithTablesCreated"`
	// Normalized resource requested
	Normalized map[string]interface{} `pulumi:"normalized"`
	// Normalized resource completed
	NormalizedCompleted map[string]interface{} `pulumi:"normalizedCompleted"`
	// Pod IPs
	PodIps []string `pulumi:"pod-ips"`
	// Pods
	Pods []string `pulumi:"pods"`
	// Replicas count
	Replicas *int `pulumi:"replicas"`
	// Shards count
	Shards *int `pulumi:"shards"`
	// Status
	Status *string `pulumi:"status"`
	// Current task id
	TaskID *string `pulumi:"taskID"`
	// Completed task ids
	TaskIDsCompleted []string `pulumi:"taskIDsCompleted"`
	// Started task ids
	TaskIDsStarted []string `pulumi:"taskIDsStarted"`
	// List of templates used to build this CHI
	UsedTemplates map[string]interface{} `pulumi:"usedTemplates"`
}

// ClickHouseInstallationTemplateStatusInput is an input type that accepts ClickHouseInstallationTemplateStatusArgs and ClickHouseInstallationTemplateStatusOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateStatusInput` via:
//
//	ClickHouseInstallationTemplateStatusArgs{...}
type ClickHouseInstallationTemplateStatusInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateStatusOutput() ClickHouseInstallationTemplateStatusOutput
	ToClickHouseInstallationTemplateStatusOutputWithContext(context.Context) ClickHouseInstallationTemplateStatusOutput
}

// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
type ClickHouseInstallationTemplateStatusArgs struct {
	// Action
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Actions
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Operator git commit SHA
	ChopCommit pulumi.StringPtrInput `pulumi:"chop-commit"`
	// Operator build date
	ChopDate pulumi.StringPtrInput `pulumi:"chop-date"`
	// IP address of the operator's pod which managed this resource
	ChopIp pulumi.StringPtrInput `pulumi:"chop-ip"`
	// Operator version
	ChopVersion pulumi.StringPtrInput `pulumi:"chop-version"`
	// Clusters count
	Clusters pulumi.IntPtrInput `pulumi:"clusters"`
	// Endpoint
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// All endpoints
	Endpoints pulumi.StringArrayInput `pulumi:"endpoints"`
	// Last error
	Error pulumi.StringPtrInput `pulumi:"error"`
	// Errors
	Errors pulumi.StringArrayInput `pulumi:"errors"`
	// Pods FQDNs
	Fqdns pulumi.StringArrayInput `pulumi:"fqdns"`
	// Generation
	Generation pulumi.IntPtrInput `pulumi:"generation"`
	// Hosts count
	Hosts pulumi.IntPtrInput `pulumi:"hosts"`
	// Added Hosts count
	HostsAdded pulumi.IntPtrInput `pulumi:"hostsAdded"`
	// Completed Hosts count
	HostsCompleted pulumi.IntPtrInput `pulumi:"hostsCompleted"`
	// About to delete Hosts count
	HostsDelete pulumi.IntPtrInput `pulumi:"hostsDelete"`
	// Deleted Hosts count
	HostsDeleted pulumi.IntPtrInput `pulumi:"hostsDeleted"`
	// Unchanged Hosts count
	HostsUnchanged pulumi.IntPtrInput `pulumi:"hostsUnchanged"`
	// Updated Hosts count
	HostsUpdated pulumi.IntPtrInput `pulumi:"hostsUpdated"`
	// List of hosts with replica caught up
	HostsWithReplicaCaughtUp pulumi.StringArrayInput `pulumi:"hostsWithReplicaCaughtUp"`
	// List of hosts with tables created by the operator
	HostsWithTablesCreated pulumi.StringArrayInput `pulumi:"hostsWithTablesCreated"`
	// Normalized resource requested
	Normalized pulumi.MapInput `pulumi:"normalized"`
	// Normalized resource completed
	NormalizedCompleted pulumi.MapInput `pulumi:"normalizedCompleted"`
	// Pod IPs
	PodIps pulumi.StringArrayInput `pulumi:"pod-ips"`
	// Pods
	Pods pulumi.StringArrayInput `pulumi:"pods"`
	// Replicas count
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Shards count
	Shards pulumi.IntPtrInput `pulumi:"shards"`
	// Status
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Current task id
	TaskID pulumi.StringPtrInput `pulumi:"taskID"`
	// Completed task ids
	TaskIDsCompleted pulumi.StringArrayInput `pulumi:"taskIDsCompleted"`
	// Started task ids
	TaskIDsStarted pulumi.StringArrayInput `pulumi:"taskIDsStarted"`
	// List of templates used to build this CHI
	UsedTemplates pulumi.MapInput `pulumi:"usedTemplates"`
}

func (ClickHouseInstallationTemplateStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateStatus)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateStatusArgs) ToClickHouseInstallationTemplateStatusOutput() ClickHouseInstallationTemplateStatusOutput {
	return i.ToClickHouseInstallationTemplateStatusOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateStatusArgs) ToClickHouseInstallationTemplateStatusOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateStatusOutput)
}

func (i ClickHouseInstallationTemplateStatusArgs) ToClickHouseInstallationTemplateStatusPtrOutput() ClickHouseInstallationTemplateStatusPtrOutput {
	return i.ToClickHouseInstallationTemplateStatusPtrOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateStatusArgs) ToClickHouseInstallationTemplateStatusPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateStatusOutput).ToClickHouseInstallationTemplateStatusPtrOutputWithContext(ctx)
}

// ClickHouseInstallationTemplateStatusPtrInput is an input type that accepts ClickHouseInstallationTemplateStatusArgs, ClickHouseInstallationTemplateStatusPtr and ClickHouseInstallationTemplateStatusPtrOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateStatusPtrInput` via:
//
//	        ClickHouseInstallationTemplateStatusArgs{...}
//
//	or:
//
//	        nil
type ClickHouseInstallationTemplateStatusPtrInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateStatusPtrOutput() ClickHouseInstallationTemplateStatusPtrOutput
	ToClickHouseInstallationTemplateStatusPtrOutputWithContext(context.Context) ClickHouseInstallationTemplateStatusPtrOutput
}

type clickHouseInstallationTemplateStatusPtrType ClickHouseInstallationTemplateStatusArgs

func ClickHouseInstallationTemplateStatusPtr(v *ClickHouseInstallationTemplateStatusArgs) ClickHouseInstallationTemplateStatusPtrInput {
	return (*clickHouseInstallationTemplateStatusPtrType)(v)
}

func (*clickHouseInstallationTemplateStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateStatus)(nil)).Elem()
}

func (i *clickHouseInstallationTemplateStatusPtrType) ToClickHouseInstallationTemplateStatusPtrOutput() ClickHouseInstallationTemplateStatusPtrOutput {
	return i.ToClickHouseInstallationTemplateStatusPtrOutputWithContext(context.Background())
}

func (i *clickHouseInstallationTemplateStatusPtrType) ToClickHouseInstallationTemplateStatusPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateStatusPtrOutput)
}

// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
type ClickHouseInstallationTemplateStatusOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseInstallationTemplateStatus)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateStatusOutput) ToClickHouseInstallationTemplateStatusOutput() ClickHouseInstallationTemplateStatusOutput {
	return o
}

func (o ClickHouseInstallationTemplateStatusOutput) ToClickHouseInstallationTemplateStatusOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateStatusOutput {
	return o
}

func (o ClickHouseInstallationTemplateStatusOutput) ToClickHouseInstallationTemplateStatusPtrOutput() ClickHouseInstallationTemplateStatusPtrOutput {
	return o.ToClickHouseInstallationTemplateStatusPtrOutputWithContext(context.Background())
}

func (o ClickHouseInstallationTemplateStatusOutput) ToClickHouseInstallationTemplateStatusPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseInstallationTemplateStatus) *ClickHouseInstallationTemplateStatus {
		return &v
	}).(ClickHouseInstallationTemplateStatusPtrOutput)
}

// Action
func (o ClickHouseInstallationTemplateStatusOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Actions
func (o ClickHouseInstallationTemplateStatusOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Operator git commit SHA
func (o ClickHouseInstallationTemplateStatusOutput) ChopCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *string { return v.ChopCommit }).(pulumi.StringPtrOutput)
}

// Operator build date
func (o ClickHouseInstallationTemplateStatusOutput) ChopDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *string { return v.ChopDate }).(pulumi.StringPtrOutput)
}

// IP address of the operator's pod which managed this resource
func (o ClickHouseInstallationTemplateStatusOutput) ChopIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *string { return v.ChopIp }).(pulumi.StringPtrOutput)
}

// Operator version
func (o ClickHouseInstallationTemplateStatusOutput) ChopVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *string { return v.ChopVersion }).(pulumi.StringPtrOutput)
}

// Clusters count
func (o ClickHouseInstallationTemplateStatusOutput) Clusters() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *int { return v.Clusters }).(pulumi.IntPtrOutput)
}

// Endpoint
func (o ClickHouseInstallationTemplateStatusOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// All endpoints
func (o ClickHouseInstallationTemplateStatusOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) []string { return v.Endpoints }).(pulumi.StringArrayOutput)
}

// Last error
func (o ClickHouseInstallationTemplateStatusOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// Errors
func (o ClickHouseInstallationTemplateStatusOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) []string { return v.Errors }).(pulumi.StringArrayOutput)
}

// Pods FQDNs
func (o ClickHouseInstallationTemplateStatusOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// Generation
func (o ClickHouseInstallationTemplateStatusOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *int { return v.Generation }).(pulumi.IntPtrOutput)
}

// Hosts count
func (o ClickHouseInstallationTemplateStatusOutput) Hosts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *int { return v.Hosts }).(pulumi.IntPtrOutput)
}

// Added Hosts count
func (o ClickHouseInstallationTemplateStatusOutput) HostsAdded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *int { return v.HostsAdded }).(pulumi.IntPtrOutput)
}

// Completed Hosts count
func (o ClickHouseInstallationTemplateStatusOutput) HostsCompleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *int { return v.HostsCompleted }).(pulumi.IntPtrOutput)
}

// About to delete Hosts count
func (o ClickHouseInstallationTemplateStatusOutput) HostsDelete() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *int { return v.HostsDelete }).(pulumi.IntPtrOutput)
}

// Deleted Hosts count
func (o ClickHouseInstallationTemplateStatusOutput) HostsDeleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *int { return v.HostsDeleted }).(pulumi.IntPtrOutput)
}

// Unchanged Hosts count
func (o ClickHouseInstallationTemplateStatusOutput) HostsUnchanged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *int { return v.HostsUnchanged }).(pulumi.IntPtrOutput)
}

// Updated Hosts count
func (o ClickHouseInstallationTemplateStatusOutput) HostsUpdated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *int { return v.HostsUpdated }).(pulumi.IntPtrOutput)
}

// List of hosts with replica caught up
func (o ClickHouseInstallationTemplateStatusOutput) HostsWithReplicaCaughtUp() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) []string { return v.HostsWithReplicaCaughtUp }).(pulumi.StringArrayOutput)
}

// List of hosts with tables created by the operator
func (o ClickHouseInstallationTemplateStatusOutput) HostsWithTablesCreated() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) []string { return v.HostsWithTablesCreated }).(pulumi.StringArrayOutput)
}

// Normalized resource requested
func (o ClickHouseInstallationTemplateStatusOutput) Normalized() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) map[string]interface{} { return v.Normalized }).(pulumi.MapOutput)
}

// Normalized resource completed
func (o ClickHouseInstallationTemplateStatusOutput) NormalizedCompleted() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) map[string]interface{} { return v.NormalizedCompleted }).(pulumi.MapOutput)
}

// Pod IPs
func (o ClickHouseInstallationTemplateStatusOutput) PodIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) []string { return v.PodIps }).(pulumi.StringArrayOutput)
}

// Pods
func (o ClickHouseInstallationTemplateStatusOutput) Pods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) []string { return v.Pods }).(pulumi.StringArrayOutput)
}

// Replicas count
func (o ClickHouseInstallationTemplateStatusOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Shards count
func (o ClickHouseInstallationTemplateStatusOutput) Shards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *int { return v.Shards }).(pulumi.IntPtrOutput)
}

// Status
func (o ClickHouseInstallationTemplateStatusOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Current task id
func (o ClickHouseInstallationTemplateStatusOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) *string { return v.TaskID }).(pulumi.StringPtrOutput)
}

// Completed task ids
func (o ClickHouseInstallationTemplateStatusOutput) TaskIDsCompleted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) []string { return v.TaskIDsCompleted }).(pulumi.StringArrayOutput)
}

// Started task ids
func (o ClickHouseInstallationTemplateStatusOutput) TaskIDsStarted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) []string { return v.TaskIDsStarted }).(pulumi.StringArrayOutput)
}

// List of templates used to build this CHI
func (o ClickHouseInstallationTemplateStatusOutput) UsedTemplates() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseInstallationTemplateStatus) map[string]interface{} { return v.UsedTemplates }).(pulumi.MapOutput)
}

type ClickHouseInstallationTemplateStatusPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateStatus)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateStatusPtrOutput) ToClickHouseInstallationTemplateStatusPtrOutput() ClickHouseInstallationTemplateStatusPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateStatusPtrOutput) ToClickHouseInstallationTemplateStatusPtrOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateStatusPtrOutput {
	return o
}

func (o ClickHouseInstallationTemplateStatusPtrOutput) Elem() ClickHouseInstallationTemplateStatusOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) ClickHouseInstallationTemplateStatus {
		if v != nil {
			return *v
		}
		var ret ClickHouseInstallationTemplateStatus
		return ret
	}).(ClickHouseInstallationTemplateStatusOutput)
}

// Action
func (o ClickHouseInstallationTemplateStatusPtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

// Actions
func (o ClickHouseInstallationTemplateStatusPtrOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) []string {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(pulumi.StringArrayOutput)
}

// Operator git commit SHA
func (o ClickHouseInstallationTemplateStatusPtrOutput) ChopCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *string {
		if v == nil {
			return nil
		}
		return v.ChopCommit
	}).(pulumi.StringPtrOutput)
}

// Operator build date
func (o ClickHouseInstallationTemplateStatusPtrOutput) ChopDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *string {
		if v == nil {
			return nil
		}
		return v.ChopDate
	}).(pulumi.StringPtrOutput)
}

// IP address of the operator's pod which managed this resource
func (o ClickHouseInstallationTemplateStatusPtrOutput) ChopIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *string {
		if v == nil {
			return nil
		}
		return v.ChopIp
	}).(pulumi.StringPtrOutput)
}

// Operator version
func (o ClickHouseInstallationTemplateStatusPtrOutput) ChopVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *string {
		if v == nil {
			return nil
		}
		return v.ChopVersion
	}).(pulumi.StringPtrOutput)
}

// Clusters count
func (o ClickHouseInstallationTemplateStatusPtrOutput) Clusters() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *int {
		if v == nil {
			return nil
		}
		return v.Clusters
	}).(pulumi.IntPtrOutput)
}

// Endpoint
func (o ClickHouseInstallationTemplateStatusPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// All endpoints
func (o ClickHouseInstallationTemplateStatusPtrOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) []string {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(pulumi.StringArrayOutput)
}

// Last error
func (o ClickHouseInstallationTemplateStatusPtrOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringPtrOutput)
}

// Errors
func (o ClickHouseInstallationTemplateStatusPtrOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) []string {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(pulumi.StringArrayOutput)
}

// Pods FQDNs
func (o ClickHouseInstallationTemplateStatusPtrOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) []string {
		if v == nil {
			return nil
		}
		return v.Fqdns
	}).(pulumi.StringArrayOutput)
}

// Generation
func (o ClickHouseInstallationTemplateStatusPtrOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *int {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.IntPtrOutput)
}

// Hosts count
func (o ClickHouseInstallationTemplateStatusPtrOutput) Hosts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *int {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.IntPtrOutput)
}

// Added Hosts count
func (o ClickHouseInstallationTemplateStatusPtrOutput) HostsAdded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsAdded
	}).(pulumi.IntPtrOutput)
}

// Completed Hosts count
func (o ClickHouseInstallationTemplateStatusPtrOutput) HostsCompleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsCompleted
	}).(pulumi.IntPtrOutput)
}

// About to delete Hosts count
func (o ClickHouseInstallationTemplateStatusPtrOutput) HostsDelete() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsDelete
	}).(pulumi.IntPtrOutput)
}

// Deleted Hosts count
func (o ClickHouseInstallationTemplateStatusPtrOutput) HostsDeleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsDeleted
	}).(pulumi.IntPtrOutput)
}

// Unchanged Hosts count
func (o ClickHouseInstallationTemplateStatusPtrOutput) HostsUnchanged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsUnchanged
	}).(pulumi.IntPtrOutput)
}

// Updated Hosts count
func (o ClickHouseInstallationTemplateStatusPtrOutput) HostsUpdated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsUpdated
	}).(pulumi.IntPtrOutput)
}

// List of hosts with replica caught up
func (o ClickHouseInstallationTemplateStatusPtrOutput) HostsWithReplicaCaughtUp() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) []string {
		if v == nil {
			return nil
		}
		return v.HostsWithReplicaCaughtUp
	}).(pulumi.StringArrayOutput)
}

// List of hosts with tables created by the operator
func (o ClickHouseInstallationTemplateStatusPtrOutput) HostsWithTablesCreated() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) []string {
		if v == nil {
			return nil
		}
		return v.HostsWithTablesCreated
	}).(pulumi.StringArrayOutput)
}

// Normalized resource requested
func (o ClickHouseInstallationTemplateStatusPtrOutput) Normalized() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Normalized
	}).(pulumi.MapOutput)
}

// Normalized resource completed
func (o ClickHouseInstallationTemplateStatusPtrOutput) NormalizedCompleted() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.NormalizedCompleted
	}).(pulumi.MapOutput)
}

// Pod IPs
func (o ClickHouseInstallationTemplateStatusPtrOutput) PodIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) []string {
		if v == nil {
			return nil
		}
		return v.PodIps
	}).(pulumi.StringArrayOutput)
}

// Pods
func (o ClickHouseInstallationTemplateStatusPtrOutput) Pods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) []string {
		if v == nil {
			return nil
		}
		return v.Pods
	}).(pulumi.StringArrayOutput)
}

// Replicas count
func (o ClickHouseInstallationTemplateStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Shards count
func (o ClickHouseInstallationTemplateStatusPtrOutput) Shards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *int {
		if v == nil {
			return nil
		}
		return v.Shards
	}).(pulumi.IntPtrOutput)
}

// Status
func (o ClickHouseInstallationTemplateStatusPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Current task id
func (o ClickHouseInstallationTemplateStatusPtrOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) *string {
		if v == nil {
			return nil
		}
		return v.TaskID
	}).(pulumi.StringPtrOutput)
}

// Completed task ids
func (o ClickHouseInstallationTemplateStatusPtrOutput) TaskIDsCompleted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) []string {
		if v == nil {
			return nil
		}
		return v.TaskIDsCompleted
	}).(pulumi.StringArrayOutput)
}

// Started task ids
func (o ClickHouseInstallationTemplateStatusPtrOutput) TaskIDsStarted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) []string {
		if v == nil {
			return nil
		}
		return v.TaskIDsStarted
	}).(pulumi.StringArrayOutput)
}

// List of templates used to build this CHI
func (o ClickHouseInstallationTemplateStatusPtrOutput) UsedTemplates() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateStatus) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.UsedTemplates
	}).(pulumi.MapOutput)
}

type ClickHouseOperatorConfigurationType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecInput)(nil)).Elem(), ClickHouseInstallationSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecPtrInput)(nil)).Elem(), ClickHouseInstallationSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersArrayInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicasInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShardsInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutShardsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutShardsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersReconcileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcilePtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersReconcileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHostInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersReconcileHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersReconcileHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSchemaPolicyInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersSchemaPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersSchemaPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSecretInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSecretPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSecretValueFromInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersSecretValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersSecretValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersTemplatesInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersZookeeperInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersZookeeperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersZookeeperPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersZookeeperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersZookeeperNodesInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationZookeeperInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationZookeeperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationZookeeperPtrInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationZookeeperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationZookeeperNodesInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationZookeeperNodesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecConfigurationZookeeperNodesArrayInput)(nil)).Elem(), ClickHouseInstallationSpecConfigurationZookeeperNodesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecDefaultsInput)(nil)).Elem(), ClickHouseInstallationSpecDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecDefaultsPtrInput)(nil)).Elem(), ClickHouseInstallationSpecDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecDefaultsDistributedDdlInput)(nil)).Elem(), ClickHouseInstallationSpecDefaultsDistributedDdlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecDefaultsDistributedDdlPtrInput)(nil)).Elem(), ClickHouseInstallationSpecDefaultsDistributedDdlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecDefaultsStorageManagementInput)(nil)).Elem(), ClickHouseInstallationSpecDefaultsStorageManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecDefaultsStorageManagementPtrInput)(nil)).Elem(), ClickHouseInstallationSpecDefaultsStorageManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecDefaultsTemplatesInput)(nil)).Elem(), ClickHouseInstallationSpecDefaultsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecDefaultsTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationSpecDefaultsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilePtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileCleanupInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileCleanupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileCleanupPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileCleanupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileCleanupUnknownObjectsInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileCleanupUnknownObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileCleanupUnknownObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileHostInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileHostPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileHostWaitInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileHostWaitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileHostWaitPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileHostWaitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileHostWaitProbesInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileHostWaitProbesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileHostWaitProbesPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileHostWaitProbesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileHostWaitReplicasInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileHostWaitReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileHostWaitReplicasPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileHostWaitReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileMacrosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileMacrosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileMacrosSectionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileMacrosSectionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsFilesInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileMacrosSectionsFilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileMacrosSectionsFilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsProfilesInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileMacrosSectionsProfilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileMacrosSectionsProfilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsQuotasInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileMacrosSectionsQuotasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileMacrosSectionsQuotasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsSettingsInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileMacrosSectionsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileMacrosSectionsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsUsersInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileMacrosSectionsUsersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileMacrosSectionsUsersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileRuntimeInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcileRuntimePtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcileRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingCleanupInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingCleanupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingCleanupPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingCleanupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHostInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHostPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHostWaitInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingHostWaitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHostWaitPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingHostWaitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHostWaitProbesInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingHostWaitProbesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHostWaitProbesPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingHostWaitProbesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHostWaitReplicasInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingHostWaitReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingHostWaitReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingMacrosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingMacrosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingMacrosSectionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingMacrosSectionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsFilesInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingMacrosSectionsFilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingMacrosSectionsFilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsUsersInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingMacrosSectionsUsersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingMacrosSectionsUsersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingRuntimeInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecReconcilingRuntimePtrInput)(nil)).Elem(), ClickHouseInstallationSpecReconcilingRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplatesInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesHostTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplatesArrayInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesHostTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplatesSpecInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesHostTemplatesSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesHostTemplatesSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesPodTemplatesInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesPodTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesPodTemplatesArrayInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesPodTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesPodTemplatesZoneInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesPodTemplatesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesPodTemplatesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesServiceTemplatesInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesServiceTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesServiceTemplatesArrayInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesServiceTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatingInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecTemplatingPtrInput)(nil)).Elem(), ClickHouseInstallationSpecTemplatingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecUseTemplatesInput)(nil)).Elem(), ClickHouseInstallationSpecUseTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationSpecUseTemplatesArrayInput)(nil)).Elem(), ClickHouseInstallationSpecUseTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationStatusInput)(nil)).Elem(), ClickHouseInstallationStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationStatusPtrInput)(nil)).Elem(), ClickHouseInstallationStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersArrayInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersReconcileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersReconcileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSecretInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationZookeeperInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaultsInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaultsPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaultsDistributedDdlInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecDefaultsDistributedDdlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecDefaultsDistributedDdlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaultsStorageManagementInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecDefaultsStorageManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecDefaultsStorageManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaultsTemplatesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilePtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileCleanupInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileCleanupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileCleanupPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileCleanupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHostInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHostPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHostWaitInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileHostWaitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHostWaitPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileHostWaitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHostWaitProbesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileHostWaitProbesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileHostWaitProbesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileMacrosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileMacrosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileMacrosSectionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileMacrosSectionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileRuntimeInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcileRuntimePtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcileRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingCleanupInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingCleanupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingCleanupPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingCleanupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHostInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHostPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHostWaitInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingHostWaitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingHostWaitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingMacrosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingMacrosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingRuntimeInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecReconcilingRuntimePtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecReconcilingRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplatesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesPodTemplatesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatingInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecTemplatingPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecTemplatingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecUseTemplatesInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecUseTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateSpecUseTemplatesArrayInput)(nil)).Elem(), ClickHouseInstallationTemplateSpecUseTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateStatusInput)(nil)).Elem(), ClickHouseInstallationTemplateStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateStatusPtrInput)(nil)).Elem(), ClickHouseInstallationTemplateStatusArgs{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutShardsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutShardsArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersReconcileOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersReconcilePtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersReconcileHostOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersReconcileHostPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitProbesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersReconcileRuntimeOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersReconcileRuntimePtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersSchemaPolicyOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersSchemaPolicyPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersSecretOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersSecretPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersSecretValueFromOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersSecretValueFromPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersZookeeperOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersZookeeperPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersZookeeperNodesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationZookeeperOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationZookeeperPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationZookeeperNodesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecConfigurationZookeeperNodesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecDefaultsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecDefaultsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecDefaultsDistributedDdlOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecDefaultsDistributedDdlPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecDefaultsStorageManagementOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecDefaultsStorageManagementPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecDefaultsTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecDefaultsTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilePtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileCleanupOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileCleanupPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileCleanupReconcileFailedObjectsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileCleanupUnknownObjectsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileCleanupUnknownObjectsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileHostOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileHostPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileHostWaitOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileHostWaitPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileHostWaitProbesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileHostWaitProbesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileHostWaitReplicasOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileHostWaitReplicasPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileMacrosOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileMacrosPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileMacrosSectionsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileMacrosSectionsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileMacrosSectionsFilesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileMacrosSectionsFilesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileMacrosSectionsProfilesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileMacrosSectionsProfilesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileMacrosSectionsQuotasOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileMacrosSectionsQuotasPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileMacrosSectionsSettingsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileMacrosSectionsSettingsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileMacrosSectionsUsersOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileMacrosSectionsUsersPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileRuntimeOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcileRuntimePtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingCleanupOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingCleanupPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingHostOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingHostPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingHostWaitOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingHostWaitPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingHostWaitProbesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingHostWaitProbesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingHostWaitReplicasOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingHostWaitReplicasPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingMacrosOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingMacrosPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingMacrosSectionsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingMacrosSectionsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingMacrosSectionsFilesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingMacrosSectionsFilesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingMacrosSectionsProfilesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingMacrosSectionsQuotasPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingMacrosSectionsSettingsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingMacrosSectionsUsersOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingMacrosSectionsUsersPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingRuntimeOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecReconcilingRuntimePtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesHostTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesHostTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesHostTemplatesSpecOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesHostTemplatesSpecPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesPodTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesPodTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesPodTemplatesZoneOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesPodTemplatesZonePtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesServiceTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesServiceTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatingOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecTemplatingPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecUseTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationSpecUseTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationStatusOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationStatusPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersReconcilePtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitProbesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileHostWaitReplicasPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimeOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersReconcileRuntimePtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersSchemaPolicyPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersSecretOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersSecretPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersSecretValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationZookeeperOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationZookeeperPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecDefaultsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecDefaultsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecDefaultsDistributedDdlOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecDefaultsDistributedDdlPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecDefaultsStorageManagementOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecDefaultsStorageManagementPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecDefaultsTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecDefaultsTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilePtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileCleanupOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileCleanupPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileCleanupReconcileFailedObjectsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileCleanupUnknownObjectsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileHostOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileHostPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileHostWaitOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileHostWaitPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileHostWaitProbesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileHostWaitProbesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileHostWaitReplicasPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileMacrosOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileMacrosPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsFilesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsProfilesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsQuotasPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsSettingsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileMacrosSectionsUsersPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileRuntimeOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcileRuntimePtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingCleanupOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingCleanupPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingCleanupReconcileFailedObjectsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownObjectsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingHostOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingHostPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingHostWaitOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingHostWaitPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingHostWaitProbesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingHostWaitReplicasPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingMacrosOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingMacrosPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsFilesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsProfilesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsQuotasPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsSettingsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingMacrosSectionsUsersPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingRuntimeOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecReconcilingRuntimePtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesPortDistributionArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesHostTemplatesSpecTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesPodDistributionArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZoneOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesPodTemplatesZonePtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesServiceTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatesVolumeClaimTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatingOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecTemplatingPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecUseTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateSpecUseTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateStatusOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateStatusPtrOutput{})
}
