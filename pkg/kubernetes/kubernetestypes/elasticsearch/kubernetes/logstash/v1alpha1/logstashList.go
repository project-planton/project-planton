// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// LogstashList is a list of Logstash
type LogstashList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of logstashes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items LogstashTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewLogstashList registers a new resource with the given unique name, arguments, and options.
func NewLogstashList(ctx *pulumi.Context,
	name string, args *LogstashListArgs, opts ...pulumi.ResourceOption) (*LogstashList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("logstash.k8s.elastic.co/v1alpha1")
	args.Kind = pulumi.StringPtr("LogstashList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource LogstashList
	err := ctx.RegisterResource("kubernetes:logstash.k8s.elastic.co/v1alpha1:LogstashList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogstashList gets an existing LogstashList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogstashList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogstashListState, opts ...pulumi.ResourceOption) (*LogstashList, error) {
	var resource LogstashList
	err := ctx.ReadResource("kubernetes:logstash.k8s.elastic.co/v1alpha1:LogstashList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogstashList resources.
type logstashListState struct {
}

type LogstashListState struct {
}

func (LogstashListState) ElementType() reflect.Type {
	return reflect.TypeOf((*logstashListState)(nil)).Elem()
}

type logstashListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of logstashes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []LogstashType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a LogstashList resource.
type LogstashListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of logstashes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items LogstashTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (LogstashListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logstashListArgs)(nil)).Elem()
}

type LogstashListInput interface {
	pulumi.Input

	ToLogstashListOutput() LogstashListOutput
	ToLogstashListOutputWithContext(ctx context.Context) LogstashListOutput
}

func (*LogstashList) ElementType() reflect.Type {
	return reflect.TypeOf((**LogstashList)(nil)).Elem()
}

func (i *LogstashList) ToLogstashListOutput() LogstashListOutput {
	return i.ToLogstashListOutputWithContext(context.Background())
}

func (i *LogstashList) ToLogstashListOutputWithContext(ctx context.Context) LogstashListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashListOutput)
}

// LogstashListArrayInput is an input type that accepts LogstashListArray and LogstashListArrayOutput values.
// You can construct a concrete instance of `LogstashListArrayInput` via:
//
//	LogstashListArray{ LogstashListArgs{...} }
type LogstashListArrayInput interface {
	pulumi.Input

	ToLogstashListArrayOutput() LogstashListArrayOutput
	ToLogstashListArrayOutputWithContext(context.Context) LogstashListArrayOutput
}

type LogstashListArray []LogstashListInput

func (LogstashListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogstashList)(nil)).Elem()
}

func (i LogstashListArray) ToLogstashListArrayOutput() LogstashListArrayOutput {
	return i.ToLogstashListArrayOutputWithContext(context.Background())
}

func (i LogstashListArray) ToLogstashListArrayOutputWithContext(ctx context.Context) LogstashListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashListArrayOutput)
}

// LogstashListMapInput is an input type that accepts LogstashListMap and LogstashListMapOutput values.
// You can construct a concrete instance of `LogstashListMapInput` via:
//
//	LogstashListMap{ "key": LogstashListArgs{...} }
type LogstashListMapInput interface {
	pulumi.Input

	ToLogstashListMapOutput() LogstashListMapOutput
	ToLogstashListMapOutputWithContext(context.Context) LogstashListMapOutput
}

type LogstashListMap map[string]LogstashListInput

func (LogstashListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogstashList)(nil)).Elem()
}

func (i LogstashListMap) ToLogstashListMapOutput() LogstashListMapOutput {
	return i.ToLogstashListMapOutputWithContext(context.Background())
}

func (i LogstashListMap) ToLogstashListMapOutputWithContext(ctx context.Context) LogstashListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashListMapOutput)
}

type LogstashListOutput struct{ *pulumi.OutputState }

func (LogstashListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogstashList)(nil)).Elem()
}

func (o LogstashListOutput) ToLogstashListOutput() LogstashListOutput {
	return o
}

func (o LogstashListOutput) ToLogstashListOutputWithContext(ctx context.Context) LogstashListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LogstashListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *LogstashList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of logstashes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o LogstashListOutput) Items() LogstashTypeArrayOutput {
	return o.ApplyT(func(v *LogstashList) LogstashTypeArrayOutput { return v.Items }).(LogstashTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LogstashListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *LogstashList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LogstashListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *LogstashList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type LogstashListArrayOutput struct{ *pulumi.OutputState }

func (LogstashListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogstashList)(nil)).Elem()
}

func (o LogstashListArrayOutput) ToLogstashListArrayOutput() LogstashListArrayOutput {
	return o
}

func (o LogstashListArrayOutput) ToLogstashListArrayOutputWithContext(ctx context.Context) LogstashListArrayOutput {
	return o
}

func (o LogstashListArrayOutput) Index(i pulumi.IntInput) LogstashListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogstashList {
		return vs[0].([]*LogstashList)[vs[1].(int)]
	}).(LogstashListOutput)
}

type LogstashListMapOutput struct{ *pulumi.OutputState }

func (LogstashListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogstashList)(nil)).Elem()
}

func (o LogstashListMapOutput) ToLogstashListMapOutput() LogstashListMapOutput {
	return o
}

func (o LogstashListMapOutput) ToLogstashListMapOutputWithContext(ctx context.Context) LogstashListMapOutput {
	return o
}

func (o LogstashListMapOutput) MapIndex(k pulumi.StringInput) LogstashListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogstashList {
		return vs[0].(map[string]*LogstashList)[vs[1].(string)]
	}).(LogstashListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashListInput)(nil)).Elem(), &LogstashList{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashListArrayInput)(nil)).Elem(), LogstashListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashListMapInput)(nil)).Elem(), LogstashListMap{})
	pulumi.RegisterOutputType(LogstashListOutput{})
	pulumi.RegisterOutputType(LogstashListArrayOutput{})
	pulumi.RegisterOutputType(LogstashListMapOutput{})
}
