// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Logstash is the Schema for the logstashes API
type LogstashPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     LogstashSpecPatchPtrOutput      `pulumi:"spec"`
	Status   LogstashStatusPatchPtrOutput    `pulumi:"status"`
}

// NewLogstashPatch registers a new resource with the given unique name, arguments, and options.
func NewLogstashPatch(ctx *pulumi.Context,
	name string, args *LogstashPatchArgs, opts ...pulumi.ResourceOption) (*LogstashPatch, error) {
	if args == nil {
		args = &LogstashPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("logstash.k8s.elastic.co/v1alpha1")
	args.Kind = pulumi.StringPtr("Logstash")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource LogstashPatch
	err := ctx.RegisterResource("kubernetes:logstash.k8s.elastic.co/v1alpha1:LogstashPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogstashPatch gets an existing LogstashPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogstashPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogstashPatchState, opts ...pulumi.ResourceOption) (*LogstashPatch, error) {
	var resource LogstashPatch
	err := ctx.ReadResource("kubernetes:logstash.k8s.elastic.co/v1alpha1:LogstashPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogstashPatch resources.
type logstashPatchState struct {
}

type LogstashPatchState struct {
}

func (LogstashPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*logstashPatchState)(nil)).Elem()
}

type logstashPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *LogstashSpecPatch      `pulumi:"spec"`
}

// The set of arguments for constructing a LogstashPatch resource.
type LogstashPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     LogstashSpecPatchPtrInput
}

func (LogstashPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logstashPatchArgs)(nil)).Elem()
}

type LogstashPatchInput interface {
	pulumi.Input

	ToLogstashPatchOutput() LogstashPatchOutput
	ToLogstashPatchOutputWithContext(ctx context.Context) LogstashPatchOutput
}

func (*LogstashPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**LogstashPatch)(nil)).Elem()
}

func (i *LogstashPatch) ToLogstashPatchOutput() LogstashPatchOutput {
	return i.ToLogstashPatchOutputWithContext(context.Background())
}

func (i *LogstashPatch) ToLogstashPatchOutputWithContext(ctx context.Context) LogstashPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashPatchOutput)
}

// LogstashPatchArrayInput is an input type that accepts LogstashPatchArray and LogstashPatchArrayOutput values.
// You can construct a concrete instance of `LogstashPatchArrayInput` via:
//
//	LogstashPatchArray{ LogstashPatchArgs{...} }
type LogstashPatchArrayInput interface {
	pulumi.Input

	ToLogstashPatchArrayOutput() LogstashPatchArrayOutput
	ToLogstashPatchArrayOutputWithContext(context.Context) LogstashPatchArrayOutput
}

type LogstashPatchArray []LogstashPatchInput

func (LogstashPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogstashPatch)(nil)).Elem()
}

func (i LogstashPatchArray) ToLogstashPatchArrayOutput() LogstashPatchArrayOutput {
	return i.ToLogstashPatchArrayOutputWithContext(context.Background())
}

func (i LogstashPatchArray) ToLogstashPatchArrayOutputWithContext(ctx context.Context) LogstashPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashPatchArrayOutput)
}

// LogstashPatchMapInput is an input type that accepts LogstashPatchMap and LogstashPatchMapOutput values.
// You can construct a concrete instance of `LogstashPatchMapInput` via:
//
//	LogstashPatchMap{ "key": LogstashPatchArgs{...} }
type LogstashPatchMapInput interface {
	pulumi.Input

	ToLogstashPatchMapOutput() LogstashPatchMapOutput
	ToLogstashPatchMapOutputWithContext(context.Context) LogstashPatchMapOutput
}

type LogstashPatchMap map[string]LogstashPatchInput

func (LogstashPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogstashPatch)(nil)).Elem()
}

func (i LogstashPatchMap) ToLogstashPatchMapOutput() LogstashPatchMapOutput {
	return i.ToLogstashPatchMapOutputWithContext(context.Background())
}

func (i LogstashPatchMap) ToLogstashPatchMapOutputWithContext(ctx context.Context) LogstashPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashPatchMapOutput)
}

type LogstashPatchOutput struct{ *pulumi.OutputState }

func (LogstashPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogstashPatch)(nil)).Elem()
}

func (o LogstashPatchOutput) ToLogstashPatchOutput() LogstashPatchOutput {
	return o
}

func (o LogstashPatchOutput) ToLogstashPatchOutputWithContext(ctx context.Context) LogstashPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o LogstashPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogstashPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o LogstashPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogstashPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o LogstashPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *LogstashPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o LogstashPatchOutput) Spec() LogstashSpecPatchPtrOutput {
	return o.ApplyT(func(v *LogstashPatch) LogstashSpecPatchPtrOutput { return v.Spec }).(LogstashSpecPatchPtrOutput)
}

func (o LogstashPatchOutput) Status() LogstashStatusPatchPtrOutput {
	return o.ApplyT(func(v *LogstashPatch) LogstashStatusPatchPtrOutput { return v.Status }).(LogstashStatusPatchPtrOutput)
}

type LogstashPatchArrayOutput struct{ *pulumi.OutputState }

func (LogstashPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogstashPatch)(nil)).Elem()
}

func (o LogstashPatchArrayOutput) ToLogstashPatchArrayOutput() LogstashPatchArrayOutput {
	return o
}

func (o LogstashPatchArrayOutput) ToLogstashPatchArrayOutputWithContext(ctx context.Context) LogstashPatchArrayOutput {
	return o
}

func (o LogstashPatchArrayOutput) Index(i pulumi.IntInput) LogstashPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogstashPatch {
		return vs[0].([]*LogstashPatch)[vs[1].(int)]
	}).(LogstashPatchOutput)
}

type LogstashPatchMapOutput struct{ *pulumi.OutputState }

func (LogstashPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogstashPatch)(nil)).Elem()
}

func (o LogstashPatchMapOutput) ToLogstashPatchMapOutput() LogstashPatchMapOutput {
	return o
}

func (o LogstashPatchMapOutput) ToLogstashPatchMapOutputWithContext(ctx context.Context) LogstashPatchMapOutput {
	return o
}

func (o LogstashPatchMapOutput) MapIndex(k pulumi.StringInput) LogstashPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogstashPatch {
		return vs[0].(map[string]*LogstashPatch)[vs[1].(string)]
	}).(LogstashPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashPatchInput)(nil)).Elem(), &LogstashPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashPatchArrayInput)(nil)).Elem(), LogstashPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashPatchMapInput)(nil)).Elem(), LogstashPatchMap{})
	pulumi.RegisterOutputType(LogstashPatchOutput{})
	pulumi.RegisterOutputType(LogstashPatchArrayOutput{})
	pulumi.RegisterOutputType(LogstashPatchMapOutput{})
}
