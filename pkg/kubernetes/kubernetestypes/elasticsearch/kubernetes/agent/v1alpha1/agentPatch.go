// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Agent is the Schema for the Agents API.
type AgentPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     AgentSpecPatchPtrOutput         `pulumi:"spec"`
	Status   AgentStatusPatchPtrOutput       `pulumi:"status"`
}

// NewAgentPatch registers a new resource with the given unique name, arguments, and options.
func NewAgentPatch(ctx *pulumi.Context,
	name string, args *AgentPatchArgs, opts ...pulumi.ResourceOption) (*AgentPatch, error) {
	if args == nil {
		args = &AgentPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("agent.k8s.elastic.co/v1alpha1")
	args.Kind = pulumi.StringPtr("Agent")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AgentPatch
	err := ctx.RegisterResource("kubernetes:agent.k8s.elastic.co/v1alpha1:AgentPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAgentPatch gets an existing AgentPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAgentPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AgentPatchState, opts ...pulumi.ResourceOption) (*AgentPatch, error) {
	var resource AgentPatch
	err := ctx.ReadResource("kubernetes:agent.k8s.elastic.co/v1alpha1:AgentPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AgentPatch resources.
type agentPatchState struct {
}

type AgentPatchState struct {
}

func (AgentPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*agentPatchState)(nil)).Elem()
}

type agentPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *AgentSpecPatch         `pulumi:"spec"`
}

// The set of arguments for constructing a AgentPatch resource.
type AgentPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     AgentSpecPatchPtrInput
}

func (AgentPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*agentPatchArgs)(nil)).Elem()
}

type AgentPatchInput interface {
	pulumi.Input

	ToAgentPatchOutput() AgentPatchOutput
	ToAgentPatchOutputWithContext(ctx context.Context) AgentPatchOutput
}

func (*AgentPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPatch)(nil)).Elem()
}

func (i *AgentPatch) ToAgentPatchOutput() AgentPatchOutput {
	return i.ToAgentPatchOutputWithContext(context.Background())
}

func (i *AgentPatch) ToAgentPatchOutputWithContext(ctx context.Context) AgentPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPatchOutput)
}

// AgentPatchArrayInput is an input type that accepts AgentPatchArray and AgentPatchArrayOutput values.
// You can construct a concrete instance of `AgentPatchArrayInput` via:
//
//	AgentPatchArray{ AgentPatchArgs{...} }
type AgentPatchArrayInput interface {
	pulumi.Input

	ToAgentPatchArrayOutput() AgentPatchArrayOutput
	ToAgentPatchArrayOutputWithContext(context.Context) AgentPatchArrayOutput
}

type AgentPatchArray []AgentPatchInput

func (AgentPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AgentPatch)(nil)).Elem()
}

func (i AgentPatchArray) ToAgentPatchArrayOutput() AgentPatchArrayOutput {
	return i.ToAgentPatchArrayOutputWithContext(context.Background())
}

func (i AgentPatchArray) ToAgentPatchArrayOutputWithContext(ctx context.Context) AgentPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPatchArrayOutput)
}

// AgentPatchMapInput is an input type that accepts AgentPatchMap and AgentPatchMapOutput values.
// You can construct a concrete instance of `AgentPatchMapInput` via:
//
//	AgentPatchMap{ "key": AgentPatchArgs{...} }
type AgentPatchMapInput interface {
	pulumi.Input

	ToAgentPatchMapOutput() AgentPatchMapOutput
	ToAgentPatchMapOutputWithContext(context.Context) AgentPatchMapOutput
}

type AgentPatchMap map[string]AgentPatchInput

func (AgentPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AgentPatch)(nil)).Elem()
}

func (i AgentPatchMap) ToAgentPatchMapOutput() AgentPatchMapOutput {
	return i.ToAgentPatchMapOutputWithContext(context.Background())
}

func (i AgentPatchMap) ToAgentPatchMapOutputWithContext(ctx context.Context) AgentPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPatchMapOutput)
}

type AgentPatchOutput struct{ *pulumi.OutputState }

func (AgentPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPatch)(nil)).Elem()
}

func (o AgentPatchOutput) ToAgentPatchOutput() AgentPatchOutput {
	return o
}

func (o AgentPatchOutput) ToAgentPatchOutputWithContext(ctx context.Context) AgentPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AgentPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AgentPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o AgentPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *AgentPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o AgentPatchOutput) Spec() AgentSpecPatchPtrOutput {
	return o.ApplyT(func(v *AgentPatch) AgentSpecPatchPtrOutput { return v.Spec }).(AgentSpecPatchPtrOutput)
}

func (o AgentPatchOutput) Status() AgentStatusPatchPtrOutput {
	return o.ApplyT(func(v *AgentPatch) AgentStatusPatchPtrOutput { return v.Status }).(AgentStatusPatchPtrOutput)
}

type AgentPatchArrayOutput struct{ *pulumi.OutputState }

func (AgentPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AgentPatch)(nil)).Elem()
}

func (o AgentPatchArrayOutput) ToAgentPatchArrayOutput() AgentPatchArrayOutput {
	return o
}

func (o AgentPatchArrayOutput) ToAgentPatchArrayOutputWithContext(ctx context.Context) AgentPatchArrayOutput {
	return o
}

func (o AgentPatchArrayOutput) Index(i pulumi.IntInput) AgentPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AgentPatch {
		return vs[0].([]*AgentPatch)[vs[1].(int)]
	}).(AgentPatchOutput)
}

type AgentPatchMapOutput struct{ *pulumi.OutputState }

func (AgentPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AgentPatch)(nil)).Elem()
}

func (o AgentPatchMapOutput) ToAgentPatchMapOutput() AgentPatchMapOutput {
	return o
}

func (o AgentPatchMapOutput) ToAgentPatchMapOutputWithContext(ctx context.Context) AgentPatchMapOutput {
	return o
}

func (o AgentPatchMapOutput) MapIndex(k pulumi.StringInput) AgentPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AgentPatch {
		return vs[0].(map[string]*AgentPatch)[vs[1].(string)]
	}).(AgentPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AgentPatchInput)(nil)).Elem(), &AgentPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentPatchArrayInput)(nil)).Elem(), AgentPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentPatchMapInput)(nil)).Elem(), AgentPatchMap{})
	pulumi.RegisterOutputType(AgentPatchOutput{})
	pulumi.RegisterOutputType(AgentPatchArrayOutput{})
	pulumi.RegisterOutputType(AgentPatchMapOutput{})
}
