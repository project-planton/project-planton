// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// StackConfigPolicy represents a StackConfigPolicy resource in a Kubernetes cluster.
type StackConfigPolicyPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput       `pulumi:"metadata"`
	Spec     StackConfigPolicySpecPatchPtrOutput   `pulumi:"spec"`
	Status   StackConfigPolicyStatusPatchPtrOutput `pulumi:"status"`
}

// NewStackConfigPolicyPatch registers a new resource with the given unique name, arguments, and options.
func NewStackConfigPolicyPatch(ctx *pulumi.Context,
	name string, args *StackConfigPolicyPatchArgs, opts ...pulumi.ResourceOption) (*StackConfigPolicyPatch, error) {
	if args == nil {
		args = &StackConfigPolicyPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("stackconfigpolicy.k8s.elastic.co/v1alpha1")
	args.Kind = pulumi.StringPtr("StackConfigPolicy")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource StackConfigPolicyPatch
	err := ctx.RegisterResource("kubernetes:stackconfigpolicy.k8s.elastic.co/v1alpha1:StackConfigPolicyPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackConfigPolicyPatch gets an existing StackConfigPolicyPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackConfigPolicyPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackConfigPolicyPatchState, opts ...pulumi.ResourceOption) (*StackConfigPolicyPatch, error) {
	var resource StackConfigPolicyPatch
	err := ctx.ReadResource("kubernetes:stackconfigpolicy.k8s.elastic.co/v1alpha1:StackConfigPolicyPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackConfigPolicyPatch resources.
type stackConfigPolicyPatchState struct {
}

type StackConfigPolicyPatchState struct {
}

func (StackConfigPolicyPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackConfigPolicyPatchState)(nil)).Elem()
}

type stackConfigPolicyPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch     `pulumi:"metadata"`
	Spec     *StackConfigPolicySpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a StackConfigPolicyPatch resource.
type StackConfigPolicyPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     StackConfigPolicySpecPatchPtrInput
}

func (StackConfigPolicyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackConfigPolicyPatchArgs)(nil)).Elem()
}

type StackConfigPolicyPatchInput interface {
	pulumi.Input

	ToStackConfigPolicyPatchOutput() StackConfigPolicyPatchOutput
	ToStackConfigPolicyPatchOutputWithContext(ctx context.Context) StackConfigPolicyPatchOutput
}

func (*StackConfigPolicyPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicyPatch)(nil)).Elem()
}

func (i *StackConfigPolicyPatch) ToStackConfigPolicyPatchOutput() StackConfigPolicyPatchOutput {
	return i.ToStackConfigPolicyPatchOutputWithContext(context.Background())
}

func (i *StackConfigPolicyPatch) ToStackConfigPolicyPatchOutputWithContext(ctx context.Context) StackConfigPolicyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyPatchOutput)
}

// StackConfigPolicyPatchArrayInput is an input type that accepts StackConfigPolicyPatchArray and StackConfigPolicyPatchArrayOutput values.
// You can construct a concrete instance of `StackConfigPolicyPatchArrayInput` via:
//
//	StackConfigPolicyPatchArray{ StackConfigPolicyPatchArgs{...} }
type StackConfigPolicyPatchArrayInput interface {
	pulumi.Input

	ToStackConfigPolicyPatchArrayOutput() StackConfigPolicyPatchArrayOutput
	ToStackConfigPolicyPatchArrayOutputWithContext(context.Context) StackConfigPolicyPatchArrayOutput
}

type StackConfigPolicyPatchArray []StackConfigPolicyPatchInput

func (StackConfigPolicyPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackConfigPolicyPatch)(nil)).Elem()
}

func (i StackConfigPolicyPatchArray) ToStackConfigPolicyPatchArrayOutput() StackConfigPolicyPatchArrayOutput {
	return i.ToStackConfigPolicyPatchArrayOutputWithContext(context.Background())
}

func (i StackConfigPolicyPatchArray) ToStackConfigPolicyPatchArrayOutputWithContext(ctx context.Context) StackConfigPolicyPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyPatchArrayOutput)
}

// StackConfigPolicyPatchMapInput is an input type that accepts StackConfigPolicyPatchMap and StackConfigPolicyPatchMapOutput values.
// You can construct a concrete instance of `StackConfigPolicyPatchMapInput` via:
//
//	StackConfigPolicyPatchMap{ "key": StackConfigPolicyPatchArgs{...} }
type StackConfigPolicyPatchMapInput interface {
	pulumi.Input

	ToStackConfigPolicyPatchMapOutput() StackConfigPolicyPatchMapOutput
	ToStackConfigPolicyPatchMapOutputWithContext(context.Context) StackConfigPolicyPatchMapOutput
}

type StackConfigPolicyPatchMap map[string]StackConfigPolicyPatchInput

func (StackConfigPolicyPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackConfigPolicyPatch)(nil)).Elem()
}

func (i StackConfigPolicyPatchMap) ToStackConfigPolicyPatchMapOutput() StackConfigPolicyPatchMapOutput {
	return i.ToStackConfigPolicyPatchMapOutputWithContext(context.Background())
}

func (i StackConfigPolicyPatchMap) ToStackConfigPolicyPatchMapOutputWithContext(ctx context.Context) StackConfigPolicyPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyPatchMapOutput)
}

type StackConfigPolicyPatchOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicyPatch)(nil)).Elem()
}

func (o StackConfigPolicyPatchOutput) ToStackConfigPolicyPatchOutput() StackConfigPolicyPatchOutput {
	return o
}

func (o StackConfigPolicyPatchOutput) ToStackConfigPolicyPatchOutputWithContext(ctx context.Context) StackConfigPolicyPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StackConfigPolicyPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StackConfigPolicyPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o StackConfigPolicyPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o StackConfigPolicyPatchOutput) Spec() StackConfigPolicySpecPatchPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyPatch) StackConfigPolicySpecPatchPtrOutput { return v.Spec }).(StackConfigPolicySpecPatchPtrOutput)
}

func (o StackConfigPolicyPatchOutput) Status() StackConfigPolicyStatusPatchPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyPatch) StackConfigPolicyStatusPatchPtrOutput { return v.Status }).(StackConfigPolicyStatusPatchPtrOutput)
}

type StackConfigPolicyPatchArrayOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackConfigPolicyPatch)(nil)).Elem()
}

func (o StackConfigPolicyPatchArrayOutput) ToStackConfigPolicyPatchArrayOutput() StackConfigPolicyPatchArrayOutput {
	return o
}

func (o StackConfigPolicyPatchArrayOutput) ToStackConfigPolicyPatchArrayOutputWithContext(ctx context.Context) StackConfigPolicyPatchArrayOutput {
	return o
}

func (o StackConfigPolicyPatchArrayOutput) Index(i pulumi.IntInput) StackConfigPolicyPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StackConfigPolicyPatch {
		return vs[0].([]*StackConfigPolicyPatch)[vs[1].(int)]
	}).(StackConfigPolicyPatchOutput)
}

type StackConfigPolicyPatchMapOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackConfigPolicyPatch)(nil)).Elem()
}

func (o StackConfigPolicyPatchMapOutput) ToStackConfigPolicyPatchMapOutput() StackConfigPolicyPatchMapOutput {
	return o
}

func (o StackConfigPolicyPatchMapOutput) ToStackConfigPolicyPatchMapOutputWithContext(ctx context.Context) StackConfigPolicyPatchMapOutput {
	return o
}

func (o StackConfigPolicyPatchMapOutput) MapIndex(k pulumi.StringInput) StackConfigPolicyPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StackConfigPolicyPatch {
		return vs[0].(map[string]*StackConfigPolicyPatch)[vs[1].(string)]
	}).(StackConfigPolicyPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyPatchInput)(nil)).Elem(), &StackConfigPolicyPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyPatchArrayInput)(nil)).Elem(), StackConfigPolicyPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyPatchMapInput)(nil)).Elem(), StackConfigPolicyPatchMap{})
	pulumi.RegisterOutputType(StackConfigPolicyPatchOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyPatchArrayOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyPatchMapOutput{})
}
