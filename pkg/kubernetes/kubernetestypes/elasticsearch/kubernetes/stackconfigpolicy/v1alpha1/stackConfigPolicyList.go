// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// StackConfigPolicyList is a list of StackConfigPolicy
type StackConfigPolicyList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of stackconfigpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items StackConfigPolicyTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewStackConfigPolicyList registers a new resource with the given unique name, arguments, and options.
func NewStackConfigPolicyList(ctx *pulumi.Context,
	name string, args *StackConfigPolicyListArgs, opts ...pulumi.ResourceOption) (*StackConfigPolicyList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("stackconfigpolicy.k8s.elastic.co/v1alpha1")
	args.Kind = pulumi.StringPtr("StackConfigPolicyList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource StackConfigPolicyList
	err := ctx.RegisterResource("kubernetes:stackconfigpolicy.k8s.elastic.co/v1alpha1:StackConfigPolicyList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackConfigPolicyList gets an existing StackConfigPolicyList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackConfigPolicyList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackConfigPolicyListState, opts ...pulumi.ResourceOption) (*StackConfigPolicyList, error) {
	var resource StackConfigPolicyList
	err := ctx.ReadResource("kubernetes:stackconfigpolicy.k8s.elastic.co/v1alpha1:StackConfigPolicyList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackConfigPolicyList resources.
type stackConfigPolicyListState struct {
}

type StackConfigPolicyListState struct {
}

func (StackConfigPolicyListState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackConfigPolicyListState)(nil)).Elem()
}

type stackConfigPolicyListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of stackconfigpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []StackConfigPolicyType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a StackConfigPolicyList resource.
type StackConfigPolicyListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of stackconfigpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items StackConfigPolicyTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (StackConfigPolicyListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackConfigPolicyListArgs)(nil)).Elem()
}

type StackConfigPolicyListInput interface {
	pulumi.Input

	ToStackConfigPolicyListOutput() StackConfigPolicyListOutput
	ToStackConfigPolicyListOutputWithContext(ctx context.Context) StackConfigPolicyListOutput
}

func (*StackConfigPolicyList) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicyList)(nil)).Elem()
}

func (i *StackConfigPolicyList) ToStackConfigPolicyListOutput() StackConfigPolicyListOutput {
	return i.ToStackConfigPolicyListOutputWithContext(context.Background())
}

func (i *StackConfigPolicyList) ToStackConfigPolicyListOutputWithContext(ctx context.Context) StackConfigPolicyListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyListOutput)
}

// StackConfigPolicyListArrayInput is an input type that accepts StackConfigPolicyListArray and StackConfigPolicyListArrayOutput values.
// You can construct a concrete instance of `StackConfigPolicyListArrayInput` via:
//
//	StackConfigPolicyListArray{ StackConfigPolicyListArgs{...} }
type StackConfigPolicyListArrayInput interface {
	pulumi.Input

	ToStackConfigPolicyListArrayOutput() StackConfigPolicyListArrayOutput
	ToStackConfigPolicyListArrayOutputWithContext(context.Context) StackConfigPolicyListArrayOutput
}

type StackConfigPolicyListArray []StackConfigPolicyListInput

func (StackConfigPolicyListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackConfigPolicyList)(nil)).Elem()
}

func (i StackConfigPolicyListArray) ToStackConfigPolicyListArrayOutput() StackConfigPolicyListArrayOutput {
	return i.ToStackConfigPolicyListArrayOutputWithContext(context.Background())
}

func (i StackConfigPolicyListArray) ToStackConfigPolicyListArrayOutputWithContext(ctx context.Context) StackConfigPolicyListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyListArrayOutput)
}

// StackConfigPolicyListMapInput is an input type that accepts StackConfigPolicyListMap and StackConfigPolicyListMapOutput values.
// You can construct a concrete instance of `StackConfigPolicyListMapInput` via:
//
//	StackConfigPolicyListMap{ "key": StackConfigPolicyListArgs{...} }
type StackConfigPolicyListMapInput interface {
	pulumi.Input

	ToStackConfigPolicyListMapOutput() StackConfigPolicyListMapOutput
	ToStackConfigPolicyListMapOutputWithContext(context.Context) StackConfigPolicyListMapOutput
}

type StackConfigPolicyListMap map[string]StackConfigPolicyListInput

func (StackConfigPolicyListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackConfigPolicyList)(nil)).Elem()
}

func (i StackConfigPolicyListMap) ToStackConfigPolicyListMapOutput() StackConfigPolicyListMapOutput {
	return i.ToStackConfigPolicyListMapOutputWithContext(context.Background())
}

func (i StackConfigPolicyListMap) ToStackConfigPolicyListMapOutputWithContext(ctx context.Context) StackConfigPolicyListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyListMapOutput)
}

type StackConfigPolicyListOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicyList)(nil)).Elem()
}

func (o StackConfigPolicyListOutput) ToStackConfigPolicyListOutput() StackConfigPolicyListOutput {
	return o
}

func (o StackConfigPolicyListOutput) ToStackConfigPolicyListOutputWithContext(ctx context.Context) StackConfigPolicyListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StackConfigPolicyListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *StackConfigPolicyList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of stackconfigpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o StackConfigPolicyListOutput) Items() StackConfigPolicyTypeArrayOutput {
	return o.ApplyT(func(v *StackConfigPolicyList) StackConfigPolicyTypeArrayOutput { return v.Items }).(StackConfigPolicyTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StackConfigPolicyListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *StackConfigPolicyList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StackConfigPolicyListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *StackConfigPolicyList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type StackConfigPolicyListArrayOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackConfigPolicyList)(nil)).Elem()
}

func (o StackConfigPolicyListArrayOutput) ToStackConfigPolicyListArrayOutput() StackConfigPolicyListArrayOutput {
	return o
}

func (o StackConfigPolicyListArrayOutput) ToStackConfigPolicyListArrayOutputWithContext(ctx context.Context) StackConfigPolicyListArrayOutput {
	return o
}

func (o StackConfigPolicyListArrayOutput) Index(i pulumi.IntInput) StackConfigPolicyListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StackConfigPolicyList {
		return vs[0].([]*StackConfigPolicyList)[vs[1].(int)]
	}).(StackConfigPolicyListOutput)
}

type StackConfigPolicyListMapOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackConfigPolicyList)(nil)).Elem()
}

func (o StackConfigPolicyListMapOutput) ToStackConfigPolicyListMapOutput() StackConfigPolicyListMapOutput {
	return o
}

func (o StackConfigPolicyListMapOutput) ToStackConfigPolicyListMapOutputWithContext(ctx context.Context) StackConfigPolicyListMapOutput {
	return o
}

func (o StackConfigPolicyListMapOutput) MapIndex(k pulumi.StringInput) StackConfigPolicyListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StackConfigPolicyList {
		return vs[0].(map[string]*StackConfigPolicyList)[vs[1].(string)]
	}).(StackConfigPolicyListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyListInput)(nil)).Elem(), &StackConfigPolicyList{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyListArrayInput)(nil)).Elem(), StackConfigPolicyListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyListMapInput)(nil)).Elem(), StackConfigPolicyListMap{})
	pulumi.RegisterOutputType(StackConfigPolicyListOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyListArrayOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyListMapOutput{})
}
